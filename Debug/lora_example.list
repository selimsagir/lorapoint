
lora_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e3a0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000550  0800e460  0800e460  0001e460  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e9b0  0800e9b0  000206a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e9b0  0800e9b0  0001e9b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e9b8  0800e9b8  000206a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e9b8  0800e9b8  0001e9b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e9bc  0800e9bc  0001e9bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006a0  20000000  0800e9c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009d4  200006a0  0800f060  000206a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  20001074  0800f060  00021074  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000206a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026546  00000000  00000000  000206c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000540c  00000000  00000000  00046c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001520  00000000  00000000  0004c020  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001310  00000000  00000000  0004d540  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000228ee  00000000  00000000  0004e850  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a7aa  00000000  00000000  0007113e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ad396  00000000  00000000  0008b8e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  00138c7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005300  00000000  00000000  00138cfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200006a0 	.word	0x200006a0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800e448 	.word	0x0800e448

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200006a4 	.word	0x200006a4
 8000104:	0800e448 	.word	0x0800e448

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uhi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5a09      	ldrh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f813 	bl	8001468 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ff6d 	bl	800132c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f805 	bl	8001468 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fffb 	bl	8001468 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff8d 	bl	80013a0 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff83 	bl	80013a0 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	1c08      	adds	r0, r1, #0
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f824 	bl	8000524 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_d2uiz>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	2200      	movs	r2, #0
 80004ec:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <__aeabi_d2uiz+0x38>)
 80004ee:	0004      	movs	r4, r0
 80004f0:	000d      	movs	r5, r1
 80004f2:	f7ff ffcf 	bl	8000494 <__aeabi_dcmpge>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	d104      	bne.n	8000504 <__aeabi_d2uiz+0x1c>
 80004fa:	0020      	movs	r0, r4
 80004fc:	0029      	movs	r1, r5
 80004fe:	f001 fdcb 	bl	8002098 <__aeabi_d2iz>
 8000502:	bd70      	pop	{r4, r5, r6, pc}
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <__aeabi_d2uiz+0x38>)
 8000506:	2200      	movs	r2, #0
 8000508:	0020      	movs	r0, r4
 800050a:	0029      	movs	r1, r5
 800050c:	f001 fa8e 	bl	8001a2c <__aeabi_dsub>
 8000510:	f001 fdc2 	bl	8002098 <__aeabi_d2iz>
 8000514:	2380      	movs	r3, #128	; 0x80
 8000516:	061b      	lsls	r3, r3, #24
 8000518:	469c      	mov	ip, r3
 800051a:	4460      	add	r0, ip
 800051c:	e7f1      	b.n	8000502 <__aeabi_d2uiz+0x1a>
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	41e00000 	.word	0x41e00000

08000524 <__udivmoddi4>:
 8000524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000526:	4657      	mov	r7, sl
 8000528:	464e      	mov	r6, r9
 800052a:	4645      	mov	r5, r8
 800052c:	46de      	mov	lr, fp
 800052e:	b5e0      	push	{r5, r6, r7, lr}
 8000530:	0004      	movs	r4, r0
 8000532:	b083      	sub	sp, #12
 8000534:	000d      	movs	r5, r1
 8000536:	4692      	mov	sl, r2
 8000538:	4699      	mov	r9, r3
 800053a:	428b      	cmp	r3, r1
 800053c:	d82f      	bhi.n	800059e <__udivmoddi4+0x7a>
 800053e:	d02c      	beq.n	800059a <__udivmoddi4+0x76>
 8000540:	4649      	mov	r1, r9
 8000542:	4650      	mov	r0, sl
 8000544:	f001 fe74 	bl	8002230 <__clzdi2>
 8000548:	0029      	movs	r1, r5
 800054a:	0006      	movs	r6, r0
 800054c:	0020      	movs	r0, r4
 800054e:	f001 fe6f 	bl	8002230 <__clzdi2>
 8000552:	1a33      	subs	r3, r6, r0
 8000554:	4698      	mov	r8, r3
 8000556:	3b20      	subs	r3, #32
 8000558:	469b      	mov	fp, r3
 800055a:	d500      	bpl.n	800055e <__udivmoddi4+0x3a>
 800055c:	e074      	b.n	8000648 <__udivmoddi4+0x124>
 800055e:	4653      	mov	r3, sl
 8000560:	465a      	mov	r2, fp
 8000562:	4093      	lsls	r3, r2
 8000564:	001f      	movs	r7, r3
 8000566:	4653      	mov	r3, sl
 8000568:	4642      	mov	r2, r8
 800056a:	4093      	lsls	r3, r2
 800056c:	001e      	movs	r6, r3
 800056e:	42af      	cmp	r7, r5
 8000570:	d829      	bhi.n	80005c6 <__udivmoddi4+0xa2>
 8000572:	d026      	beq.n	80005c2 <__udivmoddi4+0x9e>
 8000574:	465b      	mov	r3, fp
 8000576:	1ba4      	subs	r4, r4, r6
 8000578:	41bd      	sbcs	r5, r7
 800057a:	2b00      	cmp	r3, #0
 800057c:	da00      	bge.n	8000580 <__udivmoddi4+0x5c>
 800057e:	e079      	b.n	8000674 <__udivmoddi4+0x150>
 8000580:	2200      	movs	r2, #0
 8000582:	2300      	movs	r3, #0
 8000584:	9200      	str	r2, [sp, #0]
 8000586:	9301      	str	r3, [sp, #4]
 8000588:	2301      	movs	r3, #1
 800058a:	465a      	mov	r2, fp
 800058c:	4093      	lsls	r3, r2
 800058e:	9301      	str	r3, [sp, #4]
 8000590:	2301      	movs	r3, #1
 8000592:	4642      	mov	r2, r8
 8000594:	4093      	lsls	r3, r2
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	e019      	b.n	80005ce <__udivmoddi4+0xaa>
 800059a:	4282      	cmp	r2, r0
 800059c:	d9d0      	bls.n	8000540 <__udivmoddi4+0x1c>
 800059e:	2200      	movs	r2, #0
 80005a0:	2300      	movs	r3, #0
 80005a2:	9200      	str	r2, [sp, #0]
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <__udivmoddi4+0x8c>
 80005ac:	601c      	str	r4, [r3, #0]
 80005ae:	605d      	str	r5, [r3, #4]
 80005b0:	9800      	ldr	r0, [sp, #0]
 80005b2:	9901      	ldr	r1, [sp, #4]
 80005b4:	b003      	add	sp, #12
 80005b6:	bc3c      	pop	{r2, r3, r4, r5}
 80005b8:	4690      	mov	r8, r2
 80005ba:	4699      	mov	r9, r3
 80005bc:	46a2      	mov	sl, r4
 80005be:	46ab      	mov	fp, r5
 80005c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005c2:	42a3      	cmp	r3, r4
 80005c4:	d9d6      	bls.n	8000574 <__udivmoddi4+0x50>
 80005c6:	2200      	movs	r2, #0
 80005c8:	2300      	movs	r3, #0
 80005ca:	9200      	str	r2, [sp, #0]
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	4643      	mov	r3, r8
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d0e8      	beq.n	80005a6 <__udivmoddi4+0x82>
 80005d4:	07fb      	lsls	r3, r7, #31
 80005d6:	0872      	lsrs	r2, r6, #1
 80005d8:	431a      	orrs	r2, r3
 80005da:	4646      	mov	r6, r8
 80005dc:	087b      	lsrs	r3, r7, #1
 80005de:	e00e      	b.n	80005fe <__udivmoddi4+0xda>
 80005e0:	42ab      	cmp	r3, r5
 80005e2:	d101      	bne.n	80005e8 <__udivmoddi4+0xc4>
 80005e4:	42a2      	cmp	r2, r4
 80005e6:	d80c      	bhi.n	8000602 <__udivmoddi4+0xde>
 80005e8:	1aa4      	subs	r4, r4, r2
 80005ea:	419d      	sbcs	r5, r3
 80005ec:	2001      	movs	r0, #1
 80005ee:	1924      	adds	r4, r4, r4
 80005f0:	416d      	adcs	r5, r5
 80005f2:	2100      	movs	r1, #0
 80005f4:	3e01      	subs	r6, #1
 80005f6:	1824      	adds	r4, r4, r0
 80005f8:	414d      	adcs	r5, r1
 80005fa:	2e00      	cmp	r6, #0
 80005fc:	d006      	beq.n	800060c <__udivmoddi4+0xe8>
 80005fe:	42ab      	cmp	r3, r5
 8000600:	d9ee      	bls.n	80005e0 <__udivmoddi4+0xbc>
 8000602:	3e01      	subs	r6, #1
 8000604:	1924      	adds	r4, r4, r4
 8000606:	416d      	adcs	r5, r5
 8000608:	2e00      	cmp	r6, #0
 800060a:	d1f8      	bne.n	80005fe <__udivmoddi4+0xda>
 800060c:	465b      	mov	r3, fp
 800060e:	9800      	ldr	r0, [sp, #0]
 8000610:	9901      	ldr	r1, [sp, #4]
 8000612:	1900      	adds	r0, r0, r4
 8000614:	4169      	adcs	r1, r5
 8000616:	2b00      	cmp	r3, #0
 8000618:	db22      	blt.n	8000660 <__udivmoddi4+0x13c>
 800061a:	002b      	movs	r3, r5
 800061c:	465a      	mov	r2, fp
 800061e:	40d3      	lsrs	r3, r2
 8000620:	002a      	movs	r2, r5
 8000622:	4644      	mov	r4, r8
 8000624:	40e2      	lsrs	r2, r4
 8000626:	001c      	movs	r4, r3
 8000628:	465b      	mov	r3, fp
 800062a:	0015      	movs	r5, r2
 800062c:	2b00      	cmp	r3, #0
 800062e:	db2c      	blt.n	800068a <__udivmoddi4+0x166>
 8000630:	0026      	movs	r6, r4
 8000632:	409e      	lsls	r6, r3
 8000634:	0033      	movs	r3, r6
 8000636:	0026      	movs	r6, r4
 8000638:	4647      	mov	r7, r8
 800063a:	40be      	lsls	r6, r7
 800063c:	0032      	movs	r2, r6
 800063e:	1a80      	subs	r0, r0, r2
 8000640:	4199      	sbcs	r1, r3
 8000642:	9000      	str	r0, [sp, #0]
 8000644:	9101      	str	r1, [sp, #4]
 8000646:	e7ae      	b.n	80005a6 <__udivmoddi4+0x82>
 8000648:	4642      	mov	r2, r8
 800064a:	2320      	movs	r3, #32
 800064c:	1a9b      	subs	r3, r3, r2
 800064e:	4652      	mov	r2, sl
 8000650:	40da      	lsrs	r2, r3
 8000652:	4641      	mov	r1, r8
 8000654:	0013      	movs	r3, r2
 8000656:	464a      	mov	r2, r9
 8000658:	408a      	lsls	r2, r1
 800065a:	0017      	movs	r7, r2
 800065c:	431f      	orrs	r7, r3
 800065e:	e782      	b.n	8000566 <__udivmoddi4+0x42>
 8000660:	4642      	mov	r2, r8
 8000662:	2320      	movs	r3, #32
 8000664:	1a9b      	subs	r3, r3, r2
 8000666:	002a      	movs	r2, r5
 8000668:	4646      	mov	r6, r8
 800066a:	409a      	lsls	r2, r3
 800066c:	0023      	movs	r3, r4
 800066e:	40f3      	lsrs	r3, r6
 8000670:	4313      	orrs	r3, r2
 8000672:	e7d5      	b.n	8000620 <__udivmoddi4+0xfc>
 8000674:	4642      	mov	r2, r8
 8000676:	2320      	movs	r3, #32
 8000678:	2100      	movs	r1, #0
 800067a:	1a9b      	subs	r3, r3, r2
 800067c:	2200      	movs	r2, #0
 800067e:	9100      	str	r1, [sp, #0]
 8000680:	9201      	str	r2, [sp, #4]
 8000682:	2201      	movs	r2, #1
 8000684:	40da      	lsrs	r2, r3
 8000686:	9201      	str	r2, [sp, #4]
 8000688:	e782      	b.n	8000590 <__udivmoddi4+0x6c>
 800068a:	4642      	mov	r2, r8
 800068c:	2320      	movs	r3, #32
 800068e:	0026      	movs	r6, r4
 8000690:	1a9b      	subs	r3, r3, r2
 8000692:	40de      	lsrs	r6, r3
 8000694:	002f      	movs	r7, r5
 8000696:	46b4      	mov	ip, r6
 8000698:	4097      	lsls	r7, r2
 800069a:	4666      	mov	r6, ip
 800069c:	003b      	movs	r3, r7
 800069e:	4333      	orrs	r3, r6
 80006a0:	e7c9      	b.n	8000636 <__udivmoddi4+0x112>
 80006a2:	46c0      	nop			; (mov r8, r8)

080006a4 <__aeabi_dadd>:
 80006a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006a6:	4645      	mov	r5, r8
 80006a8:	46de      	mov	lr, fp
 80006aa:	4657      	mov	r7, sl
 80006ac:	464e      	mov	r6, r9
 80006ae:	030c      	lsls	r4, r1, #12
 80006b0:	b5e0      	push	{r5, r6, r7, lr}
 80006b2:	004e      	lsls	r6, r1, #1
 80006b4:	0fc9      	lsrs	r1, r1, #31
 80006b6:	4688      	mov	r8, r1
 80006b8:	000d      	movs	r5, r1
 80006ba:	0a61      	lsrs	r1, r4, #9
 80006bc:	0f44      	lsrs	r4, r0, #29
 80006be:	430c      	orrs	r4, r1
 80006c0:	00c7      	lsls	r7, r0, #3
 80006c2:	0319      	lsls	r1, r3, #12
 80006c4:	0058      	lsls	r0, r3, #1
 80006c6:	0fdb      	lsrs	r3, r3, #31
 80006c8:	469b      	mov	fp, r3
 80006ca:	0a4b      	lsrs	r3, r1, #9
 80006cc:	0f51      	lsrs	r1, r2, #29
 80006ce:	430b      	orrs	r3, r1
 80006d0:	0d76      	lsrs	r6, r6, #21
 80006d2:	0d40      	lsrs	r0, r0, #21
 80006d4:	0019      	movs	r1, r3
 80006d6:	00d2      	lsls	r2, r2, #3
 80006d8:	45d8      	cmp	r8, fp
 80006da:	d100      	bne.n	80006de <__aeabi_dadd+0x3a>
 80006dc:	e0ae      	b.n	800083c <__aeabi_dadd+0x198>
 80006de:	1a35      	subs	r5, r6, r0
 80006e0:	2d00      	cmp	r5, #0
 80006e2:	dc00      	bgt.n	80006e6 <__aeabi_dadd+0x42>
 80006e4:	e0f6      	b.n	80008d4 <__aeabi_dadd+0x230>
 80006e6:	2800      	cmp	r0, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dadd+0x66>
 80006ea:	4313      	orrs	r3, r2
 80006ec:	d100      	bne.n	80006f0 <__aeabi_dadd+0x4c>
 80006ee:	e0db      	b.n	80008a8 <__aeabi_dadd+0x204>
 80006f0:	1e6b      	subs	r3, r5, #1
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d000      	beq.n	80006f8 <__aeabi_dadd+0x54>
 80006f6:	e137      	b.n	8000968 <__aeabi_dadd+0x2c4>
 80006f8:	1aba      	subs	r2, r7, r2
 80006fa:	4297      	cmp	r7, r2
 80006fc:	41bf      	sbcs	r7, r7
 80006fe:	1a64      	subs	r4, r4, r1
 8000700:	427f      	negs	r7, r7
 8000702:	1be4      	subs	r4, r4, r7
 8000704:	2601      	movs	r6, #1
 8000706:	0017      	movs	r7, r2
 8000708:	e024      	b.n	8000754 <__aeabi_dadd+0xb0>
 800070a:	4bc6      	ldr	r3, [pc, #792]	; (8000a24 <__aeabi_dadd+0x380>)
 800070c:	429e      	cmp	r6, r3
 800070e:	d04d      	beq.n	80007ac <__aeabi_dadd+0x108>
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	041b      	lsls	r3, r3, #16
 8000714:	4319      	orrs	r1, r3
 8000716:	2d38      	cmp	r5, #56	; 0x38
 8000718:	dd00      	ble.n	800071c <__aeabi_dadd+0x78>
 800071a:	e107      	b.n	800092c <__aeabi_dadd+0x288>
 800071c:	2d1f      	cmp	r5, #31
 800071e:	dd00      	ble.n	8000722 <__aeabi_dadd+0x7e>
 8000720:	e138      	b.n	8000994 <__aeabi_dadd+0x2f0>
 8000722:	2020      	movs	r0, #32
 8000724:	1b43      	subs	r3, r0, r5
 8000726:	469a      	mov	sl, r3
 8000728:	000b      	movs	r3, r1
 800072a:	4650      	mov	r0, sl
 800072c:	4083      	lsls	r3, r0
 800072e:	4699      	mov	r9, r3
 8000730:	0013      	movs	r3, r2
 8000732:	4648      	mov	r0, r9
 8000734:	40eb      	lsrs	r3, r5
 8000736:	4318      	orrs	r0, r3
 8000738:	0003      	movs	r3, r0
 800073a:	4650      	mov	r0, sl
 800073c:	4082      	lsls	r2, r0
 800073e:	1e50      	subs	r0, r2, #1
 8000740:	4182      	sbcs	r2, r0
 8000742:	40e9      	lsrs	r1, r5
 8000744:	431a      	orrs	r2, r3
 8000746:	1aba      	subs	r2, r7, r2
 8000748:	1a61      	subs	r1, r4, r1
 800074a:	4297      	cmp	r7, r2
 800074c:	41a4      	sbcs	r4, r4
 800074e:	0017      	movs	r7, r2
 8000750:	4264      	negs	r4, r4
 8000752:	1b0c      	subs	r4, r1, r4
 8000754:	0223      	lsls	r3, r4, #8
 8000756:	d562      	bpl.n	800081e <__aeabi_dadd+0x17a>
 8000758:	0264      	lsls	r4, r4, #9
 800075a:	0a65      	lsrs	r5, r4, #9
 800075c:	2d00      	cmp	r5, #0
 800075e:	d100      	bne.n	8000762 <__aeabi_dadd+0xbe>
 8000760:	e0df      	b.n	8000922 <__aeabi_dadd+0x27e>
 8000762:	0028      	movs	r0, r5
 8000764:	f001 fd46 	bl	80021f4 <__clzsi2>
 8000768:	0003      	movs	r3, r0
 800076a:	3b08      	subs	r3, #8
 800076c:	2b1f      	cmp	r3, #31
 800076e:	dd00      	ble.n	8000772 <__aeabi_dadd+0xce>
 8000770:	e0d2      	b.n	8000918 <__aeabi_dadd+0x274>
 8000772:	2220      	movs	r2, #32
 8000774:	003c      	movs	r4, r7
 8000776:	1ad2      	subs	r2, r2, r3
 8000778:	409d      	lsls	r5, r3
 800077a:	40d4      	lsrs	r4, r2
 800077c:	409f      	lsls	r7, r3
 800077e:	4325      	orrs	r5, r4
 8000780:	429e      	cmp	r6, r3
 8000782:	dd00      	ble.n	8000786 <__aeabi_dadd+0xe2>
 8000784:	e0c4      	b.n	8000910 <__aeabi_dadd+0x26c>
 8000786:	1b9e      	subs	r6, r3, r6
 8000788:	1c73      	adds	r3, r6, #1
 800078a:	2b1f      	cmp	r3, #31
 800078c:	dd00      	ble.n	8000790 <__aeabi_dadd+0xec>
 800078e:	e0f1      	b.n	8000974 <__aeabi_dadd+0x2d0>
 8000790:	2220      	movs	r2, #32
 8000792:	0038      	movs	r0, r7
 8000794:	0029      	movs	r1, r5
 8000796:	1ad2      	subs	r2, r2, r3
 8000798:	40d8      	lsrs	r0, r3
 800079a:	4091      	lsls	r1, r2
 800079c:	4097      	lsls	r7, r2
 800079e:	002c      	movs	r4, r5
 80007a0:	4301      	orrs	r1, r0
 80007a2:	1e78      	subs	r0, r7, #1
 80007a4:	4187      	sbcs	r7, r0
 80007a6:	40dc      	lsrs	r4, r3
 80007a8:	2600      	movs	r6, #0
 80007aa:	430f      	orrs	r7, r1
 80007ac:	077b      	lsls	r3, r7, #29
 80007ae:	d009      	beq.n	80007c4 <__aeabi_dadd+0x120>
 80007b0:	230f      	movs	r3, #15
 80007b2:	403b      	ands	r3, r7
 80007b4:	2b04      	cmp	r3, #4
 80007b6:	d005      	beq.n	80007c4 <__aeabi_dadd+0x120>
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	42bb      	cmp	r3, r7
 80007bc:	41bf      	sbcs	r7, r7
 80007be:	427f      	negs	r7, r7
 80007c0:	19e4      	adds	r4, r4, r7
 80007c2:	001f      	movs	r7, r3
 80007c4:	0223      	lsls	r3, r4, #8
 80007c6:	d52c      	bpl.n	8000822 <__aeabi_dadd+0x17e>
 80007c8:	4b96      	ldr	r3, [pc, #600]	; (8000a24 <__aeabi_dadd+0x380>)
 80007ca:	3601      	adds	r6, #1
 80007cc:	429e      	cmp	r6, r3
 80007ce:	d100      	bne.n	80007d2 <__aeabi_dadd+0x12e>
 80007d0:	e09a      	b.n	8000908 <__aeabi_dadd+0x264>
 80007d2:	4645      	mov	r5, r8
 80007d4:	4b94      	ldr	r3, [pc, #592]	; (8000a28 <__aeabi_dadd+0x384>)
 80007d6:	08ff      	lsrs	r7, r7, #3
 80007d8:	401c      	ands	r4, r3
 80007da:	0760      	lsls	r0, r4, #29
 80007dc:	0576      	lsls	r6, r6, #21
 80007de:	0264      	lsls	r4, r4, #9
 80007e0:	4307      	orrs	r7, r0
 80007e2:	0b24      	lsrs	r4, r4, #12
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	2100      	movs	r1, #0
 80007e8:	0324      	lsls	r4, r4, #12
 80007ea:	0b23      	lsrs	r3, r4, #12
 80007ec:	0d0c      	lsrs	r4, r1, #20
 80007ee:	4a8f      	ldr	r2, [pc, #572]	; (8000a2c <__aeabi_dadd+0x388>)
 80007f0:	0524      	lsls	r4, r4, #20
 80007f2:	431c      	orrs	r4, r3
 80007f4:	4014      	ands	r4, r2
 80007f6:	0533      	lsls	r3, r6, #20
 80007f8:	4323      	orrs	r3, r4
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	07ed      	lsls	r5, r5, #31
 80007fe:	085b      	lsrs	r3, r3, #1
 8000800:	432b      	orrs	r3, r5
 8000802:	0038      	movs	r0, r7
 8000804:	0019      	movs	r1, r3
 8000806:	bc3c      	pop	{r2, r3, r4, r5}
 8000808:	4690      	mov	r8, r2
 800080a:	4699      	mov	r9, r3
 800080c:	46a2      	mov	sl, r4
 800080e:	46ab      	mov	fp, r5
 8000810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000812:	4664      	mov	r4, ip
 8000814:	4304      	orrs	r4, r0
 8000816:	d100      	bne.n	800081a <__aeabi_dadd+0x176>
 8000818:	e211      	b.n	8000c3e <__aeabi_dadd+0x59a>
 800081a:	0004      	movs	r4, r0
 800081c:	4667      	mov	r7, ip
 800081e:	077b      	lsls	r3, r7, #29
 8000820:	d1c6      	bne.n	80007b0 <__aeabi_dadd+0x10c>
 8000822:	4645      	mov	r5, r8
 8000824:	0760      	lsls	r0, r4, #29
 8000826:	08ff      	lsrs	r7, r7, #3
 8000828:	4307      	orrs	r7, r0
 800082a:	08e4      	lsrs	r4, r4, #3
 800082c:	4b7d      	ldr	r3, [pc, #500]	; (8000a24 <__aeabi_dadd+0x380>)
 800082e:	429e      	cmp	r6, r3
 8000830:	d030      	beq.n	8000894 <__aeabi_dadd+0x1f0>
 8000832:	0324      	lsls	r4, r4, #12
 8000834:	0576      	lsls	r6, r6, #21
 8000836:	0b24      	lsrs	r4, r4, #12
 8000838:	0d76      	lsrs	r6, r6, #21
 800083a:	e7d4      	b.n	80007e6 <__aeabi_dadd+0x142>
 800083c:	1a33      	subs	r3, r6, r0
 800083e:	469a      	mov	sl, r3
 8000840:	2b00      	cmp	r3, #0
 8000842:	dd78      	ble.n	8000936 <__aeabi_dadd+0x292>
 8000844:	2800      	cmp	r0, #0
 8000846:	d031      	beq.n	80008ac <__aeabi_dadd+0x208>
 8000848:	4876      	ldr	r0, [pc, #472]	; (8000a24 <__aeabi_dadd+0x380>)
 800084a:	4286      	cmp	r6, r0
 800084c:	d0ae      	beq.n	80007ac <__aeabi_dadd+0x108>
 800084e:	2080      	movs	r0, #128	; 0x80
 8000850:	0400      	lsls	r0, r0, #16
 8000852:	4301      	orrs	r1, r0
 8000854:	4653      	mov	r3, sl
 8000856:	2b38      	cmp	r3, #56	; 0x38
 8000858:	dc00      	bgt.n	800085c <__aeabi_dadd+0x1b8>
 800085a:	e0e9      	b.n	8000a30 <__aeabi_dadd+0x38c>
 800085c:	430a      	orrs	r2, r1
 800085e:	1e51      	subs	r1, r2, #1
 8000860:	418a      	sbcs	r2, r1
 8000862:	2100      	movs	r1, #0
 8000864:	19d2      	adds	r2, r2, r7
 8000866:	42ba      	cmp	r2, r7
 8000868:	41bf      	sbcs	r7, r7
 800086a:	1909      	adds	r1, r1, r4
 800086c:	427c      	negs	r4, r7
 800086e:	0017      	movs	r7, r2
 8000870:	190c      	adds	r4, r1, r4
 8000872:	0223      	lsls	r3, r4, #8
 8000874:	d5d3      	bpl.n	800081e <__aeabi_dadd+0x17a>
 8000876:	4b6b      	ldr	r3, [pc, #428]	; (8000a24 <__aeabi_dadd+0x380>)
 8000878:	3601      	adds	r6, #1
 800087a:	429e      	cmp	r6, r3
 800087c:	d100      	bne.n	8000880 <__aeabi_dadd+0x1dc>
 800087e:	e13a      	b.n	8000af6 <__aeabi_dadd+0x452>
 8000880:	2001      	movs	r0, #1
 8000882:	4b69      	ldr	r3, [pc, #420]	; (8000a28 <__aeabi_dadd+0x384>)
 8000884:	401c      	ands	r4, r3
 8000886:	087b      	lsrs	r3, r7, #1
 8000888:	4007      	ands	r7, r0
 800088a:	431f      	orrs	r7, r3
 800088c:	07e0      	lsls	r0, r4, #31
 800088e:	4307      	orrs	r7, r0
 8000890:	0864      	lsrs	r4, r4, #1
 8000892:	e78b      	b.n	80007ac <__aeabi_dadd+0x108>
 8000894:	0023      	movs	r3, r4
 8000896:	433b      	orrs	r3, r7
 8000898:	d100      	bne.n	800089c <__aeabi_dadd+0x1f8>
 800089a:	e1cb      	b.n	8000c34 <__aeabi_dadd+0x590>
 800089c:	2280      	movs	r2, #128	; 0x80
 800089e:	0312      	lsls	r2, r2, #12
 80008a0:	4314      	orrs	r4, r2
 80008a2:	0324      	lsls	r4, r4, #12
 80008a4:	0b24      	lsrs	r4, r4, #12
 80008a6:	e79e      	b.n	80007e6 <__aeabi_dadd+0x142>
 80008a8:	002e      	movs	r6, r5
 80008aa:	e77f      	b.n	80007ac <__aeabi_dadd+0x108>
 80008ac:	0008      	movs	r0, r1
 80008ae:	4310      	orrs	r0, r2
 80008b0:	d100      	bne.n	80008b4 <__aeabi_dadd+0x210>
 80008b2:	e0b4      	b.n	8000a1e <__aeabi_dadd+0x37a>
 80008b4:	1e58      	subs	r0, r3, #1
 80008b6:	2800      	cmp	r0, #0
 80008b8:	d000      	beq.n	80008bc <__aeabi_dadd+0x218>
 80008ba:	e0de      	b.n	8000a7a <__aeabi_dadd+0x3d6>
 80008bc:	18ba      	adds	r2, r7, r2
 80008be:	42ba      	cmp	r2, r7
 80008c0:	419b      	sbcs	r3, r3
 80008c2:	1864      	adds	r4, r4, r1
 80008c4:	425b      	negs	r3, r3
 80008c6:	18e4      	adds	r4, r4, r3
 80008c8:	0017      	movs	r7, r2
 80008ca:	2601      	movs	r6, #1
 80008cc:	0223      	lsls	r3, r4, #8
 80008ce:	d5a6      	bpl.n	800081e <__aeabi_dadd+0x17a>
 80008d0:	2602      	movs	r6, #2
 80008d2:	e7d5      	b.n	8000880 <__aeabi_dadd+0x1dc>
 80008d4:	2d00      	cmp	r5, #0
 80008d6:	d16e      	bne.n	80009b6 <__aeabi_dadd+0x312>
 80008d8:	1c70      	adds	r0, r6, #1
 80008da:	0540      	lsls	r0, r0, #21
 80008dc:	0d40      	lsrs	r0, r0, #21
 80008de:	2801      	cmp	r0, #1
 80008e0:	dc00      	bgt.n	80008e4 <__aeabi_dadd+0x240>
 80008e2:	e0f9      	b.n	8000ad8 <__aeabi_dadd+0x434>
 80008e4:	1ab8      	subs	r0, r7, r2
 80008e6:	4684      	mov	ip, r0
 80008e8:	4287      	cmp	r7, r0
 80008ea:	4180      	sbcs	r0, r0
 80008ec:	1ae5      	subs	r5, r4, r3
 80008ee:	4240      	negs	r0, r0
 80008f0:	1a2d      	subs	r5, r5, r0
 80008f2:	0228      	lsls	r0, r5, #8
 80008f4:	d400      	bmi.n	80008f8 <__aeabi_dadd+0x254>
 80008f6:	e089      	b.n	8000a0c <__aeabi_dadd+0x368>
 80008f8:	1bd7      	subs	r7, r2, r7
 80008fa:	42ba      	cmp	r2, r7
 80008fc:	4192      	sbcs	r2, r2
 80008fe:	1b1c      	subs	r4, r3, r4
 8000900:	4252      	negs	r2, r2
 8000902:	1aa5      	subs	r5, r4, r2
 8000904:	46d8      	mov	r8, fp
 8000906:	e729      	b.n	800075c <__aeabi_dadd+0xb8>
 8000908:	4645      	mov	r5, r8
 800090a:	2400      	movs	r4, #0
 800090c:	2700      	movs	r7, #0
 800090e:	e76a      	b.n	80007e6 <__aeabi_dadd+0x142>
 8000910:	4c45      	ldr	r4, [pc, #276]	; (8000a28 <__aeabi_dadd+0x384>)
 8000912:	1af6      	subs	r6, r6, r3
 8000914:	402c      	ands	r4, r5
 8000916:	e749      	b.n	80007ac <__aeabi_dadd+0x108>
 8000918:	003d      	movs	r5, r7
 800091a:	3828      	subs	r0, #40	; 0x28
 800091c:	4085      	lsls	r5, r0
 800091e:	2700      	movs	r7, #0
 8000920:	e72e      	b.n	8000780 <__aeabi_dadd+0xdc>
 8000922:	0038      	movs	r0, r7
 8000924:	f001 fc66 	bl	80021f4 <__clzsi2>
 8000928:	3020      	adds	r0, #32
 800092a:	e71d      	b.n	8000768 <__aeabi_dadd+0xc4>
 800092c:	430a      	orrs	r2, r1
 800092e:	1e51      	subs	r1, r2, #1
 8000930:	418a      	sbcs	r2, r1
 8000932:	2100      	movs	r1, #0
 8000934:	e707      	b.n	8000746 <__aeabi_dadd+0xa2>
 8000936:	2b00      	cmp	r3, #0
 8000938:	d000      	beq.n	800093c <__aeabi_dadd+0x298>
 800093a:	e0f3      	b.n	8000b24 <__aeabi_dadd+0x480>
 800093c:	1c70      	adds	r0, r6, #1
 800093e:	0543      	lsls	r3, r0, #21
 8000940:	0d5b      	lsrs	r3, r3, #21
 8000942:	2b01      	cmp	r3, #1
 8000944:	dc00      	bgt.n	8000948 <__aeabi_dadd+0x2a4>
 8000946:	e0ad      	b.n	8000aa4 <__aeabi_dadd+0x400>
 8000948:	4b36      	ldr	r3, [pc, #216]	; (8000a24 <__aeabi_dadd+0x380>)
 800094a:	4298      	cmp	r0, r3
 800094c:	d100      	bne.n	8000950 <__aeabi_dadd+0x2ac>
 800094e:	e0d1      	b.n	8000af4 <__aeabi_dadd+0x450>
 8000950:	18ba      	adds	r2, r7, r2
 8000952:	42ba      	cmp	r2, r7
 8000954:	41bf      	sbcs	r7, r7
 8000956:	1864      	adds	r4, r4, r1
 8000958:	427f      	negs	r7, r7
 800095a:	19e4      	adds	r4, r4, r7
 800095c:	07e7      	lsls	r7, r4, #31
 800095e:	0852      	lsrs	r2, r2, #1
 8000960:	4317      	orrs	r7, r2
 8000962:	0864      	lsrs	r4, r4, #1
 8000964:	0006      	movs	r6, r0
 8000966:	e721      	b.n	80007ac <__aeabi_dadd+0x108>
 8000968:	482e      	ldr	r0, [pc, #184]	; (8000a24 <__aeabi_dadd+0x380>)
 800096a:	4285      	cmp	r5, r0
 800096c:	d100      	bne.n	8000970 <__aeabi_dadd+0x2cc>
 800096e:	e093      	b.n	8000a98 <__aeabi_dadd+0x3f4>
 8000970:	001d      	movs	r5, r3
 8000972:	e6d0      	b.n	8000716 <__aeabi_dadd+0x72>
 8000974:	0029      	movs	r1, r5
 8000976:	3e1f      	subs	r6, #31
 8000978:	40f1      	lsrs	r1, r6
 800097a:	2b20      	cmp	r3, #32
 800097c:	d100      	bne.n	8000980 <__aeabi_dadd+0x2dc>
 800097e:	e08d      	b.n	8000a9c <__aeabi_dadd+0x3f8>
 8000980:	2240      	movs	r2, #64	; 0x40
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	409d      	lsls	r5, r3
 8000986:	432f      	orrs	r7, r5
 8000988:	1e7d      	subs	r5, r7, #1
 800098a:	41af      	sbcs	r7, r5
 800098c:	2400      	movs	r4, #0
 800098e:	430f      	orrs	r7, r1
 8000990:	2600      	movs	r6, #0
 8000992:	e744      	b.n	800081e <__aeabi_dadd+0x17a>
 8000994:	002b      	movs	r3, r5
 8000996:	0008      	movs	r0, r1
 8000998:	3b20      	subs	r3, #32
 800099a:	40d8      	lsrs	r0, r3
 800099c:	0003      	movs	r3, r0
 800099e:	2d20      	cmp	r5, #32
 80009a0:	d100      	bne.n	80009a4 <__aeabi_dadd+0x300>
 80009a2:	e07d      	b.n	8000aa0 <__aeabi_dadd+0x3fc>
 80009a4:	2040      	movs	r0, #64	; 0x40
 80009a6:	1b45      	subs	r5, r0, r5
 80009a8:	40a9      	lsls	r1, r5
 80009aa:	430a      	orrs	r2, r1
 80009ac:	1e51      	subs	r1, r2, #1
 80009ae:	418a      	sbcs	r2, r1
 80009b0:	2100      	movs	r1, #0
 80009b2:	431a      	orrs	r2, r3
 80009b4:	e6c7      	b.n	8000746 <__aeabi_dadd+0xa2>
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d050      	beq.n	8000a5c <__aeabi_dadd+0x3b8>
 80009ba:	4e1a      	ldr	r6, [pc, #104]	; (8000a24 <__aeabi_dadd+0x380>)
 80009bc:	42b0      	cmp	r0, r6
 80009be:	d057      	beq.n	8000a70 <__aeabi_dadd+0x3cc>
 80009c0:	2680      	movs	r6, #128	; 0x80
 80009c2:	426b      	negs	r3, r5
 80009c4:	4699      	mov	r9, r3
 80009c6:	0436      	lsls	r6, r6, #16
 80009c8:	4334      	orrs	r4, r6
 80009ca:	464b      	mov	r3, r9
 80009cc:	2b38      	cmp	r3, #56	; 0x38
 80009ce:	dd00      	ble.n	80009d2 <__aeabi_dadd+0x32e>
 80009d0:	e0d6      	b.n	8000b80 <__aeabi_dadd+0x4dc>
 80009d2:	2b1f      	cmp	r3, #31
 80009d4:	dd00      	ble.n	80009d8 <__aeabi_dadd+0x334>
 80009d6:	e135      	b.n	8000c44 <__aeabi_dadd+0x5a0>
 80009d8:	2620      	movs	r6, #32
 80009da:	1af5      	subs	r5, r6, r3
 80009dc:	0026      	movs	r6, r4
 80009de:	40ae      	lsls	r6, r5
 80009e0:	46b2      	mov	sl, r6
 80009e2:	003e      	movs	r6, r7
 80009e4:	40de      	lsrs	r6, r3
 80009e6:	46ac      	mov	ip, r5
 80009e8:	0035      	movs	r5, r6
 80009ea:	4656      	mov	r6, sl
 80009ec:	432e      	orrs	r6, r5
 80009ee:	4665      	mov	r5, ip
 80009f0:	40af      	lsls	r7, r5
 80009f2:	1e7d      	subs	r5, r7, #1
 80009f4:	41af      	sbcs	r7, r5
 80009f6:	40dc      	lsrs	r4, r3
 80009f8:	4337      	orrs	r7, r6
 80009fa:	1bd7      	subs	r7, r2, r7
 80009fc:	42ba      	cmp	r2, r7
 80009fe:	4192      	sbcs	r2, r2
 8000a00:	1b0c      	subs	r4, r1, r4
 8000a02:	4252      	negs	r2, r2
 8000a04:	1aa4      	subs	r4, r4, r2
 8000a06:	0006      	movs	r6, r0
 8000a08:	46d8      	mov	r8, fp
 8000a0a:	e6a3      	b.n	8000754 <__aeabi_dadd+0xb0>
 8000a0c:	4664      	mov	r4, ip
 8000a0e:	4667      	mov	r7, ip
 8000a10:	432c      	orrs	r4, r5
 8000a12:	d000      	beq.n	8000a16 <__aeabi_dadd+0x372>
 8000a14:	e6a2      	b.n	800075c <__aeabi_dadd+0xb8>
 8000a16:	2500      	movs	r5, #0
 8000a18:	2600      	movs	r6, #0
 8000a1a:	2700      	movs	r7, #0
 8000a1c:	e706      	b.n	800082c <__aeabi_dadd+0x188>
 8000a1e:	001e      	movs	r6, r3
 8000a20:	e6c4      	b.n	80007ac <__aeabi_dadd+0x108>
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	000007ff 	.word	0x000007ff
 8000a28:	ff7fffff 	.word	0xff7fffff
 8000a2c:	800fffff 	.word	0x800fffff
 8000a30:	2b1f      	cmp	r3, #31
 8000a32:	dc63      	bgt.n	8000afc <__aeabi_dadd+0x458>
 8000a34:	2020      	movs	r0, #32
 8000a36:	1ac3      	subs	r3, r0, r3
 8000a38:	0008      	movs	r0, r1
 8000a3a:	4098      	lsls	r0, r3
 8000a3c:	469c      	mov	ip, r3
 8000a3e:	4683      	mov	fp, r0
 8000a40:	4653      	mov	r3, sl
 8000a42:	0010      	movs	r0, r2
 8000a44:	40d8      	lsrs	r0, r3
 8000a46:	0003      	movs	r3, r0
 8000a48:	4658      	mov	r0, fp
 8000a4a:	4318      	orrs	r0, r3
 8000a4c:	4663      	mov	r3, ip
 8000a4e:	409a      	lsls	r2, r3
 8000a50:	1e53      	subs	r3, r2, #1
 8000a52:	419a      	sbcs	r2, r3
 8000a54:	4653      	mov	r3, sl
 8000a56:	4302      	orrs	r2, r0
 8000a58:	40d9      	lsrs	r1, r3
 8000a5a:	e703      	b.n	8000864 <__aeabi_dadd+0x1c0>
 8000a5c:	0026      	movs	r6, r4
 8000a5e:	433e      	orrs	r6, r7
 8000a60:	d006      	beq.n	8000a70 <__aeabi_dadd+0x3cc>
 8000a62:	43eb      	mvns	r3, r5
 8000a64:	4699      	mov	r9, r3
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d0c7      	beq.n	80009fa <__aeabi_dadd+0x356>
 8000a6a:	4e94      	ldr	r6, [pc, #592]	; (8000cbc <__aeabi_dadd+0x618>)
 8000a6c:	42b0      	cmp	r0, r6
 8000a6e:	d1ac      	bne.n	80009ca <__aeabi_dadd+0x326>
 8000a70:	000c      	movs	r4, r1
 8000a72:	0017      	movs	r7, r2
 8000a74:	0006      	movs	r6, r0
 8000a76:	46d8      	mov	r8, fp
 8000a78:	e698      	b.n	80007ac <__aeabi_dadd+0x108>
 8000a7a:	4b90      	ldr	r3, [pc, #576]	; (8000cbc <__aeabi_dadd+0x618>)
 8000a7c:	459a      	cmp	sl, r3
 8000a7e:	d00b      	beq.n	8000a98 <__aeabi_dadd+0x3f4>
 8000a80:	4682      	mov	sl, r0
 8000a82:	e6e7      	b.n	8000854 <__aeabi_dadd+0x1b0>
 8000a84:	2800      	cmp	r0, #0
 8000a86:	d000      	beq.n	8000a8a <__aeabi_dadd+0x3e6>
 8000a88:	e09e      	b.n	8000bc8 <__aeabi_dadd+0x524>
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	4310      	orrs	r0, r2
 8000a8e:	d100      	bne.n	8000a92 <__aeabi_dadd+0x3ee>
 8000a90:	e0e9      	b.n	8000c66 <__aeabi_dadd+0x5c2>
 8000a92:	001c      	movs	r4, r3
 8000a94:	0017      	movs	r7, r2
 8000a96:	46d8      	mov	r8, fp
 8000a98:	4e88      	ldr	r6, [pc, #544]	; (8000cbc <__aeabi_dadd+0x618>)
 8000a9a:	e687      	b.n	80007ac <__aeabi_dadd+0x108>
 8000a9c:	2500      	movs	r5, #0
 8000a9e:	e772      	b.n	8000986 <__aeabi_dadd+0x2e2>
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	e782      	b.n	80009aa <__aeabi_dadd+0x306>
 8000aa4:	0023      	movs	r3, r4
 8000aa6:	433b      	orrs	r3, r7
 8000aa8:	2e00      	cmp	r6, #0
 8000aaa:	d000      	beq.n	8000aae <__aeabi_dadd+0x40a>
 8000aac:	e0ab      	b.n	8000c06 <__aeabi_dadd+0x562>
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d100      	bne.n	8000ab4 <__aeabi_dadd+0x410>
 8000ab2:	e0e7      	b.n	8000c84 <__aeabi_dadd+0x5e0>
 8000ab4:	000b      	movs	r3, r1
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	d100      	bne.n	8000abc <__aeabi_dadd+0x418>
 8000aba:	e677      	b.n	80007ac <__aeabi_dadd+0x108>
 8000abc:	18ba      	adds	r2, r7, r2
 8000abe:	42ba      	cmp	r2, r7
 8000ac0:	41bf      	sbcs	r7, r7
 8000ac2:	1864      	adds	r4, r4, r1
 8000ac4:	427f      	negs	r7, r7
 8000ac6:	19e4      	adds	r4, r4, r7
 8000ac8:	0223      	lsls	r3, r4, #8
 8000aca:	d400      	bmi.n	8000ace <__aeabi_dadd+0x42a>
 8000acc:	e0f2      	b.n	8000cb4 <__aeabi_dadd+0x610>
 8000ace:	4b7c      	ldr	r3, [pc, #496]	; (8000cc0 <__aeabi_dadd+0x61c>)
 8000ad0:	0017      	movs	r7, r2
 8000ad2:	401c      	ands	r4, r3
 8000ad4:	0006      	movs	r6, r0
 8000ad6:	e669      	b.n	80007ac <__aeabi_dadd+0x108>
 8000ad8:	0020      	movs	r0, r4
 8000ada:	4338      	orrs	r0, r7
 8000adc:	2e00      	cmp	r6, #0
 8000ade:	d1d1      	bne.n	8000a84 <__aeabi_dadd+0x3e0>
 8000ae0:	2800      	cmp	r0, #0
 8000ae2:	d15b      	bne.n	8000b9c <__aeabi_dadd+0x4f8>
 8000ae4:	001c      	movs	r4, r3
 8000ae6:	4314      	orrs	r4, r2
 8000ae8:	d100      	bne.n	8000aec <__aeabi_dadd+0x448>
 8000aea:	e0a8      	b.n	8000c3e <__aeabi_dadd+0x59a>
 8000aec:	001c      	movs	r4, r3
 8000aee:	0017      	movs	r7, r2
 8000af0:	46d8      	mov	r8, fp
 8000af2:	e65b      	b.n	80007ac <__aeabi_dadd+0x108>
 8000af4:	0006      	movs	r6, r0
 8000af6:	2400      	movs	r4, #0
 8000af8:	2700      	movs	r7, #0
 8000afa:	e697      	b.n	800082c <__aeabi_dadd+0x188>
 8000afc:	4650      	mov	r0, sl
 8000afe:	000b      	movs	r3, r1
 8000b00:	3820      	subs	r0, #32
 8000b02:	40c3      	lsrs	r3, r0
 8000b04:	4699      	mov	r9, r3
 8000b06:	4653      	mov	r3, sl
 8000b08:	2b20      	cmp	r3, #32
 8000b0a:	d100      	bne.n	8000b0e <__aeabi_dadd+0x46a>
 8000b0c:	e095      	b.n	8000c3a <__aeabi_dadd+0x596>
 8000b0e:	2340      	movs	r3, #64	; 0x40
 8000b10:	4650      	mov	r0, sl
 8000b12:	1a1b      	subs	r3, r3, r0
 8000b14:	4099      	lsls	r1, r3
 8000b16:	430a      	orrs	r2, r1
 8000b18:	1e51      	subs	r1, r2, #1
 8000b1a:	418a      	sbcs	r2, r1
 8000b1c:	464b      	mov	r3, r9
 8000b1e:	2100      	movs	r1, #0
 8000b20:	431a      	orrs	r2, r3
 8000b22:	e69f      	b.n	8000864 <__aeabi_dadd+0x1c0>
 8000b24:	2e00      	cmp	r6, #0
 8000b26:	d130      	bne.n	8000b8a <__aeabi_dadd+0x4e6>
 8000b28:	0026      	movs	r6, r4
 8000b2a:	433e      	orrs	r6, r7
 8000b2c:	d067      	beq.n	8000bfe <__aeabi_dadd+0x55a>
 8000b2e:	43db      	mvns	r3, r3
 8000b30:	469a      	mov	sl, r3
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d01c      	beq.n	8000b70 <__aeabi_dadd+0x4cc>
 8000b36:	4e61      	ldr	r6, [pc, #388]	; (8000cbc <__aeabi_dadd+0x618>)
 8000b38:	42b0      	cmp	r0, r6
 8000b3a:	d060      	beq.n	8000bfe <__aeabi_dadd+0x55a>
 8000b3c:	4653      	mov	r3, sl
 8000b3e:	2b38      	cmp	r3, #56	; 0x38
 8000b40:	dd00      	ble.n	8000b44 <__aeabi_dadd+0x4a0>
 8000b42:	e096      	b.n	8000c72 <__aeabi_dadd+0x5ce>
 8000b44:	2b1f      	cmp	r3, #31
 8000b46:	dd00      	ble.n	8000b4a <__aeabi_dadd+0x4a6>
 8000b48:	e09f      	b.n	8000c8a <__aeabi_dadd+0x5e6>
 8000b4a:	2620      	movs	r6, #32
 8000b4c:	1af3      	subs	r3, r6, r3
 8000b4e:	0026      	movs	r6, r4
 8000b50:	409e      	lsls	r6, r3
 8000b52:	469c      	mov	ip, r3
 8000b54:	46b3      	mov	fp, r6
 8000b56:	4653      	mov	r3, sl
 8000b58:	003e      	movs	r6, r7
 8000b5a:	40de      	lsrs	r6, r3
 8000b5c:	0033      	movs	r3, r6
 8000b5e:	465e      	mov	r6, fp
 8000b60:	431e      	orrs	r6, r3
 8000b62:	4663      	mov	r3, ip
 8000b64:	409f      	lsls	r7, r3
 8000b66:	1e7b      	subs	r3, r7, #1
 8000b68:	419f      	sbcs	r7, r3
 8000b6a:	4653      	mov	r3, sl
 8000b6c:	40dc      	lsrs	r4, r3
 8000b6e:	4337      	orrs	r7, r6
 8000b70:	18bf      	adds	r7, r7, r2
 8000b72:	4297      	cmp	r7, r2
 8000b74:	4192      	sbcs	r2, r2
 8000b76:	1864      	adds	r4, r4, r1
 8000b78:	4252      	negs	r2, r2
 8000b7a:	18a4      	adds	r4, r4, r2
 8000b7c:	0006      	movs	r6, r0
 8000b7e:	e678      	b.n	8000872 <__aeabi_dadd+0x1ce>
 8000b80:	4327      	orrs	r7, r4
 8000b82:	1e7c      	subs	r4, r7, #1
 8000b84:	41a7      	sbcs	r7, r4
 8000b86:	2400      	movs	r4, #0
 8000b88:	e737      	b.n	80009fa <__aeabi_dadd+0x356>
 8000b8a:	4e4c      	ldr	r6, [pc, #304]	; (8000cbc <__aeabi_dadd+0x618>)
 8000b8c:	42b0      	cmp	r0, r6
 8000b8e:	d036      	beq.n	8000bfe <__aeabi_dadd+0x55a>
 8000b90:	2680      	movs	r6, #128	; 0x80
 8000b92:	425b      	negs	r3, r3
 8000b94:	0436      	lsls	r6, r6, #16
 8000b96:	469a      	mov	sl, r3
 8000b98:	4334      	orrs	r4, r6
 8000b9a:	e7cf      	b.n	8000b3c <__aeabi_dadd+0x498>
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	4310      	orrs	r0, r2
 8000ba0:	d100      	bne.n	8000ba4 <__aeabi_dadd+0x500>
 8000ba2:	e603      	b.n	80007ac <__aeabi_dadd+0x108>
 8000ba4:	1ab8      	subs	r0, r7, r2
 8000ba6:	4684      	mov	ip, r0
 8000ba8:	4567      	cmp	r7, ip
 8000baa:	41ad      	sbcs	r5, r5
 8000bac:	1ae0      	subs	r0, r4, r3
 8000bae:	426d      	negs	r5, r5
 8000bb0:	1b40      	subs	r0, r0, r5
 8000bb2:	0205      	lsls	r5, r0, #8
 8000bb4:	d400      	bmi.n	8000bb8 <__aeabi_dadd+0x514>
 8000bb6:	e62c      	b.n	8000812 <__aeabi_dadd+0x16e>
 8000bb8:	1bd7      	subs	r7, r2, r7
 8000bba:	42ba      	cmp	r2, r7
 8000bbc:	4192      	sbcs	r2, r2
 8000bbe:	1b1c      	subs	r4, r3, r4
 8000bc0:	4252      	negs	r2, r2
 8000bc2:	1aa4      	subs	r4, r4, r2
 8000bc4:	46d8      	mov	r8, fp
 8000bc6:	e5f1      	b.n	80007ac <__aeabi_dadd+0x108>
 8000bc8:	0018      	movs	r0, r3
 8000bca:	4310      	orrs	r0, r2
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_dadd+0x52c>
 8000bce:	e763      	b.n	8000a98 <__aeabi_dadd+0x3f4>
 8000bd0:	08f8      	lsrs	r0, r7, #3
 8000bd2:	0767      	lsls	r7, r4, #29
 8000bd4:	4307      	orrs	r7, r0
 8000bd6:	2080      	movs	r0, #128	; 0x80
 8000bd8:	08e4      	lsrs	r4, r4, #3
 8000bda:	0300      	lsls	r0, r0, #12
 8000bdc:	4204      	tst	r4, r0
 8000bde:	d008      	beq.n	8000bf2 <__aeabi_dadd+0x54e>
 8000be0:	08dd      	lsrs	r5, r3, #3
 8000be2:	4205      	tst	r5, r0
 8000be4:	d105      	bne.n	8000bf2 <__aeabi_dadd+0x54e>
 8000be6:	08d2      	lsrs	r2, r2, #3
 8000be8:	0759      	lsls	r1, r3, #29
 8000bea:	4311      	orrs	r1, r2
 8000bec:	000f      	movs	r7, r1
 8000bee:	002c      	movs	r4, r5
 8000bf0:	46d8      	mov	r8, fp
 8000bf2:	0f7b      	lsrs	r3, r7, #29
 8000bf4:	00e4      	lsls	r4, r4, #3
 8000bf6:	431c      	orrs	r4, r3
 8000bf8:	00ff      	lsls	r7, r7, #3
 8000bfa:	4e30      	ldr	r6, [pc, #192]	; (8000cbc <__aeabi_dadd+0x618>)
 8000bfc:	e5d6      	b.n	80007ac <__aeabi_dadd+0x108>
 8000bfe:	000c      	movs	r4, r1
 8000c00:	0017      	movs	r7, r2
 8000c02:	0006      	movs	r6, r0
 8000c04:	e5d2      	b.n	80007ac <__aeabi_dadd+0x108>
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d038      	beq.n	8000c7c <__aeabi_dadd+0x5d8>
 8000c0a:	000b      	movs	r3, r1
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	d100      	bne.n	8000c12 <__aeabi_dadd+0x56e>
 8000c10:	e742      	b.n	8000a98 <__aeabi_dadd+0x3f4>
 8000c12:	08f8      	lsrs	r0, r7, #3
 8000c14:	0767      	lsls	r7, r4, #29
 8000c16:	4307      	orrs	r7, r0
 8000c18:	2080      	movs	r0, #128	; 0x80
 8000c1a:	08e4      	lsrs	r4, r4, #3
 8000c1c:	0300      	lsls	r0, r0, #12
 8000c1e:	4204      	tst	r4, r0
 8000c20:	d0e7      	beq.n	8000bf2 <__aeabi_dadd+0x54e>
 8000c22:	08cb      	lsrs	r3, r1, #3
 8000c24:	4203      	tst	r3, r0
 8000c26:	d1e4      	bne.n	8000bf2 <__aeabi_dadd+0x54e>
 8000c28:	08d2      	lsrs	r2, r2, #3
 8000c2a:	0749      	lsls	r1, r1, #29
 8000c2c:	4311      	orrs	r1, r2
 8000c2e:	000f      	movs	r7, r1
 8000c30:	001c      	movs	r4, r3
 8000c32:	e7de      	b.n	8000bf2 <__aeabi_dadd+0x54e>
 8000c34:	2700      	movs	r7, #0
 8000c36:	2400      	movs	r4, #0
 8000c38:	e5d5      	b.n	80007e6 <__aeabi_dadd+0x142>
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	e76b      	b.n	8000b16 <__aeabi_dadd+0x472>
 8000c3e:	2500      	movs	r5, #0
 8000c40:	2700      	movs	r7, #0
 8000c42:	e5f3      	b.n	800082c <__aeabi_dadd+0x188>
 8000c44:	464e      	mov	r6, r9
 8000c46:	0025      	movs	r5, r4
 8000c48:	3e20      	subs	r6, #32
 8000c4a:	40f5      	lsrs	r5, r6
 8000c4c:	464b      	mov	r3, r9
 8000c4e:	002e      	movs	r6, r5
 8000c50:	2b20      	cmp	r3, #32
 8000c52:	d02d      	beq.n	8000cb0 <__aeabi_dadd+0x60c>
 8000c54:	2540      	movs	r5, #64	; 0x40
 8000c56:	1aed      	subs	r5, r5, r3
 8000c58:	40ac      	lsls	r4, r5
 8000c5a:	4327      	orrs	r7, r4
 8000c5c:	1e7c      	subs	r4, r7, #1
 8000c5e:	41a7      	sbcs	r7, r4
 8000c60:	2400      	movs	r4, #0
 8000c62:	4337      	orrs	r7, r6
 8000c64:	e6c9      	b.n	80009fa <__aeabi_dadd+0x356>
 8000c66:	2480      	movs	r4, #128	; 0x80
 8000c68:	2500      	movs	r5, #0
 8000c6a:	0324      	lsls	r4, r4, #12
 8000c6c:	4e13      	ldr	r6, [pc, #76]	; (8000cbc <__aeabi_dadd+0x618>)
 8000c6e:	2700      	movs	r7, #0
 8000c70:	e5dc      	b.n	800082c <__aeabi_dadd+0x188>
 8000c72:	4327      	orrs	r7, r4
 8000c74:	1e7c      	subs	r4, r7, #1
 8000c76:	41a7      	sbcs	r7, r4
 8000c78:	2400      	movs	r4, #0
 8000c7a:	e779      	b.n	8000b70 <__aeabi_dadd+0x4cc>
 8000c7c:	000c      	movs	r4, r1
 8000c7e:	0017      	movs	r7, r2
 8000c80:	4e0e      	ldr	r6, [pc, #56]	; (8000cbc <__aeabi_dadd+0x618>)
 8000c82:	e593      	b.n	80007ac <__aeabi_dadd+0x108>
 8000c84:	000c      	movs	r4, r1
 8000c86:	0017      	movs	r7, r2
 8000c88:	e590      	b.n	80007ac <__aeabi_dadd+0x108>
 8000c8a:	4656      	mov	r6, sl
 8000c8c:	0023      	movs	r3, r4
 8000c8e:	3e20      	subs	r6, #32
 8000c90:	40f3      	lsrs	r3, r6
 8000c92:	4699      	mov	r9, r3
 8000c94:	4653      	mov	r3, sl
 8000c96:	2b20      	cmp	r3, #32
 8000c98:	d00e      	beq.n	8000cb8 <__aeabi_dadd+0x614>
 8000c9a:	2340      	movs	r3, #64	; 0x40
 8000c9c:	4656      	mov	r6, sl
 8000c9e:	1b9b      	subs	r3, r3, r6
 8000ca0:	409c      	lsls	r4, r3
 8000ca2:	4327      	orrs	r7, r4
 8000ca4:	1e7c      	subs	r4, r7, #1
 8000ca6:	41a7      	sbcs	r7, r4
 8000ca8:	464b      	mov	r3, r9
 8000caa:	2400      	movs	r4, #0
 8000cac:	431f      	orrs	r7, r3
 8000cae:	e75f      	b.n	8000b70 <__aeabi_dadd+0x4cc>
 8000cb0:	2400      	movs	r4, #0
 8000cb2:	e7d2      	b.n	8000c5a <__aeabi_dadd+0x5b6>
 8000cb4:	0017      	movs	r7, r2
 8000cb6:	e5b2      	b.n	800081e <__aeabi_dadd+0x17a>
 8000cb8:	2400      	movs	r4, #0
 8000cba:	e7f2      	b.n	8000ca2 <__aeabi_dadd+0x5fe>
 8000cbc:	000007ff 	.word	0x000007ff
 8000cc0:	ff7fffff 	.word	0xff7fffff

08000cc4 <__aeabi_ddiv>:
 8000cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cc6:	4657      	mov	r7, sl
 8000cc8:	4645      	mov	r5, r8
 8000cca:	46de      	mov	lr, fp
 8000ccc:	464e      	mov	r6, r9
 8000cce:	b5e0      	push	{r5, r6, r7, lr}
 8000cd0:	004c      	lsls	r4, r1, #1
 8000cd2:	030e      	lsls	r6, r1, #12
 8000cd4:	b087      	sub	sp, #28
 8000cd6:	4683      	mov	fp, r0
 8000cd8:	4692      	mov	sl, r2
 8000cda:	001d      	movs	r5, r3
 8000cdc:	4680      	mov	r8, r0
 8000cde:	0b36      	lsrs	r6, r6, #12
 8000ce0:	0d64      	lsrs	r4, r4, #21
 8000ce2:	0fcf      	lsrs	r7, r1, #31
 8000ce4:	2c00      	cmp	r4, #0
 8000ce6:	d04f      	beq.n	8000d88 <__aeabi_ddiv+0xc4>
 8000ce8:	4b6f      	ldr	r3, [pc, #444]	; (8000ea8 <__aeabi_ddiv+0x1e4>)
 8000cea:	429c      	cmp	r4, r3
 8000cec:	d035      	beq.n	8000d5a <__aeabi_ddiv+0x96>
 8000cee:	2380      	movs	r3, #128	; 0x80
 8000cf0:	0f42      	lsrs	r2, r0, #29
 8000cf2:	041b      	lsls	r3, r3, #16
 8000cf4:	00f6      	lsls	r6, r6, #3
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	4333      	orrs	r3, r6
 8000cfa:	4699      	mov	r9, r3
 8000cfc:	00c3      	lsls	r3, r0, #3
 8000cfe:	4698      	mov	r8, r3
 8000d00:	4b6a      	ldr	r3, [pc, #424]	; (8000eac <__aeabi_ddiv+0x1e8>)
 8000d02:	2600      	movs	r6, #0
 8000d04:	469c      	mov	ip, r3
 8000d06:	2300      	movs	r3, #0
 8000d08:	4464      	add	r4, ip
 8000d0a:	9303      	str	r3, [sp, #12]
 8000d0c:	032b      	lsls	r3, r5, #12
 8000d0e:	0b1b      	lsrs	r3, r3, #12
 8000d10:	469b      	mov	fp, r3
 8000d12:	006b      	lsls	r3, r5, #1
 8000d14:	0fed      	lsrs	r5, r5, #31
 8000d16:	4650      	mov	r0, sl
 8000d18:	0d5b      	lsrs	r3, r3, #21
 8000d1a:	9501      	str	r5, [sp, #4]
 8000d1c:	d05e      	beq.n	8000ddc <__aeabi_ddiv+0x118>
 8000d1e:	4a62      	ldr	r2, [pc, #392]	; (8000ea8 <__aeabi_ddiv+0x1e4>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d053      	beq.n	8000dcc <__aeabi_ddiv+0x108>
 8000d24:	465a      	mov	r2, fp
 8000d26:	00d1      	lsls	r1, r2, #3
 8000d28:	2280      	movs	r2, #128	; 0x80
 8000d2a:	0f40      	lsrs	r0, r0, #29
 8000d2c:	0412      	lsls	r2, r2, #16
 8000d2e:	4302      	orrs	r2, r0
 8000d30:	430a      	orrs	r2, r1
 8000d32:	4693      	mov	fp, r2
 8000d34:	4652      	mov	r2, sl
 8000d36:	00d1      	lsls	r1, r2, #3
 8000d38:	4a5c      	ldr	r2, [pc, #368]	; (8000eac <__aeabi_ddiv+0x1e8>)
 8000d3a:	4694      	mov	ip, r2
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4463      	add	r3, ip
 8000d40:	0038      	movs	r0, r7
 8000d42:	4068      	eors	r0, r5
 8000d44:	4684      	mov	ip, r0
 8000d46:	9002      	str	r0, [sp, #8]
 8000d48:	1ae4      	subs	r4, r4, r3
 8000d4a:	4316      	orrs	r6, r2
 8000d4c:	2e0f      	cmp	r6, #15
 8000d4e:	d900      	bls.n	8000d52 <__aeabi_ddiv+0x8e>
 8000d50:	e0b4      	b.n	8000ebc <__aeabi_ddiv+0x1f8>
 8000d52:	4b57      	ldr	r3, [pc, #348]	; (8000eb0 <__aeabi_ddiv+0x1ec>)
 8000d54:	00b6      	lsls	r6, r6, #2
 8000d56:	599b      	ldr	r3, [r3, r6]
 8000d58:	469f      	mov	pc, r3
 8000d5a:	0003      	movs	r3, r0
 8000d5c:	4333      	orrs	r3, r6
 8000d5e:	4699      	mov	r9, r3
 8000d60:	d16c      	bne.n	8000e3c <__aeabi_ddiv+0x178>
 8000d62:	2300      	movs	r3, #0
 8000d64:	4698      	mov	r8, r3
 8000d66:	3302      	adds	r3, #2
 8000d68:	2608      	movs	r6, #8
 8000d6a:	9303      	str	r3, [sp, #12]
 8000d6c:	e7ce      	b.n	8000d0c <__aeabi_ddiv+0x48>
 8000d6e:	46cb      	mov	fp, r9
 8000d70:	4641      	mov	r1, r8
 8000d72:	9a03      	ldr	r2, [sp, #12]
 8000d74:	9701      	str	r7, [sp, #4]
 8000d76:	2a02      	cmp	r2, #2
 8000d78:	d165      	bne.n	8000e46 <__aeabi_ddiv+0x182>
 8000d7a:	9b01      	ldr	r3, [sp, #4]
 8000d7c:	4c4a      	ldr	r4, [pc, #296]	; (8000ea8 <__aeabi_ddiv+0x1e4>)
 8000d7e:	469c      	mov	ip, r3
 8000d80:	2300      	movs	r3, #0
 8000d82:	2200      	movs	r2, #0
 8000d84:	4698      	mov	r8, r3
 8000d86:	e06b      	b.n	8000e60 <__aeabi_ddiv+0x19c>
 8000d88:	0003      	movs	r3, r0
 8000d8a:	4333      	orrs	r3, r6
 8000d8c:	4699      	mov	r9, r3
 8000d8e:	d04e      	beq.n	8000e2e <__aeabi_ddiv+0x16a>
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d100      	bne.n	8000d96 <__aeabi_ddiv+0xd2>
 8000d94:	e1bc      	b.n	8001110 <__aeabi_ddiv+0x44c>
 8000d96:	0030      	movs	r0, r6
 8000d98:	f001 fa2c 	bl	80021f4 <__clzsi2>
 8000d9c:	0003      	movs	r3, r0
 8000d9e:	3b0b      	subs	r3, #11
 8000da0:	2b1c      	cmp	r3, #28
 8000da2:	dd00      	ble.n	8000da6 <__aeabi_ddiv+0xe2>
 8000da4:	e1ac      	b.n	8001100 <__aeabi_ddiv+0x43c>
 8000da6:	221d      	movs	r2, #29
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	465a      	mov	r2, fp
 8000dac:	0001      	movs	r1, r0
 8000dae:	40da      	lsrs	r2, r3
 8000db0:	3908      	subs	r1, #8
 8000db2:	408e      	lsls	r6, r1
 8000db4:	0013      	movs	r3, r2
 8000db6:	4333      	orrs	r3, r6
 8000db8:	4699      	mov	r9, r3
 8000dba:	465b      	mov	r3, fp
 8000dbc:	408b      	lsls	r3, r1
 8000dbe:	4698      	mov	r8, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	4c3c      	ldr	r4, [pc, #240]	; (8000eb4 <__aeabi_ddiv+0x1f0>)
 8000dc4:	2600      	movs	r6, #0
 8000dc6:	1a24      	subs	r4, r4, r0
 8000dc8:	9303      	str	r3, [sp, #12]
 8000dca:	e79f      	b.n	8000d0c <__aeabi_ddiv+0x48>
 8000dcc:	4651      	mov	r1, sl
 8000dce:	465a      	mov	r2, fp
 8000dd0:	4311      	orrs	r1, r2
 8000dd2:	d129      	bne.n	8000e28 <__aeabi_ddiv+0x164>
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	4693      	mov	fp, r2
 8000dd8:	3202      	adds	r2, #2
 8000dda:	e7b1      	b.n	8000d40 <__aeabi_ddiv+0x7c>
 8000ddc:	4659      	mov	r1, fp
 8000dde:	4301      	orrs	r1, r0
 8000de0:	d01e      	beq.n	8000e20 <__aeabi_ddiv+0x15c>
 8000de2:	465b      	mov	r3, fp
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d100      	bne.n	8000dea <__aeabi_ddiv+0x126>
 8000de8:	e19e      	b.n	8001128 <__aeabi_ddiv+0x464>
 8000dea:	4658      	mov	r0, fp
 8000dec:	f001 fa02 	bl	80021f4 <__clzsi2>
 8000df0:	0003      	movs	r3, r0
 8000df2:	3b0b      	subs	r3, #11
 8000df4:	2b1c      	cmp	r3, #28
 8000df6:	dd00      	ble.n	8000dfa <__aeabi_ddiv+0x136>
 8000df8:	e18f      	b.n	800111a <__aeabi_ddiv+0x456>
 8000dfa:	0002      	movs	r2, r0
 8000dfc:	4659      	mov	r1, fp
 8000dfe:	3a08      	subs	r2, #8
 8000e00:	4091      	lsls	r1, r2
 8000e02:	468b      	mov	fp, r1
 8000e04:	211d      	movs	r1, #29
 8000e06:	1acb      	subs	r3, r1, r3
 8000e08:	4651      	mov	r1, sl
 8000e0a:	40d9      	lsrs	r1, r3
 8000e0c:	000b      	movs	r3, r1
 8000e0e:	4659      	mov	r1, fp
 8000e10:	430b      	orrs	r3, r1
 8000e12:	4651      	mov	r1, sl
 8000e14:	469b      	mov	fp, r3
 8000e16:	4091      	lsls	r1, r2
 8000e18:	4b26      	ldr	r3, [pc, #152]	; (8000eb4 <__aeabi_ddiv+0x1f0>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	1a1b      	subs	r3, r3, r0
 8000e1e:	e78f      	b.n	8000d40 <__aeabi_ddiv+0x7c>
 8000e20:	2300      	movs	r3, #0
 8000e22:	2201      	movs	r2, #1
 8000e24:	469b      	mov	fp, r3
 8000e26:	e78b      	b.n	8000d40 <__aeabi_ddiv+0x7c>
 8000e28:	4651      	mov	r1, sl
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	e788      	b.n	8000d40 <__aeabi_ddiv+0x7c>
 8000e2e:	2300      	movs	r3, #0
 8000e30:	4698      	mov	r8, r3
 8000e32:	3301      	adds	r3, #1
 8000e34:	2604      	movs	r6, #4
 8000e36:	2400      	movs	r4, #0
 8000e38:	9303      	str	r3, [sp, #12]
 8000e3a:	e767      	b.n	8000d0c <__aeabi_ddiv+0x48>
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	46b1      	mov	r9, r6
 8000e40:	9303      	str	r3, [sp, #12]
 8000e42:	260c      	movs	r6, #12
 8000e44:	e762      	b.n	8000d0c <__aeabi_ddiv+0x48>
 8000e46:	2a03      	cmp	r2, #3
 8000e48:	d100      	bne.n	8000e4c <__aeabi_ddiv+0x188>
 8000e4a:	e25c      	b.n	8001306 <__aeabi_ddiv+0x642>
 8000e4c:	9b01      	ldr	r3, [sp, #4]
 8000e4e:	2a01      	cmp	r2, #1
 8000e50:	d000      	beq.n	8000e54 <__aeabi_ddiv+0x190>
 8000e52:	e1e4      	b.n	800121e <__aeabi_ddiv+0x55a>
 8000e54:	4013      	ands	r3, r2
 8000e56:	469c      	mov	ip, r3
 8000e58:	2300      	movs	r3, #0
 8000e5a:	2400      	movs	r4, #0
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	4698      	mov	r8, r3
 8000e60:	2100      	movs	r1, #0
 8000e62:	0312      	lsls	r2, r2, #12
 8000e64:	0b13      	lsrs	r3, r2, #12
 8000e66:	0d0a      	lsrs	r2, r1, #20
 8000e68:	0512      	lsls	r2, r2, #20
 8000e6a:	431a      	orrs	r2, r3
 8000e6c:	0523      	lsls	r3, r4, #20
 8000e6e:	4c12      	ldr	r4, [pc, #72]	; (8000eb8 <__aeabi_ddiv+0x1f4>)
 8000e70:	4640      	mov	r0, r8
 8000e72:	4022      	ands	r2, r4
 8000e74:	4313      	orrs	r3, r2
 8000e76:	4662      	mov	r2, ip
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	07d2      	lsls	r2, r2, #31
 8000e7c:	085b      	lsrs	r3, r3, #1
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	0019      	movs	r1, r3
 8000e82:	b007      	add	sp, #28
 8000e84:	bc3c      	pop	{r2, r3, r4, r5}
 8000e86:	4690      	mov	r8, r2
 8000e88:	4699      	mov	r9, r3
 8000e8a:	46a2      	mov	sl, r4
 8000e8c:	46ab      	mov	fp, r5
 8000e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e90:	2300      	movs	r3, #0
 8000e92:	2280      	movs	r2, #128	; 0x80
 8000e94:	469c      	mov	ip, r3
 8000e96:	0312      	lsls	r2, r2, #12
 8000e98:	4698      	mov	r8, r3
 8000e9a:	4c03      	ldr	r4, [pc, #12]	; (8000ea8 <__aeabi_ddiv+0x1e4>)
 8000e9c:	e7e0      	b.n	8000e60 <__aeabi_ddiv+0x19c>
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	4c01      	ldr	r4, [pc, #4]	; (8000ea8 <__aeabi_ddiv+0x1e4>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	4698      	mov	r8, r3
 8000ea6:	e7db      	b.n	8000e60 <__aeabi_ddiv+0x19c>
 8000ea8:	000007ff 	.word	0x000007ff
 8000eac:	fffffc01 	.word	0xfffffc01
 8000eb0:	0800e6c0 	.word	0x0800e6c0
 8000eb4:	fffffc0d 	.word	0xfffffc0d
 8000eb8:	800fffff 	.word	0x800fffff
 8000ebc:	45d9      	cmp	r9, fp
 8000ebe:	d900      	bls.n	8000ec2 <__aeabi_ddiv+0x1fe>
 8000ec0:	e139      	b.n	8001136 <__aeabi_ddiv+0x472>
 8000ec2:	d100      	bne.n	8000ec6 <__aeabi_ddiv+0x202>
 8000ec4:	e134      	b.n	8001130 <__aeabi_ddiv+0x46c>
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	4646      	mov	r6, r8
 8000eca:	464d      	mov	r5, r9
 8000ecc:	469a      	mov	sl, r3
 8000ece:	3c01      	subs	r4, #1
 8000ed0:	465b      	mov	r3, fp
 8000ed2:	0e0a      	lsrs	r2, r1, #24
 8000ed4:	021b      	lsls	r3, r3, #8
 8000ed6:	431a      	orrs	r2, r3
 8000ed8:	020b      	lsls	r3, r1, #8
 8000eda:	0c17      	lsrs	r7, r2, #16
 8000edc:	9303      	str	r3, [sp, #12]
 8000ede:	0413      	lsls	r3, r2, #16
 8000ee0:	0c1b      	lsrs	r3, r3, #16
 8000ee2:	0039      	movs	r1, r7
 8000ee4:	0028      	movs	r0, r5
 8000ee6:	4690      	mov	r8, r2
 8000ee8:	9301      	str	r3, [sp, #4]
 8000eea:	f7ff f929 	bl	8000140 <__udivsi3>
 8000eee:	0002      	movs	r2, r0
 8000ef0:	9b01      	ldr	r3, [sp, #4]
 8000ef2:	4683      	mov	fp, r0
 8000ef4:	435a      	muls	r2, r3
 8000ef6:	0028      	movs	r0, r5
 8000ef8:	0039      	movs	r1, r7
 8000efa:	4691      	mov	r9, r2
 8000efc:	f7ff f9a6 	bl	800024c <__aeabi_uidivmod>
 8000f00:	0c35      	lsrs	r5, r6, #16
 8000f02:	0409      	lsls	r1, r1, #16
 8000f04:	430d      	orrs	r5, r1
 8000f06:	45a9      	cmp	r9, r5
 8000f08:	d90d      	bls.n	8000f26 <__aeabi_ddiv+0x262>
 8000f0a:	465b      	mov	r3, fp
 8000f0c:	4445      	add	r5, r8
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	45a8      	cmp	r8, r5
 8000f12:	d900      	bls.n	8000f16 <__aeabi_ddiv+0x252>
 8000f14:	e13a      	b.n	800118c <__aeabi_ddiv+0x4c8>
 8000f16:	45a9      	cmp	r9, r5
 8000f18:	d800      	bhi.n	8000f1c <__aeabi_ddiv+0x258>
 8000f1a:	e137      	b.n	800118c <__aeabi_ddiv+0x4c8>
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	425b      	negs	r3, r3
 8000f20:	469c      	mov	ip, r3
 8000f22:	4445      	add	r5, r8
 8000f24:	44e3      	add	fp, ip
 8000f26:	464b      	mov	r3, r9
 8000f28:	1aeb      	subs	r3, r5, r3
 8000f2a:	0039      	movs	r1, r7
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	9304      	str	r3, [sp, #16]
 8000f30:	f7ff f906 	bl	8000140 <__udivsi3>
 8000f34:	9b01      	ldr	r3, [sp, #4]
 8000f36:	0005      	movs	r5, r0
 8000f38:	4343      	muls	r3, r0
 8000f3a:	0039      	movs	r1, r7
 8000f3c:	9804      	ldr	r0, [sp, #16]
 8000f3e:	4699      	mov	r9, r3
 8000f40:	f7ff f984 	bl	800024c <__aeabi_uidivmod>
 8000f44:	0433      	lsls	r3, r6, #16
 8000f46:	0409      	lsls	r1, r1, #16
 8000f48:	0c1b      	lsrs	r3, r3, #16
 8000f4a:	430b      	orrs	r3, r1
 8000f4c:	4599      	cmp	r9, r3
 8000f4e:	d909      	bls.n	8000f64 <__aeabi_ddiv+0x2a0>
 8000f50:	4443      	add	r3, r8
 8000f52:	1e6a      	subs	r2, r5, #1
 8000f54:	4598      	cmp	r8, r3
 8000f56:	d900      	bls.n	8000f5a <__aeabi_ddiv+0x296>
 8000f58:	e11a      	b.n	8001190 <__aeabi_ddiv+0x4cc>
 8000f5a:	4599      	cmp	r9, r3
 8000f5c:	d800      	bhi.n	8000f60 <__aeabi_ddiv+0x29c>
 8000f5e:	e117      	b.n	8001190 <__aeabi_ddiv+0x4cc>
 8000f60:	3d02      	subs	r5, #2
 8000f62:	4443      	add	r3, r8
 8000f64:	464a      	mov	r2, r9
 8000f66:	1a9b      	subs	r3, r3, r2
 8000f68:	465a      	mov	r2, fp
 8000f6a:	0412      	lsls	r2, r2, #16
 8000f6c:	432a      	orrs	r2, r5
 8000f6e:	9903      	ldr	r1, [sp, #12]
 8000f70:	4693      	mov	fp, r2
 8000f72:	0c10      	lsrs	r0, r2, #16
 8000f74:	0c0a      	lsrs	r2, r1, #16
 8000f76:	4691      	mov	r9, r2
 8000f78:	0409      	lsls	r1, r1, #16
 8000f7a:	465a      	mov	r2, fp
 8000f7c:	0c09      	lsrs	r1, r1, #16
 8000f7e:	464e      	mov	r6, r9
 8000f80:	000d      	movs	r5, r1
 8000f82:	0412      	lsls	r2, r2, #16
 8000f84:	0c12      	lsrs	r2, r2, #16
 8000f86:	4345      	muls	r5, r0
 8000f88:	9105      	str	r1, [sp, #20]
 8000f8a:	4351      	muls	r1, r2
 8000f8c:	4372      	muls	r2, r6
 8000f8e:	4370      	muls	r0, r6
 8000f90:	1952      	adds	r2, r2, r5
 8000f92:	0c0e      	lsrs	r6, r1, #16
 8000f94:	18b2      	adds	r2, r6, r2
 8000f96:	4295      	cmp	r5, r2
 8000f98:	d903      	bls.n	8000fa2 <__aeabi_ddiv+0x2de>
 8000f9a:	2580      	movs	r5, #128	; 0x80
 8000f9c:	026d      	lsls	r5, r5, #9
 8000f9e:	46ac      	mov	ip, r5
 8000fa0:	4460      	add	r0, ip
 8000fa2:	0c15      	lsrs	r5, r2, #16
 8000fa4:	0409      	lsls	r1, r1, #16
 8000fa6:	0412      	lsls	r2, r2, #16
 8000fa8:	0c09      	lsrs	r1, r1, #16
 8000faa:	1828      	adds	r0, r5, r0
 8000fac:	1852      	adds	r2, r2, r1
 8000fae:	4283      	cmp	r3, r0
 8000fb0:	d200      	bcs.n	8000fb4 <__aeabi_ddiv+0x2f0>
 8000fb2:	e0ce      	b.n	8001152 <__aeabi_ddiv+0x48e>
 8000fb4:	d100      	bne.n	8000fb8 <__aeabi_ddiv+0x2f4>
 8000fb6:	e0c8      	b.n	800114a <__aeabi_ddiv+0x486>
 8000fb8:	1a1d      	subs	r5, r3, r0
 8000fba:	4653      	mov	r3, sl
 8000fbc:	1a9e      	subs	r6, r3, r2
 8000fbe:	45b2      	cmp	sl, r6
 8000fc0:	4192      	sbcs	r2, r2
 8000fc2:	4252      	negs	r2, r2
 8000fc4:	1aab      	subs	r3, r5, r2
 8000fc6:	469a      	mov	sl, r3
 8000fc8:	4598      	cmp	r8, r3
 8000fca:	d100      	bne.n	8000fce <__aeabi_ddiv+0x30a>
 8000fcc:	e117      	b.n	80011fe <__aeabi_ddiv+0x53a>
 8000fce:	0039      	movs	r1, r7
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f7ff f8b5 	bl	8000140 <__udivsi3>
 8000fd6:	9b01      	ldr	r3, [sp, #4]
 8000fd8:	0005      	movs	r5, r0
 8000fda:	4343      	muls	r3, r0
 8000fdc:	0039      	movs	r1, r7
 8000fde:	4650      	mov	r0, sl
 8000fe0:	9304      	str	r3, [sp, #16]
 8000fe2:	f7ff f933 	bl	800024c <__aeabi_uidivmod>
 8000fe6:	9804      	ldr	r0, [sp, #16]
 8000fe8:	040b      	lsls	r3, r1, #16
 8000fea:	0c31      	lsrs	r1, r6, #16
 8000fec:	4319      	orrs	r1, r3
 8000fee:	4288      	cmp	r0, r1
 8000ff0:	d909      	bls.n	8001006 <__aeabi_ddiv+0x342>
 8000ff2:	4441      	add	r1, r8
 8000ff4:	1e6b      	subs	r3, r5, #1
 8000ff6:	4588      	cmp	r8, r1
 8000ff8:	d900      	bls.n	8000ffc <__aeabi_ddiv+0x338>
 8000ffa:	e107      	b.n	800120c <__aeabi_ddiv+0x548>
 8000ffc:	4288      	cmp	r0, r1
 8000ffe:	d800      	bhi.n	8001002 <__aeabi_ddiv+0x33e>
 8001000:	e104      	b.n	800120c <__aeabi_ddiv+0x548>
 8001002:	3d02      	subs	r5, #2
 8001004:	4441      	add	r1, r8
 8001006:	9b04      	ldr	r3, [sp, #16]
 8001008:	1acb      	subs	r3, r1, r3
 800100a:	0018      	movs	r0, r3
 800100c:	0039      	movs	r1, r7
 800100e:	9304      	str	r3, [sp, #16]
 8001010:	f7ff f896 	bl	8000140 <__udivsi3>
 8001014:	9b01      	ldr	r3, [sp, #4]
 8001016:	4682      	mov	sl, r0
 8001018:	4343      	muls	r3, r0
 800101a:	0039      	movs	r1, r7
 800101c:	9804      	ldr	r0, [sp, #16]
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	f7ff f914 	bl	800024c <__aeabi_uidivmod>
 8001024:	9801      	ldr	r0, [sp, #4]
 8001026:	040b      	lsls	r3, r1, #16
 8001028:	0431      	lsls	r1, r6, #16
 800102a:	0c09      	lsrs	r1, r1, #16
 800102c:	4319      	orrs	r1, r3
 800102e:	4288      	cmp	r0, r1
 8001030:	d90d      	bls.n	800104e <__aeabi_ddiv+0x38a>
 8001032:	4653      	mov	r3, sl
 8001034:	4441      	add	r1, r8
 8001036:	3b01      	subs	r3, #1
 8001038:	4588      	cmp	r8, r1
 800103a:	d900      	bls.n	800103e <__aeabi_ddiv+0x37a>
 800103c:	e0e8      	b.n	8001210 <__aeabi_ddiv+0x54c>
 800103e:	4288      	cmp	r0, r1
 8001040:	d800      	bhi.n	8001044 <__aeabi_ddiv+0x380>
 8001042:	e0e5      	b.n	8001210 <__aeabi_ddiv+0x54c>
 8001044:	2302      	movs	r3, #2
 8001046:	425b      	negs	r3, r3
 8001048:	469c      	mov	ip, r3
 800104a:	4441      	add	r1, r8
 800104c:	44e2      	add	sl, ip
 800104e:	9b01      	ldr	r3, [sp, #4]
 8001050:	042d      	lsls	r5, r5, #16
 8001052:	1ace      	subs	r6, r1, r3
 8001054:	4651      	mov	r1, sl
 8001056:	4329      	orrs	r1, r5
 8001058:	9d05      	ldr	r5, [sp, #20]
 800105a:	464f      	mov	r7, r9
 800105c:	002a      	movs	r2, r5
 800105e:	040b      	lsls	r3, r1, #16
 8001060:	0c08      	lsrs	r0, r1, #16
 8001062:	0c1b      	lsrs	r3, r3, #16
 8001064:	435a      	muls	r2, r3
 8001066:	4345      	muls	r5, r0
 8001068:	437b      	muls	r3, r7
 800106a:	4378      	muls	r0, r7
 800106c:	195b      	adds	r3, r3, r5
 800106e:	0c17      	lsrs	r7, r2, #16
 8001070:	18fb      	adds	r3, r7, r3
 8001072:	429d      	cmp	r5, r3
 8001074:	d903      	bls.n	800107e <__aeabi_ddiv+0x3ba>
 8001076:	2580      	movs	r5, #128	; 0x80
 8001078:	026d      	lsls	r5, r5, #9
 800107a:	46ac      	mov	ip, r5
 800107c:	4460      	add	r0, ip
 800107e:	0c1d      	lsrs	r5, r3, #16
 8001080:	0412      	lsls	r2, r2, #16
 8001082:	041b      	lsls	r3, r3, #16
 8001084:	0c12      	lsrs	r2, r2, #16
 8001086:	1828      	adds	r0, r5, r0
 8001088:	189b      	adds	r3, r3, r2
 800108a:	4286      	cmp	r6, r0
 800108c:	d200      	bcs.n	8001090 <__aeabi_ddiv+0x3cc>
 800108e:	e093      	b.n	80011b8 <__aeabi_ddiv+0x4f4>
 8001090:	d100      	bne.n	8001094 <__aeabi_ddiv+0x3d0>
 8001092:	e08e      	b.n	80011b2 <__aeabi_ddiv+0x4ee>
 8001094:	2301      	movs	r3, #1
 8001096:	4319      	orrs	r1, r3
 8001098:	4ba0      	ldr	r3, [pc, #640]	; (800131c <__aeabi_ddiv+0x658>)
 800109a:	18e3      	adds	r3, r4, r3
 800109c:	2b00      	cmp	r3, #0
 800109e:	dc00      	bgt.n	80010a2 <__aeabi_ddiv+0x3de>
 80010a0:	e099      	b.n	80011d6 <__aeabi_ddiv+0x512>
 80010a2:	074a      	lsls	r2, r1, #29
 80010a4:	d000      	beq.n	80010a8 <__aeabi_ddiv+0x3e4>
 80010a6:	e09e      	b.n	80011e6 <__aeabi_ddiv+0x522>
 80010a8:	465a      	mov	r2, fp
 80010aa:	01d2      	lsls	r2, r2, #7
 80010ac:	d506      	bpl.n	80010bc <__aeabi_ddiv+0x3f8>
 80010ae:	465a      	mov	r2, fp
 80010b0:	4b9b      	ldr	r3, [pc, #620]	; (8001320 <__aeabi_ddiv+0x65c>)
 80010b2:	401a      	ands	r2, r3
 80010b4:	2380      	movs	r3, #128	; 0x80
 80010b6:	4693      	mov	fp, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	18e3      	adds	r3, r4, r3
 80010bc:	4a99      	ldr	r2, [pc, #612]	; (8001324 <__aeabi_ddiv+0x660>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	dd68      	ble.n	8001194 <__aeabi_ddiv+0x4d0>
 80010c2:	2301      	movs	r3, #1
 80010c4:	9a02      	ldr	r2, [sp, #8]
 80010c6:	4c98      	ldr	r4, [pc, #608]	; (8001328 <__aeabi_ddiv+0x664>)
 80010c8:	401a      	ands	r2, r3
 80010ca:	2300      	movs	r3, #0
 80010cc:	4694      	mov	ip, r2
 80010ce:	4698      	mov	r8, r3
 80010d0:	2200      	movs	r2, #0
 80010d2:	e6c5      	b.n	8000e60 <__aeabi_ddiv+0x19c>
 80010d4:	2280      	movs	r2, #128	; 0x80
 80010d6:	464b      	mov	r3, r9
 80010d8:	0312      	lsls	r2, r2, #12
 80010da:	4213      	tst	r3, r2
 80010dc:	d00a      	beq.n	80010f4 <__aeabi_ddiv+0x430>
 80010de:	465b      	mov	r3, fp
 80010e0:	4213      	tst	r3, r2
 80010e2:	d106      	bne.n	80010f2 <__aeabi_ddiv+0x42e>
 80010e4:	431a      	orrs	r2, r3
 80010e6:	0312      	lsls	r2, r2, #12
 80010e8:	0b12      	lsrs	r2, r2, #12
 80010ea:	46ac      	mov	ip, r5
 80010ec:	4688      	mov	r8, r1
 80010ee:	4c8e      	ldr	r4, [pc, #568]	; (8001328 <__aeabi_ddiv+0x664>)
 80010f0:	e6b6      	b.n	8000e60 <__aeabi_ddiv+0x19c>
 80010f2:	464b      	mov	r3, r9
 80010f4:	431a      	orrs	r2, r3
 80010f6:	0312      	lsls	r2, r2, #12
 80010f8:	0b12      	lsrs	r2, r2, #12
 80010fa:	46bc      	mov	ip, r7
 80010fc:	4c8a      	ldr	r4, [pc, #552]	; (8001328 <__aeabi_ddiv+0x664>)
 80010fe:	e6af      	b.n	8000e60 <__aeabi_ddiv+0x19c>
 8001100:	0003      	movs	r3, r0
 8001102:	465a      	mov	r2, fp
 8001104:	3b28      	subs	r3, #40	; 0x28
 8001106:	409a      	lsls	r2, r3
 8001108:	2300      	movs	r3, #0
 800110a:	4691      	mov	r9, r2
 800110c:	4698      	mov	r8, r3
 800110e:	e657      	b.n	8000dc0 <__aeabi_ddiv+0xfc>
 8001110:	4658      	mov	r0, fp
 8001112:	f001 f86f 	bl	80021f4 <__clzsi2>
 8001116:	3020      	adds	r0, #32
 8001118:	e640      	b.n	8000d9c <__aeabi_ddiv+0xd8>
 800111a:	0003      	movs	r3, r0
 800111c:	4652      	mov	r2, sl
 800111e:	3b28      	subs	r3, #40	; 0x28
 8001120:	409a      	lsls	r2, r3
 8001122:	2100      	movs	r1, #0
 8001124:	4693      	mov	fp, r2
 8001126:	e677      	b.n	8000e18 <__aeabi_ddiv+0x154>
 8001128:	f001 f864 	bl	80021f4 <__clzsi2>
 800112c:	3020      	adds	r0, #32
 800112e:	e65f      	b.n	8000df0 <__aeabi_ddiv+0x12c>
 8001130:	4588      	cmp	r8, r1
 8001132:	d200      	bcs.n	8001136 <__aeabi_ddiv+0x472>
 8001134:	e6c7      	b.n	8000ec6 <__aeabi_ddiv+0x202>
 8001136:	464b      	mov	r3, r9
 8001138:	07de      	lsls	r6, r3, #31
 800113a:	085d      	lsrs	r5, r3, #1
 800113c:	4643      	mov	r3, r8
 800113e:	085b      	lsrs	r3, r3, #1
 8001140:	431e      	orrs	r6, r3
 8001142:	4643      	mov	r3, r8
 8001144:	07db      	lsls	r3, r3, #31
 8001146:	469a      	mov	sl, r3
 8001148:	e6c2      	b.n	8000ed0 <__aeabi_ddiv+0x20c>
 800114a:	2500      	movs	r5, #0
 800114c:	4592      	cmp	sl, r2
 800114e:	d300      	bcc.n	8001152 <__aeabi_ddiv+0x48e>
 8001150:	e733      	b.n	8000fba <__aeabi_ddiv+0x2f6>
 8001152:	9e03      	ldr	r6, [sp, #12]
 8001154:	4659      	mov	r1, fp
 8001156:	46b4      	mov	ip, r6
 8001158:	44e2      	add	sl, ip
 800115a:	45b2      	cmp	sl, r6
 800115c:	41ad      	sbcs	r5, r5
 800115e:	426d      	negs	r5, r5
 8001160:	4445      	add	r5, r8
 8001162:	18eb      	adds	r3, r5, r3
 8001164:	3901      	subs	r1, #1
 8001166:	4598      	cmp	r8, r3
 8001168:	d207      	bcs.n	800117a <__aeabi_ddiv+0x4b6>
 800116a:	4298      	cmp	r0, r3
 800116c:	d900      	bls.n	8001170 <__aeabi_ddiv+0x4ac>
 800116e:	e07f      	b.n	8001270 <__aeabi_ddiv+0x5ac>
 8001170:	d100      	bne.n	8001174 <__aeabi_ddiv+0x4b0>
 8001172:	e0bc      	b.n	80012ee <__aeabi_ddiv+0x62a>
 8001174:	1a1d      	subs	r5, r3, r0
 8001176:	468b      	mov	fp, r1
 8001178:	e71f      	b.n	8000fba <__aeabi_ddiv+0x2f6>
 800117a:	4598      	cmp	r8, r3
 800117c:	d1fa      	bne.n	8001174 <__aeabi_ddiv+0x4b0>
 800117e:	9d03      	ldr	r5, [sp, #12]
 8001180:	4555      	cmp	r5, sl
 8001182:	d9f2      	bls.n	800116a <__aeabi_ddiv+0x4a6>
 8001184:	4643      	mov	r3, r8
 8001186:	468b      	mov	fp, r1
 8001188:	1a1d      	subs	r5, r3, r0
 800118a:	e716      	b.n	8000fba <__aeabi_ddiv+0x2f6>
 800118c:	469b      	mov	fp, r3
 800118e:	e6ca      	b.n	8000f26 <__aeabi_ddiv+0x262>
 8001190:	0015      	movs	r5, r2
 8001192:	e6e7      	b.n	8000f64 <__aeabi_ddiv+0x2a0>
 8001194:	465a      	mov	r2, fp
 8001196:	08c9      	lsrs	r1, r1, #3
 8001198:	0752      	lsls	r2, r2, #29
 800119a:	430a      	orrs	r2, r1
 800119c:	055b      	lsls	r3, r3, #21
 800119e:	4690      	mov	r8, r2
 80011a0:	0d5c      	lsrs	r4, r3, #21
 80011a2:	465a      	mov	r2, fp
 80011a4:	2301      	movs	r3, #1
 80011a6:	9902      	ldr	r1, [sp, #8]
 80011a8:	0252      	lsls	r2, r2, #9
 80011aa:	4019      	ands	r1, r3
 80011ac:	0b12      	lsrs	r2, r2, #12
 80011ae:	468c      	mov	ip, r1
 80011b0:	e656      	b.n	8000e60 <__aeabi_ddiv+0x19c>
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d100      	bne.n	80011b8 <__aeabi_ddiv+0x4f4>
 80011b6:	e76f      	b.n	8001098 <__aeabi_ddiv+0x3d4>
 80011b8:	4446      	add	r6, r8
 80011ba:	1e4a      	subs	r2, r1, #1
 80011bc:	45b0      	cmp	r8, r6
 80011be:	d929      	bls.n	8001214 <__aeabi_ddiv+0x550>
 80011c0:	0011      	movs	r1, r2
 80011c2:	4286      	cmp	r6, r0
 80011c4:	d000      	beq.n	80011c8 <__aeabi_ddiv+0x504>
 80011c6:	e765      	b.n	8001094 <__aeabi_ddiv+0x3d0>
 80011c8:	9a03      	ldr	r2, [sp, #12]
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d000      	beq.n	80011d0 <__aeabi_ddiv+0x50c>
 80011ce:	e761      	b.n	8001094 <__aeabi_ddiv+0x3d0>
 80011d0:	e762      	b.n	8001098 <__aeabi_ddiv+0x3d4>
 80011d2:	2101      	movs	r1, #1
 80011d4:	4249      	negs	r1, r1
 80011d6:	2001      	movs	r0, #1
 80011d8:	1ac2      	subs	r2, r0, r3
 80011da:	2a38      	cmp	r2, #56	; 0x38
 80011dc:	dd21      	ble.n	8001222 <__aeabi_ddiv+0x55e>
 80011de:	9b02      	ldr	r3, [sp, #8]
 80011e0:	4003      	ands	r3, r0
 80011e2:	469c      	mov	ip, r3
 80011e4:	e638      	b.n	8000e58 <__aeabi_ddiv+0x194>
 80011e6:	220f      	movs	r2, #15
 80011e8:	400a      	ands	r2, r1
 80011ea:	2a04      	cmp	r2, #4
 80011ec:	d100      	bne.n	80011f0 <__aeabi_ddiv+0x52c>
 80011ee:	e75b      	b.n	80010a8 <__aeabi_ddiv+0x3e4>
 80011f0:	000a      	movs	r2, r1
 80011f2:	1d11      	adds	r1, r2, #4
 80011f4:	4291      	cmp	r1, r2
 80011f6:	4192      	sbcs	r2, r2
 80011f8:	4252      	negs	r2, r2
 80011fa:	4493      	add	fp, r2
 80011fc:	e754      	b.n	80010a8 <__aeabi_ddiv+0x3e4>
 80011fe:	4b47      	ldr	r3, [pc, #284]	; (800131c <__aeabi_ddiv+0x658>)
 8001200:	18e3      	adds	r3, r4, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	dde5      	ble.n	80011d2 <__aeabi_ddiv+0x50e>
 8001206:	2201      	movs	r2, #1
 8001208:	4252      	negs	r2, r2
 800120a:	e7f2      	b.n	80011f2 <__aeabi_ddiv+0x52e>
 800120c:	001d      	movs	r5, r3
 800120e:	e6fa      	b.n	8001006 <__aeabi_ddiv+0x342>
 8001210:	469a      	mov	sl, r3
 8001212:	e71c      	b.n	800104e <__aeabi_ddiv+0x38a>
 8001214:	42b0      	cmp	r0, r6
 8001216:	d839      	bhi.n	800128c <__aeabi_ddiv+0x5c8>
 8001218:	d06e      	beq.n	80012f8 <__aeabi_ddiv+0x634>
 800121a:	0011      	movs	r1, r2
 800121c:	e73a      	b.n	8001094 <__aeabi_ddiv+0x3d0>
 800121e:	9302      	str	r3, [sp, #8]
 8001220:	e73a      	b.n	8001098 <__aeabi_ddiv+0x3d4>
 8001222:	2a1f      	cmp	r2, #31
 8001224:	dc3c      	bgt.n	80012a0 <__aeabi_ddiv+0x5dc>
 8001226:	2320      	movs	r3, #32
 8001228:	1a9b      	subs	r3, r3, r2
 800122a:	000c      	movs	r4, r1
 800122c:	4658      	mov	r0, fp
 800122e:	4099      	lsls	r1, r3
 8001230:	4098      	lsls	r0, r3
 8001232:	1e4b      	subs	r3, r1, #1
 8001234:	4199      	sbcs	r1, r3
 8001236:	465b      	mov	r3, fp
 8001238:	40d4      	lsrs	r4, r2
 800123a:	40d3      	lsrs	r3, r2
 800123c:	4320      	orrs	r0, r4
 800123e:	4308      	orrs	r0, r1
 8001240:	001a      	movs	r2, r3
 8001242:	0743      	lsls	r3, r0, #29
 8001244:	d009      	beq.n	800125a <__aeabi_ddiv+0x596>
 8001246:	230f      	movs	r3, #15
 8001248:	4003      	ands	r3, r0
 800124a:	2b04      	cmp	r3, #4
 800124c:	d005      	beq.n	800125a <__aeabi_ddiv+0x596>
 800124e:	0001      	movs	r1, r0
 8001250:	1d08      	adds	r0, r1, #4
 8001252:	4288      	cmp	r0, r1
 8001254:	419b      	sbcs	r3, r3
 8001256:	425b      	negs	r3, r3
 8001258:	18d2      	adds	r2, r2, r3
 800125a:	0213      	lsls	r3, r2, #8
 800125c:	d53a      	bpl.n	80012d4 <__aeabi_ddiv+0x610>
 800125e:	2301      	movs	r3, #1
 8001260:	9a02      	ldr	r2, [sp, #8]
 8001262:	2401      	movs	r4, #1
 8001264:	401a      	ands	r2, r3
 8001266:	2300      	movs	r3, #0
 8001268:	4694      	mov	ip, r2
 800126a:	4698      	mov	r8, r3
 800126c:	2200      	movs	r2, #0
 800126e:	e5f7      	b.n	8000e60 <__aeabi_ddiv+0x19c>
 8001270:	2102      	movs	r1, #2
 8001272:	4249      	negs	r1, r1
 8001274:	468c      	mov	ip, r1
 8001276:	9d03      	ldr	r5, [sp, #12]
 8001278:	44e3      	add	fp, ip
 800127a:	46ac      	mov	ip, r5
 800127c:	44e2      	add	sl, ip
 800127e:	45aa      	cmp	sl, r5
 8001280:	41ad      	sbcs	r5, r5
 8001282:	426d      	negs	r5, r5
 8001284:	4445      	add	r5, r8
 8001286:	18ed      	adds	r5, r5, r3
 8001288:	1a2d      	subs	r5, r5, r0
 800128a:	e696      	b.n	8000fba <__aeabi_ddiv+0x2f6>
 800128c:	1e8a      	subs	r2, r1, #2
 800128e:	9903      	ldr	r1, [sp, #12]
 8001290:	004d      	lsls	r5, r1, #1
 8001292:	428d      	cmp	r5, r1
 8001294:	4189      	sbcs	r1, r1
 8001296:	4249      	negs	r1, r1
 8001298:	4441      	add	r1, r8
 800129a:	1876      	adds	r6, r6, r1
 800129c:	9503      	str	r5, [sp, #12]
 800129e:	e78f      	b.n	80011c0 <__aeabi_ddiv+0x4fc>
 80012a0:	201f      	movs	r0, #31
 80012a2:	4240      	negs	r0, r0
 80012a4:	1ac3      	subs	r3, r0, r3
 80012a6:	4658      	mov	r0, fp
 80012a8:	40d8      	lsrs	r0, r3
 80012aa:	0003      	movs	r3, r0
 80012ac:	2a20      	cmp	r2, #32
 80012ae:	d028      	beq.n	8001302 <__aeabi_ddiv+0x63e>
 80012b0:	2040      	movs	r0, #64	; 0x40
 80012b2:	465d      	mov	r5, fp
 80012b4:	1a82      	subs	r2, r0, r2
 80012b6:	4095      	lsls	r5, r2
 80012b8:	4329      	orrs	r1, r5
 80012ba:	1e4a      	subs	r2, r1, #1
 80012bc:	4191      	sbcs	r1, r2
 80012be:	4319      	orrs	r1, r3
 80012c0:	2307      	movs	r3, #7
 80012c2:	2200      	movs	r2, #0
 80012c4:	400b      	ands	r3, r1
 80012c6:	d009      	beq.n	80012dc <__aeabi_ddiv+0x618>
 80012c8:	230f      	movs	r3, #15
 80012ca:	2200      	movs	r2, #0
 80012cc:	400b      	ands	r3, r1
 80012ce:	0008      	movs	r0, r1
 80012d0:	2b04      	cmp	r3, #4
 80012d2:	d1bd      	bne.n	8001250 <__aeabi_ddiv+0x58c>
 80012d4:	0001      	movs	r1, r0
 80012d6:	0753      	lsls	r3, r2, #29
 80012d8:	0252      	lsls	r2, r2, #9
 80012da:	0b12      	lsrs	r2, r2, #12
 80012dc:	08c9      	lsrs	r1, r1, #3
 80012de:	4319      	orrs	r1, r3
 80012e0:	2301      	movs	r3, #1
 80012e2:	4688      	mov	r8, r1
 80012e4:	9902      	ldr	r1, [sp, #8]
 80012e6:	2400      	movs	r4, #0
 80012e8:	4019      	ands	r1, r3
 80012ea:	468c      	mov	ip, r1
 80012ec:	e5b8      	b.n	8000e60 <__aeabi_ddiv+0x19c>
 80012ee:	4552      	cmp	r2, sl
 80012f0:	d8be      	bhi.n	8001270 <__aeabi_ddiv+0x5ac>
 80012f2:	468b      	mov	fp, r1
 80012f4:	2500      	movs	r5, #0
 80012f6:	e660      	b.n	8000fba <__aeabi_ddiv+0x2f6>
 80012f8:	9d03      	ldr	r5, [sp, #12]
 80012fa:	429d      	cmp	r5, r3
 80012fc:	d3c6      	bcc.n	800128c <__aeabi_ddiv+0x5c8>
 80012fe:	0011      	movs	r1, r2
 8001300:	e762      	b.n	80011c8 <__aeabi_ddiv+0x504>
 8001302:	2500      	movs	r5, #0
 8001304:	e7d8      	b.n	80012b8 <__aeabi_ddiv+0x5f4>
 8001306:	2280      	movs	r2, #128	; 0x80
 8001308:	465b      	mov	r3, fp
 800130a:	0312      	lsls	r2, r2, #12
 800130c:	431a      	orrs	r2, r3
 800130e:	9b01      	ldr	r3, [sp, #4]
 8001310:	0312      	lsls	r2, r2, #12
 8001312:	0b12      	lsrs	r2, r2, #12
 8001314:	469c      	mov	ip, r3
 8001316:	4688      	mov	r8, r1
 8001318:	4c03      	ldr	r4, [pc, #12]	; (8001328 <__aeabi_ddiv+0x664>)
 800131a:	e5a1      	b.n	8000e60 <__aeabi_ddiv+0x19c>
 800131c:	000003ff 	.word	0x000003ff
 8001320:	feffffff 	.word	0xfeffffff
 8001324:	000007fe 	.word	0x000007fe
 8001328:	000007ff 	.word	0x000007ff

0800132c <__eqdf2>:
 800132c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800132e:	464f      	mov	r7, r9
 8001330:	4646      	mov	r6, r8
 8001332:	46d6      	mov	lr, sl
 8001334:	005c      	lsls	r4, r3, #1
 8001336:	b5c0      	push	{r6, r7, lr}
 8001338:	031f      	lsls	r7, r3, #12
 800133a:	0fdb      	lsrs	r3, r3, #31
 800133c:	469a      	mov	sl, r3
 800133e:	4b17      	ldr	r3, [pc, #92]	; (800139c <__eqdf2+0x70>)
 8001340:	030e      	lsls	r6, r1, #12
 8001342:	004d      	lsls	r5, r1, #1
 8001344:	4684      	mov	ip, r0
 8001346:	4680      	mov	r8, r0
 8001348:	0b36      	lsrs	r6, r6, #12
 800134a:	0d6d      	lsrs	r5, r5, #21
 800134c:	0fc9      	lsrs	r1, r1, #31
 800134e:	4691      	mov	r9, r2
 8001350:	0b3f      	lsrs	r7, r7, #12
 8001352:	0d64      	lsrs	r4, r4, #21
 8001354:	2001      	movs	r0, #1
 8001356:	429d      	cmp	r5, r3
 8001358:	d008      	beq.n	800136c <__eqdf2+0x40>
 800135a:	429c      	cmp	r4, r3
 800135c:	d001      	beq.n	8001362 <__eqdf2+0x36>
 800135e:	42a5      	cmp	r5, r4
 8001360:	d00b      	beq.n	800137a <__eqdf2+0x4e>
 8001362:	bc1c      	pop	{r2, r3, r4}
 8001364:	4690      	mov	r8, r2
 8001366:	4699      	mov	r9, r3
 8001368:	46a2      	mov	sl, r4
 800136a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800136c:	4663      	mov	r3, ip
 800136e:	4333      	orrs	r3, r6
 8001370:	d1f7      	bne.n	8001362 <__eqdf2+0x36>
 8001372:	42ac      	cmp	r4, r5
 8001374:	d1f5      	bne.n	8001362 <__eqdf2+0x36>
 8001376:	433a      	orrs	r2, r7
 8001378:	d1f3      	bne.n	8001362 <__eqdf2+0x36>
 800137a:	2001      	movs	r0, #1
 800137c:	42be      	cmp	r6, r7
 800137e:	d1f0      	bne.n	8001362 <__eqdf2+0x36>
 8001380:	45c8      	cmp	r8, r9
 8001382:	d1ee      	bne.n	8001362 <__eqdf2+0x36>
 8001384:	4551      	cmp	r1, sl
 8001386:	d007      	beq.n	8001398 <__eqdf2+0x6c>
 8001388:	2d00      	cmp	r5, #0
 800138a:	d1ea      	bne.n	8001362 <__eqdf2+0x36>
 800138c:	4663      	mov	r3, ip
 800138e:	431e      	orrs	r6, r3
 8001390:	0030      	movs	r0, r6
 8001392:	1e46      	subs	r6, r0, #1
 8001394:	41b0      	sbcs	r0, r6
 8001396:	e7e4      	b.n	8001362 <__eqdf2+0x36>
 8001398:	2000      	movs	r0, #0
 800139a:	e7e2      	b.n	8001362 <__eqdf2+0x36>
 800139c:	000007ff 	.word	0x000007ff

080013a0 <__gedf2>:
 80013a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a2:	4645      	mov	r5, r8
 80013a4:	46de      	mov	lr, fp
 80013a6:	4657      	mov	r7, sl
 80013a8:	464e      	mov	r6, r9
 80013aa:	b5e0      	push	{r5, r6, r7, lr}
 80013ac:	031f      	lsls	r7, r3, #12
 80013ae:	0b3d      	lsrs	r5, r7, #12
 80013b0:	4f2c      	ldr	r7, [pc, #176]	; (8001464 <__gedf2+0xc4>)
 80013b2:	030e      	lsls	r6, r1, #12
 80013b4:	004c      	lsls	r4, r1, #1
 80013b6:	46ab      	mov	fp, r5
 80013b8:	005d      	lsls	r5, r3, #1
 80013ba:	4684      	mov	ip, r0
 80013bc:	0b36      	lsrs	r6, r6, #12
 80013be:	0d64      	lsrs	r4, r4, #21
 80013c0:	0fc9      	lsrs	r1, r1, #31
 80013c2:	4690      	mov	r8, r2
 80013c4:	0d6d      	lsrs	r5, r5, #21
 80013c6:	0fdb      	lsrs	r3, r3, #31
 80013c8:	42bc      	cmp	r4, r7
 80013ca:	d02a      	beq.n	8001422 <__gedf2+0x82>
 80013cc:	4f25      	ldr	r7, [pc, #148]	; (8001464 <__gedf2+0xc4>)
 80013ce:	42bd      	cmp	r5, r7
 80013d0:	d02d      	beq.n	800142e <__gedf2+0x8e>
 80013d2:	2c00      	cmp	r4, #0
 80013d4:	d10f      	bne.n	80013f6 <__gedf2+0x56>
 80013d6:	4330      	orrs	r0, r6
 80013d8:	0007      	movs	r7, r0
 80013da:	4681      	mov	r9, r0
 80013dc:	4278      	negs	r0, r7
 80013de:	4178      	adcs	r0, r7
 80013e0:	b2c0      	uxtb	r0, r0
 80013e2:	2d00      	cmp	r5, #0
 80013e4:	d117      	bne.n	8001416 <__gedf2+0x76>
 80013e6:	465f      	mov	r7, fp
 80013e8:	433a      	orrs	r2, r7
 80013ea:	d114      	bne.n	8001416 <__gedf2+0x76>
 80013ec:	464b      	mov	r3, r9
 80013ee:	2000      	movs	r0, #0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d00a      	beq.n	800140a <__gedf2+0x6a>
 80013f4:	e006      	b.n	8001404 <__gedf2+0x64>
 80013f6:	2d00      	cmp	r5, #0
 80013f8:	d102      	bne.n	8001400 <__gedf2+0x60>
 80013fa:	4658      	mov	r0, fp
 80013fc:	4302      	orrs	r2, r0
 80013fe:	d001      	beq.n	8001404 <__gedf2+0x64>
 8001400:	4299      	cmp	r1, r3
 8001402:	d018      	beq.n	8001436 <__gedf2+0x96>
 8001404:	4248      	negs	r0, r1
 8001406:	2101      	movs	r1, #1
 8001408:	4308      	orrs	r0, r1
 800140a:	bc3c      	pop	{r2, r3, r4, r5}
 800140c:	4690      	mov	r8, r2
 800140e:	4699      	mov	r9, r3
 8001410:	46a2      	mov	sl, r4
 8001412:	46ab      	mov	fp, r5
 8001414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001416:	2800      	cmp	r0, #0
 8001418:	d0f2      	beq.n	8001400 <__gedf2+0x60>
 800141a:	2001      	movs	r0, #1
 800141c:	3b01      	subs	r3, #1
 800141e:	4318      	orrs	r0, r3
 8001420:	e7f3      	b.n	800140a <__gedf2+0x6a>
 8001422:	0037      	movs	r7, r6
 8001424:	4307      	orrs	r7, r0
 8001426:	d0d1      	beq.n	80013cc <__gedf2+0x2c>
 8001428:	2002      	movs	r0, #2
 800142a:	4240      	negs	r0, r0
 800142c:	e7ed      	b.n	800140a <__gedf2+0x6a>
 800142e:	465f      	mov	r7, fp
 8001430:	4317      	orrs	r7, r2
 8001432:	d0ce      	beq.n	80013d2 <__gedf2+0x32>
 8001434:	e7f8      	b.n	8001428 <__gedf2+0x88>
 8001436:	42ac      	cmp	r4, r5
 8001438:	dce4      	bgt.n	8001404 <__gedf2+0x64>
 800143a:	da03      	bge.n	8001444 <__gedf2+0xa4>
 800143c:	1e48      	subs	r0, r1, #1
 800143e:	2101      	movs	r1, #1
 8001440:	4308      	orrs	r0, r1
 8001442:	e7e2      	b.n	800140a <__gedf2+0x6a>
 8001444:	455e      	cmp	r6, fp
 8001446:	d8dd      	bhi.n	8001404 <__gedf2+0x64>
 8001448:	d006      	beq.n	8001458 <__gedf2+0xb8>
 800144a:	2000      	movs	r0, #0
 800144c:	455e      	cmp	r6, fp
 800144e:	d2dc      	bcs.n	800140a <__gedf2+0x6a>
 8001450:	2301      	movs	r3, #1
 8001452:	1e48      	subs	r0, r1, #1
 8001454:	4318      	orrs	r0, r3
 8001456:	e7d8      	b.n	800140a <__gedf2+0x6a>
 8001458:	45c4      	cmp	ip, r8
 800145a:	d8d3      	bhi.n	8001404 <__gedf2+0x64>
 800145c:	2000      	movs	r0, #0
 800145e:	45c4      	cmp	ip, r8
 8001460:	d3f6      	bcc.n	8001450 <__gedf2+0xb0>
 8001462:	e7d2      	b.n	800140a <__gedf2+0x6a>
 8001464:	000007ff 	.word	0x000007ff

08001468 <__ledf2>:
 8001468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146a:	464e      	mov	r6, r9
 800146c:	4645      	mov	r5, r8
 800146e:	46de      	mov	lr, fp
 8001470:	4657      	mov	r7, sl
 8001472:	005c      	lsls	r4, r3, #1
 8001474:	b5e0      	push	{r5, r6, r7, lr}
 8001476:	031f      	lsls	r7, r3, #12
 8001478:	0fdb      	lsrs	r3, r3, #31
 800147a:	4699      	mov	r9, r3
 800147c:	4b2a      	ldr	r3, [pc, #168]	; (8001528 <__ledf2+0xc0>)
 800147e:	030e      	lsls	r6, r1, #12
 8001480:	004d      	lsls	r5, r1, #1
 8001482:	0fc9      	lsrs	r1, r1, #31
 8001484:	4684      	mov	ip, r0
 8001486:	0b36      	lsrs	r6, r6, #12
 8001488:	0d6d      	lsrs	r5, r5, #21
 800148a:	468b      	mov	fp, r1
 800148c:	4690      	mov	r8, r2
 800148e:	0b3f      	lsrs	r7, r7, #12
 8001490:	0d64      	lsrs	r4, r4, #21
 8001492:	429d      	cmp	r5, r3
 8001494:	d020      	beq.n	80014d8 <__ledf2+0x70>
 8001496:	4b24      	ldr	r3, [pc, #144]	; (8001528 <__ledf2+0xc0>)
 8001498:	429c      	cmp	r4, r3
 800149a:	d022      	beq.n	80014e2 <__ledf2+0x7a>
 800149c:	2d00      	cmp	r5, #0
 800149e:	d112      	bne.n	80014c6 <__ledf2+0x5e>
 80014a0:	4330      	orrs	r0, r6
 80014a2:	4243      	negs	r3, r0
 80014a4:	4143      	adcs	r3, r0
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2c00      	cmp	r4, #0
 80014aa:	d01f      	beq.n	80014ec <__ledf2+0x84>
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d00c      	beq.n	80014ca <__ledf2+0x62>
 80014b0:	464b      	mov	r3, r9
 80014b2:	2001      	movs	r0, #1
 80014b4:	3b01      	subs	r3, #1
 80014b6:	4303      	orrs	r3, r0
 80014b8:	0018      	movs	r0, r3
 80014ba:	bc3c      	pop	{r2, r3, r4, r5}
 80014bc:	4690      	mov	r8, r2
 80014be:	4699      	mov	r9, r3
 80014c0:	46a2      	mov	sl, r4
 80014c2:	46ab      	mov	fp, r5
 80014c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014c6:	2c00      	cmp	r4, #0
 80014c8:	d016      	beq.n	80014f8 <__ledf2+0x90>
 80014ca:	45cb      	cmp	fp, r9
 80014cc:	d017      	beq.n	80014fe <__ledf2+0x96>
 80014ce:	465b      	mov	r3, fp
 80014d0:	4259      	negs	r1, r3
 80014d2:	2301      	movs	r3, #1
 80014d4:	430b      	orrs	r3, r1
 80014d6:	e7ef      	b.n	80014b8 <__ledf2+0x50>
 80014d8:	0031      	movs	r1, r6
 80014da:	2302      	movs	r3, #2
 80014dc:	4301      	orrs	r1, r0
 80014de:	d1eb      	bne.n	80014b8 <__ledf2+0x50>
 80014e0:	e7d9      	b.n	8001496 <__ledf2+0x2e>
 80014e2:	0039      	movs	r1, r7
 80014e4:	2302      	movs	r3, #2
 80014e6:	4311      	orrs	r1, r2
 80014e8:	d1e6      	bne.n	80014b8 <__ledf2+0x50>
 80014ea:	e7d7      	b.n	800149c <__ledf2+0x34>
 80014ec:	433a      	orrs	r2, r7
 80014ee:	d1dd      	bne.n	80014ac <__ledf2+0x44>
 80014f0:	2300      	movs	r3, #0
 80014f2:	2800      	cmp	r0, #0
 80014f4:	d0e0      	beq.n	80014b8 <__ledf2+0x50>
 80014f6:	e7ea      	b.n	80014ce <__ledf2+0x66>
 80014f8:	433a      	orrs	r2, r7
 80014fa:	d1e6      	bne.n	80014ca <__ledf2+0x62>
 80014fc:	e7e7      	b.n	80014ce <__ledf2+0x66>
 80014fe:	42a5      	cmp	r5, r4
 8001500:	dce5      	bgt.n	80014ce <__ledf2+0x66>
 8001502:	db05      	blt.n	8001510 <__ledf2+0xa8>
 8001504:	42be      	cmp	r6, r7
 8001506:	d8e2      	bhi.n	80014ce <__ledf2+0x66>
 8001508:	d007      	beq.n	800151a <__ledf2+0xb2>
 800150a:	2300      	movs	r3, #0
 800150c:	42be      	cmp	r6, r7
 800150e:	d2d3      	bcs.n	80014b8 <__ledf2+0x50>
 8001510:	4659      	mov	r1, fp
 8001512:	2301      	movs	r3, #1
 8001514:	3901      	subs	r1, #1
 8001516:	430b      	orrs	r3, r1
 8001518:	e7ce      	b.n	80014b8 <__ledf2+0x50>
 800151a:	45c4      	cmp	ip, r8
 800151c:	d8d7      	bhi.n	80014ce <__ledf2+0x66>
 800151e:	2300      	movs	r3, #0
 8001520:	45c4      	cmp	ip, r8
 8001522:	d3f5      	bcc.n	8001510 <__ledf2+0xa8>
 8001524:	e7c8      	b.n	80014b8 <__ledf2+0x50>
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	000007ff 	.word	0x000007ff

0800152c <__aeabi_dmul>:
 800152c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800152e:	4657      	mov	r7, sl
 8001530:	4645      	mov	r5, r8
 8001532:	46de      	mov	lr, fp
 8001534:	464e      	mov	r6, r9
 8001536:	b5e0      	push	{r5, r6, r7, lr}
 8001538:	030c      	lsls	r4, r1, #12
 800153a:	4698      	mov	r8, r3
 800153c:	004e      	lsls	r6, r1, #1
 800153e:	0b23      	lsrs	r3, r4, #12
 8001540:	b087      	sub	sp, #28
 8001542:	0007      	movs	r7, r0
 8001544:	4692      	mov	sl, r2
 8001546:	469b      	mov	fp, r3
 8001548:	0d76      	lsrs	r6, r6, #21
 800154a:	0fcd      	lsrs	r5, r1, #31
 800154c:	2e00      	cmp	r6, #0
 800154e:	d06b      	beq.n	8001628 <__aeabi_dmul+0xfc>
 8001550:	4b6d      	ldr	r3, [pc, #436]	; (8001708 <__aeabi_dmul+0x1dc>)
 8001552:	429e      	cmp	r6, r3
 8001554:	d035      	beq.n	80015c2 <__aeabi_dmul+0x96>
 8001556:	2480      	movs	r4, #128	; 0x80
 8001558:	465b      	mov	r3, fp
 800155a:	0f42      	lsrs	r2, r0, #29
 800155c:	0424      	lsls	r4, r4, #16
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	4314      	orrs	r4, r2
 8001562:	431c      	orrs	r4, r3
 8001564:	00c3      	lsls	r3, r0, #3
 8001566:	4699      	mov	r9, r3
 8001568:	4b68      	ldr	r3, [pc, #416]	; (800170c <__aeabi_dmul+0x1e0>)
 800156a:	46a3      	mov	fp, r4
 800156c:	469c      	mov	ip, r3
 800156e:	2300      	movs	r3, #0
 8001570:	2700      	movs	r7, #0
 8001572:	4466      	add	r6, ip
 8001574:	9302      	str	r3, [sp, #8]
 8001576:	4643      	mov	r3, r8
 8001578:	031c      	lsls	r4, r3, #12
 800157a:	005a      	lsls	r2, r3, #1
 800157c:	0fdb      	lsrs	r3, r3, #31
 800157e:	4650      	mov	r0, sl
 8001580:	0b24      	lsrs	r4, r4, #12
 8001582:	0d52      	lsrs	r2, r2, #21
 8001584:	4698      	mov	r8, r3
 8001586:	d100      	bne.n	800158a <__aeabi_dmul+0x5e>
 8001588:	e076      	b.n	8001678 <__aeabi_dmul+0x14c>
 800158a:	4b5f      	ldr	r3, [pc, #380]	; (8001708 <__aeabi_dmul+0x1dc>)
 800158c:	429a      	cmp	r2, r3
 800158e:	d06d      	beq.n	800166c <__aeabi_dmul+0x140>
 8001590:	2380      	movs	r3, #128	; 0x80
 8001592:	0f41      	lsrs	r1, r0, #29
 8001594:	041b      	lsls	r3, r3, #16
 8001596:	430b      	orrs	r3, r1
 8001598:	495c      	ldr	r1, [pc, #368]	; (800170c <__aeabi_dmul+0x1e0>)
 800159a:	00e4      	lsls	r4, r4, #3
 800159c:	468c      	mov	ip, r1
 800159e:	431c      	orrs	r4, r3
 80015a0:	00c3      	lsls	r3, r0, #3
 80015a2:	2000      	movs	r0, #0
 80015a4:	4462      	add	r2, ip
 80015a6:	4641      	mov	r1, r8
 80015a8:	18b6      	adds	r6, r6, r2
 80015aa:	4069      	eors	r1, r5
 80015ac:	1c72      	adds	r2, r6, #1
 80015ae:	9101      	str	r1, [sp, #4]
 80015b0:	4694      	mov	ip, r2
 80015b2:	4307      	orrs	r7, r0
 80015b4:	2f0f      	cmp	r7, #15
 80015b6:	d900      	bls.n	80015ba <__aeabi_dmul+0x8e>
 80015b8:	e0b0      	b.n	800171c <__aeabi_dmul+0x1f0>
 80015ba:	4a55      	ldr	r2, [pc, #340]	; (8001710 <__aeabi_dmul+0x1e4>)
 80015bc:	00bf      	lsls	r7, r7, #2
 80015be:	59d2      	ldr	r2, [r2, r7]
 80015c0:	4697      	mov	pc, r2
 80015c2:	465b      	mov	r3, fp
 80015c4:	4303      	orrs	r3, r0
 80015c6:	4699      	mov	r9, r3
 80015c8:	d000      	beq.n	80015cc <__aeabi_dmul+0xa0>
 80015ca:	e087      	b.n	80016dc <__aeabi_dmul+0x1b0>
 80015cc:	2300      	movs	r3, #0
 80015ce:	469b      	mov	fp, r3
 80015d0:	3302      	adds	r3, #2
 80015d2:	2708      	movs	r7, #8
 80015d4:	9302      	str	r3, [sp, #8]
 80015d6:	e7ce      	b.n	8001576 <__aeabi_dmul+0x4a>
 80015d8:	4642      	mov	r2, r8
 80015da:	9201      	str	r2, [sp, #4]
 80015dc:	2802      	cmp	r0, #2
 80015de:	d067      	beq.n	80016b0 <__aeabi_dmul+0x184>
 80015e0:	2803      	cmp	r0, #3
 80015e2:	d100      	bne.n	80015e6 <__aeabi_dmul+0xba>
 80015e4:	e20e      	b.n	8001a04 <__aeabi_dmul+0x4d8>
 80015e6:	2801      	cmp	r0, #1
 80015e8:	d000      	beq.n	80015ec <__aeabi_dmul+0xc0>
 80015ea:	e162      	b.n	80018b2 <__aeabi_dmul+0x386>
 80015ec:	2300      	movs	r3, #0
 80015ee:	2400      	movs	r4, #0
 80015f0:	2200      	movs	r2, #0
 80015f2:	4699      	mov	r9, r3
 80015f4:	9901      	ldr	r1, [sp, #4]
 80015f6:	4001      	ands	r1, r0
 80015f8:	b2cd      	uxtb	r5, r1
 80015fa:	2100      	movs	r1, #0
 80015fc:	0312      	lsls	r2, r2, #12
 80015fe:	0d0b      	lsrs	r3, r1, #20
 8001600:	0b12      	lsrs	r2, r2, #12
 8001602:	051b      	lsls	r3, r3, #20
 8001604:	4313      	orrs	r3, r2
 8001606:	4a43      	ldr	r2, [pc, #268]	; (8001714 <__aeabi_dmul+0x1e8>)
 8001608:	0524      	lsls	r4, r4, #20
 800160a:	4013      	ands	r3, r2
 800160c:	431c      	orrs	r4, r3
 800160e:	0064      	lsls	r4, r4, #1
 8001610:	07ed      	lsls	r5, r5, #31
 8001612:	0864      	lsrs	r4, r4, #1
 8001614:	432c      	orrs	r4, r5
 8001616:	4648      	mov	r0, r9
 8001618:	0021      	movs	r1, r4
 800161a:	b007      	add	sp, #28
 800161c:	bc3c      	pop	{r2, r3, r4, r5}
 800161e:	4690      	mov	r8, r2
 8001620:	4699      	mov	r9, r3
 8001622:	46a2      	mov	sl, r4
 8001624:	46ab      	mov	fp, r5
 8001626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001628:	4303      	orrs	r3, r0
 800162a:	4699      	mov	r9, r3
 800162c:	d04f      	beq.n	80016ce <__aeabi_dmul+0x1a2>
 800162e:	465b      	mov	r3, fp
 8001630:	2b00      	cmp	r3, #0
 8001632:	d100      	bne.n	8001636 <__aeabi_dmul+0x10a>
 8001634:	e189      	b.n	800194a <__aeabi_dmul+0x41e>
 8001636:	4658      	mov	r0, fp
 8001638:	f000 fddc 	bl	80021f4 <__clzsi2>
 800163c:	0003      	movs	r3, r0
 800163e:	3b0b      	subs	r3, #11
 8001640:	2b1c      	cmp	r3, #28
 8001642:	dd00      	ble.n	8001646 <__aeabi_dmul+0x11a>
 8001644:	e17a      	b.n	800193c <__aeabi_dmul+0x410>
 8001646:	221d      	movs	r2, #29
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	003a      	movs	r2, r7
 800164c:	0001      	movs	r1, r0
 800164e:	465c      	mov	r4, fp
 8001650:	40da      	lsrs	r2, r3
 8001652:	3908      	subs	r1, #8
 8001654:	408c      	lsls	r4, r1
 8001656:	0013      	movs	r3, r2
 8001658:	408f      	lsls	r7, r1
 800165a:	4323      	orrs	r3, r4
 800165c:	469b      	mov	fp, r3
 800165e:	46b9      	mov	r9, r7
 8001660:	2300      	movs	r3, #0
 8001662:	4e2d      	ldr	r6, [pc, #180]	; (8001718 <__aeabi_dmul+0x1ec>)
 8001664:	2700      	movs	r7, #0
 8001666:	1a36      	subs	r6, r6, r0
 8001668:	9302      	str	r3, [sp, #8]
 800166a:	e784      	b.n	8001576 <__aeabi_dmul+0x4a>
 800166c:	4653      	mov	r3, sl
 800166e:	4323      	orrs	r3, r4
 8001670:	d12a      	bne.n	80016c8 <__aeabi_dmul+0x19c>
 8001672:	2400      	movs	r4, #0
 8001674:	2002      	movs	r0, #2
 8001676:	e796      	b.n	80015a6 <__aeabi_dmul+0x7a>
 8001678:	4653      	mov	r3, sl
 800167a:	4323      	orrs	r3, r4
 800167c:	d020      	beq.n	80016c0 <__aeabi_dmul+0x194>
 800167e:	2c00      	cmp	r4, #0
 8001680:	d100      	bne.n	8001684 <__aeabi_dmul+0x158>
 8001682:	e157      	b.n	8001934 <__aeabi_dmul+0x408>
 8001684:	0020      	movs	r0, r4
 8001686:	f000 fdb5 	bl	80021f4 <__clzsi2>
 800168a:	0003      	movs	r3, r0
 800168c:	3b0b      	subs	r3, #11
 800168e:	2b1c      	cmp	r3, #28
 8001690:	dd00      	ble.n	8001694 <__aeabi_dmul+0x168>
 8001692:	e149      	b.n	8001928 <__aeabi_dmul+0x3fc>
 8001694:	211d      	movs	r1, #29
 8001696:	1acb      	subs	r3, r1, r3
 8001698:	4651      	mov	r1, sl
 800169a:	0002      	movs	r2, r0
 800169c:	40d9      	lsrs	r1, r3
 800169e:	4653      	mov	r3, sl
 80016a0:	3a08      	subs	r2, #8
 80016a2:	4094      	lsls	r4, r2
 80016a4:	4093      	lsls	r3, r2
 80016a6:	430c      	orrs	r4, r1
 80016a8:	4a1b      	ldr	r2, [pc, #108]	; (8001718 <__aeabi_dmul+0x1ec>)
 80016aa:	1a12      	subs	r2, r2, r0
 80016ac:	2000      	movs	r0, #0
 80016ae:	e77a      	b.n	80015a6 <__aeabi_dmul+0x7a>
 80016b0:	2501      	movs	r5, #1
 80016b2:	9b01      	ldr	r3, [sp, #4]
 80016b4:	4c14      	ldr	r4, [pc, #80]	; (8001708 <__aeabi_dmul+0x1dc>)
 80016b6:	401d      	ands	r5, r3
 80016b8:	2300      	movs	r3, #0
 80016ba:	2200      	movs	r2, #0
 80016bc:	4699      	mov	r9, r3
 80016be:	e79c      	b.n	80015fa <__aeabi_dmul+0xce>
 80016c0:	2400      	movs	r4, #0
 80016c2:	2200      	movs	r2, #0
 80016c4:	2001      	movs	r0, #1
 80016c6:	e76e      	b.n	80015a6 <__aeabi_dmul+0x7a>
 80016c8:	4653      	mov	r3, sl
 80016ca:	2003      	movs	r0, #3
 80016cc:	e76b      	b.n	80015a6 <__aeabi_dmul+0x7a>
 80016ce:	2300      	movs	r3, #0
 80016d0:	469b      	mov	fp, r3
 80016d2:	3301      	adds	r3, #1
 80016d4:	2704      	movs	r7, #4
 80016d6:	2600      	movs	r6, #0
 80016d8:	9302      	str	r3, [sp, #8]
 80016da:	e74c      	b.n	8001576 <__aeabi_dmul+0x4a>
 80016dc:	2303      	movs	r3, #3
 80016de:	4681      	mov	r9, r0
 80016e0:	270c      	movs	r7, #12
 80016e2:	9302      	str	r3, [sp, #8]
 80016e4:	e747      	b.n	8001576 <__aeabi_dmul+0x4a>
 80016e6:	2280      	movs	r2, #128	; 0x80
 80016e8:	2300      	movs	r3, #0
 80016ea:	2500      	movs	r5, #0
 80016ec:	0312      	lsls	r2, r2, #12
 80016ee:	4699      	mov	r9, r3
 80016f0:	4c05      	ldr	r4, [pc, #20]	; (8001708 <__aeabi_dmul+0x1dc>)
 80016f2:	e782      	b.n	80015fa <__aeabi_dmul+0xce>
 80016f4:	465c      	mov	r4, fp
 80016f6:	464b      	mov	r3, r9
 80016f8:	9802      	ldr	r0, [sp, #8]
 80016fa:	e76f      	b.n	80015dc <__aeabi_dmul+0xb0>
 80016fc:	465c      	mov	r4, fp
 80016fe:	464b      	mov	r3, r9
 8001700:	9501      	str	r5, [sp, #4]
 8001702:	9802      	ldr	r0, [sp, #8]
 8001704:	e76a      	b.n	80015dc <__aeabi_dmul+0xb0>
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	000007ff 	.word	0x000007ff
 800170c:	fffffc01 	.word	0xfffffc01
 8001710:	0800e700 	.word	0x0800e700
 8001714:	800fffff 	.word	0x800fffff
 8001718:	fffffc0d 	.word	0xfffffc0d
 800171c:	464a      	mov	r2, r9
 800171e:	4649      	mov	r1, r9
 8001720:	0c17      	lsrs	r7, r2, #16
 8001722:	0c1a      	lsrs	r2, r3, #16
 8001724:	041b      	lsls	r3, r3, #16
 8001726:	0c1b      	lsrs	r3, r3, #16
 8001728:	0408      	lsls	r0, r1, #16
 800172a:	0019      	movs	r1, r3
 800172c:	0c00      	lsrs	r0, r0, #16
 800172e:	4341      	muls	r1, r0
 8001730:	0015      	movs	r5, r2
 8001732:	4688      	mov	r8, r1
 8001734:	0019      	movs	r1, r3
 8001736:	437d      	muls	r5, r7
 8001738:	4379      	muls	r1, r7
 800173a:	9503      	str	r5, [sp, #12]
 800173c:	4689      	mov	r9, r1
 800173e:	0029      	movs	r1, r5
 8001740:	0015      	movs	r5, r2
 8001742:	4345      	muls	r5, r0
 8001744:	444d      	add	r5, r9
 8001746:	9502      	str	r5, [sp, #8]
 8001748:	4645      	mov	r5, r8
 800174a:	0c2d      	lsrs	r5, r5, #16
 800174c:	46aa      	mov	sl, r5
 800174e:	9d02      	ldr	r5, [sp, #8]
 8001750:	4455      	add	r5, sl
 8001752:	45a9      	cmp	r9, r5
 8001754:	d906      	bls.n	8001764 <__aeabi_dmul+0x238>
 8001756:	468a      	mov	sl, r1
 8001758:	2180      	movs	r1, #128	; 0x80
 800175a:	0249      	lsls	r1, r1, #9
 800175c:	4689      	mov	r9, r1
 800175e:	44ca      	add	sl, r9
 8001760:	4651      	mov	r1, sl
 8001762:	9103      	str	r1, [sp, #12]
 8001764:	0c29      	lsrs	r1, r5, #16
 8001766:	9104      	str	r1, [sp, #16]
 8001768:	4641      	mov	r1, r8
 800176a:	0409      	lsls	r1, r1, #16
 800176c:	042d      	lsls	r5, r5, #16
 800176e:	0c09      	lsrs	r1, r1, #16
 8001770:	4688      	mov	r8, r1
 8001772:	0029      	movs	r1, r5
 8001774:	0c25      	lsrs	r5, r4, #16
 8001776:	0424      	lsls	r4, r4, #16
 8001778:	4441      	add	r1, r8
 800177a:	0c24      	lsrs	r4, r4, #16
 800177c:	9105      	str	r1, [sp, #20]
 800177e:	0021      	movs	r1, r4
 8001780:	4341      	muls	r1, r0
 8001782:	4688      	mov	r8, r1
 8001784:	0021      	movs	r1, r4
 8001786:	4379      	muls	r1, r7
 8001788:	468a      	mov	sl, r1
 800178a:	4368      	muls	r0, r5
 800178c:	4641      	mov	r1, r8
 800178e:	4450      	add	r0, sl
 8001790:	4681      	mov	r9, r0
 8001792:	0c08      	lsrs	r0, r1, #16
 8001794:	4448      	add	r0, r9
 8001796:	436f      	muls	r7, r5
 8001798:	4582      	cmp	sl, r0
 800179a:	d903      	bls.n	80017a4 <__aeabi_dmul+0x278>
 800179c:	2180      	movs	r1, #128	; 0x80
 800179e:	0249      	lsls	r1, r1, #9
 80017a0:	4689      	mov	r9, r1
 80017a2:	444f      	add	r7, r9
 80017a4:	0c01      	lsrs	r1, r0, #16
 80017a6:	4689      	mov	r9, r1
 80017a8:	0039      	movs	r1, r7
 80017aa:	4449      	add	r1, r9
 80017ac:	9102      	str	r1, [sp, #8]
 80017ae:	4641      	mov	r1, r8
 80017b0:	040f      	lsls	r7, r1, #16
 80017b2:	9904      	ldr	r1, [sp, #16]
 80017b4:	0c3f      	lsrs	r7, r7, #16
 80017b6:	4688      	mov	r8, r1
 80017b8:	0400      	lsls	r0, r0, #16
 80017ba:	19c0      	adds	r0, r0, r7
 80017bc:	4480      	add	r8, r0
 80017be:	4641      	mov	r1, r8
 80017c0:	9104      	str	r1, [sp, #16]
 80017c2:	4659      	mov	r1, fp
 80017c4:	0c0f      	lsrs	r7, r1, #16
 80017c6:	0409      	lsls	r1, r1, #16
 80017c8:	0c09      	lsrs	r1, r1, #16
 80017ca:	4688      	mov	r8, r1
 80017cc:	4359      	muls	r1, r3
 80017ce:	468a      	mov	sl, r1
 80017d0:	0039      	movs	r1, r7
 80017d2:	4351      	muls	r1, r2
 80017d4:	4689      	mov	r9, r1
 80017d6:	4641      	mov	r1, r8
 80017d8:	434a      	muls	r2, r1
 80017da:	4651      	mov	r1, sl
 80017dc:	0c09      	lsrs	r1, r1, #16
 80017de:	468b      	mov	fp, r1
 80017e0:	437b      	muls	r3, r7
 80017e2:	18d2      	adds	r2, r2, r3
 80017e4:	445a      	add	r2, fp
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d903      	bls.n	80017f2 <__aeabi_dmul+0x2c6>
 80017ea:	2380      	movs	r3, #128	; 0x80
 80017ec:	025b      	lsls	r3, r3, #9
 80017ee:	469b      	mov	fp, r3
 80017f0:	44d9      	add	r9, fp
 80017f2:	4651      	mov	r1, sl
 80017f4:	0409      	lsls	r1, r1, #16
 80017f6:	0c09      	lsrs	r1, r1, #16
 80017f8:	468a      	mov	sl, r1
 80017fa:	4641      	mov	r1, r8
 80017fc:	4361      	muls	r1, r4
 80017fe:	437c      	muls	r4, r7
 8001800:	0c13      	lsrs	r3, r2, #16
 8001802:	0412      	lsls	r2, r2, #16
 8001804:	444b      	add	r3, r9
 8001806:	4452      	add	r2, sl
 8001808:	46a1      	mov	r9, r4
 800180a:	468a      	mov	sl, r1
 800180c:	003c      	movs	r4, r7
 800180e:	4641      	mov	r1, r8
 8001810:	436c      	muls	r4, r5
 8001812:	434d      	muls	r5, r1
 8001814:	4651      	mov	r1, sl
 8001816:	444d      	add	r5, r9
 8001818:	0c0f      	lsrs	r7, r1, #16
 800181a:	197d      	adds	r5, r7, r5
 800181c:	45a9      	cmp	r9, r5
 800181e:	d903      	bls.n	8001828 <__aeabi_dmul+0x2fc>
 8001820:	2180      	movs	r1, #128	; 0x80
 8001822:	0249      	lsls	r1, r1, #9
 8001824:	4688      	mov	r8, r1
 8001826:	4444      	add	r4, r8
 8001828:	9f04      	ldr	r7, [sp, #16]
 800182a:	9903      	ldr	r1, [sp, #12]
 800182c:	46b8      	mov	r8, r7
 800182e:	4441      	add	r1, r8
 8001830:	468b      	mov	fp, r1
 8001832:	4583      	cmp	fp, r0
 8001834:	4180      	sbcs	r0, r0
 8001836:	4241      	negs	r1, r0
 8001838:	4688      	mov	r8, r1
 800183a:	4651      	mov	r1, sl
 800183c:	0408      	lsls	r0, r1, #16
 800183e:	042f      	lsls	r7, r5, #16
 8001840:	0c00      	lsrs	r0, r0, #16
 8001842:	183f      	adds	r7, r7, r0
 8001844:	4658      	mov	r0, fp
 8001846:	9902      	ldr	r1, [sp, #8]
 8001848:	1810      	adds	r0, r2, r0
 800184a:	4689      	mov	r9, r1
 800184c:	4290      	cmp	r0, r2
 800184e:	4192      	sbcs	r2, r2
 8001850:	444f      	add	r7, r9
 8001852:	46ba      	mov	sl, r7
 8001854:	4252      	negs	r2, r2
 8001856:	4699      	mov	r9, r3
 8001858:	4693      	mov	fp, r2
 800185a:	44c2      	add	sl, r8
 800185c:	44d1      	add	r9, sl
 800185e:	44cb      	add	fp, r9
 8001860:	428f      	cmp	r7, r1
 8001862:	41bf      	sbcs	r7, r7
 8001864:	45c2      	cmp	sl, r8
 8001866:	4189      	sbcs	r1, r1
 8001868:	4599      	cmp	r9, r3
 800186a:	419b      	sbcs	r3, r3
 800186c:	4593      	cmp	fp, r2
 800186e:	4192      	sbcs	r2, r2
 8001870:	427f      	negs	r7, r7
 8001872:	4249      	negs	r1, r1
 8001874:	0c2d      	lsrs	r5, r5, #16
 8001876:	4252      	negs	r2, r2
 8001878:	430f      	orrs	r7, r1
 800187a:	425b      	negs	r3, r3
 800187c:	4313      	orrs	r3, r2
 800187e:	197f      	adds	r7, r7, r5
 8001880:	18ff      	adds	r7, r7, r3
 8001882:	465b      	mov	r3, fp
 8001884:	193c      	adds	r4, r7, r4
 8001886:	0ddb      	lsrs	r3, r3, #23
 8001888:	9a05      	ldr	r2, [sp, #20]
 800188a:	0264      	lsls	r4, r4, #9
 800188c:	431c      	orrs	r4, r3
 800188e:	0243      	lsls	r3, r0, #9
 8001890:	4313      	orrs	r3, r2
 8001892:	1e5d      	subs	r5, r3, #1
 8001894:	41ab      	sbcs	r3, r5
 8001896:	465a      	mov	r2, fp
 8001898:	0dc0      	lsrs	r0, r0, #23
 800189a:	4303      	orrs	r3, r0
 800189c:	0252      	lsls	r2, r2, #9
 800189e:	4313      	orrs	r3, r2
 80018a0:	01e2      	lsls	r2, r4, #7
 80018a2:	d556      	bpl.n	8001952 <__aeabi_dmul+0x426>
 80018a4:	2001      	movs	r0, #1
 80018a6:	085a      	lsrs	r2, r3, #1
 80018a8:	4003      	ands	r3, r0
 80018aa:	4313      	orrs	r3, r2
 80018ac:	07e2      	lsls	r2, r4, #31
 80018ae:	4313      	orrs	r3, r2
 80018b0:	0864      	lsrs	r4, r4, #1
 80018b2:	485a      	ldr	r0, [pc, #360]	; (8001a1c <__aeabi_dmul+0x4f0>)
 80018b4:	4460      	add	r0, ip
 80018b6:	2800      	cmp	r0, #0
 80018b8:	dd4d      	ble.n	8001956 <__aeabi_dmul+0x42a>
 80018ba:	075a      	lsls	r2, r3, #29
 80018bc:	d009      	beq.n	80018d2 <__aeabi_dmul+0x3a6>
 80018be:	220f      	movs	r2, #15
 80018c0:	401a      	ands	r2, r3
 80018c2:	2a04      	cmp	r2, #4
 80018c4:	d005      	beq.n	80018d2 <__aeabi_dmul+0x3a6>
 80018c6:	1d1a      	adds	r2, r3, #4
 80018c8:	429a      	cmp	r2, r3
 80018ca:	419b      	sbcs	r3, r3
 80018cc:	425b      	negs	r3, r3
 80018ce:	18e4      	adds	r4, r4, r3
 80018d0:	0013      	movs	r3, r2
 80018d2:	01e2      	lsls	r2, r4, #7
 80018d4:	d504      	bpl.n	80018e0 <__aeabi_dmul+0x3b4>
 80018d6:	2080      	movs	r0, #128	; 0x80
 80018d8:	4a51      	ldr	r2, [pc, #324]	; (8001a20 <__aeabi_dmul+0x4f4>)
 80018da:	00c0      	lsls	r0, r0, #3
 80018dc:	4014      	ands	r4, r2
 80018de:	4460      	add	r0, ip
 80018e0:	4a50      	ldr	r2, [pc, #320]	; (8001a24 <__aeabi_dmul+0x4f8>)
 80018e2:	4290      	cmp	r0, r2
 80018e4:	dd00      	ble.n	80018e8 <__aeabi_dmul+0x3bc>
 80018e6:	e6e3      	b.n	80016b0 <__aeabi_dmul+0x184>
 80018e8:	2501      	movs	r5, #1
 80018ea:	08db      	lsrs	r3, r3, #3
 80018ec:	0762      	lsls	r2, r4, #29
 80018ee:	431a      	orrs	r2, r3
 80018f0:	0264      	lsls	r4, r4, #9
 80018f2:	9b01      	ldr	r3, [sp, #4]
 80018f4:	4691      	mov	r9, r2
 80018f6:	0b22      	lsrs	r2, r4, #12
 80018f8:	0544      	lsls	r4, r0, #21
 80018fa:	0d64      	lsrs	r4, r4, #21
 80018fc:	401d      	ands	r5, r3
 80018fe:	e67c      	b.n	80015fa <__aeabi_dmul+0xce>
 8001900:	2280      	movs	r2, #128	; 0x80
 8001902:	4659      	mov	r1, fp
 8001904:	0312      	lsls	r2, r2, #12
 8001906:	4211      	tst	r1, r2
 8001908:	d008      	beq.n	800191c <__aeabi_dmul+0x3f0>
 800190a:	4214      	tst	r4, r2
 800190c:	d106      	bne.n	800191c <__aeabi_dmul+0x3f0>
 800190e:	4322      	orrs	r2, r4
 8001910:	0312      	lsls	r2, r2, #12
 8001912:	0b12      	lsrs	r2, r2, #12
 8001914:	4645      	mov	r5, r8
 8001916:	4699      	mov	r9, r3
 8001918:	4c43      	ldr	r4, [pc, #268]	; (8001a28 <__aeabi_dmul+0x4fc>)
 800191a:	e66e      	b.n	80015fa <__aeabi_dmul+0xce>
 800191c:	465b      	mov	r3, fp
 800191e:	431a      	orrs	r2, r3
 8001920:	0312      	lsls	r2, r2, #12
 8001922:	0b12      	lsrs	r2, r2, #12
 8001924:	4c40      	ldr	r4, [pc, #256]	; (8001a28 <__aeabi_dmul+0x4fc>)
 8001926:	e668      	b.n	80015fa <__aeabi_dmul+0xce>
 8001928:	0003      	movs	r3, r0
 800192a:	4654      	mov	r4, sl
 800192c:	3b28      	subs	r3, #40	; 0x28
 800192e:	409c      	lsls	r4, r3
 8001930:	2300      	movs	r3, #0
 8001932:	e6b9      	b.n	80016a8 <__aeabi_dmul+0x17c>
 8001934:	f000 fc5e 	bl	80021f4 <__clzsi2>
 8001938:	3020      	adds	r0, #32
 800193a:	e6a6      	b.n	800168a <__aeabi_dmul+0x15e>
 800193c:	0003      	movs	r3, r0
 800193e:	3b28      	subs	r3, #40	; 0x28
 8001940:	409f      	lsls	r7, r3
 8001942:	2300      	movs	r3, #0
 8001944:	46bb      	mov	fp, r7
 8001946:	4699      	mov	r9, r3
 8001948:	e68a      	b.n	8001660 <__aeabi_dmul+0x134>
 800194a:	f000 fc53 	bl	80021f4 <__clzsi2>
 800194e:	3020      	adds	r0, #32
 8001950:	e674      	b.n	800163c <__aeabi_dmul+0x110>
 8001952:	46b4      	mov	ip, r6
 8001954:	e7ad      	b.n	80018b2 <__aeabi_dmul+0x386>
 8001956:	2501      	movs	r5, #1
 8001958:	1a2a      	subs	r2, r5, r0
 800195a:	2a38      	cmp	r2, #56	; 0x38
 800195c:	dd06      	ble.n	800196c <__aeabi_dmul+0x440>
 800195e:	9b01      	ldr	r3, [sp, #4]
 8001960:	2400      	movs	r4, #0
 8001962:	401d      	ands	r5, r3
 8001964:	2300      	movs	r3, #0
 8001966:	2200      	movs	r2, #0
 8001968:	4699      	mov	r9, r3
 800196a:	e646      	b.n	80015fa <__aeabi_dmul+0xce>
 800196c:	2a1f      	cmp	r2, #31
 800196e:	dc21      	bgt.n	80019b4 <__aeabi_dmul+0x488>
 8001970:	2520      	movs	r5, #32
 8001972:	0020      	movs	r0, r4
 8001974:	1aad      	subs	r5, r5, r2
 8001976:	001e      	movs	r6, r3
 8001978:	40ab      	lsls	r3, r5
 800197a:	40a8      	lsls	r0, r5
 800197c:	40d6      	lsrs	r6, r2
 800197e:	1e5d      	subs	r5, r3, #1
 8001980:	41ab      	sbcs	r3, r5
 8001982:	4330      	orrs	r0, r6
 8001984:	4318      	orrs	r0, r3
 8001986:	40d4      	lsrs	r4, r2
 8001988:	0743      	lsls	r3, r0, #29
 800198a:	d009      	beq.n	80019a0 <__aeabi_dmul+0x474>
 800198c:	230f      	movs	r3, #15
 800198e:	4003      	ands	r3, r0
 8001990:	2b04      	cmp	r3, #4
 8001992:	d005      	beq.n	80019a0 <__aeabi_dmul+0x474>
 8001994:	0003      	movs	r3, r0
 8001996:	1d18      	adds	r0, r3, #4
 8001998:	4298      	cmp	r0, r3
 800199a:	419b      	sbcs	r3, r3
 800199c:	425b      	negs	r3, r3
 800199e:	18e4      	adds	r4, r4, r3
 80019a0:	0223      	lsls	r3, r4, #8
 80019a2:	d521      	bpl.n	80019e8 <__aeabi_dmul+0x4bc>
 80019a4:	2501      	movs	r5, #1
 80019a6:	9b01      	ldr	r3, [sp, #4]
 80019a8:	2401      	movs	r4, #1
 80019aa:	401d      	ands	r5, r3
 80019ac:	2300      	movs	r3, #0
 80019ae:	2200      	movs	r2, #0
 80019b0:	4699      	mov	r9, r3
 80019b2:	e622      	b.n	80015fa <__aeabi_dmul+0xce>
 80019b4:	251f      	movs	r5, #31
 80019b6:	0021      	movs	r1, r4
 80019b8:	426d      	negs	r5, r5
 80019ba:	1a28      	subs	r0, r5, r0
 80019bc:	40c1      	lsrs	r1, r0
 80019be:	0008      	movs	r0, r1
 80019c0:	2a20      	cmp	r2, #32
 80019c2:	d01d      	beq.n	8001a00 <__aeabi_dmul+0x4d4>
 80019c4:	355f      	adds	r5, #95	; 0x5f
 80019c6:	1aaa      	subs	r2, r5, r2
 80019c8:	4094      	lsls	r4, r2
 80019ca:	4323      	orrs	r3, r4
 80019cc:	1e5c      	subs	r4, r3, #1
 80019ce:	41a3      	sbcs	r3, r4
 80019d0:	2507      	movs	r5, #7
 80019d2:	4303      	orrs	r3, r0
 80019d4:	401d      	ands	r5, r3
 80019d6:	2200      	movs	r2, #0
 80019d8:	2d00      	cmp	r5, #0
 80019da:	d009      	beq.n	80019f0 <__aeabi_dmul+0x4c4>
 80019dc:	220f      	movs	r2, #15
 80019de:	2400      	movs	r4, #0
 80019e0:	401a      	ands	r2, r3
 80019e2:	0018      	movs	r0, r3
 80019e4:	2a04      	cmp	r2, #4
 80019e6:	d1d6      	bne.n	8001996 <__aeabi_dmul+0x46a>
 80019e8:	0003      	movs	r3, r0
 80019ea:	0765      	lsls	r5, r4, #29
 80019ec:	0264      	lsls	r4, r4, #9
 80019ee:	0b22      	lsrs	r2, r4, #12
 80019f0:	08db      	lsrs	r3, r3, #3
 80019f2:	432b      	orrs	r3, r5
 80019f4:	2501      	movs	r5, #1
 80019f6:	4699      	mov	r9, r3
 80019f8:	9b01      	ldr	r3, [sp, #4]
 80019fa:	2400      	movs	r4, #0
 80019fc:	401d      	ands	r5, r3
 80019fe:	e5fc      	b.n	80015fa <__aeabi_dmul+0xce>
 8001a00:	2400      	movs	r4, #0
 8001a02:	e7e2      	b.n	80019ca <__aeabi_dmul+0x49e>
 8001a04:	2280      	movs	r2, #128	; 0x80
 8001a06:	2501      	movs	r5, #1
 8001a08:	0312      	lsls	r2, r2, #12
 8001a0a:	4322      	orrs	r2, r4
 8001a0c:	9901      	ldr	r1, [sp, #4]
 8001a0e:	0312      	lsls	r2, r2, #12
 8001a10:	0b12      	lsrs	r2, r2, #12
 8001a12:	400d      	ands	r5, r1
 8001a14:	4699      	mov	r9, r3
 8001a16:	4c04      	ldr	r4, [pc, #16]	; (8001a28 <__aeabi_dmul+0x4fc>)
 8001a18:	e5ef      	b.n	80015fa <__aeabi_dmul+0xce>
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	000003ff 	.word	0x000003ff
 8001a20:	feffffff 	.word	0xfeffffff
 8001a24:	000007fe 	.word	0x000007fe
 8001a28:	000007ff 	.word	0x000007ff

08001a2c <__aeabi_dsub>:
 8001a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2e:	4646      	mov	r6, r8
 8001a30:	46d6      	mov	lr, sl
 8001a32:	464f      	mov	r7, r9
 8001a34:	030c      	lsls	r4, r1, #12
 8001a36:	b5c0      	push	{r6, r7, lr}
 8001a38:	0fcd      	lsrs	r5, r1, #31
 8001a3a:	004e      	lsls	r6, r1, #1
 8001a3c:	0a61      	lsrs	r1, r4, #9
 8001a3e:	0f44      	lsrs	r4, r0, #29
 8001a40:	430c      	orrs	r4, r1
 8001a42:	00c1      	lsls	r1, r0, #3
 8001a44:	0058      	lsls	r0, r3, #1
 8001a46:	0d40      	lsrs	r0, r0, #21
 8001a48:	4684      	mov	ip, r0
 8001a4a:	468a      	mov	sl, r1
 8001a4c:	000f      	movs	r7, r1
 8001a4e:	0319      	lsls	r1, r3, #12
 8001a50:	0f50      	lsrs	r0, r2, #29
 8001a52:	0a49      	lsrs	r1, r1, #9
 8001a54:	4301      	orrs	r1, r0
 8001a56:	48c6      	ldr	r0, [pc, #792]	; (8001d70 <__aeabi_dsub+0x344>)
 8001a58:	0d76      	lsrs	r6, r6, #21
 8001a5a:	46a8      	mov	r8, r5
 8001a5c:	0fdb      	lsrs	r3, r3, #31
 8001a5e:	00d2      	lsls	r2, r2, #3
 8001a60:	4584      	cmp	ip, r0
 8001a62:	d100      	bne.n	8001a66 <__aeabi_dsub+0x3a>
 8001a64:	e0d8      	b.n	8001c18 <__aeabi_dsub+0x1ec>
 8001a66:	2001      	movs	r0, #1
 8001a68:	4043      	eors	r3, r0
 8001a6a:	42ab      	cmp	r3, r5
 8001a6c:	d100      	bne.n	8001a70 <__aeabi_dsub+0x44>
 8001a6e:	e0a6      	b.n	8001bbe <__aeabi_dsub+0x192>
 8001a70:	4660      	mov	r0, ip
 8001a72:	1a35      	subs	r5, r6, r0
 8001a74:	2d00      	cmp	r5, #0
 8001a76:	dc00      	bgt.n	8001a7a <__aeabi_dsub+0x4e>
 8001a78:	e105      	b.n	8001c86 <__aeabi_dsub+0x25a>
 8001a7a:	2800      	cmp	r0, #0
 8001a7c:	d110      	bne.n	8001aa0 <__aeabi_dsub+0x74>
 8001a7e:	000b      	movs	r3, r1
 8001a80:	4313      	orrs	r3, r2
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dsub+0x5a>
 8001a84:	e0d7      	b.n	8001c36 <__aeabi_dsub+0x20a>
 8001a86:	1e6b      	subs	r3, r5, #1
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d000      	beq.n	8001a8e <__aeabi_dsub+0x62>
 8001a8c:	e14b      	b.n	8001d26 <__aeabi_dsub+0x2fa>
 8001a8e:	4653      	mov	r3, sl
 8001a90:	1a9f      	subs	r7, r3, r2
 8001a92:	45ba      	cmp	sl, r7
 8001a94:	4180      	sbcs	r0, r0
 8001a96:	1a64      	subs	r4, r4, r1
 8001a98:	4240      	negs	r0, r0
 8001a9a:	1a24      	subs	r4, r4, r0
 8001a9c:	2601      	movs	r6, #1
 8001a9e:	e01e      	b.n	8001ade <__aeabi_dsub+0xb2>
 8001aa0:	4bb3      	ldr	r3, [pc, #716]	; (8001d70 <__aeabi_dsub+0x344>)
 8001aa2:	429e      	cmp	r6, r3
 8001aa4:	d048      	beq.n	8001b38 <__aeabi_dsub+0x10c>
 8001aa6:	2380      	movs	r3, #128	; 0x80
 8001aa8:	041b      	lsls	r3, r3, #16
 8001aaa:	4319      	orrs	r1, r3
 8001aac:	2d38      	cmp	r5, #56	; 0x38
 8001aae:	dd00      	ble.n	8001ab2 <__aeabi_dsub+0x86>
 8001ab0:	e119      	b.n	8001ce6 <__aeabi_dsub+0x2ba>
 8001ab2:	2d1f      	cmp	r5, #31
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dsub+0x8c>
 8001ab6:	e14c      	b.n	8001d52 <__aeabi_dsub+0x326>
 8001ab8:	2320      	movs	r3, #32
 8001aba:	000f      	movs	r7, r1
 8001abc:	1b5b      	subs	r3, r3, r5
 8001abe:	0010      	movs	r0, r2
 8001ac0:	409a      	lsls	r2, r3
 8001ac2:	409f      	lsls	r7, r3
 8001ac4:	40e8      	lsrs	r0, r5
 8001ac6:	1e53      	subs	r3, r2, #1
 8001ac8:	419a      	sbcs	r2, r3
 8001aca:	40e9      	lsrs	r1, r5
 8001acc:	4307      	orrs	r7, r0
 8001ace:	4317      	orrs	r7, r2
 8001ad0:	4653      	mov	r3, sl
 8001ad2:	1bdf      	subs	r7, r3, r7
 8001ad4:	1a61      	subs	r1, r4, r1
 8001ad6:	45ba      	cmp	sl, r7
 8001ad8:	41a4      	sbcs	r4, r4
 8001ada:	4264      	negs	r4, r4
 8001adc:	1b0c      	subs	r4, r1, r4
 8001ade:	0223      	lsls	r3, r4, #8
 8001ae0:	d400      	bmi.n	8001ae4 <__aeabi_dsub+0xb8>
 8001ae2:	e0c5      	b.n	8001c70 <__aeabi_dsub+0x244>
 8001ae4:	0264      	lsls	r4, r4, #9
 8001ae6:	0a65      	lsrs	r5, r4, #9
 8001ae8:	2d00      	cmp	r5, #0
 8001aea:	d100      	bne.n	8001aee <__aeabi_dsub+0xc2>
 8001aec:	e0f6      	b.n	8001cdc <__aeabi_dsub+0x2b0>
 8001aee:	0028      	movs	r0, r5
 8001af0:	f000 fb80 	bl	80021f4 <__clzsi2>
 8001af4:	0003      	movs	r3, r0
 8001af6:	3b08      	subs	r3, #8
 8001af8:	2b1f      	cmp	r3, #31
 8001afa:	dd00      	ble.n	8001afe <__aeabi_dsub+0xd2>
 8001afc:	e0e9      	b.n	8001cd2 <__aeabi_dsub+0x2a6>
 8001afe:	2220      	movs	r2, #32
 8001b00:	003c      	movs	r4, r7
 8001b02:	1ad2      	subs	r2, r2, r3
 8001b04:	409d      	lsls	r5, r3
 8001b06:	40d4      	lsrs	r4, r2
 8001b08:	409f      	lsls	r7, r3
 8001b0a:	4325      	orrs	r5, r4
 8001b0c:	429e      	cmp	r6, r3
 8001b0e:	dd00      	ble.n	8001b12 <__aeabi_dsub+0xe6>
 8001b10:	e0db      	b.n	8001cca <__aeabi_dsub+0x29e>
 8001b12:	1b9e      	subs	r6, r3, r6
 8001b14:	1c73      	adds	r3, r6, #1
 8001b16:	2b1f      	cmp	r3, #31
 8001b18:	dd00      	ble.n	8001b1c <__aeabi_dsub+0xf0>
 8001b1a:	e10a      	b.n	8001d32 <__aeabi_dsub+0x306>
 8001b1c:	2220      	movs	r2, #32
 8001b1e:	0038      	movs	r0, r7
 8001b20:	1ad2      	subs	r2, r2, r3
 8001b22:	0029      	movs	r1, r5
 8001b24:	4097      	lsls	r7, r2
 8001b26:	002c      	movs	r4, r5
 8001b28:	4091      	lsls	r1, r2
 8001b2a:	40d8      	lsrs	r0, r3
 8001b2c:	1e7a      	subs	r2, r7, #1
 8001b2e:	4197      	sbcs	r7, r2
 8001b30:	40dc      	lsrs	r4, r3
 8001b32:	2600      	movs	r6, #0
 8001b34:	4301      	orrs	r1, r0
 8001b36:	430f      	orrs	r7, r1
 8001b38:	077b      	lsls	r3, r7, #29
 8001b3a:	d009      	beq.n	8001b50 <__aeabi_dsub+0x124>
 8001b3c:	230f      	movs	r3, #15
 8001b3e:	403b      	ands	r3, r7
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	d005      	beq.n	8001b50 <__aeabi_dsub+0x124>
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	42bb      	cmp	r3, r7
 8001b48:	41bf      	sbcs	r7, r7
 8001b4a:	427f      	negs	r7, r7
 8001b4c:	19e4      	adds	r4, r4, r7
 8001b4e:	001f      	movs	r7, r3
 8001b50:	0223      	lsls	r3, r4, #8
 8001b52:	d525      	bpl.n	8001ba0 <__aeabi_dsub+0x174>
 8001b54:	4b86      	ldr	r3, [pc, #536]	; (8001d70 <__aeabi_dsub+0x344>)
 8001b56:	3601      	adds	r6, #1
 8001b58:	429e      	cmp	r6, r3
 8001b5a:	d100      	bne.n	8001b5e <__aeabi_dsub+0x132>
 8001b5c:	e0af      	b.n	8001cbe <__aeabi_dsub+0x292>
 8001b5e:	4b85      	ldr	r3, [pc, #532]	; (8001d74 <__aeabi_dsub+0x348>)
 8001b60:	2501      	movs	r5, #1
 8001b62:	401c      	ands	r4, r3
 8001b64:	4643      	mov	r3, r8
 8001b66:	0762      	lsls	r2, r4, #29
 8001b68:	08ff      	lsrs	r7, r7, #3
 8001b6a:	0264      	lsls	r4, r4, #9
 8001b6c:	0576      	lsls	r6, r6, #21
 8001b6e:	4317      	orrs	r7, r2
 8001b70:	0b24      	lsrs	r4, r4, #12
 8001b72:	0d76      	lsrs	r6, r6, #21
 8001b74:	401d      	ands	r5, r3
 8001b76:	2100      	movs	r1, #0
 8001b78:	0324      	lsls	r4, r4, #12
 8001b7a:	0b23      	lsrs	r3, r4, #12
 8001b7c:	0d0c      	lsrs	r4, r1, #20
 8001b7e:	4a7e      	ldr	r2, [pc, #504]	; (8001d78 <__aeabi_dsub+0x34c>)
 8001b80:	0524      	lsls	r4, r4, #20
 8001b82:	431c      	orrs	r4, r3
 8001b84:	4014      	ands	r4, r2
 8001b86:	0533      	lsls	r3, r6, #20
 8001b88:	4323      	orrs	r3, r4
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	07ed      	lsls	r5, r5, #31
 8001b8e:	085b      	lsrs	r3, r3, #1
 8001b90:	432b      	orrs	r3, r5
 8001b92:	0038      	movs	r0, r7
 8001b94:	0019      	movs	r1, r3
 8001b96:	bc1c      	pop	{r2, r3, r4}
 8001b98:	4690      	mov	r8, r2
 8001b9a:	4699      	mov	r9, r3
 8001b9c:	46a2      	mov	sl, r4
 8001b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ba0:	2501      	movs	r5, #1
 8001ba2:	4643      	mov	r3, r8
 8001ba4:	0762      	lsls	r2, r4, #29
 8001ba6:	08ff      	lsrs	r7, r7, #3
 8001ba8:	4317      	orrs	r7, r2
 8001baa:	08e4      	lsrs	r4, r4, #3
 8001bac:	401d      	ands	r5, r3
 8001bae:	4b70      	ldr	r3, [pc, #448]	; (8001d70 <__aeabi_dsub+0x344>)
 8001bb0:	429e      	cmp	r6, r3
 8001bb2:	d036      	beq.n	8001c22 <__aeabi_dsub+0x1f6>
 8001bb4:	0324      	lsls	r4, r4, #12
 8001bb6:	0576      	lsls	r6, r6, #21
 8001bb8:	0b24      	lsrs	r4, r4, #12
 8001bba:	0d76      	lsrs	r6, r6, #21
 8001bbc:	e7db      	b.n	8001b76 <__aeabi_dsub+0x14a>
 8001bbe:	4663      	mov	r3, ip
 8001bc0:	1af3      	subs	r3, r6, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	dc00      	bgt.n	8001bc8 <__aeabi_dsub+0x19c>
 8001bc6:	e094      	b.n	8001cf2 <__aeabi_dsub+0x2c6>
 8001bc8:	4660      	mov	r0, ip
 8001bca:	2800      	cmp	r0, #0
 8001bcc:	d035      	beq.n	8001c3a <__aeabi_dsub+0x20e>
 8001bce:	4868      	ldr	r0, [pc, #416]	; (8001d70 <__aeabi_dsub+0x344>)
 8001bd0:	4286      	cmp	r6, r0
 8001bd2:	d0b1      	beq.n	8001b38 <__aeabi_dsub+0x10c>
 8001bd4:	2780      	movs	r7, #128	; 0x80
 8001bd6:	043f      	lsls	r7, r7, #16
 8001bd8:	4339      	orrs	r1, r7
 8001bda:	2b38      	cmp	r3, #56	; 0x38
 8001bdc:	dc00      	bgt.n	8001be0 <__aeabi_dsub+0x1b4>
 8001bde:	e0fd      	b.n	8001ddc <__aeabi_dsub+0x3b0>
 8001be0:	430a      	orrs	r2, r1
 8001be2:	0017      	movs	r7, r2
 8001be4:	2100      	movs	r1, #0
 8001be6:	1e7a      	subs	r2, r7, #1
 8001be8:	4197      	sbcs	r7, r2
 8001bea:	4457      	add	r7, sl
 8001bec:	4557      	cmp	r7, sl
 8001bee:	4180      	sbcs	r0, r0
 8001bf0:	1909      	adds	r1, r1, r4
 8001bf2:	4244      	negs	r4, r0
 8001bf4:	190c      	adds	r4, r1, r4
 8001bf6:	0223      	lsls	r3, r4, #8
 8001bf8:	d53a      	bpl.n	8001c70 <__aeabi_dsub+0x244>
 8001bfa:	4b5d      	ldr	r3, [pc, #372]	; (8001d70 <__aeabi_dsub+0x344>)
 8001bfc:	3601      	adds	r6, #1
 8001bfe:	429e      	cmp	r6, r3
 8001c00:	d100      	bne.n	8001c04 <__aeabi_dsub+0x1d8>
 8001c02:	e14b      	b.n	8001e9c <__aeabi_dsub+0x470>
 8001c04:	2201      	movs	r2, #1
 8001c06:	4b5b      	ldr	r3, [pc, #364]	; (8001d74 <__aeabi_dsub+0x348>)
 8001c08:	401c      	ands	r4, r3
 8001c0a:	087b      	lsrs	r3, r7, #1
 8001c0c:	4017      	ands	r7, r2
 8001c0e:	431f      	orrs	r7, r3
 8001c10:	07e2      	lsls	r2, r4, #31
 8001c12:	4317      	orrs	r7, r2
 8001c14:	0864      	lsrs	r4, r4, #1
 8001c16:	e78f      	b.n	8001b38 <__aeabi_dsub+0x10c>
 8001c18:	0008      	movs	r0, r1
 8001c1a:	4310      	orrs	r0, r2
 8001c1c:	d000      	beq.n	8001c20 <__aeabi_dsub+0x1f4>
 8001c1e:	e724      	b.n	8001a6a <__aeabi_dsub+0x3e>
 8001c20:	e721      	b.n	8001a66 <__aeabi_dsub+0x3a>
 8001c22:	0023      	movs	r3, r4
 8001c24:	433b      	orrs	r3, r7
 8001c26:	d100      	bne.n	8001c2a <__aeabi_dsub+0x1fe>
 8001c28:	e1b9      	b.n	8001f9e <__aeabi_dsub+0x572>
 8001c2a:	2280      	movs	r2, #128	; 0x80
 8001c2c:	0312      	lsls	r2, r2, #12
 8001c2e:	4314      	orrs	r4, r2
 8001c30:	0324      	lsls	r4, r4, #12
 8001c32:	0b24      	lsrs	r4, r4, #12
 8001c34:	e79f      	b.n	8001b76 <__aeabi_dsub+0x14a>
 8001c36:	002e      	movs	r6, r5
 8001c38:	e77e      	b.n	8001b38 <__aeabi_dsub+0x10c>
 8001c3a:	0008      	movs	r0, r1
 8001c3c:	4310      	orrs	r0, r2
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x216>
 8001c40:	e0ca      	b.n	8001dd8 <__aeabi_dsub+0x3ac>
 8001c42:	1e58      	subs	r0, r3, #1
 8001c44:	4684      	mov	ip, r0
 8001c46:	2800      	cmp	r0, #0
 8001c48:	d000      	beq.n	8001c4c <__aeabi_dsub+0x220>
 8001c4a:	e0e7      	b.n	8001e1c <__aeabi_dsub+0x3f0>
 8001c4c:	4452      	add	r2, sl
 8001c4e:	4552      	cmp	r2, sl
 8001c50:	4180      	sbcs	r0, r0
 8001c52:	1864      	adds	r4, r4, r1
 8001c54:	4240      	negs	r0, r0
 8001c56:	1824      	adds	r4, r4, r0
 8001c58:	0017      	movs	r7, r2
 8001c5a:	2601      	movs	r6, #1
 8001c5c:	0223      	lsls	r3, r4, #8
 8001c5e:	d507      	bpl.n	8001c70 <__aeabi_dsub+0x244>
 8001c60:	2602      	movs	r6, #2
 8001c62:	e7cf      	b.n	8001c04 <__aeabi_dsub+0x1d8>
 8001c64:	4664      	mov	r4, ip
 8001c66:	432c      	orrs	r4, r5
 8001c68:	d100      	bne.n	8001c6c <__aeabi_dsub+0x240>
 8001c6a:	e1b3      	b.n	8001fd4 <__aeabi_dsub+0x5a8>
 8001c6c:	002c      	movs	r4, r5
 8001c6e:	4667      	mov	r7, ip
 8001c70:	077b      	lsls	r3, r7, #29
 8001c72:	d000      	beq.n	8001c76 <__aeabi_dsub+0x24a>
 8001c74:	e762      	b.n	8001b3c <__aeabi_dsub+0x110>
 8001c76:	0763      	lsls	r3, r4, #29
 8001c78:	08ff      	lsrs	r7, r7, #3
 8001c7a:	431f      	orrs	r7, r3
 8001c7c:	2501      	movs	r5, #1
 8001c7e:	4643      	mov	r3, r8
 8001c80:	08e4      	lsrs	r4, r4, #3
 8001c82:	401d      	ands	r5, r3
 8001c84:	e793      	b.n	8001bae <__aeabi_dsub+0x182>
 8001c86:	2d00      	cmp	r5, #0
 8001c88:	d178      	bne.n	8001d7c <__aeabi_dsub+0x350>
 8001c8a:	1c75      	adds	r5, r6, #1
 8001c8c:	056d      	lsls	r5, r5, #21
 8001c8e:	0d6d      	lsrs	r5, r5, #21
 8001c90:	2d01      	cmp	r5, #1
 8001c92:	dc00      	bgt.n	8001c96 <__aeabi_dsub+0x26a>
 8001c94:	e0f2      	b.n	8001e7c <__aeabi_dsub+0x450>
 8001c96:	4650      	mov	r0, sl
 8001c98:	1a80      	subs	r0, r0, r2
 8001c9a:	4582      	cmp	sl, r0
 8001c9c:	41bf      	sbcs	r7, r7
 8001c9e:	1a65      	subs	r5, r4, r1
 8001ca0:	427f      	negs	r7, r7
 8001ca2:	1bed      	subs	r5, r5, r7
 8001ca4:	4684      	mov	ip, r0
 8001ca6:	0228      	lsls	r0, r5, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0x280>
 8001caa:	e08c      	b.n	8001dc6 <__aeabi_dsub+0x39a>
 8001cac:	4650      	mov	r0, sl
 8001cae:	1a17      	subs	r7, r2, r0
 8001cb0:	42ba      	cmp	r2, r7
 8001cb2:	4192      	sbcs	r2, r2
 8001cb4:	1b0c      	subs	r4, r1, r4
 8001cb6:	4255      	negs	r5, r2
 8001cb8:	1b65      	subs	r5, r4, r5
 8001cba:	4698      	mov	r8, r3
 8001cbc:	e714      	b.n	8001ae8 <__aeabi_dsub+0xbc>
 8001cbe:	2501      	movs	r5, #1
 8001cc0:	4643      	mov	r3, r8
 8001cc2:	2400      	movs	r4, #0
 8001cc4:	401d      	ands	r5, r3
 8001cc6:	2700      	movs	r7, #0
 8001cc8:	e755      	b.n	8001b76 <__aeabi_dsub+0x14a>
 8001cca:	4c2a      	ldr	r4, [pc, #168]	; (8001d74 <__aeabi_dsub+0x348>)
 8001ccc:	1af6      	subs	r6, r6, r3
 8001cce:	402c      	ands	r4, r5
 8001cd0:	e732      	b.n	8001b38 <__aeabi_dsub+0x10c>
 8001cd2:	003d      	movs	r5, r7
 8001cd4:	3828      	subs	r0, #40	; 0x28
 8001cd6:	4085      	lsls	r5, r0
 8001cd8:	2700      	movs	r7, #0
 8001cda:	e717      	b.n	8001b0c <__aeabi_dsub+0xe0>
 8001cdc:	0038      	movs	r0, r7
 8001cde:	f000 fa89 	bl	80021f4 <__clzsi2>
 8001ce2:	3020      	adds	r0, #32
 8001ce4:	e706      	b.n	8001af4 <__aeabi_dsub+0xc8>
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	0017      	movs	r7, r2
 8001cea:	2100      	movs	r1, #0
 8001cec:	1e7a      	subs	r2, r7, #1
 8001cee:	4197      	sbcs	r7, r2
 8001cf0:	e6ee      	b.n	8001ad0 <__aeabi_dsub+0xa4>
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d000      	beq.n	8001cf8 <__aeabi_dsub+0x2cc>
 8001cf6:	e0e5      	b.n	8001ec4 <__aeabi_dsub+0x498>
 8001cf8:	1c73      	adds	r3, r6, #1
 8001cfa:	469c      	mov	ip, r3
 8001cfc:	055b      	lsls	r3, r3, #21
 8001cfe:	0d5b      	lsrs	r3, r3, #21
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	dc00      	bgt.n	8001d06 <__aeabi_dsub+0x2da>
 8001d04:	e09f      	b.n	8001e46 <__aeabi_dsub+0x41a>
 8001d06:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <__aeabi_dsub+0x344>)
 8001d08:	459c      	cmp	ip, r3
 8001d0a:	d100      	bne.n	8001d0e <__aeabi_dsub+0x2e2>
 8001d0c:	e0c5      	b.n	8001e9a <__aeabi_dsub+0x46e>
 8001d0e:	4452      	add	r2, sl
 8001d10:	4552      	cmp	r2, sl
 8001d12:	4180      	sbcs	r0, r0
 8001d14:	1864      	adds	r4, r4, r1
 8001d16:	4240      	negs	r0, r0
 8001d18:	1824      	adds	r4, r4, r0
 8001d1a:	07e7      	lsls	r7, r4, #31
 8001d1c:	0852      	lsrs	r2, r2, #1
 8001d1e:	4317      	orrs	r7, r2
 8001d20:	0864      	lsrs	r4, r4, #1
 8001d22:	4666      	mov	r6, ip
 8001d24:	e708      	b.n	8001b38 <__aeabi_dsub+0x10c>
 8001d26:	4812      	ldr	r0, [pc, #72]	; (8001d70 <__aeabi_dsub+0x344>)
 8001d28:	4285      	cmp	r5, r0
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x302>
 8001d2c:	e085      	b.n	8001e3a <__aeabi_dsub+0x40e>
 8001d2e:	001d      	movs	r5, r3
 8001d30:	e6bc      	b.n	8001aac <__aeabi_dsub+0x80>
 8001d32:	0029      	movs	r1, r5
 8001d34:	3e1f      	subs	r6, #31
 8001d36:	40f1      	lsrs	r1, r6
 8001d38:	2b20      	cmp	r3, #32
 8001d3a:	d100      	bne.n	8001d3e <__aeabi_dsub+0x312>
 8001d3c:	e07f      	b.n	8001e3e <__aeabi_dsub+0x412>
 8001d3e:	2240      	movs	r2, #64	; 0x40
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	409d      	lsls	r5, r3
 8001d44:	432f      	orrs	r7, r5
 8001d46:	1e7d      	subs	r5, r7, #1
 8001d48:	41af      	sbcs	r7, r5
 8001d4a:	2400      	movs	r4, #0
 8001d4c:	430f      	orrs	r7, r1
 8001d4e:	2600      	movs	r6, #0
 8001d50:	e78e      	b.n	8001c70 <__aeabi_dsub+0x244>
 8001d52:	002b      	movs	r3, r5
 8001d54:	000f      	movs	r7, r1
 8001d56:	3b20      	subs	r3, #32
 8001d58:	40df      	lsrs	r7, r3
 8001d5a:	2d20      	cmp	r5, #32
 8001d5c:	d071      	beq.n	8001e42 <__aeabi_dsub+0x416>
 8001d5e:	2340      	movs	r3, #64	; 0x40
 8001d60:	1b5d      	subs	r5, r3, r5
 8001d62:	40a9      	lsls	r1, r5
 8001d64:	430a      	orrs	r2, r1
 8001d66:	1e51      	subs	r1, r2, #1
 8001d68:	418a      	sbcs	r2, r1
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	4317      	orrs	r7, r2
 8001d6e:	e6af      	b.n	8001ad0 <__aeabi_dsub+0xa4>
 8001d70:	000007ff 	.word	0x000007ff
 8001d74:	ff7fffff 	.word	0xff7fffff
 8001d78:	800fffff 	.word	0x800fffff
 8001d7c:	2e00      	cmp	r6, #0
 8001d7e:	d03e      	beq.n	8001dfe <__aeabi_dsub+0x3d2>
 8001d80:	4eb3      	ldr	r6, [pc, #716]	; (8002050 <__aeabi_dsub+0x624>)
 8001d82:	45b4      	cmp	ip, r6
 8001d84:	d045      	beq.n	8001e12 <__aeabi_dsub+0x3e6>
 8001d86:	2680      	movs	r6, #128	; 0x80
 8001d88:	0436      	lsls	r6, r6, #16
 8001d8a:	426d      	negs	r5, r5
 8001d8c:	4334      	orrs	r4, r6
 8001d8e:	2d38      	cmp	r5, #56	; 0x38
 8001d90:	dd00      	ble.n	8001d94 <__aeabi_dsub+0x368>
 8001d92:	e0a8      	b.n	8001ee6 <__aeabi_dsub+0x4ba>
 8001d94:	2d1f      	cmp	r5, #31
 8001d96:	dd00      	ble.n	8001d9a <__aeabi_dsub+0x36e>
 8001d98:	e11f      	b.n	8001fda <__aeabi_dsub+0x5ae>
 8001d9a:	2620      	movs	r6, #32
 8001d9c:	0027      	movs	r7, r4
 8001d9e:	4650      	mov	r0, sl
 8001da0:	1b76      	subs	r6, r6, r5
 8001da2:	40b7      	lsls	r7, r6
 8001da4:	40e8      	lsrs	r0, r5
 8001da6:	4307      	orrs	r7, r0
 8001da8:	4650      	mov	r0, sl
 8001daa:	40b0      	lsls	r0, r6
 8001dac:	1e46      	subs	r6, r0, #1
 8001dae:	41b0      	sbcs	r0, r6
 8001db0:	40ec      	lsrs	r4, r5
 8001db2:	4338      	orrs	r0, r7
 8001db4:	1a17      	subs	r7, r2, r0
 8001db6:	42ba      	cmp	r2, r7
 8001db8:	4192      	sbcs	r2, r2
 8001dba:	1b0c      	subs	r4, r1, r4
 8001dbc:	4252      	negs	r2, r2
 8001dbe:	1aa4      	subs	r4, r4, r2
 8001dc0:	4666      	mov	r6, ip
 8001dc2:	4698      	mov	r8, r3
 8001dc4:	e68b      	b.n	8001ade <__aeabi_dsub+0xb2>
 8001dc6:	4664      	mov	r4, ip
 8001dc8:	4667      	mov	r7, ip
 8001dca:	432c      	orrs	r4, r5
 8001dcc:	d000      	beq.n	8001dd0 <__aeabi_dsub+0x3a4>
 8001dce:	e68b      	b.n	8001ae8 <__aeabi_dsub+0xbc>
 8001dd0:	2500      	movs	r5, #0
 8001dd2:	2600      	movs	r6, #0
 8001dd4:	2700      	movs	r7, #0
 8001dd6:	e6ea      	b.n	8001bae <__aeabi_dsub+0x182>
 8001dd8:	001e      	movs	r6, r3
 8001dda:	e6ad      	b.n	8001b38 <__aeabi_dsub+0x10c>
 8001ddc:	2b1f      	cmp	r3, #31
 8001dde:	dc60      	bgt.n	8001ea2 <__aeabi_dsub+0x476>
 8001de0:	2720      	movs	r7, #32
 8001de2:	1af8      	subs	r0, r7, r3
 8001de4:	000f      	movs	r7, r1
 8001de6:	4684      	mov	ip, r0
 8001de8:	4087      	lsls	r7, r0
 8001dea:	0010      	movs	r0, r2
 8001dec:	40d8      	lsrs	r0, r3
 8001dee:	4307      	orrs	r7, r0
 8001df0:	4660      	mov	r0, ip
 8001df2:	4082      	lsls	r2, r0
 8001df4:	1e50      	subs	r0, r2, #1
 8001df6:	4182      	sbcs	r2, r0
 8001df8:	40d9      	lsrs	r1, r3
 8001dfa:	4317      	orrs	r7, r2
 8001dfc:	e6f5      	b.n	8001bea <__aeabi_dsub+0x1be>
 8001dfe:	0026      	movs	r6, r4
 8001e00:	4650      	mov	r0, sl
 8001e02:	4306      	orrs	r6, r0
 8001e04:	d005      	beq.n	8001e12 <__aeabi_dsub+0x3e6>
 8001e06:	43ed      	mvns	r5, r5
 8001e08:	2d00      	cmp	r5, #0
 8001e0a:	d0d3      	beq.n	8001db4 <__aeabi_dsub+0x388>
 8001e0c:	4e90      	ldr	r6, [pc, #576]	; (8002050 <__aeabi_dsub+0x624>)
 8001e0e:	45b4      	cmp	ip, r6
 8001e10:	d1bd      	bne.n	8001d8e <__aeabi_dsub+0x362>
 8001e12:	000c      	movs	r4, r1
 8001e14:	0017      	movs	r7, r2
 8001e16:	4666      	mov	r6, ip
 8001e18:	4698      	mov	r8, r3
 8001e1a:	e68d      	b.n	8001b38 <__aeabi_dsub+0x10c>
 8001e1c:	488c      	ldr	r0, [pc, #560]	; (8002050 <__aeabi_dsub+0x624>)
 8001e1e:	4283      	cmp	r3, r0
 8001e20:	d00b      	beq.n	8001e3a <__aeabi_dsub+0x40e>
 8001e22:	4663      	mov	r3, ip
 8001e24:	e6d9      	b.n	8001bda <__aeabi_dsub+0x1ae>
 8001e26:	2d00      	cmp	r5, #0
 8001e28:	d000      	beq.n	8001e2c <__aeabi_dsub+0x400>
 8001e2a:	e096      	b.n	8001f5a <__aeabi_dsub+0x52e>
 8001e2c:	0008      	movs	r0, r1
 8001e2e:	4310      	orrs	r0, r2
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x408>
 8001e32:	e0e2      	b.n	8001ffa <__aeabi_dsub+0x5ce>
 8001e34:	000c      	movs	r4, r1
 8001e36:	0017      	movs	r7, r2
 8001e38:	4698      	mov	r8, r3
 8001e3a:	4e85      	ldr	r6, [pc, #532]	; (8002050 <__aeabi_dsub+0x624>)
 8001e3c:	e67c      	b.n	8001b38 <__aeabi_dsub+0x10c>
 8001e3e:	2500      	movs	r5, #0
 8001e40:	e780      	b.n	8001d44 <__aeabi_dsub+0x318>
 8001e42:	2100      	movs	r1, #0
 8001e44:	e78e      	b.n	8001d64 <__aeabi_dsub+0x338>
 8001e46:	0023      	movs	r3, r4
 8001e48:	4650      	mov	r0, sl
 8001e4a:	4303      	orrs	r3, r0
 8001e4c:	2e00      	cmp	r6, #0
 8001e4e:	d000      	beq.n	8001e52 <__aeabi_dsub+0x426>
 8001e50:	e0a8      	b.n	8001fa4 <__aeabi_dsub+0x578>
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d100      	bne.n	8001e58 <__aeabi_dsub+0x42c>
 8001e56:	e0de      	b.n	8002016 <__aeabi_dsub+0x5ea>
 8001e58:	000b      	movs	r3, r1
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	d100      	bne.n	8001e60 <__aeabi_dsub+0x434>
 8001e5e:	e66b      	b.n	8001b38 <__aeabi_dsub+0x10c>
 8001e60:	4452      	add	r2, sl
 8001e62:	4552      	cmp	r2, sl
 8001e64:	4180      	sbcs	r0, r0
 8001e66:	1864      	adds	r4, r4, r1
 8001e68:	4240      	negs	r0, r0
 8001e6a:	1824      	adds	r4, r4, r0
 8001e6c:	0017      	movs	r7, r2
 8001e6e:	0223      	lsls	r3, r4, #8
 8001e70:	d400      	bmi.n	8001e74 <__aeabi_dsub+0x448>
 8001e72:	e6fd      	b.n	8001c70 <__aeabi_dsub+0x244>
 8001e74:	4b77      	ldr	r3, [pc, #476]	; (8002054 <__aeabi_dsub+0x628>)
 8001e76:	4666      	mov	r6, ip
 8001e78:	401c      	ands	r4, r3
 8001e7a:	e65d      	b.n	8001b38 <__aeabi_dsub+0x10c>
 8001e7c:	0025      	movs	r5, r4
 8001e7e:	4650      	mov	r0, sl
 8001e80:	4305      	orrs	r5, r0
 8001e82:	2e00      	cmp	r6, #0
 8001e84:	d1cf      	bne.n	8001e26 <__aeabi_dsub+0x3fa>
 8001e86:	2d00      	cmp	r5, #0
 8001e88:	d14f      	bne.n	8001f2a <__aeabi_dsub+0x4fe>
 8001e8a:	000c      	movs	r4, r1
 8001e8c:	4314      	orrs	r4, r2
 8001e8e:	d100      	bne.n	8001e92 <__aeabi_dsub+0x466>
 8001e90:	e0a0      	b.n	8001fd4 <__aeabi_dsub+0x5a8>
 8001e92:	000c      	movs	r4, r1
 8001e94:	0017      	movs	r7, r2
 8001e96:	4698      	mov	r8, r3
 8001e98:	e64e      	b.n	8001b38 <__aeabi_dsub+0x10c>
 8001e9a:	4666      	mov	r6, ip
 8001e9c:	2400      	movs	r4, #0
 8001e9e:	2700      	movs	r7, #0
 8001ea0:	e685      	b.n	8001bae <__aeabi_dsub+0x182>
 8001ea2:	001f      	movs	r7, r3
 8001ea4:	0008      	movs	r0, r1
 8001ea6:	3f20      	subs	r7, #32
 8001ea8:	40f8      	lsrs	r0, r7
 8001eaa:	0007      	movs	r7, r0
 8001eac:	2b20      	cmp	r3, #32
 8001eae:	d100      	bne.n	8001eb2 <__aeabi_dsub+0x486>
 8001eb0:	e08e      	b.n	8001fd0 <__aeabi_dsub+0x5a4>
 8001eb2:	2040      	movs	r0, #64	; 0x40
 8001eb4:	1ac3      	subs	r3, r0, r3
 8001eb6:	4099      	lsls	r1, r3
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	1e51      	subs	r1, r2, #1
 8001ebc:	418a      	sbcs	r2, r1
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	4317      	orrs	r7, r2
 8001ec2:	e692      	b.n	8001bea <__aeabi_dsub+0x1be>
 8001ec4:	2e00      	cmp	r6, #0
 8001ec6:	d114      	bne.n	8001ef2 <__aeabi_dsub+0x4c6>
 8001ec8:	0026      	movs	r6, r4
 8001eca:	4650      	mov	r0, sl
 8001ecc:	4306      	orrs	r6, r0
 8001ece:	d062      	beq.n	8001f96 <__aeabi_dsub+0x56a>
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d15c      	bne.n	8001f90 <__aeabi_dsub+0x564>
 8001ed6:	1887      	adds	r7, r0, r2
 8001ed8:	4297      	cmp	r7, r2
 8001eda:	4192      	sbcs	r2, r2
 8001edc:	1864      	adds	r4, r4, r1
 8001ede:	4252      	negs	r2, r2
 8001ee0:	18a4      	adds	r4, r4, r2
 8001ee2:	4666      	mov	r6, ip
 8001ee4:	e687      	b.n	8001bf6 <__aeabi_dsub+0x1ca>
 8001ee6:	4650      	mov	r0, sl
 8001ee8:	4320      	orrs	r0, r4
 8001eea:	1e44      	subs	r4, r0, #1
 8001eec:	41a0      	sbcs	r0, r4
 8001eee:	2400      	movs	r4, #0
 8001ef0:	e760      	b.n	8001db4 <__aeabi_dsub+0x388>
 8001ef2:	4e57      	ldr	r6, [pc, #348]	; (8002050 <__aeabi_dsub+0x624>)
 8001ef4:	45b4      	cmp	ip, r6
 8001ef6:	d04e      	beq.n	8001f96 <__aeabi_dsub+0x56a>
 8001ef8:	2680      	movs	r6, #128	; 0x80
 8001efa:	0436      	lsls	r6, r6, #16
 8001efc:	425b      	negs	r3, r3
 8001efe:	4334      	orrs	r4, r6
 8001f00:	2b38      	cmp	r3, #56	; 0x38
 8001f02:	dd00      	ble.n	8001f06 <__aeabi_dsub+0x4da>
 8001f04:	e07f      	b.n	8002006 <__aeabi_dsub+0x5da>
 8001f06:	2b1f      	cmp	r3, #31
 8001f08:	dd00      	ble.n	8001f0c <__aeabi_dsub+0x4e0>
 8001f0a:	e08b      	b.n	8002024 <__aeabi_dsub+0x5f8>
 8001f0c:	2620      	movs	r6, #32
 8001f0e:	0027      	movs	r7, r4
 8001f10:	4650      	mov	r0, sl
 8001f12:	1af6      	subs	r6, r6, r3
 8001f14:	40b7      	lsls	r7, r6
 8001f16:	40d8      	lsrs	r0, r3
 8001f18:	4307      	orrs	r7, r0
 8001f1a:	4650      	mov	r0, sl
 8001f1c:	40b0      	lsls	r0, r6
 8001f1e:	1e46      	subs	r6, r0, #1
 8001f20:	41b0      	sbcs	r0, r6
 8001f22:	4307      	orrs	r7, r0
 8001f24:	40dc      	lsrs	r4, r3
 8001f26:	18bf      	adds	r7, r7, r2
 8001f28:	e7d6      	b.n	8001ed8 <__aeabi_dsub+0x4ac>
 8001f2a:	000d      	movs	r5, r1
 8001f2c:	4315      	orrs	r5, r2
 8001f2e:	d100      	bne.n	8001f32 <__aeabi_dsub+0x506>
 8001f30:	e602      	b.n	8001b38 <__aeabi_dsub+0x10c>
 8001f32:	4650      	mov	r0, sl
 8001f34:	1a80      	subs	r0, r0, r2
 8001f36:	4582      	cmp	sl, r0
 8001f38:	41bf      	sbcs	r7, r7
 8001f3a:	1a65      	subs	r5, r4, r1
 8001f3c:	427f      	negs	r7, r7
 8001f3e:	1bed      	subs	r5, r5, r7
 8001f40:	4684      	mov	ip, r0
 8001f42:	0228      	lsls	r0, r5, #8
 8001f44:	d400      	bmi.n	8001f48 <__aeabi_dsub+0x51c>
 8001f46:	e68d      	b.n	8001c64 <__aeabi_dsub+0x238>
 8001f48:	4650      	mov	r0, sl
 8001f4a:	1a17      	subs	r7, r2, r0
 8001f4c:	42ba      	cmp	r2, r7
 8001f4e:	4192      	sbcs	r2, r2
 8001f50:	1b0c      	subs	r4, r1, r4
 8001f52:	4252      	negs	r2, r2
 8001f54:	1aa4      	subs	r4, r4, r2
 8001f56:	4698      	mov	r8, r3
 8001f58:	e5ee      	b.n	8001b38 <__aeabi_dsub+0x10c>
 8001f5a:	000d      	movs	r5, r1
 8001f5c:	4315      	orrs	r5, r2
 8001f5e:	d100      	bne.n	8001f62 <__aeabi_dsub+0x536>
 8001f60:	e76b      	b.n	8001e3a <__aeabi_dsub+0x40e>
 8001f62:	4650      	mov	r0, sl
 8001f64:	0767      	lsls	r7, r4, #29
 8001f66:	08c0      	lsrs	r0, r0, #3
 8001f68:	4307      	orrs	r7, r0
 8001f6a:	2080      	movs	r0, #128	; 0x80
 8001f6c:	08e4      	lsrs	r4, r4, #3
 8001f6e:	0300      	lsls	r0, r0, #12
 8001f70:	4204      	tst	r4, r0
 8001f72:	d007      	beq.n	8001f84 <__aeabi_dsub+0x558>
 8001f74:	08cd      	lsrs	r5, r1, #3
 8001f76:	4205      	tst	r5, r0
 8001f78:	d104      	bne.n	8001f84 <__aeabi_dsub+0x558>
 8001f7a:	002c      	movs	r4, r5
 8001f7c:	4698      	mov	r8, r3
 8001f7e:	08d7      	lsrs	r7, r2, #3
 8001f80:	0749      	lsls	r1, r1, #29
 8001f82:	430f      	orrs	r7, r1
 8001f84:	0f7b      	lsrs	r3, r7, #29
 8001f86:	00e4      	lsls	r4, r4, #3
 8001f88:	431c      	orrs	r4, r3
 8001f8a:	00ff      	lsls	r7, r7, #3
 8001f8c:	4e30      	ldr	r6, [pc, #192]	; (8002050 <__aeabi_dsub+0x624>)
 8001f8e:	e5d3      	b.n	8001b38 <__aeabi_dsub+0x10c>
 8001f90:	4e2f      	ldr	r6, [pc, #188]	; (8002050 <__aeabi_dsub+0x624>)
 8001f92:	45b4      	cmp	ip, r6
 8001f94:	d1b4      	bne.n	8001f00 <__aeabi_dsub+0x4d4>
 8001f96:	000c      	movs	r4, r1
 8001f98:	0017      	movs	r7, r2
 8001f9a:	4666      	mov	r6, ip
 8001f9c:	e5cc      	b.n	8001b38 <__aeabi_dsub+0x10c>
 8001f9e:	2700      	movs	r7, #0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	e5e8      	b.n	8001b76 <__aeabi_dsub+0x14a>
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d039      	beq.n	800201c <__aeabi_dsub+0x5f0>
 8001fa8:	000b      	movs	r3, r1
 8001faa:	4313      	orrs	r3, r2
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_dsub+0x584>
 8001fae:	e744      	b.n	8001e3a <__aeabi_dsub+0x40e>
 8001fb0:	08c0      	lsrs	r0, r0, #3
 8001fb2:	0767      	lsls	r7, r4, #29
 8001fb4:	4307      	orrs	r7, r0
 8001fb6:	2080      	movs	r0, #128	; 0x80
 8001fb8:	08e4      	lsrs	r4, r4, #3
 8001fba:	0300      	lsls	r0, r0, #12
 8001fbc:	4204      	tst	r4, r0
 8001fbe:	d0e1      	beq.n	8001f84 <__aeabi_dsub+0x558>
 8001fc0:	08cb      	lsrs	r3, r1, #3
 8001fc2:	4203      	tst	r3, r0
 8001fc4:	d1de      	bne.n	8001f84 <__aeabi_dsub+0x558>
 8001fc6:	08d7      	lsrs	r7, r2, #3
 8001fc8:	0749      	lsls	r1, r1, #29
 8001fca:	430f      	orrs	r7, r1
 8001fcc:	001c      	movs	r4, r3
 8001fce:	e7d9      	b.n	8001f84 <__aeabi_dsub+0x558>
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	e771      	b.n	8001eb8 <__aeabi_dsub+0x48c>
 8001fd4:	2500      	movs	r5, #0
 8001fd6:	2700      	movs	r7, #0
 8001fd8:	e5e9      	b.n	8001bae <__aeabi_dsub+0x182>
 8001fda:	002e      	movs	r6, r5
 8001fdc:	0027      	movs	r7, r4
 8001fde:	3e20      	subs	r6, #32
 8001fe0:	40f7      	lsrs	r7, r6
 8001fe2:	2d20      	cmp	r5, #32
 8001fe4:	d02f      	beq.n	8002046 <__aeabi_dsub+0x61a>
 8001fe6:	2640      	movs	r6, #64	; 0x40
 8001fe8:	1b75      	subs	r5, r6, r5
 8001fea:	40ac      	lsls	r4, r5
 8001fec:	4650      	mov	r0, sl
 8001fee:	4320      	orrs	r0, r4
 8001ff0:	1e44      	subs	r4, r0, #1
 8001ff2:	41a0      	sbcs	r0, r4
 8001ff4:	2400      	movs	r4, #0
 8001ff6:	4338      	orrs	r0, r7
 8001ff8:	e6dc      	b.n	8001db4 <__aeabi_dsub+0x388>
 8001ffa:	2480      	movs	r4, #128	; 0x80
 8001ffc:	2500      	movs	r5, #0
 8001ffe:	0324      	lsls	r4, r4, #12
 8002000:	4e13      	ldr	r6, [pc, #76]	; (8002050 <__aeabi_dsub+0x624>)
 8002002:	2700      	movs	r7, #0
 8002004:	e5d3      	b.n	8001bae <__aeabi_dsub+0x182>
 8002006:	4650      	mov	r0, sl
 8002008:	4320      	orrs	r0, r4
 800200a:	0007      	movs	r7, r0
 800200c:	1e78      	subs	r0, r7, #1
 800200e:	4187      	sbcs	r7, r0
 8002010:	2400      	movs	r4, #0
 8002012:	18bf      	adds	r7, r7, r2
 8002014:	e760      	b.n	8001ed8 <__aeabi_dsub+0x4ac>
 8002016:	000c      	movs	r4, r1
 8002018:	0017      	movs	r7, r2
 800201a:	e58d      	b.n	8001b38 <__aeabi_dsub+0x10c>
 800201c:	000c      	movs	r4, r1
 800201e:	0017      	movs	r7, r2
 8002020:	4e0b      	ldr	r6, [pc, #44]	; (8002050 <__aeabi_dsub+0x624>)
 8002022:	e589      	b.n	8001b38 <__aeabi_dsub+0x10c>
 8002024:	001e      	movs	r6, r3
 8002026:	0027      	movs	r7, r4
 8002028:	3e20      	subs	r6, #32
 800202a:	40f7      	lsrs	r7, r6
 800202c:	2b20      	cmp	r3, #32
 800202e:	d00c      	beq.n	800204a <__aeabi_dsub+0x61e>
 8002030:	2640      	movs	r6, #64	; 0x40
 8002032:	1af3      	subs	r3, r6, r3
 8002034:	409c      	lsls	r4, r3
 8002036:	4650      	mov	r0, sl
 8002038:	4320      	orrs	r0, r4
 800203a:	1e44      	subs	r4, r0, #1
 800203c:	41a0      	sbcs	r0, r4
 800203e:	4307      	orrs	r7, r0
 8002040:	2400      	movs	r4, #0
 8002042:	18bf      	adds	r7, r7, r2
 8002044:	e748      	b.n	8001ed8 <__aeabi_dsub+0x4ac>
 8002046:	2400      	movs	r4, #0
 8002048:	e7d0      	b.n	8001fec <__aeabi_dsub+0x5c0>
 800204a:	2400      	movs	r4, #0
 800204c:	e7f3      	b.n	8002036 <__aeabi_dsub+0x60a>
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	000007ff 	.word	0x000007ff
 8002054:	ff7fffff 	.word	0xff7fffff

08002058 <__aeabi_dcmpun>:
 8002058:	b570      	push	{r4, r5, r6, lr}
 800205a:	4e0e      	ldr	r6, [pc, #56]	; (8002094 <__aeabi_dcmpun+0x3c>)
 800205c:	030d      	lsls	r5, r1, #12
 800205e:	031c      	lsls	r4, r3, #12
 8002060:	0049      	lsls	r1, r1, #1
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	0b2d      	lsrs	r5, r5, #12
 8002066:	0d49      	lsrs	r1, r1, #21
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	42b1      	cmp	r1, r6
 800206e:	d004      	beq.n	800207a <__aeabi_dcmpun+0x22>
 8002070:	4908      	ldr	r1, [pc, #32]	; (8002094 <__aeabi_dcmpun+0x3c>)
 8002072:	2000      	movs	r0, #0
 8002074:	428b      	cmp	r3, r1
 8002076:	d008      	beq.n	800208a <__aeabi_dcmpun+0x32>
 8002078:	bd70      	pop	{r4, r5, r6, pc}
 800207a:	4305      	orrs	r5, r0
 800207c:	2001      	movs	r0, #1
 800207e:	2d00      	cmp	r5, #0
 8002080:	d1fa      	bne.n	8002078 <__aeabi_dcmpun+0x20>
 8002082:	4904      	ldr	r1, [pc, #16]	; (8002094 <__aeabi_dcmpun+0x3c>)
 8002084:	2000      	movs	r0, #0
 8002086:	428b      	cmp	r3, r1
 8002088:	d1f6      	bne.n	8002078 <__aeabi_dcmpun+0x20>
 800208a:	4314      	orrs	r4, r2
 800208c:	0020      	movs	r0, r4
 800208e:	1e44      	subs	r4, r0, #1
 8002090:	41a0      	sbcs	r0, r4
 8002092:	e7f1      	b.n	8002078 <__aeabi_dcmpun+0x20>
 8002094:	000007ff 	.word	0x000007ff

08002098 <__aeabi_d2iz>:
 8002098:	b530      	push	{r4, r5, lr}
 800209a:	4d13      	ldr	r5, [pc, #76]	; (80020e8 <__aeabi_d2iz+0x50>)
 800209c:	030a      	lsls	r2, r1, #12
 800209e:	004b      	lsls	r3, r1, #1
 80020a0:	0b12      	lsrs	r2, r2, #12
 80020a2:	0d5b      	lsrs	r3, r3, #21
 80020a4:	0fc9      	lsrs	r1, r1, #31
 80020a6:	2400      	movs	r4, #0
 80020a8:	42ab      	cmp	r3, r5
 80020aa:	dd10      	ble.n	80020ce <__aeabi_d2iz+0x36>
 80020ac:	4c0f      	ldr	r4, [pc, #60]	; (80020ec <__aeabi_d2iz+0x54>)
 80020ae:	42a3      	cmp	r3, r4
 80020b0:	dc0f      	bgt.n	80020d2 <__aeabi_d2iz+0x3a>
 80020b2:	2480      	movs	r4, #128	; 0x80
 80020b4:	4d0e      	ldr	r5, [pc, #56]	; (80020f0 <__aeabi_d2iz+0x58>)
 80020b6:	0364      	lsls	r4, r4, #13
 80020b8:	4322      	orrs	r2, r4
 80020ba:	1aed      	subs	r5, r5, r3
 80020bc:	2d1f      	cmp	r5, #31
 80020be:	dd0b      	ble.n	80020d8 <__aeabi_d2iz+0x40>
 80020c0:	480c      	ldr	r0, [pc, #48]	; (80020f4 <__aeabi_d2iz+0x5c>)
 80020c2:	1ac3      	subs	r3, r0, r3
 80020c4:	40da      	lsrs	r2, r3
 80020c6:	4254      	negs	r4, r2
 80020c8:	2900      	cmp	r1, #0
 80020ca:	d100      	bne.n	80020ce <__aeabi_d2iz+0x36>
 80020cc:	0014      	movs	r4, r2
 80020ce:	0020      	movs	r0, r4
 80020d0:	bd30      	pop	{r4, r5, pc}
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <__aeabi_d2iz+0x60>)
 80020d4:	18cc      	adds	r4, r1, r3
 80020d6:	e7fa      	b.n	80020ce <__aeabi_d2iz+0x36>
 80020d8:	4c08      	ldr	r4, [pc, #32]	; (80020fc <__aeabi_d2iz+0x64>)
 80020da:	40e8      	lsrs	r0, r5
 80020dc:	46a4      	mov	ip, r4
 80020de:	4463      	add	r3, ip
 80020e0:	409a      	lsls	r2, r3
 80020e2:	4302      	orrs	r2, r0
 80020e4:	e7ef      	b.n	80020c6 <__aeabi_d2iz+0x2e>
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	000003fe 	.word	0x000003fe
 80020ec:	0000041d 	.word	0x0000041d
 80020f0:	00000433 	.word	0x00000433
 80020f4:	00000413 	.word	0x00000413
 80020f8:	7fffffff 	.word	0x7fffffff
 80020fc:	fffffbed 	.word	0xfffffbed

08002100 <__aeabi_i2d>:
 8002100:	b570      	push	{r4, r5, r6, lr}
 8002102:	2800      	cmp	r0, #0
 8002104:	d030      	beq.n	8002168 <__aeabi_i2d+0x68>
 8002106:	17c3      	asrs	r3, r0, #31
 8002108:	18c4      	adds	r4, r0, r3
 800210a:	405c      	eors	r4, r3
 800210c:	0fc5      	lsrs	r5, r0, #31
 800210e:	0020      	movs	r0, r4
 8002110:	f000 f870 	bl	80021f4 <__clzsi2>
 8002114:	4b17      	ldr	r3, [pc, #92]	; (8002174 <__aeabi_i2d+0x74>)
 8002116:	4a18      	ldr	r2, [pc, #96]	; (8002178 <__aeabi_i2d+0x78>)
 8002118:	1a1b      	subs	r3, r3, r0
 800211a:	1ad2      	subs	r2, r2, r3
 800211c:	2a1f      	cmp	r2, #31
 800211e:	dd18      	ble.n	8002152 <__aeabi_i2d+0x52>
 8002120:	4a16      	ldr	r2, [pc, #88]	; (800217c <__aeabi_i2d+0x7c>)
 8002122:	1ad2      	subs	r2, r2, r3
 8002124:	4094      	lsls	r4, r2
 8002126:	2200      	movs	r2, #0
 8002128:	0324      	lsls	r4, r4, #12
 800212a:	055b      	lsls	r3, r3, #21
 800212c:	0b24      	lsrs	r4, r4, #12
 800212e:	0d5b      	lsrs	r3, r3, #21
 8002130:	2100      	movs	r1, #0
 8002132:	0010      	movs	r0, r2
 8002134:	0324      	lsls	r4, r4, #12
 8002136:	0d0a      	lsrs	r2, r1, #20
 8002138:	0b24      	lsrs	r4, r4, #12
 800213a:	0512      	lsls	r2, r2, #20
 800213c:	4322      	orrs	r2, r4
 800213e:	4c10      	ldr	r4, [pc, #64]	; (8002180 <__aeabi_i2d+0x80>)
 8002140:	051b      	lsls	r3, r3, #20
 8002142:	4022      	ands	r2, r4
 8002144:	4313      	orrs	r3, r2
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	07ed      	lsls	r5, r5, #31
 800214a:	085b      	lsrs	r3, r3, #1
 800214c:	432b      	orrs	r3, r5
 800214e:	0019      	movs	r1, r3
 8002150:	bd70      	pop	{r4, r5, r6, pc}
 8002152:	0021      	movs	r1, r4
 8002154:	4091      	lsls	r1, r2
 8002156:	000a      	movs	r2, r1
 8002158:	210b      	movs	r1, #11
 800215a:	1a08      	subs	r0, r1, r0
 800215c:	40c4      	lsrs	r4, r0
 800215e:	055b      	lsls	r3, r3, #21
 8002160:	0324      	lsls	r4, r4, #12
 8002162:	0b24      	lsrs	r4, r4, #12
 8002164:	0d5b      	lsrs	r3, r3, #21
 8002166:	e7e3      	b.n	8002130 <__aeabi_i2d+0x30>
 8002168:	2500      	movs	r5, #0
 800216a:	2300      	movs	r3, #0
 800216c:	2400      	movs	r4, #0
 800216e:	2200      	movs	r2, #0
 8002170:	e7de      	b.n	8002130 <__aeabi_i2d+0x30>
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	0000041e 	.word	0x0000041e
 8002178:	00000433 	.word	0x00000433
 800217c:	00000413 	.word	0x00000413
 8002180:	800fffff 	.word	0x800fffff

08002184 <__aeabi_ui2d>:
 8002184:	b510      	push	{r4, lr}
 8002186:	1e04      	subs	r4, r0, #0
 8002188:	d028      	beq.n	80021dc <__aeabi_ui2d+0x58>
 800218a:	f000 f833 	bl	80021f4 <__clzsi2>
 800218e:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <__aeabi_ui2d+0x60>)
 8002190:	4a15      	ldr	r2, [pc, #84]	; (80021e8 <__aeabi_ui2d+0x64>)
 8002192:	1a1b      	subs	r3, r3, r0
 8002194:	1ad2      	subs	r2, r2, r3
 8002196:	2a1f      	cmp	r2, #31
 8002198:	dd15      	ble.n	80021c6 <__aeabi_ui2d+0x42>
 800219a:	4a14      	ldr	r2, [pc, #80]	; (80021ec <__aeabi_ui2d+0x68>)
 800219c:	1ad2      	subs	r2, r2, r3
 800219e:	4094      	lsls	r4, r2
 80021a0:	2200      	movs	r2, #0
 80021a2:	0324      	lsls	r4, r4, #12
 80021a4:	055b      	lsls	r3, r3, #21
 80021a6:	0b24      	lsrs	r4, r4, #12
 80021a8:	0d5b      	lsrs	r3, r3, #21
 80021aa:	2100      	movs	r1, #0
 80021ac:	0010      	movs	r0, r2
 80021ae:	0324      	lsls	r4, r4, #12
 80021b0:	0d0a      	lsrs	r2, r1, #20
 80021b2:	0b24      	lsrs	r4, r4, #12
 80021b4:	0512      	lsls	r2, r2, #20
 80021b6:	4322      	orrs	r2, r4
 80021b8:	4c0d      	ldr	r4, [pc, #52]	; (80021f0 <__aeabi_ui2d+0x6c>)
 80021ba:	051b      	lsls	r3, r3, #20
 80021bc:	4022      	ands	r2, r4
 80021be:	4313      	orrs	r3, r2
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	0859      	lsrs	r1, r3, #1
 80021c4:	bd10      	pop	{r4, pc}
 80021c6:	0021      	movs	r1, r4
 80021c8:	4091      	lsls	r1, r2
 80021ca:	000a      	movs	r2, r1
 80021cc:	210b      	movs	r1, #11
 80021ce:	1a08      	subs	r0, r1, r0
 80021d0:	40c4      	lsrs	r4, r0
 80021d2:	055b      	lsls	r3, r3, #21
 80021d4:	0324      	lsls	r4, r4, #12
 80021d6:	0b24      	lsrs	r4, r4, #12
 80021d8:	0d5b      	lsrs	r3, r3, #21
 80021da:	e7e6      	b.n	80021aa <__aeabi_ui2d+0x26>
 80021dc:	2300      	movs	r3, #0
 80021de:	2400      	movs	r4, #0
 80021e0:	2200      	movs	r2, #0
 80021e2:	e7e2      	b.n	80021aa <__aeabi_ui2d+0x26>
 80021e4:	0000041e 	.word	0x0000041e
 80021e8:	00000433 	.word	0x00000433
 80021ec:	00000413 	.word	0x00000413
 80021f0:	800fffff 	.word	0x800fffff

080021f4 <__clzsi2>:
 80021f4:	211c      	movs	r1, #28
 80021f6:	2301      	movs	r3, #1
 80021f8:	041b      	lsls	r3, r3, #16
 80021fa:	4298      	cmp	r0, r3
 80021fc:	d301      	bcc.n	8002202 <__clzsi2+0xe>
 80021fe:	0c00      	lsrs	r0, r0, #16
 8002200:	3910      	subs	r1, #16
 8002202:	0a1b      	lsrs	r3, r3, #8
 8002204:	4298      	cmp	r0, r3
 8002206:	d301      	bcc.n	800220c <__clzsi2+0x18>
 8002208:	0a00      	lsrs	r0, r0, #8
 800220a:	3908      	subs	r1, #8
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	4298      	cmp	r0, r3
 8002210:	d301      	bcc.n	8002216 <__clzsi2+0x22>
 8002212:	0900      	lsrs	r0, r0, #4
 8002214:	3904      	subs	r1, #4
 8002216:	a202      	add	r2, pc, #8	; (adr r2, 8002220 <__clzsi2+0x2c>)
 8002218:	5c10      	ldrb	r0, [r2, r0]
 800221a:	1840      	adds	r0, r0, r1
 800221c:	4770      	bx	lr
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	02020304 	.word	0x02020304
 8002224:	01010101 	.word	0x01010101
	...

08002230 <__clzdi2>:
 8002230:	b510      	push	{r4, lr}
 8002232:	2900      	cmp	r1, #0
 8002234:	d103      	bne.n	800223e <__clzdi2+0xe>
 8002236:	f7ff ffdd 	bl	80021f4 <__clzsi2>
 800223a:	3020      	adds	r0, #32
 800223c:	e002      	b.n	8002244 <__clzdi2+0x14>
 800223e:	1c08      	adds	r0, r1, #0
 8002240:	f7ff ffd8 	bl	80021f4 <__clzsi2>
 8002244:	bd10      	pop	{r4, pc}
 8002246:	46c0      	nop			; (mov r8, r8)

08002248 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08c      	sub	sp, #48	; 0x30
 800224c:	af00      	add	r7, sp, #0
 800224e:	0002      	movs	r2, r0
 8002250:	1dfb      	adds	r3, r7, #7
 8002252:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE( Led );
 8002254:	1dfb      	adds	r3, r7, #7
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d015      	beq.n	8002288 <BSP_LED_Init+0x40>
 800225c:	dc02      	bgt.n	8002264 <BSP_LED_Init+0x1c>
 800225e:	2b00      	cmp	r3, #0
 8002260:	d005      	beq.n	800226e <BSP_LED_Init+0x26>
 8002262:	e037      	b.n	80022d4 <BSP_LED_Init+0x8c>
 8002264:	2b02      	cmp	r3, #2
 8002266:	d01c      	beq.n	80022a2 <BSP_LED_Init+0x5a>
 8002268:	2b03      	cmp	r3, #3
 800226a:	d027      	beq.n	80022bc <BSP_LED_Init+0x74>
 800226c:	e032      	b.n	80022d4 <BSP_LED_Init+0x8c>
 800226e:	4b2c      	ldr	r3, [pc, #176]	; (8002320 <BSP_LED_Init+0xd8>)
 8002270:	4a2b      	ldr	r2, [pc, #172]	; (8002320 <BSP_LED_Init+0xd8>)
 8002272:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002274:	2102      	movs	r1, #2
 8002276:	430a      	orrs	r2, r1
 8002278:	62da      	str	r2, [r3, #44]	; 0x2c
 800227a:	4b29      	ldr	r3, [pc, #164]	; (8002320 <BSP_LED_Init+0xd8>)
 800227c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227e:	2202      	movs	r2, #2
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	e025      	b.n	80022d4 <BSP_LED_Init+0x8c>
 8002288:	4b25      	ldr	r3, [pc, #148]	; (8002320 <BSP_LED_Init+0xd8>)
 800228a:	4a25      	ldr	r2, [pc, #148]	; (8002320 <BSP_LED_Init+0xd8>)
 800228c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800228e:	2101      	movs	r1, #1
 8002290:	430a      	orrs	r2, r1
 8002292:	62da      	str	r2, [r3, #44]	; 0x2c
 8002294:	4b22      	ldr	r3, [pc, #136]	; (8002320 <BSP_LED_Init+0xd8>)
 8002296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002298:	2201      	movs	r2, #1
 800229a:	4013      	ands	r3, r2
 800229c:	617b      	str	r3, [r7, #20]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	e018      	b.n	80022d4 <BSP_LED_Init+0x8c>
 80022a2:	4b1f      	ldr	r3, [pc, #124]	; (8002320 <BSP_LED_Init+0xd8>)
 80022a4:	4a1e      	ldr	r2, [pc, #120]	; (8002320 <BSP_LED_Init+0xd8>)
 80022a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80022a8:	2102      	movs	r1, #2
 80022aa:	430a      	orrs	r2, r1
 80022ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80022ae:	4b1c      	ldr	r3, [pc, #112]	; (8002320 <BSP_LED_Init+0xd8>)
 80022b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b2:	2202      	movs	r2, #2
 80022b4:	4013      	ands	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	e00b      	b.n	80022d4 <BSP_LED_Init+0x8c>
 80022bc:	4b18      	ldr	r3, [pc, #96]	; (8002320 <BSP_LED_Init+0xd8>)
 80022be:	4a18      	ldr	r2, [pc, #96]	; (8002320 <BSP_LED_Init+0xd8>)
 80022c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80022c2:	2102      	movs	r1, #2
 80022c4:	430a      	orrs	r2, r1
 80022c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80022c8:	4b15      	ldr	r3, [pc, #84]	; (8002320 <BSP_LED_Init+0xd8>)
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022cc:	2202      	movs	r2, #2
 80022ce:	4013      	ands	r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	46c0      	nop			; (mov r8, r8)

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 80022d6:	1dfb      	adds	r3, r7, #7
 80022d8:	781a      	ldrb	r2, [r3, #0]
 80022da:	4b12      	ldr	r3, [pc, #72]	; (8002324 <BSP_LED_Init+0xdc>)
 80022dc:	0052      	lsls	r2, r2, #1
 80022de:	5ad3      	ldrh	r3, [r2, r3]
 80022e0:	001a      	movs	r2, r3
 80022e2:	231c      	movs	r3, #28
 80022e4:	18fb      	adds	r3, r7, r3
 80022e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e8:	231c      	movs	r3, #28
 80022ea:	18fb      	adds	r3, r7, r3
 80022ec:	2201      	movs	r2, #1
 80022ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	231c      	movs	r3, #28
 80022f2:	18fb      	adds	r3, r7, r3
 80022f4:	2200      	movs	r2, #0
 80022f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f8:	231c      	movs	r3, #28
 80022fa:	18fb      	adds	r3, r7, r3
 80022fc:	2203      	movs	r2, #3
 80022fe:	60da      	str	r2, [r3, #12]
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8002300:	1dfb      	adds	r3, r7, #7
 8002302:	781a      	ldrb	r2, [r3, #0]
 8002304:	4b08      	ldr	r3, [pc, #32]	; (8002328 <BSP_LED_Init+0xe0>)
 8002306:	0092      	lsls	r2, r2, #2
 8002308:	58d3      	ldr	r3, [r2, r3]
 800230a:	221c      	movs	r2, #28
 800230c:	18ba      	adds	r2, r7, r2
 800230e:	0011      	movs	r1, r2
 8002310:	0018      	movs	r0, r3
 8002312:	f003 f9d5 	bl	80056c0 <HAL_GPIO_Init>
}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	46bd      	mov	sp, r7
 800231a:	b00c      	add	sp, #48	; 0x30
 800231c:	bd80      	pop	{r7, pc}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	40021000 	.word	0x40021000
 8002324:	0800e460 	.word	0x0800e460
 8002328:	20000000 	.word	0x20000000

0800232c <SX1276Init>:
/*
 * Radio driver functions implementation
 */

uint32_t SX1276Init( RadioEvents_t *events )
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
 8002334:	4b32      	ldr	r3, [pc, #200]	; (8002400 <SX1276Init+0xd4>)
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	601a      	str	r2, [r3, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 800233a:	4a32      	ldr	r2, [pc, #200]	; (8002404 <SX1276Init+0xd8>)
 800233c:	4b32      	ldr	r3, [pc, #200]	; (8002408 <SX1276Init+0xdc>)
 800233e:	0011      	movs	r1, r2
 8002340:	0018      	movs	r0, r3
 8002342:	f006 ffbd 	bl	80092c0 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8002346:	4a2f      	ldr	r2, [pc, #188]	; (8002404 <SX1276Init+0xd8>)
 8002348:	4b30      	ldr	r3, [pc, #192]	; (800240c <SX1276Init+0xe0>)
 800234a:	0011      	movs	r1, r2
 800234c:	0018      	movs	r0, r3
 800234e:	f006 ffb7 	bl	80092c0 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8002352:	4a2c      	ldr	r2, [pc, #176]	; (8002404 <SX1276Init+0xd8>)
 8002354:	4b2e      	ldr	r3, [pc, #184]	; (8002410 <SX1276Init+0xe4>)
 8002356:	0011      	movs	r1, r2
 8002358:	0018      	movs	r0, r3
 800235a:	f006 ffb1 	bl	80092c0 <TimerInit>
  
    MLM_TCXO_ON(); //TCXO ON
 800235e:	2380      	movs	r3, #128	; 0x80
 8002360:	0159      	lsls	r1, r3, #5
 8002362:	23a0      	movs	r3, #160	; 0xa0
 8002364:	05db      	lsls	r3, r3, #23
 8002366:	2201      	movs	r2, #1
 8002368:	0018      	movs	r0, r3
 800236a:	f007 fac3 	bl	80098f4 <HW_GPIO_Write>
  
    SX1276Reset( );
 800236e:	f001 fb75 	bl	8003a5c <SX1276Reset>

    RxChainCalibration( );
 8002372:	f000 f90d 	bl	8002590 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8002376:	2000      	movs	r0, #0
 8002378:	f001 fba4 	bl	8003ac4 <SX1276SetOpMode>

    SX1276IoIrqInit( DioIrq );
 800237c:	4b25      	ldr	r3, [pc, #148]	; (8002414 <SX1276Init+0xe8>)
 800237e:	0018      	movs	r0, r3
 8002380:	f002 fa14 	bl	80047ac <SX1276IoIrqInit>

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8002384:	230f      	movs	r3, #15
 8002386:	18fb      	adds	r3, r7, r3
 8002388:	2200      	movs	r2, #0
 800238a:	701a      	strb	r2, [r3, #0]
 800238c:	e028      	b.n	80023e0 <SX1276Init+0xb4>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 800238e:	230f      	movs	r3, #15
 8002390:	18fb      	adds	r3, r7, r3
 8002392:	781a      	ldrb	r2, [r3, #0]
 8002394:	4920      	ldr	r1, [pc, #128]	; (8002418 <SX1276Init+0xec>)
 8002396:	0013      	movs	r3, r2
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	189b      	adds	r3, r3, r2
 800239c:	5c5b      	ldrb	r3, [r3, r1]
 800239e:	0018      	movs	r0, r3
 80023a0:	f001 fbbc 	bl	8003b1c <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 80023a4:	230f      	movs	r3, #15
 80023a6:	18fb      	adds	r3, r7, r3
 80023a8:	781a      	ldrb	r2, [r3, #0]
 80023aa:	491b      	ldr	r1, [pc, #108]	; (8002418 <SX1276Init+0xec>)
 80023ac:	0013      	movs	r3, r2
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	189b      	adds	r3, r3, r2
 80023b2:	18cb      	adds	r3, r1, r3
 80023b4:	3301      	adds	r3, #1
 80023b6:	7818      	ldrb	r0, [r3, #0]
 80023b8:	230f      	movs	r3, #15
 80023ba:	18fb      	adds	r3, r7, r3
 80023bc:	781a      	ldrb	r2, [r3, #0]
 80023be:	4916      	ldr	r1, [pc, #88]	; (8002418 <SX1276Init+0xec>)
 80023c0:	0013      	movs	r3, r2
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	189b      	adds	r3, r3, r2
 80023c6:	18cb      	adds	r3, r1, r3
 80023c8:	3302      	adds	r3, #2
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	0019      	movs	r1, r3
 80023ce:	f001 fc04 	bl	8003bda <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80023d2:	230f      	movs	r3, #15
 80023d4:	18fb      	adds	r3, r7, r3
 80023d6:	781a      	ldrb	r2, [r3, #0]
 80023d8:	230f      	movs	r3, #15
 80023da:	18fb      	adds	r3, r7, r3
 80023dc:	3201      	adds	r2, #1
 80023de:	701a      	strb	r2, [r3, #0]
 80023e0:	230f      	movs	r3, #15
 80023e2:	18fb      	adds	r3, r7, r3
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b0f      	cmp	r3, #15
 80023e8:	d9d1      	bls.n	800238e <SX1276Init+0x62>
    }

    SX1276SetModem( MODEM_FSK );
 80023ea:	2000      	movs	r0, #0
 80023ec:	f001 fb96 	bl	8003b1c <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 80023f0:	4b0a      	ldr	r3, [pc, #40]	; (800241c <SX1276Init+0xf0>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	711a      	strb	r2, [r3, #4]
    
    return RADIO_WAKEUP_TIME + BOARD_WAKEUP_TIME;
 80023f6:	2305      	movs	r3, #5
}
 80023f8:	0018      	movs	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	b004      	add	sp, #16
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	200006bc 	.word	0x200006bc
 8002404:	08003df1 	.word	0x08003df1
 8002408:	20000eb0 	.word	0x20000eb0
 800240c:	20000f38 	.word	0x20000f38
 8002410:	20000ec4 	.word	0x20000ec4
 8002414:	20000014 	.word	0x20000014
 8002418:	0800e470 	.word	0x0800e470
 800241c:	20000ed8 	.word	0x20000ed8

08002420 <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 8002424:	4b02      	ldr	r3, [pc, #8]	; (8002430 <SX1276GetStatus+0x10>)
 8002426:	791b      	ldrb	r3, [r3, #4]
}
 8002428:	0018      	movs	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	20000ed8 	.word	0x20000ed8

08002434 <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 8002434:	b590      	push	{r4, r7, lr}
 8002436:	b087      	sub	sp, #28
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
    uint32_t channel;
    
    SX1276.Settings.Channel = freq;
 800243c:	4b1a      	ldr	r3, [pc, #104]	; (80024a8 <SX1276SetChannel+0x74>)
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	609a      	str	r2, [r3, #8]
    
    SX_FREQ_TO_CHANNEL(channel, freq);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4919      	ldr	r1, [pc, #100]	; (80024ac <SX1276SetChannel+0x78>)
 8002446:	0018      	movs	r0, r3
 8002448:	f7fd fe7a 	bl	8000140 <__udivsi3>
 800244c:	0003      	movs	r3, r0
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	4a16      	ldr	r2, [pc, #88]	; (80024ac <SX1276SetChannel+0x78>)
 8002454:	4353      	muls	r3, r2
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	613b      	str	r3, [r7, #16]
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	021c      	lsls	r4, r3, #8
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	021b      	lsls	r3, r3, #8
 8002464:	4a12      	ldr	r2, [pc, #72]	; (80024b0 <SX1276SetChannel+0x7c>)
 8002466:	4694      	mov	ip, r2
 8002468:	4463      	add	r3, ip
 800246a:	4910      	ldr	r1, [pc, #64]	; (80024ac <SX1276SetChannel+0x78>)
 800246c:	0018      	movs	r0, r3
 800246e:	f7fd fe67 	bl	8000140 <__udivsi3>
 8002472:	0003      	movs	r3, r0
 8002474:	18e3      	adds	r3, r4, r3
 8002476:	60fb      	str	r3, [r7, #12]
    
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	0c1b      	lsrs	r3, r3, #16
 800247c:	b2db      	uxtb	r3, r3
 800247e:	0019      	movs	r1, r3
 8002480:	2006      	movs	r0, #6
 8002482:	f001 fbaa 	bl	8003bda <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	0a1b      	lsrs	r3, r3, #8
 800248a:	b2db      	uxtb	r3, r3
 800248c:	0019      	movs	r1, r3
 800248e:	2007      	movs	r0, #7
 8002490:	f001 fba3 	bl	8003bda <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	b2db      	uxtb	r3, r3
 8002498:	0019      	movs	r1, r3
 800249a:	2008      	movs	r0, #8
 800249c:	f001 fb9d 	bl	8003bda <SX1276Write>
}
 80024a0:	46c0      	nop			; (mov r8, r8)
 80024a2:	46bd      	mov	sp, r7
 80024a4:	b007      	add	sp, #28
 80024a6:	bd90      	pop	{r4, r7, pc}
 80024a8:	20000ed8 	.word	0x20000ed8
 80024ac:	00003d09 	.word	0x00003d09
 80024b0:	00001e84 	.word	0x00001e84

080024b4 <SX1276IsChannelFree>:

bool SX1276IsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh )
{
 80024b4:	b590      	push	{r4, r7, lr}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6039      	str	r1, [r7, #0]
 80024bc:	0011      	movs	r1, r2
 80024be:	1dfb      	adds	r3, r7, #7
 80024c0:	1c02      	adds	r2, r0, #0
 80024c2:	701a      	strb	r2, [r3, #0]
 80024c4:	1d3b      	adds	r3, r7, #4
 80024c6:	1c0a      	adds	r2, r1, #0
 80024c8:	801a      	strh	r2, [r3, #0]
    int16_t rssi = 0;
 80024ca:	230e      	movs	r3, #14
 80024cc:	18fb      	adds	r3, r7, r3
 80024ce:	2200      	movs	r2, #0
 80024d0:	801a      	strh	r2, [r3, #0]

    SX1276SetModem( modem );
 80024d2:	1dfb      	adds	r3, r7, #7
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	0018      	movs	r0, r3
 80024d8:	f001 fb20 	bl	8003b1c <SX1276SetModem>

    SX1276SetChannel( freq );
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	0018      	movs	r0, r3
 80024e0:	f7ff ffa8 	bl	8002434 <SX1276SetChannel>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80024e4:	2005      	movs	r0, #5
 80024e6:	f001 faed 	bl	8003ac4 <SX1276SetOpMode>

    DelayMs( 1 );
 80024ea:	2001      	movs	r0, #1
 80024ec:	f006 fe94 	bl	8009218 <DelayMs>

    rssi = SX1276ReadRssi( modem );
 80024f0:	230e      	movs	r3, #14
 80024f2:	18fc      	adds	r4, r7, r3
 80024f4:	1dfb      	adds	r3, r7, #7
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	0018      	movs	r0, r3
 80024fa:	f001 fa63 	bl	80039c4 <SX1276ReadRssi>
 80024fe:	0003      	movs	r3, r0
 8002500:	8023      	strh	r3, [r4, #0]

    SX1276SetSleep( );
 8002502:	f000 ff35 	bl	8003370 <SX1276SetSleep>

    if( rssi > rssiThresh )
 8002506:	230e      	movs	r3, #14
 8002508:	18fa      	adds	r2, r7, r3
 800250a:	1d3b      	adds	r3, r7, #4
 800250c:	2100      	movs	r1, #0
 800250e:	5e52      	ldrsh	r2, [r2, r1]
 8002510:	2100      	movs	r1, #0
 8002512:	5e5b      	ldrsh	r3, [r3, r1]
 8002514:	429a      	cmp	r2, r3
 8002516:	dd01      	ble.n	800251c <SX1276IsChannelFree+0x68>
    {
        return false;
 8002518:	2300      	movs	r3, #0
 800251a:	e000      	b.n	800251e <SX1276IsChannelFree+0x6a>
    }
    return true;
 800251c:	2301      	movs	r3, #1
}
 800251e:	0018      	movs	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	b005      	add	sp, #20
 8002524:	bd90      	pop	{r4, r7, pc}

08002526 <SX1276Random>:

uint32_t SX1276Random( void )
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 800252c:	2300      	movs	r3, #0
 800252e:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 8002530:	2001      	movs	r0, #1
 8002532:	f001 faf3 	bl	8003b1c <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8002536:	21ff      	movs	r1, #255	; 0xff
 8002538:	2011      	movs	r0, #17
 800253a:	f001 fb4e 	bl	8003bda <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800253e:	2005      	movs	r0, #5
 8002540:	f001 fac0 	bl	8003ac4 <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 8002544:	1dfb      	adds	r3, r7, #7
 8002546:	2200      	movs	r2, #0
 8002548:	701a      	strb	r2, [r3, #0]
 800254a:	e015      	b.n	8002578 <SX1276Random+0x52>
    {
        DelayMs( 1 );
 800254c:	2001      	movs	r0, #1
 800254e:	f006 fe63 	bl	8009218 <DelayMs>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8002552:	202c      	movs	r0, #44	; 0x2c
 8002554:	f001 fb55 	bl	8003c02 <SX1276Read>
 8002558:	0003      	movs	r3, r0
 800255a:	001a      	movs	r2, r3
 800255c:	2301      	movs	r3, #1
 800255e:	401a      	ands	r2, r3
 8002560:	1dfb      	adds	r3, r7, #7
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	409a      	lsls	r2, r3
 8002566:	0013      	movs	r3, r2
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	4313      	orrs	r3, r2
 800256c:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 800256e:	1dfb      	adds	r3, r7, #7
 8002570:	781a      	ldrb	r2, [r3, #0]
 8002572:	1dfb      	adds	r3, r7, #7
 8002574:	3201      	adds	r2, #1
 8002576:	701a      	strb	r2, [r3, #0]
 8002578:	1dfb      	adds	r3, r7, #7
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b1f      	cmp	r3, #31
 800257e:	d9e5      	bls.n	800254c <SX1276Random+0x26>
    }

    SX1276SetSleep( );
 8002580:	f000 fef6 	bl	8003370 <SX1276SetSleep>

    return rnd;
 8002584:	683b      	ldr	r3, [r7, #0]
}
 8002586:	0018      	movs	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	b002      	add	sp, #8
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
 8002590:	b590      	push	{r4, r7, lr}
 8002592:	b087      	sub	sp, #28
 8002594:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;
    uint32_t channel;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 8002596:	2317      	movs	r3, #23
 8002598:	18fc      	adds	r4, r7, r3
 800259a:	2009      	movs	r0, #9
 800259c:	f001 fb31 	bl	8003c02 <SX1276Read>
 80025a0:	0003      	movs	r3, r0
 80025a2:	7023      	strb	r3, [r4, #0]
    
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80025a4:	2006      	movs	r0, #6
 80025a6:	f001 fb2c 	bl	8003c02 <SX1276Read>
 80025aa:	0003      	movs	r3, r0
 80025ac:	041c      	lsls	r4, r3, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 80025ae:	2007      	movs	r0, #7
 80025b0:	f001 fb27 	bl	8003c02 <SX1276Read>
 80025b4:	0003      	movs	r3, r0
 80025b6:	021b      	lsls	r3, r3, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80025b8:	431c      	orrs	r4, r3
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 80025ba:	2008      	movs	r0, #8
 80025bc:	f001 fb21 	bl	8003c02 <SX1276Read>
 80025c0:	0003      	movs	r3, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80025c2:	4323      	orrs	r3, r4
 80025c4:	613b      	str	r3, [r7, #16]
    
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	0a1b      	lsrs	r3, r3, #8
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	021b      	lsls	r3, r3, #8
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	60bb      	str	r3, [r7, #8]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	4a25      	ldr	r2, [pc, #148]	; (8002670 <RxChainCalibration+0xe0>)
 80025da:	435a      	muls	r2, r3
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	4924      	ldr	r1, [pc, #144]	; (8002670 <RxChainCalibration+0xe0>)
 80025e0:	434b      	muls	r3, r1
 80025e2:	3380      	adds	r3, #128	; 0x80
 80025e4:	0a1b      	lsrs	r3, r3, #8
 80025e6:	18d3      	adds	r3, r2, r3
 80025e8:	607b      	str	r3, [r7, #4]
    
    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 80025ea:	2100      	movs	r1, #0
 80025ec:	2009      	movs	r0, #9
 80025ee:	f001 faf4 	bl	8003bda <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80025f2:	203b      	movs	r0, #59	; 0x3b
 80025f4:	f001 fb05 	bl	8003c02 <SX1276Read>
 80025f8:	0003      	movs	r3, r0
 80025fa:	001a      	movs	r2, r3
 80025fc:	2340      	movs	r3, #64	; 0x40
 80025fe:	4313      	orrs	r3, r2
 8002600:	b2db      	uxtb	r3, r3
 8002602:	0019      	movs	r1, r3
 8002604:	203b      	movs	r0, #59	; 0x3b
 8002606:	f001 fae8 	bl	8003bda <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	203b      	movs	r0, #59	; 0x3b
 800260e:	f001 faf8 	bl	8003c02 <SX1276Read>
 8002612:	0003      	movs	r3, r0
 8002614:	001a      	movs	r2, r3
 8002616:	2320      	movs	r3, #32
 8002618:	4013      	ands	r3, r2
 800261a:	2b20      	cmp	r3, #32
 800261c:	d0f6      	beq.n	800260c <RxChainCalibration+0x7c>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 800261e:	4b15      	ldr	r3, [pc, #84]	; (8002674 <RxChainCalibration+0xe4>)
 8002620:	0018      	movs	r0, r3
 8002622:	f7ff ff07 	bl	8002434 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8002626:	203b      	movs	r0, #59	; 0x3b
 8002628:	f001 faeb 	bl	8003c02 <SX1276Read>
 800262c:	0003      	movs	r3, r0
 800262e:	001a      	movs	r2, r3
 8002630:	2340      	movs	r3, #64	; 0x40
 8002632:	4313      	orrs	r3, r2
 8002634:	b2db      	uxtb	r3, r3
 8002636:	0019      	movs	r1, r3
 8002638:	203b      	movs	r0, #59	; 0x3b
 800263a:	f001 face 	bl	8003bda <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800263e:	46c0      	nop			; (mov r8, r8)
 8002640:	203b      	movs	r0, #59	; 0x3b
 8002642:	f001 fade 	bl	8003c02 <SX1276Read>
 8002646:	0003      	movs	r3, r0
 8002648:	001a      	movs	r2, r3
 800264a:	2320      	movs	r3, #32
 800264c:	4013      	ands	r3, r2
 800264e:	2b20      	cmp	r3, #32
 8002650:	d0f6      	beq.n	8002640 <RxChainCalibration+0xb0>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8002652:	2317      	movs	r3, #23
 8002654:	18fb      	adds	r3, r7, r3
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	0019      	movs	r1, r3
 800265a:	2009      	movs	r0, #9
 800265c:	f001 fabd 	bl	8003bda <SX1276Write>
    SX1276SetChannel( initialFreq );
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	0018      	movs	r0, r3
 8002664:	f7ff fee6 	bl	8002434 <SX1276SetChannel>
}
 8002668:	46c0      	nop			; (mov r8, r8)
 800266a:	46bd      	mov	sp, r7
 800266c:	b007      	add	sp, #28
 800266e:	bd90      	pop	{r4, r7, pc}
 8002670:	00003d09 	.word	0x00003d09
 8002674:	33bca100 	.word	0x33bca100

08002678 <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8002680:	230f      	movs	r3, #15
 8002682:	18fb      	adds	r3, r7, r3
 8002684:	2200      	movs	r2, #0
 8002686:	701a      	strb	r2, [r3, #0]
 8002688:	e022      	b.n	80026d0 <GetFskBandwidthRegValue+0x58>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 800268a:	230f      	movs	r3, #15
 800268c:	18fb      	adds	r3, r7, r3
 800268e:	781a      	ldrb	r2, [r3, #0]
 8002690:	4b14      	ldr	r3, [pc, #80]	; (80026e4 <GetFskBandwidthRegValue+0x6c>)
 8002692:	00d2      	lsls	r2, r2, #3
 8002694:	58d2      	ldr	r2, [r2, r3]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	429a      	cmp	r2, r3
 800269a:	d812      	bhi.n	80026c2 <GetFskBandwidthRegValue+0x4a>
 800269c:	230f      	movs	r3, #15
 800269e:	18fb      	adds	r3, r7, r3
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	1c5a      	adds	r2, r3, #1
 80026a4:	4b0f      	ldr	r3, [pc, #60]	; (80026e4 <GetFskBandwidthRegValue+0x6c>)
 80026a6:	00d2      	lsls	r2, r2, #3
 80026a8:	58d2      	ldr	r2, [r2, r3]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d908      	bls.n	80026c2 <GetFskBandwidthRegValue+0x4a>
        {
            return FskBandwidths[i].RegValue;
 80026b0:	230f      	movs	r3, #15
 80026b2:	18fb      	adds	r3, r7, r3
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	4a0b      	ldr	r2, [pc, #44]	; (80026e4 <GetFskBandwidthRegValue+0x6c>)
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	18d3      	adds	r3, r2, r3
 80026bc:	3304      	adds	r3, #4
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	e00c      	b.n	80026dc <GetFskBandwidthRegValue+0x64>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 80026c2:	230f      	movs	r3, #15
 80026c4:	18fb      	adds	r3, r7, r3
 80026c6:	781a      	ldrb	r2, [r3, #0]
 80026c8:	230f      	movs	r3, #15
 80026ca:	18fb      	adds	r3, r7, r3
 80026cc:	3201      	adds	r2, #1
 80026ce:	701a      	strb	r2, [r3, #0]
 80026d0:	230f      	movs	r3, #15
 80026d2:	18fb      	adds	r3, r7, r3
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b14      	cmp	r3, #20
 80026d8:	d9d7      	bls.n	800268a <GetFskBandwidthRegValue+0x12>
        }
    }
    // ERROR: Value not found
    while( 1 );
 80026da:	e7fe      	b.n	80026da <GetFskBandwidthRegValue+0x62>
}
 80026dc:	0018      	movs	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	b004      	add	sp, #16
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	0800e4a0 	.word	0x0800e4a0

080026e8 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 80026e8:	b590      	push	{r4, r7, lr}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60b9      	str	r1, [r7, #8]
 80026f0:	607a      	str	r2, [r7, #4]
 80026f2:	0019      	movs	r1, r3
 80026f4:	230f      	movs	r3, #15
 80026f6:	18fb      	adds	r3, r7, r3
 80026f8:	1c02      	adds	r2, r0, #0
 80026fa:	701a      	strb	r2, [r3, #0]
 80026fc:	230e      	movs	r3, #14
 80026fe:	18fb      	adds	r3, r7, r3
 8002700:	1c0a      	adds	r2, r1, #0
 8002702:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 8002704:	230f      	movs	r3, #15
 8002706:	18fb      	adds	r3, r7, r3
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	0018      	movs	r0, r3
 800270c:	f001 fa06 	bl	8003b1c <SX1276SetModem>

    switch( modem )
 8002710:	230f      	movs	r3, #15
 8002712:	18fb      	adds	r3, r7, r3
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <SX1276SetRxConfig+0x3a>
 800271a:	2b01      	cmp	r3, #1
 800271c:	d100      	bne.n	8002720 <SX1276SetRxConfig+0x38>
 800271e:	e0b4      	b.n	800288a <SX1276SetRxConfig+0x1a2>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8002720:	e201      	b.n	8002b26 <SX1276SetRxConfig+0x43e>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8002722:	4be5      	ldr	r3, [pc, #916]	; (8002ab8 <SX1276SetRxConfig+0x3d0>)
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 8002728:	4be3      	ldr	r3, [pc, #908]	; (8002ab8 <SX1276SetRxConfig+0x3d0>)
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 800272e:	4be2      	ldr	r3, [pc, #904]	; (8002ab8 <SX1276SetRxConfig+0x3d0>)
 8002730:	6a3a      	ldr	r2, [r7, #32]
 8002732:	619a      	str	r2, [r3, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8002734:	4be0      	ldr	r3, [pc, #896]	; (8002ab8 <SX1276SetRxConfig+0x3d0>)
 8002736:	222c      	movs	r2, #44	; 0x2c
 8002738:	18ba      	adds	r2, r7, r2
 800273a:	2122      	movs	r1, #34	; 0x22
 800273c:	7812      	ldrb	r2, [r2, #0]
 800273e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8002740:	4bdd      	ldr	r3, [pc, #884]	; (8002ab8 <SX1276SetRxConfig+0x3d0>)
 8002742:	2230      	movs	r2, #48	; 0x30
 8002744:	18ba      	adds	r2, r7, r2
 8002746:	2123      	movs	r1, #35	; 0x23
 8002748:	7812      	ldrb	r2, [r2, #0]
 800274a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800274c:	4bda      	ldr	r3, [pc, #872]	; (8002ab8 <SX1276SetRxConfig+0x3d0>)
 800274e:	2234      	movs	r2, #52	; 0x34
 8002750:	18ba      	adds	r2, r7, r2
 8002752:	2124      	movs	r1, #36	; 0x24
 8002754:	7812      	ldrb	r2, [r2, #0]
 8002756:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8002758:	4bd7      	ldr	r3, [pc, #860]	; (8002ab8 <SX1276SetRxConfig+0x3d0>)
 800275a:	2220      	movs	r2, #32
 800275c:	2120      	movs	r1, #32
 800275e:	468c      	mov	ip, r1
 8002760:	44bc      	add	ip, r7
 8002762:	4462      	add	r2, ip
 8002764:	2125      	movs	r1, #37	; 0x25
 8002766:	7812      	ldrb	r2, [r2, #0]
 8002768:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 800276a:	4bd3      	ldr	r3, [pc, #844]	; (8002ab8 <SX1276SetRxConfig+0x3d0>)
 800276c:	2224      	movs	r2, #36	; 0x24
 800276e:	2120      	movs	r1, #32
 8002770:	468c      	mov	ip, r1
 8002772:	44bc      	add	ip, r7
 8002774:	4462      	add	r2, ip
 8002776:	2126      	movs	r1, #38	; 0x26
 8002778:	7812      	ldrb	r2, [r2, #0]
 800277a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800277c:	4bce      	ldr	r3, [pc, #824]	; (8002ab8 <SX1276SetRxConfig+0x3d0>)
 800277e:	2224      	movs	r2, #36	; 0x24
 8002780:	18ba      	adds	r2, r7, r2
 8002782:	8812      	ldrh	r2, [r2, #0]
 8002784:	841a      	strh	r2, [r3, #32]
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7ff fcfc 	bl	8002184 <__aeabi_ui2d>
 800278c:	0003      	movs	r3, r0
 800278e:	000c      	movs	r4, r1
 8002790:	001a      	movs	r2, r3
 8002792:	0023      	movs	r3, r4
 8002794:	2000      	movs	r0, #0
 8002796:	49c9      	ldr	r1, [pc, #804]	; (8002abc <SX1276SetRxConfig+0x3d4>)
 8002798:	f7fe fa94 	bl	8000cc4 <__aeabi_ddiv>
 800279c:	0003      	movs	r3, r0
 800279e:	000c      	movs	r4, r1
 80027a0:	0018      	movs	r0, r3
 80027a2:	0021      	movs	r1, r4
 80027a4:	f7fd fea0 	bl	80004e8 <__aeabi_d2uiz>
 80027a8:	0003      	movs	r3, r0
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	0a1b      	lsrs	r3, r3, #8
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	0019      	movs	r1, r3
 80027b6:	2002      	movs	r0, #2
 80027b8:	f001 fa0f 	bl	8003bda <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	0019      	movs	r1, r3
 80027c2:	2003      	movs	r0, #3
 80027c4:	f001 fa09 	bl	8003bda <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	0018      	movs	r0, r3
 80027cc:	f7ff ff54 	bl	8002678 <GetFskBandwidthRegValue>
 80027d0:	0003      	movs	r3, r0
 80027d2:	0019      	movs	r1, r3
 80027d4:	2012      	movs	r0, #18
 80027d6:	f001 fa00 	bl	8003bda <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	0018      	movs	r0, r3
 80027de:	f7ff ff4b 	bl	8002678 <GetFskBandwidthRegValue>
 80027e2:	0003      	movs	r3, r0
 80027e4:	0019      	movs	r1, r3
 80027e6:	2013      	movs	r0, #19
 80027e8:	f001 f9f7 	bl	8003bda <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 80027ec:	2324      	movs	r3, #36	; 0x24
 80027ee:	18fb      	adds	r3, r7, r3
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	0a1b      	lsrs	r3, r3, #8
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	0019      	movs	r1, r3
 80027fa:	2025      	movs	r0, #37	; 0x25
 80027fc:	f001 f9ed 	bl	8003bda <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8002800:	2324      	movs	r3, #36	; 0x24
 8002802:	18fb      	adds	r3, r7, r3
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	b2db      	uxtb	r3, r3
 8002808:	0019      	movs	r1, r3
 800280a:	2026      	movs	r0, #38	; 0x26
 800280c:	f001 f9e5 	bl	8003bda <SX1276Write>
            if( fixLen == 1 )
 8002810:	232c      	movs	r3, #44	; 0x2c
 8002812:	18fb      	adds	r3, r7, r3
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d007      	beq.n	800282a <SX1276SetRxConfig+0x142>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 800281a:	2330      	movs	r3, #48	; 0x30
 800281c:	18fb      	adds	r3, r7, r3
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	0019      	movs	r1, r3
 8002822:	2032      	movs	r0, #50	; 0x32
 8002824:	f001 f9d9 	bl	8003bda <SX1276Write>
 8002828:	e003      	b.n	8002832 <SX1276SetRxConfig+0x14a>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 800282a:	21ff      	movs	r1, #255	; 0xff
 800282c:	2032      	movs	r0, #50	; 0x32
 800282e:	f001 f9d4 	bl	8003bda <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8002832:	2030      	movs	r0, #48	; 0x30
 8002834:	f001 f9e5 	bl	8003c02 <SX1276Read>
 8002838:	0003      	movs	r3, r0
 800283a:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 800283c:	226f      	movs	r2, #111	; 0x6f
 800283e:	4013      	ands	r3, r2
 8002840:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8002842:	232c      	movs	r3, #44	; 0x2c
 8002844:	18fb      	adds	r3, r7, r3
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <SX1276SetRxConfig+0x168>
 800284c:	2300      	movs	r3, #0
 800284e:	e001      	b.n	8002854 <SX1276SetRxConfig+0x16c>
 8002850:	2380      	movs	r3, #128	; 0x80
 8002852:	425b      	negs	r3, r3
 8002854:	4313      	orrs	r3, r2
 8002856:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8002858:	2334      	movs	r3, #52	; 0x34
 800285a:	18fb      	adds	r3, r7, r3
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8002860:	b25b      	sxtb	r3, r3
 8002862:	4313      	orrs	r3, r2
 8002864:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8002866:	b2db      	uxtb	r3, r3
 8002868:	0019      	movs	r1, r3
 800286a:	2030      	movs	r0, #48	; 0x30
 800286c:	f001 f9b5 	bl	8003bda <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8002870:	2031      	movs	r0, #49	; 0x31
 8002872:	f001 f9c6 	bl	8003c02 <SX1276Read>
 8002876:	0003      	movs	r3, r0
 8002878:	001a      	movs	r2, r3
 800287a:	2340      	movs	r3, #64	; 0x40
 800287c:	4313      	orrs	r3, r2
 800287e:	b2db      	uxtb	r3, r3
 8002880:	0019      	movs	r1, r3
 8002882:	2031      	movs	r0, #49	; 0x31
 8002884:	f001 f9a9 	bl	8003bda <SX1276Write>
        break;
 8002888:	e14d      	b.n	8002b26 <SX1276SetRxConfig+0x43e>
            if( bandwidth > 2 )
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2b02      	cmp	r3, #2
 800288e:	d900      	bls.n	8002892 <SX1276SetRxConfig+0x1aa>
                while( 1 );
 8002890:	e7fe      	b.n	8002890 <SX1276SetRxConfig+0x1a8>
            bandwidth += 7;
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	3307      	adds	r3, #7
 8002896:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8002898:	4b87      	ldr	r3, [pc, #540]	; (8002ab8 <SX1276SetRxConfig+0x3d0>)
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	641a      	str	r2, [r3, #64]	; 0x40
            SX1276.Settings.LoRa.Datarate = datarate;
 800289e:	4b86      	ldr	r3, [pc, #536]	; (8002ab8 <SX1276SetRxConfig+0x3d0>)
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Coderate = coderate;
 80028a4:	4b84      	ldr	r3, [pc, #528]	; (8002ab8 <SX1276SetRxConfig+0x3d0>)
 80028a6:	220e      	movs	r2, #14
 80028a8:	18ba      	adds	r2, r7, r2
 80028aa:	2149      	movs	r1, #73	; 0x49
 80028ac:	7812      	ldrb	r2, [r2, #0]
 80028ae:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80028b0:	4b81      	ldr	r3, [pc, #516]	; (8002ab8 <SX1276SetRxConfig+0x3d0>)
 80028b2:	2224      	movs	r2, #36	; 0x24
 80028b4:	18ba      	adds	r2, r7, r2
 80028b6:	214a      	movs	r1, #74	; 0x4a
 80028b8:	8812      	ldrh	r2, [r2, #0]
 80028ba:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 80028bc:	4b7e      	ldr	r3, [pc, #504]	; (8002ab8 <SX1276SetRxConfig+0x3d0>)
 80028be:	222c      	movs	r2, #44	; 0x2c
 80028c0:	18ba      	adds	r2, r7, r2
 80028c2:	214c      	movs	r1, #76	; 0x4c
 80028c4:	7812      	ldrb	r2, [r2, #0]
 80028c6:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 80028c8:	4b7b      	ldr	r3, [pc, #492]	; (8002ab8 <SX1276SetRxConfig+0x3d0>)
 80028ca:	2230      	movs	r2, #48	; 0x30
 80028cc:	18ba      	adds	r2, r7, r2
 80028ce:	214d      	movs	r1, #77	; 0x4d
 80028d0:	7812      	ldrb	r2, [r2, #0]
 80028d2:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 80028d4:	4b78      	ldr	r3, [pc, #480]	; (8002ab8 <SX1276SetRxConfig+0x3d0>)
 80028d6:	2234      	movs	r2, #52	; 0x34
 80028d8:	18ba      	adds	r2, r7, r2
 80028da:	214e      	movs	r1, #78	; 0x4e
 80028dc:	7812      	ldrb	r2, [r2, #0]
 80028de:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 80028e0:	4b75      	ldr	r3, [pc, #468]	; (8002ab8 <SX1276SetRxConfig+0x3d0>)
 80028e2:	2238      	movs	r2, #56	; 0x38
 80028e4:	18ba      	adds	r2, r7, r2
 80028e6:	214f      	movs	r1, #79	; 0x4f
 80028e8:	7812      	ldrb	r2, [r2, #0]
 80028ea:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80028ec:	4b72      	ldr	r3, [pc, #456]	; (8002ab8 <SX1276SetRxConfig+0x3d0>)
 80028ee:	223c      	movs	r2, #60	; 0x3c
 80028f0:	18ba      	adds	r2, r7, r2
 80028f2:	2150      	movs	r1, #80	; 0x50
 80028f4:	7812      	ldrb	r2, [r2, #0]
 80028f6:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80028f8:	4b6f      	ldr	r3, [pc, #444]	; (8002ab8 <SX1276SetRxConfig+0x3d0>)
 80028fa:	2220      	movs	r2, #32
 80028fc:	2120      	movs	r1, #32
 80028fe:	468c      	mov	ip, r1
 8002900:	44bc      	add	ip, r7
 8002902:	4462      	add	r2, ip
 8002904:	2151      	movs	r1, #81	; 0x51
 8002906:	7812      	ldrb	r2, [r2, #0]
 8002908:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 800290a:	4b6b      	ldr	r3, [pc, #428]	; (8002ab8 <SX1276SetRxConfig+0x3d0>)
 800290c:	2224      	movs	r2, #36	; 0x24
 800290e:	2120      	movs	r1, #32
 8002910:	468c      	mov	ip, r1
 8002912:	44bc      	add	ip, r7
 8002914:	4462      	add	r2, ip
 8002916:	2152      	movs	r1, #82	; 0x52
 8002918:	7812      	ldrb	r2, [r2, #0]
 800291a:	545a      	strb	r2, [r3, r1]
            if( datarate > 12 )
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b0c      	cmp	r3, #12
 8002920:	d902      	bls.n	8002928 <SX1276SetRxConfig+0x240>
                datarate = 12;
 8002922:	230c      	movs	r3, #12
 8002924:	607b      	str	r3, [r7, #4]
 8002926:	e004      	b.n	8002932 <SX1276SetRxConfig+0x24a>
            else if( datarate < 6 )
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b05      	cmp	r3, #5
 800292c:	d801      	bhi.n	8002932 <SX1276SetRxConfig+0x24a>
                datarate = 6;
 800292e:	2306      	movs	r3, #6
 8002930:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	2b07      	cmp	r3, #7
 8002936:	d105      	bne.n	8002944 <SX1276SetRxConfig+0x25c>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b0b      	cmp	r3, #11
 800293c:	d008      	beq.n	8002950 <SX1276SetRxConfig+0x268>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b0c      	cmp	r3, #12
 8002942:	d005      	beq.n	8002950 <SX1276SetRxConfig+0x268>
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2b08      	cmp	r3, #8
 8002948:	d107      	bne.n	800295a <SX1276SetRxConfig+0x272>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b0c      	cmp	r3, #12
 800294e:	d104      	bne.n	800295a <SX1276SetRxConfig+0x272>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8002950:	4b59      	ldr	r3, [pc, #356]	; (8002ab8 <SX1276SetRxConfig+0x3d0>)
 8002952:	2248      	movs	r2, #72	; 0x48
 8002954:	2101      	movs	r1, #1
 8002956:	5499      	strb	r1, [r3, r2]
 8002958:	e003      	b.n	8002962 <SX1276SetRxConfig+0x27a>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800295a:	4b57      	ldr	r3, [pc, #348]	; (8002ab8 <SX1276SetRxConfig+0x3d0>)
 800295c:	2248      	movs	r2, #72	; 0x48
 800295e:	2100      	movs	r1, #0
 8002960:	5499      	strb	r1, [r3, r2]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8002962:	201d      	movs	r0, #29
 8002964:	f001 f94d 	bl	8003c02 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	b2db      	uxtb	r3, r3
 800296c:	011b      	lsls	r3, r3, #4
 800296e:	b2da      	uxtb	r2, r3
 8002970:	230e      	movs	r3, #14
 8002972:	18fb      	adds	r3, r7, r3
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	18db      	adds	r3, r3, r3
 8002978:	b2db      	uxtb	r3, r3
 800297a:	4313      	orrs	r3, r2
 800297c:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800297e:	232c      	movs	r3, #44	; 0x2c
 8002980:	18fb      	adds	r3, r7, r3
 8002982:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8002984:	4313      	orrs	r3, r2
 8002986:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8002988:	0019      	movs	r1, r3
 800298a:	201d      	movs	r0, #29
 800298c:	f001 f925 	bl	8003bda <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8002990:	201e      	movs	r0, #30
 8002992:	f001 f936 	bl	8003c02 <SX1276Read>
 8002996:	0003      	movs	r3, r0
 8002998:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 800299a:	2308      	movs	r3, #8
 800299c:	4013      	ands	r3, r2
 800299e:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	011b      	lsls	r3, r3, #4
 80029a6:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 80029a8:	4313      	orrs	r3, r2
 80029aa:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 80029ac:	2334      	movs	r3, #52	; 0x34
 80029ae:	18fb      	adds	r3, r7, r3
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	4313      	orrs	r3, r2
 80029b8:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 80029ba:	2328      	movs	r3, #40	; 0x28
 80029bc:	18fb      	adds	r3, r7, r3
 80029be:	881b      	ldrh	r3, [r3, #0]
 80029c0:	0a1b      	lsrs	r3, r3, #8
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2103      	movs	r1, #3
 80029c8:	400b      	ands	r3, r1
 80029ca:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 80029cc:	4313      	orrs	r3, r2
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	0019      	movs	r1, r3
 80029d2:	201e      	movs	r0, #30
 80029d4:	f001 f901 	bl	8003bda <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 80029d8:	2026      	movs	r0, #38	; 0x26
 80029da:	f001 f912 	bl	8003c02 <SX1276Read>
 80029de:	0003      	movs	r3, r0
 80029e0:	b25b      	sxtb	r3, r3
 80029e2:	2208      	movs	r2, #8
 80029e4:	4393      	bics	r3, r2
 80029e6:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 80029e8:	4b33      	ldr	r3, [pc, #204]	; (8002ab8 <SX1276SetRxConfig+0x3d0>)
 80029ea:	2148      	movs	r1, #72	; 0x48
 80029ec:	5c5b      	ldrb	r3, [r3, r1]
 80029ee:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 80029f0:	b25b      	sxtb	r3, r3
 80029f2:	4313      	orrs	r3, r2
 80029f4:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	0019      	movs	r1, r3
 80029fa:	2026      	movs	r0, #38	; 0x26
 80029fc:	f001 f8ed 	bl	8003bda <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8002a00:	2328      	movs	r3, #40	; 0x28
 8002a02:	18fb      	adds	r3, r7, r3
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	0019      	movs	r1, r3
 8002a0a:	201f      	movs	r0, #31
 8002a0c:	f001 f8e5 	bl	8003bda <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8002a10:	2324      	movs	r3, #36	; 0x24
 8002a12:	18fb      	adds	r3, r7, r3
 8002a14:	881b      	ldrh	r3, [r3, #0]
 8002a16:	0a1b      	lsrs	r3, r3, #8
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	2020      	movs	r0, #32
 8002a20:	f001 f8db 	bl	8003bda <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8002a24:	2324      	movs	r3, #36	; 0x24
 8002a26:	18fb      	adds	r3, r7, r3
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	0019      	movs	r1, r3
 8002a2e:	2021      	movs	r0, #33	; 0x21
 8002a30:	f001 f8d3 	bl	8003bda <SX1276Write>
            if( fixLen == 1 )
 8002a34:	232c      	movs	r3, #44	; 0x2c
 8002a36:	18fb      	adds	r3, r7, r3
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d006      	beq.n	8002a4c <SX1276SetRxConfig+0x364>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8002a3e:	2330      	movs	r3, #48	; 0x30
 8002a40:	18fb      	adds	r3, r7, r3
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	0019      	movs	r1, r3
 8002a46:	2022      	movs	r0, #34	; 0x22
 8002a48:	f001 f8c7 	bl	8003bda <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8002a4c:	4b1a      	ldr	r3, [pc, #104]	; (8002ab8 <SX1276SetRxConfig+0x3d0>)
 8002a4e:	224f      	movs	r2, #79	; 0x4f
 8002a50:	5c9b      	ldrb	r3, [r3, r2]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d013      	beq.n	8002a7e <SX1276SetRxConfig+0x396>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8002a56:	2044      	movs	r0, #68	; 0x44
 8002a58:	f001 f8d3 	bl	8003c02 <SX1276Read>
 8002a5c:	0003      	movs	r3, r0
 8002a5e:	001a      	movs	r2, r3
 8002a60:	2380      	movs	r3, #128	; 0x80
 8002a62:	425b      	negs	r3, r3
 8002a64:	4313      	orrs	r3, r2
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	0019      	movs	r1, r3
 8002a6a:	2044      	movs	r0, #68	; 0x44
 8002a6c:	f001 f8b5 	bl	8003bda <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8002a70:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <SX1276SetRxConfig+0x3d0>)
 8002a72:	2250      	movs	r2, #80	; 0x50
 8002a74:	5c9b      	ldrb	r3, [r3, r2]
 8002a76:	0019      	movs	r1, r3
 8002a78:	2024      	movs	r0, #36	; 0x24
 8002a7a:	f001 f8ae 	bl	8003bda <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2b09      	cmp	r3, #9
 8002a82:	d10d      	bne.n	8002aa0 <SX1276SetRxConfig+0x3b8>
 8002a84:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <SX1276SetRxConfig+0x3d0>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	4a0d      	ldr	r2, [pc, #52]	; (8002ac0 <SX1276SetRxConfig+0x3d8>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d908      	bls.n	8002aa0 <SX1276SetRxConfig+0x3b8>
                SX1276Write( REG_LR_TEST36, 0x02 );
 8002a8e:	2102      	movs	r1, #2
 8002a90:	2036      	movs	r0, #54	; 0x36
 8002a92:	f001 f8a2 	bl	8003bda <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x64 );
 8002a96:	2164      	movs	r1, #100	; 0x64
 8002a98:	203a      	movs	r0, #58	; 0x3a
 8002a9a:	f001 f89e 	bl	8003bda <SX1276Write>
 8002a9e:	e015      	b.n	8002acc <SX1276SetRxConfig+0x3e4>
            else if( bandwidth == 9 )
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2b09      	cmp	r3, #9
 8002aa4:	d10e      	bne.n	8002ac4 <SX1276SetRxConfig+0x3dc>
                SX1276Write( REG_LR_TEST36, 0x02 );
 8002aa6:	2102      	movs	r1, #2
 8002aa8:	2036      	movs	r0, #54	; 0x36
 8002aaa:	f001 f896 	bl	8003bda <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x7F );
 8002aae:	217f      	movs	r1, #127	; 0x7f
 8002ab0:	203a      	movs	r0, #58	; 0x3a
 8002ab2:	f001 f892 	bl	8003bda <SX1276Write>
 8002ab6:	e009      	b.n	8002acc <SX1276SetRxConfig+0x3e4>
 8002ab8:	20000ed8 	.word	0x20000ed8
 8002abc:	417e8480 	.word	0x417e8480
 8002ac0:	1f4add40 	.word	0x1f4add40
                SX1276Write( REG_LR_TEST36, 0x03 );
 8002ac4:	2103      	movs	r1, #3
 8002ac6:	2036      	movs	r0, #54	; 0x36
 8002ac8:	f001 f887 	bl	8003bda <SX1276Write>
            if( datarate == 6 )
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b06      	cmp	r3, #6
 8002ad0:	d114      	bne.n	8002afc <SX1276SetRxConfig+0x414>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8002ad2:	2031      	movs	r0, #49	; 0x31
 8002ad4:	f001 f895 	bl	8003c02 <SX1276Read>
 8002ad8:	0003      	movs	r3, r0
 8002ada:	b25b      	sxtb	r3, r3
 8002adc:	2207      	movs	r2, #7
 8002ade:	4393      	bics	r3, r2
 8002ae0:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8002ae2:	2205      	movs	r2, #5
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	0019      	movs	r1, r3
 8002aec:	2031      	movs	r0, #49	; 0x31
 8002aee:	f001 f874 	bl	8003bda <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8002af2:	210c      	movs	r1, #12
 8002af4:	2037      	movs	r0, #55	; 0x37
 8002af6:	f001 f870 	bl	8003bda <SX1276Write>
        break;
 8002afa:	e013      	b.n	8002b24 <SX1276SetRxConfig+0x43c>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8002afc:	2031      	movs	r0, #49	; 0x31
 8002afe:	f001 f880 	bl	8003c02 <SX1276Read>
 8002b02:	0003      	movs	r3, r0
 8002b04:	b25b      	sxtb	r3, r3
 8002b06:	2207      	movs	r2, #7
 8002b08:	4393      	bics	r3, r2
 8002b0a:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8002b0c:	2203      	movs	r2, #3
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	0019      	movs	r1, r3
 8002b16:	2031      	movs	r0, #49	; 0x31
 8002b18:	f001 f85f 	bl	8003bda <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8002b1c:	210a      	movs	r1, #10
 8002b1e:	2037      	movs	r0, #55	; 0x37
 8002b20:	f001 f85b 	bl	8003bda <SX1276Write>
        break;
 8002b24:	46c0      	nop			; (mov r8, r8)
}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	b005      	add	sp, #20
 8002b2c:	bd90      	pop	{r4, r7, pc}
 8002b2e:	46c0      	nop			; (mov r8, r8)

08002b30 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8002b30:	b590      	push	{r4, r7, lr}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60ba      	str	r2, [r7, #8]
 8002b38:	607b      	str	r3, [r7, #4]
 8002b3a:	230f      	movs	r3, #15
 8002b3c:	18fb      	adds	r3, r7, r3
 8002b3e:	1c02      	adds	r2, r0, #0
 8002b40:	701a      	strb	r2, [r3, #0]
 8002b42:	230e      	movs	r3, #14
 8002b44:	18fb      	adds	r3, r7, r3
 8002b46:	1c0a      	adds	r2, r1, #0
 8002b48:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 8002b4a:	230f      	movs	r3, #15
 8002b4c:	18fb      	adds	r3, r7, r3
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	0018      	movs	r0, r3
 8002b52:	f000 ffe3 	bl	8003b1c <SX1276SetModem>

    SX1276SetRfTxPower( power );
 8002b56:	230e      	movs	r3, #14
 8002b58:	18fb      	adds	r3, r7, r3
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	b25b      	sxtb	r3, r3
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f001 fe86 	bl	8004870 <SX1276SetRfTxPower>

    switch( modem )
 8002b64:	230f      	movs	r3, #15
 8002b66:	18fb      	adds	r3, r7, r3
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <SX1276SetTxConfig+0x46>
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d100      	bne.n	8002b74 <SX1276SetTxConfig+0x44>
 8002b72:	e0a4      	b.n	8002cbe <SX1276SetTxConfig+0x18e>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8002b74:	e1a2      	b.n	8002ebc <SX1276SetTxConfig+0x38c>
            SX1276.Settings.Fsk.Power = power;
 8002b76:	4bd3      	ldr	r3, [pc, #844]	; (8002ec4 <SX1276SetTxConfig+0x394>)
 8002b78:	220e      	movs	r2, #14
 8002b7a:	18ba      	adds	r2, r7, r2
 8002b7c:	7812      	ldrb	r2, [r2, #0]
 8002b7e:	731a      	strb	r2, [r3, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 8002b80:	4bd0      	ldr	r3, [pc, #832]	; (8002ec4 <SX1276SetTxConfig+0x394>)
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8002b86:	4bcf      	ldr	r3, [pc, #828]	; (8002ec4 <SX1276SetTxConfig+0x394>)
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 8002b8c:	4bcd      	ldr	r3, [pc, #820]	; (8002ec4 <SX1276SetTxConfig+0x394>)
 8002b8e:	6a3a      	ldr	r2, [r7, #32]
 8002b90:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8002b92:	4bcc      	ldr	r3, [pc, #816]	; (8002ec4 <SX1276SetTxConfig+0x394>)
 8002b94:	2228      	movs	r2, #40	; 0x28
 8002b96:	18ba      	adds	r2, r7, r2
 8002b98:	8812      	ldrh	r2, [r2, #0]
 8002b9a:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8002b9c:	4bc9      	ldr	r3, [pc, #804]	; (8002ec4 <SX1276SetTxConfig+0x394>)
 8002b9e:	222c      	movs	r2, #44	; 0x2c
 8002ba0:	18ba      	adds	r2, r7, r2
 8002ba2:	2122      	movs	r1, #34	; 0x22
 8002ba4:	7812      	ldrb	r2, [r2, #0]
 8002ba6:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8002ba8:	4bc6      	ldr	r3, [pc, #792]	; (8002ec4 <SX1276SetTxConfig+0x394>)
 8002baa:	2230      	movs	r2, #48	; 0x30
 8002bac:	18ba      	adds	r2, r7, r2
 8002bae:	2124      	movs	r1, #36	; 0x24
 8002bb0:	7812      	ldrb	r2, [r2, #0]
 8002bb2:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8002bb4:	4bc3      	ldr	r3, [pc, #780]	; (8002ec4 <SX1276SetTxConfig+0x394>)
 8002bb6:	223c      	movs	r2, #60	; 0x3c
 8002bb8:	18ba      	adds	r2, r7, r2
 8002bba:	2125      	movs	r1, #37	; 0x25
 8002bbc:	7812      	ldrb	r2, [r2, #0]
 8002bbe:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8002bc0:	4bc0      	ldr	r3, [pc, #768]	; (8002ec4 <SX1276SetTxConfig+0x394>)
 8002bc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002bc4:	629a      	str	r2, [r3, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8002bc6:	68b8      	ldr	r0, [r7, #8]
 8002bc8:	f7ff fadc 	bl	8002184 <__aeabi_ui2d>
 8002bcc:	2200      	movs	r2, #0
 8002bce:	4bbe      	ldr	r3, [pc, #760]	; (8002ec8 <SX1276SetTxConfig+0x398>)
 8002bd0:	f7fe f878 	bl	8000cc4 <__aeabi_ddiv>
 8002bd4:	0003      	movs	r3, r0
 8002bd6:	000c      	movs	r4, r1
 8002bd8:	0018      	movs	r0, r3
 8002bda:	0021      	movs	r1, r4
 8002bdc:	f7fd fc84 	bl	80004e8 <__aeabi_d2uiz>
 8002be0:	0003      	movs	r3, r0
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	0a1b      	lsrs	r3, r3, #8
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	0019      	movs	r1, r3
 8002bee:	2004      	movs	r0, #4
 8002bf0:	f000 fff3 	bl	8003bda <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	0019      	movs	r1, r3
 8002bfa:	2005      	movs	r0, #5
 8002bfc:	f000 ffed 	bl	8003bda <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8002c00:	6a38      	ldr	r0, [r7, #32]
 8002c02:	f7ff fabf 	bl	8002184 <__aeabi_ui2d>
 8002c06:	0003      	movs	r3, r0
 8002c08:	000c      	movs	r4, r1
 8002c0a:	001a      	movs	r2, r3
 8002c0c:	0023      	movs	r3, r4
 8002c0e:	2000      	movs	r0, #0
 8002c10:	49ae      	ldr	r1, [pc, #696]	; (8002ecc <SX1276SetTxConfig+0x39c>)
 8002c12:	f7fe f857 	bl	8000cc4 <__aeabi_ddiv>
 8002c16:	0003      	movs	r3, r0
 8002c18:	000c      	movs	r4, r1
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	0021      	movs	r1, r4
 8002c1e:	f7fd fc63 	bl	80004e8 <__aeabi_d2uiz>
 8002c22:	0003      	movs	r3, r0
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	623b      	str	r3, [r7, #32]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	0a1b      	lsrs	r3, r3, #8
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	0019      	movs	r1, r3
 8002c30:	2002      	movs	r0, #2
 8002c32:	f000 ffd2 	bl	8003bda <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	0019      	movs	r1, r3
 8002c3c:	2003      	movs	r0, #3
 8002c3e:	f000 ffcc 	bl	8003bda <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8002c42:	2328      	movs	r3, #40	; 0x28
 8002c44:	18fb      	adds	r3, r7, r3
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	0a1b      	lsrs	r3, r3, #8
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	0019      	movs	r1, r3
 8002c50:	2025      	movs	r0, #37	; 0x25
 8002c52:	f000 ffc2 	bl	8003bda <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8002c56:	2328      	movs	r3, #40	; 0x28
 8002c58:	18fb      	adds	r3, r7, r3
 8002c5a:	881b      	ldrh	r3, [r3, #0]
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	0019      	movs	r1, r3
 8002c60:	2026      	movs	r0, #38	; 0x26
 8002c62:	f000 ffba 	bl	8003bda <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8002c66:	2030      	movs	r0, #48	; 0x30
 8002c68:	f000 ffcb 	bl	8003c02 <SX1276Read>
 8002c6c:	0003      	movs	r3, r0
 8002c6e:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8002c70:	226f      	movs	r2, #111	; 0x6f
 8002c72:	4013      	ands	r3, r2
 8002c74:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8002c76:	232c      	movs	r3, #44	; 0x2c
 8002c78:	18fb      	adds	r3, r7, r3
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <SX1276SetTxConfig+0x154>
 8002c80:	2300      	movs	r3, #0
 8002c82:	e001      	b.n	8002c88 <SX1276SetTxConfig+0x158>
 8002c84:	2380      	movs	r3, #128	; 0x80
 8002c86:	425b      	negs	r3, r3
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8002c8c:	2330      	movs	r3, #48	; 0x30
 8002c8e:	18fb      	adds	r3, r7, r3
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8002c94:	b25b      	sxtb	r3, r3
 8002c96:	4313      	orrs	r3, r2
 8002c98:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	0019      	movs	r1, r3
 8002c9e:	2030      	movs	r0, #48	; 0x30
 8002ca0:	f000 ff9b 	bl	8003bda <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8002ca4:	2031      	movs	r0, #49	; 0x31
 8002ca6:	f000 ffac 	bl	8003c02 <SX1276Read>
 8002caa:	0003      	movs	r3, r0
 8002cac:	001a      	movs	r2, r3
 8002cae:	2340      	movs	r3, #64	; 0x40
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	0019      	movs	r1, r3
 8002cb6:	2031      	movs	r0, #49	; 0x31
 8002cb8:	f000 ff8f 	bl	8003bda <SX1276Write>
        break;
 8002cbc:	e0fe      	b.n	8002ebc <SX1276SetTxConfig+0x38c>
            SX1276.Settings.LoRa.Power = power;
 8002cbe:	4b81      	ldr	r3, [pc, #516]	; (8002ec4 <SX1276SetTxConfig+0x394>)
 8002cc0:	220e      	movs	r2, #14
 8002cc2:	18ba      	adds	r2, r7, r2
 8002cc4:	213c      	movs	r1, #60	; 0x3c
 8002cc6:	7812      	ldrb	r2, [r2, #0]
 8002cc8:	545a      	strb	r2, [r3, r1]
            if( bandwidth > 2 )
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d900      	bls.n	8002cd2 <SX1276SetTxConfig+0x1a2>
                while( 1 );
 8002cd0:	e7fe      	b.n	8002cd0 <SX1276SetTxConfig+0x1a0>
            bandwidth += 7;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	3307      	adds	r3, #7
 8002cd6:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8002cd8:	4b7a      	ldr	r3, [pc, #488]	; (8002ec4 <SX1276SetTxConfig+0x394>)
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	641a      	str	r2, [r3, #64]	; 0x40
            SX1276.Settings.LoRa.Datarate = datarate;
 8002cde:	4b79      	ldr	r3, [pc, #484]	; (8002ec4 <SX1276SetTxConfig+0x394>)
 8002ce0:	6a3a      	ldr	r2, [r7, #32]
 8002ce2:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Coderate = coderate;
 8002ce4:	4b77      	ldr	r3, [pc, #476]	; (8002ec4 <SX1276SetTxConfig+0x394>)
 8002ce6:	2224      	movs	r2, #36	; 0x24
 8002ce8:	18ba      	adds	r2, r7, r2
 8002cea:	2149      	movs	r1, #73	; 0x49
 8002cec:	7812      	ldrb	r2, [r2, #0]
 8002cee:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8002cf0:	4b74      	ldr	r3, [pc, #464]	; (8002ec4 <SX1276SetTxConfig+0x394>)
 8002cf2:	2228      	movs	r2, #40	; 0x28
 8002cf4:	18ba      	adds	r2, r7, r2
 8002cf6:	214a      	movs	r1, #74	; 0x4a
 8002cf8:	8812      	ldrh	r2, [r2, #0]
 8002cfa:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8002cfc:	4b71      	ldr	r3, [pc, #452]	; (8002ec4 <SX1276SetTxConfig+0x394>)
 8002cfe:	222c      	movs	r2, #44	; 0x2c
 8002d00:	18ba      	adds	r2, r7, r2
 8002d02:	214c      	movs	r1, #76	; 0x4c
 8002d04:	7812      	ldrb	r2, [r2, #0]
 8002d06:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8002d08:	4b6e      	ldr	r3, [pc, #440]	; (8002ec4 <SX1276SetTxConfig+0x394>)
 8002d0a:	2234      	movs	r2, #52	; 0x34
 8002d0c:	18ba      	adds	r2, r7, r2
 8002d0e:	214f      	movs	r1, #79	; 0x4f
 8002d10:	7812      	ldrb	r2, [r2, #0]
 8002d12:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8002d14:	4b6b      	ldr	r3, [pc, #428]	; (8002ec4 <SX1276SetTxConfig+0x394>)
 8002d16:	2238      	movs	r2, #56	; 0x38
 8002d18:	18ba      	adds	r2, r7, r2
 8002d1a:	2150      	movs	r1, #80	; 0x50
 8002d1c:	7812      	ldrb	r2, [r2, #0]
 8002d1e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8002d20:	4b68      	ldr	r3, [pc, #416]	; (8002ec4 <SX1276SetTxConfig+0x394>)
 8002d22:	2230      	movs	r2, #48	; 0x30
 8002d24:	18ba      	adds	r2, r7, r2
 8002d26:	214e      	movs	r1, #78	; 0x4e
 8002d28:	7812      	ldrb	r2, [r2, #0]
 8002d2a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8002d2c:	4b65      	ldr	r3, [pc, #404]	; (8002ec4 <SX1276SetTxConfig+0x394>)
 8002d2e:	223c      	movs	r2, #60	; 0x3c
 8002d30:	18ba      	adds	r2, r7, r2
 8002d32:	2151      	movs	r1, #81	; 0x51
 8002d34:	7812      	ldrb	r2, [r2, #0]
 8002d36:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8002d38:	4b62      	ldr	r3, [pc, #392]	; (8002ec4 <SX1276SetTxConfig+0x394>)
 8002d3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d3c:	655a      	str	r2, [r3, #84]	; 0x54
            if( datarate > 12 )
 8002d3e:	6a3b      	ldr	r3, [r7, #32]
 8002d40:	2b0c      	cmp	r3, #12
 8002d42:	d902      	bls.n	8002d4a <SX1276SetTxConfig+0x21a>
                datarate = 12;
 8002d44:	230c      	movs	r3, #12
 8002d46:	623b      	str	r3, [r7, #32]
 8002d48:	e004      	b.n	8002d54 <SX1276SetTxConfig+0x224>
            else if( datarate < 6 )
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	2b05      	cmp	r3, #5
 8002d4e:	d801      	bhi.n	8002d54 <SX1276SetTxConfig+0x224>
                datarate = 6;
 8002d50:	2306      	movs	r3, #6
 8002d52:	623b      	str	r3, [r7, #32]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b07      	cmp	r3, #7
 8002d58:	d105      	bne.n	8002d66 <SX1276SetTxConfig+0x236>
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	2b0b      	cmp	r3, #11
 8002d5e:	d008      	beq.n	8002d72 <SX1276SetTxConfig+0x242>
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	2b0c      	cmp	r3, #12
 8002d64:	d005      	beq.n	8002d72 <SX1276SetTxConfig+0x242>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d107      	bne.n	8002d7c <SX1276SetTxConfig+0x24c>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	2b0c      	cmp	r3, #12
 8002d70:	d104      	bne.n	8002d7c <SX1276SetTxConfig+0x24c>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8002d72:	4b54      	ldr	r3, [pc, #336]	; (8002ec4 <SX1276SetTxConfig+0x394>)
 8002d74:	2248      	movs	r2, #72	; 0x48
 8002d76:	2101      	movs	r1, #1
 8002d78:	5499      	strb	r1, [r3, r2]
 8002d7a:	e003      	b.n	8002d84 <SX1276SetTxConfig+0x254>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8002d7c:	4b51      	ldr	r3, [pc, #324]	; (8002ec4 <SX1276SetTxConfig+0x394>)
 8002d7e:	2248      	movs	r2, #72	; 0x48
 8002d80:	2100      	movs	r1, #0
 8002d82:	5499      	strb	r1, [r3, r2]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8002d84:	4b4f      	ldr	r3, [pc, #316]	; (8002ec4 <SX1276SetTxConfig+0x394>)
 8002d86:	224f      	movs	r2, #79	; 0x4f
 8002d88:	5c9b      	ldrb	r3, [r3, r2]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d013      	beq.n	8002db6 <SX1276SetTxConfig+0x286>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8002d8e:	2044      	movs	r0, #68	; 0x44
 8002d90:	f000 ff37 	bl	8003c02 <SX1276Read>
 8002d94:	0003      	movs	r3, r0
 8002d96:	001a      	movs	r2, r3
 8002d98:	2380      	movs	r3, #128	; 0x80
 8002d9a:	425b      	negs	r3, r3
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	0019      	movs	r1, r3
 8002da2:	2044      	movs	r0, #68	; 0x44
 8002da4:	f000 ff19 	bl	8003bda <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8002da8:	4b46      	ldr	r3, [pc, #280]	; (8002ec4 <SX1276SetTxConfig+0x394>)
 8002daa:	2250      	movs	r2, #80	; 0x50
 8002dac:	5c9b      	ldrb	r3, [r3, r2]
 8002dae:	0019      	movs	r1, r3
 8002db0:	2024      	movs	r0, #36	; 0x24
 8002db2:	f000 ff12 	bl	8003bda <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8002db6:	201d      	movs	r0, #29
 8002db8:	f000 ff23 	bl	8003c02 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	011b      	lsls	r3, r3, #4
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	2324      	movs	r3, #36	; 0x24
 8002dc6:	18fb      	adds	r3, r7, r3
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	18db      	adds	r3, r3, r3
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8002dd2:	232c      	movs	r3, #44	; 0x2c
 8002dd4:	18fb      	adds	r3, r7, r3
 8002dd6:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8002ddc:	0019      	movs	r1, r3
 8002dde:	201d      	movs	r0, #29
 8002de0:	f000 fefb 	bl	8003bda <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8002de4:	201e      	movs	r0, #30
 8002de6:	f000 ff0c 	bl	8003c02 <SX1276Read>
 8002dea:	0003      	movs	r3, r0
 8002dec:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 8002dee:	230b      	movs	r3, #11
 8002df0:	4013      	ands	r3, r2
 8002df2:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8002e00:	2330      	movs	r3, #48	; 0x30
 8002e02:	18fb      	adds	r3, r7, r3
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	0019      	movs	r1, r3
 8002e10:	201e      	movs	r0, #30
 8002e12:	f000 fee2 	bl	8003bda <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8002e16:	2026      	movs	r0, #38	; 0x26
 8002e18:	f000 fef3 	bl	8003c02 <SX1276Read>
 8002e1c:	0003      	movs	r3, r0
 8002e1e:	b25b      	sxtb	r3, r3
 8002e20:	2208      	movs	r2, #8
 8002e22:	4393      	bics	r3, r2
 8002e24:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8002e26:	4b27      	ldr	r3, [pc, #156]	; (8002ec4 <SX1276SetTxConfig+0x394>)
 8002e28:	2148      	movs	r1, #72	; 0x48
 8002e2a:	5c5b      	ldrb	r3, [r3, r1]
 8002e2c:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8002e2e:	b25b      	sxtb	r3, r3
 8002e30:	4313      	orrs	r3, r2
 8002e32:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	0019      	movs	r1, r3
 8002e38:	2026      	movs	r0, #38	; 0x26
 8002e3a:	f000 fece 	bl	8003bda <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8002e3e:	2328      	movs	r3, #40	; 0x28
 8002e40:	18fb      	adds	r3, r7, r3
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	0a1b      	lsrs	r3, r3, #8
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	0019      	movs	r1, r3
 8002e4c:	2020      	movs	r0, #32
 8002e4e:	f000 fec4 	bl	8003bda <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8002e52:	2328      	movs	r3, #40	; 0x28
 8002e54:	18fb      	adds	r3, r7, r3
 8002e56:	881b      	ldrh	r3, [r3, #0]
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	0019      	movs	r1, r3
 8002e5c:	2021      	movs	r0, #33	; 0x21
 8002e5e:	f000 febc 	bl	8003bda <SX1276Write>
            if( datarate == 6 )
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	2b06      	cmp	r3, #6
 8002e66:	d114      	bne.n	8002e92 <SX1276SetTxConfig+0x362>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8002e68:	2031      	movs	r0, #49	; 0x31
 8002e6a:	f000 feca 	bl	8003c02 <SX1276Read>
 8002e6e:	0003      	movs	r3, r0
 8002e70:	b25b      	sxtb	r3, r3
 8002e72:	2207      	movs	r2, #7
 8002e74:	4393      	bics	r3, r2
 8002e76:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8002e78:	2205      	movs	r2, #5
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	0019      	movs	r1, r3
 8002e82:	2031      	movs	r0, #49	; 0x31
 8002e84:	f000 fea9 	bl	8003bda <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8002e88:	210c      	movs	r1, #12
 8002e8a:	2037      	movs	r0, #55	; 0x37
 8002e8c:	f000 fea5 	bl	8003bda <SX1276Write>
        break;
 8002e90:	e013      	b.n	8002eba <SX1276SetTxConfig+0x38a>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8002e92:	2031      	movs	r0, #49	; 0x31
 8002e94:	f000 feb5 	bl	8003c02 <SX1276Read>
 8002e98:	0003      	movs	r3, r0
 8002e9a:	b25b      	sxtb	r3, r3
 8002e9c:	2207      	movs	r2, #7
 8002e9e:	4393      	bics	r3, r2
 8002ea0:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8002ea2:	2203      	movs	r2, #3
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	0019      	movs	r1, r3
 8002eac:	2031      	movs	r0, #49	; 0x31
 8002eae:	f000 fe94 	bl	8003bda <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8002eb2:	210a      	movs	r1, #10
 8002eb4:	2037      	movs	r0, #55	; 0x37
 8002eb6:	f000 fe90 	bl	8003bda <SX1276Write>
        break;
 8002eba:	46c0      	nop			; (mov r8, r8)
}
 8002ebc:	46c0      	nop			; (mov r8, r8)
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	b005      	add	sp, #20
 8002ec2:	bd90      	pop	{r4, r7, pc}
 8002ec4:	20000ed8 	.word	0x20000ed8
 8002ec8:	404e8480 	.word	0x404e8480
 8002ecc:	417e8480 	.word	0x417e8480

08002ed0 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
 8002ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ed2:	b095      	sub	sp, #84	; 0x54
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	0002      	movs	r2, r0
 8002ed8:	1dfb      	adds	r3, r7, #7
 8002eda:	701a      	strb	r2, [r3, #0]
 8002edc:	1dbb      	adds	r3, r7, #6
 8002ede:	1c0a      	adds	r2, r1, #0
 8002ee0:	701a      	strb	r2, [r3, #0]
    double airTime = 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	2400      	movs	r4, #0
 8002ee6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ee8:	64fc      	str	r4, [r7, #76]	; 0x4c

    switch( modem )
 8002eea:	1dfb      	adds	r3, r7, #7
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <SX1276GetTimeOnAir+0x2a>
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d100      	bne.n	8002ef8 <SX1276GetTimeOnAir+0x28>
 8002ef6:	e082      	b.n	8002ffe <SX1276GetTimeOnAir+0x12e>
 8002ef8:	e15c      	b.n	80031b4 <SX1276GetTimeOnAir+0x2e4>
    {
    case MODEM_FSK:
        {
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002efa:	4bb3      	ldr	r3, [pc, #716]	; (80031c8 <SX1276GetTimeOnAir+0x2f8>)
 8002efc:	8c1b      	ldrh	r3, [r3, #32]
 8002efe:	001c      	movs	r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8002f00:	2027      	movs	r0, #39	; 0x27
 8002f02:	f000 fe7e 	bl	8003c02 <SX1276Read>
 8002f06:	0003      	movs	r3, r0
 8002f08:	001a      	movs	r2, r3
 8002f0a:	23f8      	movs	r3, #248	; 0xf8
 8002f0c:	439a      	bics	r2, r3
 8002f0e:	0013      	movs	r3, r2
 8002f10:	3301      	adds	r3, #1
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002f12:	18e3      	adds	r3, r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8002f14:	0018      	movs	r0, r3
 8002f16:	f7ff f8f3 	bl	8002100 <__aeabi_i2d>
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8002f1a:	4bab      	ldr	r3, [pc, #684]	; (80031c8 <SX1276GetTimeOnAir+0x2f8>)
 8002f1c:	2222      	movs	r2, #34	; 0x22
 8002f1e:	5c9b      	ldrb	r3, [r3, r2]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d002      	beq.n	8002f2a <SX1276GetTimeOnAir+0x5a>
 8002f24:	2300      	movs	r3, #0
 8002f26:	2400      	movs	r4, #0
 8002f28:	e001      	b.n	8002f2e <SX1276GetTimeOnAir+0x5e>
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	4ca7      	ldr	r4, [pc, #668]	; (80031cc <SX1276GetTimeOnAir+0x2fc>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8002f2e:	001a      	movs	r2, r3
 8002f30:	0023      	movs	r3, r4
 8002f32:	f7fd fbb7 	bl	80006a4 <__aeabi_dadd>
 8002f36:	0003      	movs	r3, r0
 8002f38:	000c      	movs	r4, r1
 8002f3a:	001d      	movs	r5, r3
 8002f3c:	0026      	movs	r6, r4
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8002f3e:	2030      	movs	r0, #48	; 0x30
 8002f40:	f000 fe5f 	bl	8003c02 <SX1276Read>
 8002f44:	0003      	movs	r3, r0
 8002f46:	001a      	movs	r2, r3
 8002f48:	23f9      	movs	r3, #249	; 0xf9
 8002f4a:	439a      	bics	r2, r3
 8002f4c:	1e13      	subs	r3, r2, #0
 8002f4e:	d002      	beq.n	8002f56 <SX1276GetTimeOnAir+0x86>
 8002f50:	2300      	movs	r3, #0
 8002f52:	4c9e      	ldr	r4, [pc, #632]	; (80031cc <SX1276GetTimeOnAir+0x2fc>)
 8002f54:	e001      	b.n	8002f5a <SX1276GetTimeOnAir+0x8a>
 8002f56:	2300      	movs	r3, #0
 8002f58:	2400      	movs	r4, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8002f5a:	001a      	movs	r2, r3
 8002f5c:	0023      	movs	r3, r4
 8002f5e:	0028      	movs	r0, r5
 8002f60:	0031      	movs	r1, r6
 8002f62:	f7fd fb9f 	bl	80006a4 <__aeabi_dadd>
 8002f66:	0003      	movs	r3, r0
 8002f68:	000c      	movs	r4, r1
 8002f6a:	0025      	movs	r5, r4
 8002f6c:	001c      	movs	r4, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8002f6e:	1dbb      	adds	r3, r7, #6
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	0018      	movs	r0, r3
 8002f74:	f7ff f8c4 	bl	8002100 <__aeabi_i2d>
 8002f78:	0002      	movs	r2, r0
 8002f7a:	000b      	movs	r3, r1
 8002f7c:	0020      	movs	r0, r4
 8002f7e:	0029      	movs	r1, r5
 8002f80:	f7fd fb90 	bl	80006a4 <__aeabi_dadd>
 8002f84:	0003      	movs	r3, r0
 8002f86:	000c      	movs	r4, r1
 8002f88:	0018      	movs	r0, r3
 8002f8a:	0021      	movs	r1, r4
                                     pktLen +
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8002f8c:	4b8e      	ldr	r3, [pc, #568]	; (80031c8 <SX1276GetTimeOnAir+0x2f8>)
 8002f8e:	2224      	movs	r2, #36	; 0x24
 8002f90:	5c9b      	ldrb	r3, [r3, r2]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <SX1276GetTimeOnAir+0xce>
 8002f96:	2300      	movs	r3, #0
 8002f98:	2480      	movs	r4, #128	; 0x80
 8002f9a:	05e4      	lsls	r4, r4, #23
 8002f9c:	e001      	b.n	8002fa2 <SX1276GetTimeOnAir+0xd2>
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	2400      	movs	r4, #0
                                     pktLen +
 8002fa2:	001a      	movs	r2, r3
 8002fa4:	0023      	movs	r3, r4
 8002fa6:	f7fd fb7d 	bl	80006a4 <__aeabi_dadd>
 8002faa:	0003      	movs	r3, r0
 8002fac:	000c      	movs	r4, r1
 8002fae:	0018      	movs	r0, r3
 8002fb0:	0021      	movs	r1, r4
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	4b86      	ldr	r3, [pc, #536]	; (80031d0 <SX1276GetTimeOnAir+0x300>)
 8002fb6:	f7fe fab9 	bl	800152c <__aeabi_dmul>
 8002fba:	0003      	movs	r3, r0
 8002fbc:	000c      	movs	r4, r1
 8002fbe:	0025      	movs	r5, r4
 8002fc0:	001c      	movs	r4, r3
                                     SX1276.Settings.Fsk.Datarate ) * 1e3 );
 8002fc2:	4b81      	ldr	r3, [pc, #516]	; (80031c8 <SX1276GetTimeOnAir+0x2f8>)
 8002fc4:	69db      	ldr	r3, [r3, #28]
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	f7ff f8dc 	bl	8002184 <__aeabi_ui2d>
 8002fcc:	0002      	movs	r2, r0
 8002fce:	000b      	movs	r3, r1
 8002fd0:	0020      	movs	r0, r4
 8002fd2:	0029      	movs	r1, r5
 8002fd4:	f7fd fe76 	bl	8000cc4 <__aeabi_ddiv>
 8002fd8:	0003      	movs	r3, r0
 8002fda:	000c      	movs	r4, r1
 8002fdc:	0018      	movs	r0, r3
 8002fde:	0021      	movs	r1, r4
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	4b7c      	ldr	r3, [pc, #496]	; (80031d4 <SX1276GetTimeOnAir+0x304>)
 8002fe4:	f7fe faa2 	bl	800152c <__aeabi_dmul>
 8002fe8:	0003      	movs	r3, r0
 8002fea:	000c      	movs	r4, r1
 8002fec:	0018      	movs	r0, r3
 8002fee:	0021      	movs	r1, r4
 8002ff0:	f00b f9e4 	bl	800e3bc <round>
 8002ff4:	0003      	movs	r3, r0
 8002ff6:	000c      	movs	r4, r1
 8002ff8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ffa:	64fc      	str	r4, [r7, #76]	; 0x4c
        }
        break;
 8002ffc:	e0da      	b.n	80031b4 <SX1276GetTimeOnAir+0x2e4>
    case MODEM_LORA:
        {
            double bw = 0.0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	2400      	movs	r4, #0
 8003002:	643b      	str	r3, [r7, #64]	; 0x40
 8003004:	647c      	str	r4, [r7, #68]	; 0x44
            // REMARK: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported
            switch( SX1276.Settings.LoRa.Bandwidth )
 8003006:	4b70      	ldr	r3, [pc, #448]	; (80031c8 <SX1276GetTimeOnAir+0x2f8>)
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	2b08      	cmp	r3, #8
 800300c:	d008      	beq.n	8003020 <SX1276GetTimeOnAir+0x150>
 800300e:	2b09      	cmp	r3, #9
 8003010:	d00b      	beq.n	800302a <SX1276GetTimeOnAir+0x15a>
 8003012:	2b07      	cmp	r3, #7
 8003014:	d10e      	bne.n	8003034 <SX1276GetTimeOnAir+0x164>
            //    break;
            //case 6: // 62.5 kHz
            //    bw = 625e2;
            //    break;
            case 7: // 125 kHz
                bw = 125e3;
 8003016:	2300      	movs	r3, #0
 8003018:	4c6f      	ldr	r4, [pc, #444]	; (80031d8 <SX1276GetTimeOnAir+0x308>)
 800301a:	643b      	str	r3, [r7, #64]	; 0x40
 800301c:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 800301e:	e009      	b.n	8003034 <SX1276GetTimeOnAir+0x164>
            case 8: // 250 kHz
                bw = 250e3;
 8003020:	2300      	movs	r3, #0
 8003022:	4c6e      	ldr	r4, [pc, #440]	; (80031dc <SX1276GetTimeOnAir+0x30c>)
 8003024:	643b      	str	r3, [r7, #64]	; 0x40
 8003026:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 8003028:	e004      	b.n	8003034 <SX1276GetTimeOnAir+0x164>
            case 9: // 500 kHz
                bw = 500e3;
 800302a:	2300      	movs	r3, #0
 800302c:	4c6c      	ldr	r4, [pc, #432]	; (80031e0 <SX1276GetTimeOnAir+0x310>)
 800302e:	643b      	str	r3, [r7, #64]	; 0x40
 8003030:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 8003032:	46c0      	nop			; (mov r8, r8)
            }

            // Symbol rate : time for one symbol (secs)
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 8003034:	4b64      	ldr	r3, [pc, #400]	; (80031c8 <SX1276GetTimeOnAir+0x2f8>)
 8003036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003038:	2201      	movs	r2, #1
 800303a:	409a      	lsls	r2, r3
 800303c:	0013      	movs	r3, r2
 800303e:	0018      	movs	r0, r3
 8003040:	f7ff f85e 	bl	8002100 <__aeabi_i2d>
 8003044:	0003      	movs	r3, r0
 8003046:	000c      	movs	r4, r1
 8003048:	001a      	movs	r2, r3
 800304a:	0023      	movs	r3, r4
 800304c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800304e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003050:	f7fd fe38 	bl	8000cc4 <__aeabi_ddiv>
 8003054:	0003      	movs	r3, r0
 8003056:	000c      	movs	r4, r1
 8003058:	63bb      	str	r3, [r7, #56]	; 0x38
 800305a:	63fc      	str	r4, [r7, #60]	; 0x3c
            double ts = 1 / rs;
 800305c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800305e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003060:	2000      	movs	r0, #0
 8003062:	495a      	ldr	r1, [pc, #360]	; (80031cc <SX1276GetTimeOnAir+0x2fc>)
 8003064:	f7fd fe2e 	bl	8000cc4 <__aeabi_ddiv>
 8003068:	0003      	movs	r3, r0
 800306a:	000c      	movs	r4, r1
 800306c:	633b      	str	r3, [r7, #48]	; 0x30
 800306e:	637c      	str	r4, [r7, #52]	; 0x34
            // time of preamble
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8003070:	4b55      	ldr	r3, [pc, #340]	; (80031c8 <SX1276GetTimeOnAir+0x2f8>)
 8003072:	224a      	movs	r2, #74	; 0x4a
 8003074:	5a9b      	ldrh	r3, [r3, r2]
 8003076:	0018      	movs	r0, r3
 8003078:	f7ff f842 	bl	8002100 <__aeabi_i2d>
 800307c:	2200      	movs	r2, #0
 800307e:	4b59      	ldr	r3, [pc, #356]	; (80031e4 <SX1276GetTimeOnAir+0x314>)
 8003080:	f7fd fb10 	bl	80006a4 <__aeabi_dadd>
 8003084:	0003      	movs	r3, r0
 8003086:	000c      	movs	r4, r1
 8003088:	0018      	movs	r0, r3
 800308a:	0021      	movs	r1, r4
 800308c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800308e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003090:	f7fe fa4c 	bl	800152c <__aeabi_dmul>
 8003094:	0003      	movs	r3, r0
 8003096:	000c      	movs	r4, r1
 8003098:	62bb      	str	r3, [r7, #40]	; 0x28
 800309a:	62fc      	str	r4, [r7, #44]	; 0x2c
            // Symbol length of payload and time
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800309c:	1dbb      	adds	r3, r7, #6
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	001a      	movs	r2, r3
 80030a4:	4b48      	ldr	r3, [pc, #288]	; (80031c8 <SX1276GetTimeOnAir+0x2f8>)
 80030a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	1ad3      	subs	r3, r2, r3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 80030ac:	4a46      	ldr	r2, [pc, #280]	; (80031c8 <SX1276GetTimeOnAir+0x2f8>)
 80030ae:	214e      	movs	r1, #78	; 0x4e
 80030b0:	5c52      	ldrb	r2, [r2, r1]
 80030b2:	0112      	lsls	r2, r2, #4
 80030b4:	189a      	adds	r2, r3, r2
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 80030b6:	4b44      	ldr	r3, [pc, #272]	; (80031c8 <SX1276GetTimeOnAir+0x2f8>)
 80030b8:	214c      	movs	r1, #76	; 0x4c
 80030ba:	5c5b      	ldrb	r3, [r3, r1]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <SX1276GetTimeOnAir+0x1f4>
 80030c0:	2314      	movs	r3, #20
 80030c2:	e000      	b.n	80030c6 <SX1276GetTimeOnAir+0x1f6>
 80030c4:	2300      	movs	r3, #0
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	331c      	adds	r3, #28
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80030ca:	0018      	movs	r0, r3
 80030cc:	f7ff f85a 	bl	8002184 <__aeabi_ui2d>
 80030d0:	0004      	movs	r4, r0
 80030d2:	000d      	movs	r5, r1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 80030d4:	4b3c      	ldr	r3, [pc, #240]	; (80031c8 <SX1276GetTimeOnAir+0x2f8>)
 80030d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 80030d8:	4b3b      	ldr	r3, [pc, #236]	; (80031c8 <SX1276GetTimeOnAir+0x2f8>)
 80030da:	2148      	movs	r1, #72	; 0x48
 80030dc:	5c5b      	ldrb	r3, [r3, r1]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	dd01      	ble.n	80030e6 <SX1276GetTimeOnAir+0x216>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e000      	b.n	80030e8 <SX1276GetTimeOnAir+0x218>
 80030e6:	2300      	movs	r3, #0
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	0018      	movs	r0, r3
 80030ee:	f7ff f849 	bl	8002184 <__aeabi_ui2d>
 80030f2:	0002      	movs	r2, r0
 80030f4:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80030f6:	0020      	movs	r0, r4
 80030f8:	0029      	movs	r1, r5
 80030fa:	f7fd fde3 	bl	8000cc4 <__aeabi_ddiv>
 80030fe:	0003      	movs	r3, r0
 8003100:	000c      	movs	r4, r1
 8003102:	0018      	movs	r0, r3
 8003104:	0021      	movs	r1, r4
 8003106:	f00b f855 	bl	800e1b4 <ceil>
 800310a:	0004      	movs	r4, r0
 800310c:	000d      	movs	r5, r1
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 800310e:	4b2e      	ldr	r3, [pc, #184]	; (80031c8 <SX1276GetTimeOnAir+0x2f8>)
 8003110:	2249      	movs	r2, #73	; 0x49
 8003112:	5c9b      	ldrb	r3, [r3, r2]
 8003114:	3304      	adds	r3, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8003116:	0018      	movs	r0, r3
 8003118:	f7fe fff2 	bl	8002100 <__aeabi_i2d>
 800311c:	0002      	movs	r2, r0
 800311e:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8003120:	0020      	movs	r0, r4
 8003122:	0029      	movs	r1, r5
 8003124:	f7fe fa02 	bl	800152c <__aeabi_dmul>
 8003128:	0003      	movs	r3, r0
 800312a:	000c      	movs	r4, r1
 800312c:	623b      	str	r3, [r7, #32]
 800312e:	627c      	str	r4, [r7, #36]	; 0x24
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8003130:	2200      	movs	r2, #0
 8003132:	2300      	movs	r3, #0
 8003134:	6a38      	ldr	r0, [r7, #32]
 8003136:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003138:	f7fd f9a2 	bl	8000480 <__aeabi_dcmpgt>
 800313c:	1e03      	subs	r3, r0, #0
 800313e:	d008      	beq.n	8003152 <SX1276GetTimeOnAir+0x282>
 8003140:	2200      	movs	r2, #0
 8003142:	4b23      	ldr	r3, [pc, #140]	; (80031d0 <SX1276GetTimeOnAir+0x300>)
 8003144:	6a38      	ldr	r0, [r7, #32]
 8003146:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003148:	f7fd faac 	bl	80006a4 <__aeabi_dadd>
 800314c:	0003      	movs	r3, r0
 800314e:	000c      	movs	r4, r1
 8003150:	e001      	b.n	8003156 <SX1276GetTimeOnAir+0x286>
 8003152:	2300      	movs	r3, #0
 8003154:	4c1e      	ldr	r4, [pc, #120]	; (80031d0 <SX1276GetTimeOnAir+0x300>)
 8003156:	61bb      	str	r3, [r7, #24]
 8003158:	61fc      	str	r4, [r7, #28]
            double tPayload = nPayload * ts;
 800315a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800315c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800315e:	69b8      	ldr	r0, [r7, #24]
 8003160:	69f9      	ldr	r1, [r7, #28]
 8003162:	f7fe f9e3 	bl	800152c <__aeabi_dmul>
 8003166:	0003      	movs	r3, r0
 8003168:	000c      	movs	r4, r1
 800316a:	613b      	str	r3, [r7, #16]
 800316c:	617c      	str	r4, [r7, #20]
            // Time on air
            double tOnAir = tPreamble + tPayload;
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003174:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003176:	f7fd fa95 	bl	80006a4 <__aeabi_dadd>
 800317a:	0003      	movs	r3, r0
 800317c:	000c      	movs	r4, r1
 800317e:	60bb      	str	r3, [r7, #8]
 8003180:	60fc      	str	r4, [r7, #12]
            // return ms secs
            airTime = floor( tOnAir * 1e3 + 0.999 );
 8003182:	2200      	movs	r2, #0
 8003184:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <SX1276GetTimeOnAir+0x304>)
 8003186:	68b8      	ldr	r0, [r7, #8]
 8003188:	68f9      	ldr	r1, [r7, #12]
 800318a:	f7fe f9cf 	bl	800152c <__aeabi_dmul>
 800318e:	0003      	movs	r3, r0
 8003190:	000c      	movs	r4, r1
 8003192:	0018      	movs	r0, r3
 8003194:	0021      	movs	r1, r4
 8003196:	4a14      	ldr	r2, [pc, #80]	; (80031e8 <SX1276GetTimeOnAir+0x318>)
 8003198:	4b14      	ldr	r3, [pc, #80]	; (80031ec <SX1276GetTimeOnAir+0x31c>)
 800319a:	f7fd fa83 	bl	80006a4 <__aeabi_dadd>
 800319e:	0003      	movs	r3, r0
 80031a0:	000c      	movs	r4, r1
 80031a2:	0018      	movs	r0, r3
 80031a4:	0021      	movs	r1, r4
 80031a6:	f00b f887 	bl	800e2b8 <floor>
 80031aa:	0003      	movs	r3, r0
 80031ac:	000c      	movs	r4, r1
 80031ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80031b0:	64fc      	str	r4, [r7, #76]	; 0x4c
        }
        break;
 80031b2:	46c0      	nop			; (mov r8, r8)
    }
    return (uint32_t) airTime;
 80031b4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80031b6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80031b8:	f7fd f996 	bl	80004e8 <__aeabi_d2uiz>
 80031bc:	0003      	movs	r3, r0
}
 80031be:	0018      	movs	r0, r3
 80031c0:	46bd      	mov	sp, r7
 80031c2:	b015      	add	sp, #84	; 0x54
 80031c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031c6:	46c0      	nop			; (mov r8, r8)
 80031c8:	20000ed8 	.word	0x20000ed8
 80031cc:	3ff00000 	.word	0x3ff00000
 80031d0:	40200000 	.word	0x40200000
 80031d4:	408f4000 	.word	0x408f4000
 80031d8:	40fe8480 	.word	0x40fe8480
 80031dc:	410e8480 	.word	0x410e8480
 80031e0:	411e8480 	.word	0x411e8480
 80031e4:	40110000 	.word	0x40110000
 80031e8:	d916872b 	.word	0xd916872b
 80031ec:	3feff7ce 	.word	0x3feff7ce

080031f0 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	000a      	movs	r2, r1
 80031fa:	1cfb      	adds	r3, r7, #3
 80031fc:	701a      	strb	r2, [r3, #0]
    uint32_t txTimeout = 0;
 80031fe:	2300      	movs	r3, #0
 8003200:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 8003202:	4b59      	ldr	r3, [pc, #356]	; (8003368 <SX1276Send+0x178>)
 8003204:	795b      	ldrb	r3, [r3, #5]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d002      	beq.n	8003210 <SX1276Send+0x20>
 800320a:	2b01      	cmp	r3, #1
 800320c:	d04c      	beq.n	80032a8 <SX1276Send+0xb8>
 800320e:	e0a2      	b.n	8003356 <SX1276Send+0x166>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8003210:	4b55      	ldr	r3, [pc, #340]	; (8003368 <SX1276Send+0x178>)
 8003212:	2200      	movs	r2, #0
 8003214:	871a      	strh	r2, [r3, #56]	; 0x38
            SX1276.Settings.FskPacketHandler.Size = size;
 8003216:	1cfb      	adds	r3, r7, #3
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	b29a      	uxth	r2, r3
 800321c:	4b52      	ldr	r3, [pc, #328]	; (8003368 <SX1276Send+0x178>)
 800321e:	86da      	strh	r2, [r3, #54]	; 0x36

            if( SX1276.Settings.Fsk.FixLen == false )
 8003220:	4b51      	ldr	r3, [pc, #324]	; (8003368 <SX1276Send+0x178>)
 8003222:	2222      	movs	r2, #34	; 0x22
 8003224:	5c9b      	ldrb	r3, [r3, r2]
 8003226:	2201      	movs	r2, #1
 8003228:	4053      	eors	r3, r2
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	d005      	beq.n	800323c <SX1276Send+0x4c>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8003230:	1cfb      	adds	r3, r7, #3
 8003232:	2101      	movs	r1, #1
 8003234:	0018      	movs	r0, r3
 8003236:	f000 fd85 	bl	8003d44 <SX1276WriteFifo>
 800323a:	e005      	b.n	8003248 <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 800323c:	1cfb      	adds	r3, r7, #3
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	0019      	movs	r1, r3
 8003242:	2032      	movs	r0, #50	; 0x32
 8003244:	f000 fcc9 	bl	8003bda <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 8003248:	1cfb      	adds	r3, r7, #3
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d009      	beq.n	8003264 <SX1276Send+0x74>
 8003250:	1cfb      	adds	r3, r7, #3
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b40      	cmp	r3, #64	; 0x40
 8003256:	d805      	bhi.n	8003264 <SX1276Send+0x74>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8003258:	1cfb      	adds	r3, r7, #3
 800325a:	7819      	ldrb	r1, [r3, #0]
 800325c:	4b42      	ldr	r3, [pc, #264]	; (8003368 <SX1276Send+0x178>)
 800325e:	223b      	movs	r2, #59	; 0x3b
 8003260:	5499      	strb	r1, [r3, r2]
 8003262:	e00b      	b.n	800327c <SX1276Send+0x8c>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
 8003264:	1cfb      	adds	r3, r7, #3
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	b29a      	uxth	r2, r3
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	4b3f      	ldr	r3, [pc, #252]	; (800336c <SX1276Send+0x17c>)
 800326e:	0018      	movs	r0, r3
 8003270:	f006 fa31 	bl	80096d6 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8003274:	4b3c      	ldr	r3, [pc, #240]	; (8003368 <SX1276Send+0x178>)
 8003276:	223b      	movs	r2, #59	; 0x3b
 8003278:	2120      	movs	r1, #32
 800327a:	5499      	strb	r1, [r3, r2]
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 800327c:	4b3a      	ldr	r3, [pc, #232]	; (8003368 <SX1276Send+0x178>)
 800327e:	223b      	movs	r2, #59	; 0x3b
 8003280:	5c9a      	ldrb	r2, [r3, r2]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	0011      	movs	r1, r2
 8003286:	0018      	movs	r0, r3
 8003288:	f000 fd5c 	bl	8003d44 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800328c:	4b36      	ldr	r3, [pc, #216]	; (8003368 <SX1276Send+0x178>)
 800328e:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8003290:	4b35      	ldr	r3, [pc, #212]	; (8003368 <SX1276Send+0x178>)
 8003292:	213b      	movs	r1, #59	; 0x3b
 8003294:	5c5b      	ldrb	r3, [r3, r1]
 8003296:	b29b      	uxth	r3, r3
 8003298:	18d3      	adds	r3, r2, r3
 800329a:	b29a      	uxth	r2, r3
 800329c:	4b32      	ldr	r3, [pc, #200]	; (8003368 <SX1276Send+0x178>)
 800329e:	871a      	strh	r2, [r3, #56]	; 0x38
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 80032a0:	4b31      	ldr	r3, [pc, #196]	; (8003368 <SX1276Send+0x178>)
 80032a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80032a6:	e056      	b.n	8003356 <SX1276Send+0x166>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 80032a8:	4b2f      	ldr	r3, [pc, #188]	; (8003368 <SX1276Send+0x178>)
 80032aa:	2251      	movs	r2, #81	; 0x51
 80032ac:	5c9b      	ldrb	r3, [r3, r2]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d011      	beq.n	80032d6 <SX1276Send+0xe6>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 80032b2:	2033      	movs	r0, #51	; 0x33
 80032b4:	f000 fca5 	bl	8003c02 <SX1276Read>
 80032b8:	0003      	movs	r3, r0
 80032ba:	001a      	movs	r2, r3
 80032bc:	2341      	movs	r3, #65	; 0x41
 80032be:	439a      	bics	r2, r3
 80032c0:	0013      	movs	r3, r2
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	0019      	movs	r1, r3
 80032c6:	2033      	movs	r0, #51	; 0x33
 80032c8:	f000 fc87 	bl	8003bda <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 80032cc:	2119      	movs	r1, #25
 80032ce:	203b      	movs	r0, #59	; 0x3b
 80032d0:	f000 fc83 	bl	8003bda <SX1276Write>
 80032d4:	e013      	b.n	80032fe <SX1276Send+0x10e>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80032d6:	2033      	movs	r0, #51	; 0x33
 80032d8:	f000 fc93 	bl	8003c02 <SX1276Read>
 80032dc:	0003      	movs	r3, r0
 80032de:	b25b      	sxtb	r3, r3
 80032e0:	2241      	movs	r2, #65	; 0x41
 80032e2:	4393      	bics	r3, r2
 80032e4:	b25b      	sxtb	r3, r3
 80032e6:	2201      	movs	r2, #1
 80032e8:	4313      	orrs	r3, r2
 80032ea:	b25b      	sxtb	r3, r3
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	0019      	movs	r1, r3
 80032f0:	2033      	movs	r0, #51	; 0x33
 80032f2:	f000 fc72 	bl	8003bda <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80032f6:	211d      	movs	r1, #29
 80032f8:	203b      	movs	r0, #59	; 0x3b
 80032fa:	f000 fc6e 	bl	8003bda <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 80032fe:	1cfb      	adds	r3, r7, #3
 8003300:	7819      	ldrb	r1, [r3, #0]
 8003302:	4b19      	ldr	r3, [pc, #100]	; (8003368 <SX1276Send+0x178>)
 8003304:	225c      	movs	r2, #92	; 0x5c
 8003306:	5499      	strb	r1, [r3, r2]

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8003308:	1cfb      	adds	r3, r7, #3
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	0019      	movs	r1, r3
 800330e:	2022      	movs	r0, #34	; 0x22
 8003310:	f000 fc63 	bl	8003bda <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8003314:	2100      	movs	r1, #0
 8003316:	200e      	movs	r0, #14
 8003318:	f000 fc5f 	bl	8003bda <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800331c:	2100      	movs	r1, #0
 800331e:	200d      	movs	r0, #13
 8003320:	f000 fc5b 	bl	8003bda <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8003324:	2001      	movs	r0, #1
 8003326:	f000 fc6c 	bl	8003c02 <SX1276Read>
 800332a:	0003      	movs	r3, r0
 800332c:	001a      	movs	r2, r3
 800332e:	23f8      	movs	r3, #248	; 0xf8
 8003330:	439a      	bics	r2, r3
 8003332:	1e13      	subs	r3, r2, #0
 8003334:	d104      	bne.n	8003340 <SX1276Send+0x150>
            {
                SX1276SetStby( );
 8003336:	f000 f835 	bl	80033a4 <SX1276SetStby>
                DelayMs( 1 );
 800333a:	2001      	movs	r0, #1
 800333c:	f005 ff6c 	bl	8009218 <DelayMs>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 8003340:	1cfb      	adds	r3, r7, #3
 8003342:	781a      	ldrb	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	0011      	movs	r1, r2
 8003348:	0018      	movs	r0, r3
 800334a:	f000 fcfb 	bl	8003d44 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 800334e:	4b06      	ldr	r3, [pc, #24]	; (8003368 <SX1276Send+0x178>)
 8003350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003352:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003354:	46c0      	nop			; (mov r8, r8)
    }

    SX1276SetTx( txTimeout );
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	0018      	movs	r0, r3
 800335a:	f000 fa25 	bl	80037a8 <SX1276SetTx>
}
 800335e:	46c0      	nop			; (mov r8, r8)
 8003360:	46bd      	mov	sp, r7
 8003362:	b004      	add	sp, #16
 8003364:	bd80      	pop	{r7, pc}
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	20000ed8 	.word	0x20000ed8
 800336c:	200006c0 	.word	0x200006c0

08003370 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 8003374:	4b08      	ldr	r3, [pc, #32]	; (8003398 <SX1276SetSleep+0x28>)
 8003376:	0018      	movs	r0, r3
 8003378:	f006 f8d0 	bl	800951c <TimerStop>
    TimerStop( &TxTimeoutTimer );
 800337c:	4b07      	ldr	r3, [pc, #28]	; (800339c <SX1276SetSleep+0x2c>)
 800337e:	0018      	movs	r0, r3
 8003380:	f006 f8cc 	bl	800951c <TimerStop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8003384:	2000      	movs	r0, #0
 8003386:	f000 fb9d 	bl	8003ac4 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 800338a:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <SX1276SetSleep+0x30>)
 800338c:	2200      	movs	r2, #0
 800338e:	711a      	strb	r2, [r3, #4]
}
 8003390:	46c0      	nop			; (mov r8, r8)
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	20000f38 	.word	0x20000f38
 800339c:	20000eb0 	.word	0x20000eb0
 80033a0:	20000ed8 	.word	0x20000ed8

080033a4 <SX1276SetStby>:

void SX1276SetStby( void )
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 80033a8:	4b08      	ldr	r3, [pc, #32]	; (80033cc <SX1276SetStby+0x28>)
 80033aa:	0018      	movs	r0, r3
 80033ac:	f006 f8b6 	bl	800951c <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80033b0:	4b07      	ldr	r3, [pc, #28]	; (80033d0 <SX1276SetStby+0x2c>)
 80033b2:	0018      	movs	r0, r3
 80033b4:	f006 f8b2 	bl	800951c <TimerStop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 80033b8:	2001      	movs	r0, #1
 80033ba:	f000 fb83 	bl	8003ac4 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 80033be:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <SX1276SetStby+0x30>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	711a      	strb	r2, [r3, #4]
}
 80033c4:	46c0      	nop			; (mov r8, r8)
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	20000f38 	.word	0x20000f38
 80033d0:	20000eb0 	.word	0x20000eb0
 80033d4:	20000ed8 	.word	0x20000ed8

080033d8 <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 80033d8:	b5b0      	push	{r4, r5, r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 80033e0:	230f      	movs	r3, #15
 80033e2:	18fb      	adds	r3, r7, r3
 80033e4:	2200      	movs	r2, #0
 80033e6:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.Modem )
 80033e8:	4be0      	ldr	r3, [pc, #896]	; (800376c <SX1276SetRx+0x394>)
 80033ea:	795b      	ldrb	r3, [r3, #5]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d002      	beq.n	80033f6 <SX1276SetRx+0x1e>
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d041      	beq.n	8003478 <SX1276SetRx+0xa0>
 80033f4:	e128      	b.n	8003648 <SX1276SetRx+0x270>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 80033f6:	230f      	movs	r3, #15
 80033f8:	18fb      	adds	r3, r7, r3
 80033fa:	4adc      	ldr	r2, [pc, #880]	; (800376c <SX1276SetRx+0x394>)
 80033fc:	2126      	movs	r1, #38	; 0x26
 80033fe:	5c52      	ldrb	r2, [r2, r1]
 8003400:	701a      	strb	r2, [r3, #0]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003402:	2040      	movs	r0, #64	; 0x40
 8003404:	f000 fbfd 	bl	8003c02 <SX1276Read>
 8003408:	0003      	movs	r3, r0
 800340a:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 800340c:	2203      	movs	r2, #3
 800340e:	4013      	ands	r3, r2
 8003410:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 8003412:	220c      	movs	r2, #12
 8003414:	4313      	orrs	r3, r2
 8003416:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003418:	b2db      	uxtb	r3, r3
 800341a:	0019      	movs	r1, r3
 800341c:	2040      	movs	r0, #64	; 0x40
 800341e:	f000 fbdc 	bl	8003bda <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8003422:	2041      	movs	r0, #65	; 0x41
 8003424:	f000 fbed 	bl	8003c02 <SX1276Read>
 8003428:	0003      	movs	r3, r0
 800342a:	001a      	movs	r2, r3
 800342c:	233f      	movs	r3, #63	; 0x3f
 800342e:	425b      	negs	r3, r3
 8003430:	4313      	orrs	r3, r2
 8003432:	b2db      	uxtb	r3, r3
 8003434:	0019      	movs	r1, r3
 8003436:	2041      	movs	r0, #65	; 0x41
 8003438:	f000 fbcf 	bl	8003bda <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800343c:	2035      	movs	r0, #53	; 0x35
 800343e:	f000 fbe0 	bl	8003c02 <SX1276Read>
 8003442:	0003      	movs	r3, r0
 8003444:	001a      	movs	r2, r3
 8003446:	233f      	movs	r3, #63	; 0x3f
 8003448:	4013      	ands	r3, r2
 800344a:	b2d9      	uxtb	r1, r3
 800344c:	4bc7      	ldr	r3, [pc, #796]	; (800376c <SX1276SetRx+0x394>)
 800344e:	223a      	movs	r2, #58	; 0x3a
 8003450:	5499      	strb	r1, [r3, r2]

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8003452:	211e      	movs	r1, #30
 8003454:	200d      	movs	r0, #13
 8003456:	f000 fbc0 	bl	8003bda <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800345a:	4bc4      	ldr	r3, [pc, #784]	; (800376c <SX1276SetRx+0x394>)
 800345c:	222c      	movs	r2, #44	; 0x2c
 800345e:	2100      	movs	r1, #0
 8003460:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8003462:	4bc2      	ldr	r3, [pc, #776]	; (800376c <SX1276SetRx+0x394>)
 8003464:	222d      	movs	r2, #45	; 0x2d
 8003466:	2100      	movs	r1, #0
 8003468:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800346a:	4bc0      	ldr	r3, [pc, #768]	; (800376c <SX1276SetRx+0x394>)
 800346c:	2200      	movs	r2, #0
 800346e:	871a      	strh	r2, [r3, #56]	; 0x38
            SX1276.Settings.FskPacketHandler.Size = 0;
 8003470:	4bbe      	ldr	r3, [pc, #760]	; (800376c <SX1276SetRx+0x394>)
 8003472:	2200      	movs	r2, #0
 8003474:	86da      	strh	r2, [r3, #54]	; 0x36
        }
        break;
 8003476:	e0e7      	b.n	8003648 <SX1276SetRx+0x270>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 8003478:	4bbc      	ldr	r3, [pc, #752]	; (800376c <SX1276SetRx+0x394>)
 800347a:	2251      	movs	r2, #81	; 0x51
 800347c:	5c9b      	ldrb	r3, [r3, r2]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d010      	beq.n	80034a4 <SX1276SetRx+0xcc>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8003482:	2033      	movs	r0, #51	; 0x33
 8003484:	f000 fbbd 	bl	8003c02 <SX1276Read>
 8003488:	0003      	movs	r3, r0
 800348a:	001a      	movs	r2, r3
 800348c:	2341      	movs	r3, #65	; 0x41
 800348e:	4313      	orrs	r3, r2
 8003490:	b2db      	uxtb	r3, r3
 8003492:	0019      	movs	r1, r3
 8003494:	2033      	movs	r0, #51	; 0x33
 8003496:	f000 fba0 	bl	8003bda <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800349a:	2119      	movs	r1, #25
 800349c:	203b      	movs	r0, #59	; 0x3b
 800349e:	f000 fb9c 	bl	8003bda <SX1276Write>
 80034a2:	e013      	b.n	80034cc <SX1276SetRx+0xf4>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80034a4:	2033      	movs	r0, #51	; 0x33
 80034a6:	f000 fbac 	bl	8003c02 <SX1276Read>
 80034aa:	0003      	movs	r3, r0
 80034ac:	b25b      	sxtb	r3, r3
 80034ae:	2241      	movs	r2, #65	; 0x41
 80034b0:	4393      	bics	r3, r2
 80034b2:	b25b      	sxtb	r3, r3
 80034b4:	2201      	movs	r2, #1
 80034b6:	4313      	orrs	r3, r2
 80034b8:	b25b      	sxtb	r3, r3
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	0019      	movs	r1, r3
 80034be:	2033      	movs	r0, #51	; 0x33
 80034c0:	f000 fb8b 	bl	8003bda <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80034c4:	211d      	movs	r1, #29
 80034c6:	203b      	movs	r0, #59	; 0x3b
 80034c8:	f000 fb87 	bl	8003bda <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 80034cc:	4ba7      	ldr	r3, [pc, #668]	; (800376c <SX1276SetRx+0x394>)
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	2b08      	cmp	r3, #8
 80034d2:	d900      	bls.n	80034d6 <SX1276SetRx+0xfe>
 80034d4:	e076      	b.n	80035c4 <SX1276SetRx+0x1ec>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 80034d6:	2031      	movs	r0, #49	; 0x31
 80034d8:	f000 fb93 	bl	8003c02 <SX1276Read>
 80034dc:	0003      	movs	r3, r0
 80034de:	001a      	movs	r2, r3
 80034e0:	237f      	movs	r3, #127	; 0x7f
 80034e2:	4013      	ands	r3, r2
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	0019      	movs	r1, r3
 80034e8:	2031      	movs	r0, #49	; 0x31
 80034ea:	f000 fb76 	bl	8003bda <SX1276Write>
                SX1276Write( REG_LR_TEST30, 0x00 );
 80034ee:	2100      	movs	r1, #0
 80034f0:	2030      	movs	r0, #48	; 0x30
 80034f2:	f000 fb72 	bl	8003bda <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 80034f6:	4b9d      	ldr	r3, [pc, #628]	; (800376c <SX1276SetRx+0x394>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d86f      	bhi.n	80035de <SX1276SetRx+0x206>
 80034fe:	009a      	lsls	r2, r3, #2
 8003500:	4b9b      	ldr	r3, [pc, #620]	; (8003770 <SX1276SetRx+0x398>)
 8003502:	18d3      	adds	r3, r2, r3
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	469f      	mov	pc, r3
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_TEST2F, 0x48 );
 8003508:	2148      	movs	r1, #72	; 0x48
 800350a:	202f      	movs	r0, #47	; 0x2f
 800350c:	f000 fb65 	bl	8003bda <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8003510:	4b96      	ldr	r3, [pc, #600]	; (800376c <SX1276SetRx+0x394>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	4a97      	ldr	r2, [pc, #604]	; (8003774 <SX1276SetRx+0x39c>)
 8003516:	4694      	mov	ip, r2
 8003518:	4463      	add	r3, ip
 800351a:	0018      	movs	r0, r3
 800351c:	f7fe ff8a 	bl	8002434 <SX1276SetChannel>
                    break;
 8003520:	e05d      	b.n	80035de <SX1276SetRx+0x206>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 8003522:	2144      	movs	r1, #68	; 0x44
 8003524:	202f      	movs	r0, #47	; 0x2f
 8003526:	f000 fb58 	bl	8003bda <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 800352a:	4b90      	ldr	r3, [pc, #576]	; (800376c <SX1276SetRx+0x394>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	4a92      	ldr	r2, [pc, #584]	; (8003778 <SX1276SetRx+0x3a0>)
 8003530:	4694      	mov	ip, r2
 8003532:	4463      	add	r3, ip
 8003534:	0018      	movs	r0, r3
 8003536:	f7fe ff7d 	bl	8002434 <SX1276SetChannel>
                    break;
 800353a:	e050      	b.n	80035de <SX1276SetRx+0x206>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 800353c:	2144      	movs	r1, #68	; 0x44
 800353e:	202f      	movs	r0, #47	; 0x2f
 8003540:	f000 fb4b 	bl	8003bda <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8003544:	4b89      	ldr	r3, [pc, #548]	; (800376c <SX1276SetRx+0x394>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	4a8c      	ldr	r2, [pc, #560]	; (800377c <SX1276SetRx+0x3a4>)
 800354a:	4694      	mov	ip, r2
 800354c:	4463      	add	r3, ip
 800354e:	0018      	movs	r0, r3
 8003550:	f7fe ff70 	bl	8002434 <SX1276SetChannel>
                    break;
 8003554:	e043      	b.n	80035de <SX1276SetRx+0x206>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 8003556:	2144      	movs	r1, #68	; 0x44
 8003558:	202f      	movs	r0, #47	; 0x2f
 800355a:	f000 fb3e 	bl	8003bda <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 800355e:	4b83      	ldr	r3, [pc, #524]	; (800376c <SX1276SetRx+0x394>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	4a87      	ldr	r2, [pc, #540]	; (8003780 <SX1276SetRx+0x3a8>)
 8003564:	4694      	mov	ip, r2
 8003566:	4463      	add	r3, ip
 8003568:	0018      	movs	r0, r3
 800356a:	f7fe ff63 	bl	8002434 <SX1276SetChannel>
                    break;
 800356e:	e036      	b.n	80035de <SX1276SetRx+0x206>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 8003570:	2144      	movs	r1, #68	; 0x44
 8003572:	202f      	movs	r0, #47	; 0x2f
 8003574:	f000 fb31 	bl	8003bda <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8003578:	4b7c      	ldr	r3, [pc, #496]	; (800376c <SX1276SetRx+0x394>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	4a81      	ldr	r2, [pc, #516]	; (8003784 <SX1276SetRx+0x3ac>)
 800357e:	4694      	mov	ip, r2
 8003580:	4463      	add	r3, ip
 8003582:	0018      	movs	r0, r3
 8003584:	f7fe ff56 	bl	8002434 <SX1276SetChannel>
                    break;
 8003588:	e029      	b.n	80035de <SX1276SetRx+0x206>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 800358a:	2144      	movs	r1, #68	; 0x44
 800358c:	202f      	movs	r0, #47	; 0x2f
 800358e:	f000 fb24 	bl	8003bda <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8003592:	4b76      	ldr	r3, [pc, #472]	; (800376c <SX1276SetRx+0x394>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	4a7c      	ldr	r2, [pc, #496]	; (8003788 <SX1276SetRx+0x3b0>)
 8003598:	4694      	mov	ip, r2
 800359a:	4463      	add	r3, ip
 800359c:	0018      	movs	r0, r3
 800359e:	f7fe ff49 	bl	8002434 <SX1276SetChannel>
                    break;
 80035a2:	e01c      	b.n	80035de <SX1276SetRx+0x206>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 80035a4:	2140      	movs	r1, #64	; 0x40
 80035a6:	202f      	movs	r0, #47	; 0x2f
 80035a8:	f000 fb17 	bl	8003bda <SX1276Write>
                    break;
 80035ac:	e017      	b.n	80035de <SX1276SetRx+0x206>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 80035ae:	2140      	movs	r1, #64	; 0x40
 80035b0:	202f      	movs	r0, #47	; 0x2f
 80035b2:	f000 fb12 	bl	8003bda <SX1276Write>
                    break;
 80035b6:	e012      	b.n	80035de <SX1276SetRx+0x206>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 80035b8:	2140      	movs	r1, #64	; 0x40
 80035ba:	202f      	movs	r0, #47	; 0x2f
 80035bc:	f000 fb0d 	bl	8003bda <SX1276Write>
                    break;
 80035c0:	46c0      	nop			; (mov r8, r8)
 80035c2:	e00c      	b.n	80035de <SX1276SetRx+0x206>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 80035c4:	2031      	movs	r0, #49	; 0x31
 80035c6:	f000 fb1c 	bl	8003c02 <SX1276Read>
 80035ca:	0003      	movs	r3, r0
 80035cc:	001a      	movs	r2, r3
 80035ce:	2380      	movs	r3, #128	; 0x80
 80035d0:	425b      	negs	r3, r3
 80035d2:	4313      	orrs	r3, r2
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	0019      	movs	r1, r3
 80035d8:	2031      	movs	r0, #49	; 0x31
 80035da:	f000 fafe 	bl	8003bda <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 80035de:	230f      	movs	r3, #15
 80035e0:	18fb      	adds	r3, r7, r3
 80035e2:	4a62      	ldr	r2, [pc, #392]	; (800376c <SX1276SetRx+0x394>)
 80035e4:	2152      	movs	r1, #82	; 0x52
 80035e6:	5c52      	ldrb	r2, [r2, r1]
 80035e8:	701a      	strb	r2, [r3, #0]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80035ea:	4b60      	ldr	r3, [pc, #384]	; (800376c <SX1276SetRx+0x394>)
 80035ec:	224f      	movs	r2, #79	; 0x4f
 80035ee:	5c9b      	ldrb	r3, [r3, r2]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d010      	beq.n	8003616 <SX1276SetRx+0x23e>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 80035f4:	211d      	movs	r1, #29
 80035f6:	2011      	movs	r0, #17
 80035f8:	f000 faef 	bl	8003bda <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 80035fc:	2040      	movs	r0, #64	; 0x40
 80035fe:	f000 fb00 	bl	8003c02 <SX1276Read>
 8003602:	0003      	movs	r3, r0
 8003604:	001a      	movs	r2, r3
 8003606:	2333      	movs	r3, #51	; 0x33
 8003608:	4013      	ands	r3, r2
 800360a:	b2db      	uxtb	r3, r3
 800360c:	0019      	movs	r1, r3
 800360e:	2040      	movs	r0, #64	; 0x40
 8003610:	f000 fae3 	bl	8003bda <SX1276Write>
 8003614:	e00f      	b.n	8003636 <SX1276SetRx+0x25e>
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8003616:	211f      	movs	r1, #31
 8003618:	2011      	movs	r0, #17
 800361a:	f000 fade 	bl	8003bda <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 800361e:	2040      	movs	r0, #64	; 0x40
 8003620:	f000 faef 	bl	8003c02 <SX1276Read>
 8003624:	0003      	movs	r3, r0
 8003626:	001a      	movs	r2, r3
 8003628:	233f      	movs	r3, #63	; 0x3f
 800362a:	4013      	ands	r3, r2
 800362c:	b2db      	uxtb	r3, r3
 800362e:	0019      	movs	r1, r3
 8003630:	2040      	movs	r0, #64	; 0x40
 8003632:	f000 fad2 	bl	8003bda <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8003636:	2100      	movs	r1, #0
 8003638:	200f      	movs	r0, #15
 800363a:	f000 face 	bl	8003bda <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800363e:	2100      	movs	r1, #0
 8003640:	200d      	movs	r0, #13
 8003642:	f000 faca 	bl	8003bda <SX1276Write>
        }
        break;
 8003646:	46c0      	nop			; (mov r8, r8)
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 8003648:	2380      	movs	r3, #128	; 0x80
 800364a:	005a      	lsls	r2, r3, #1
 800364c:	4b4f      	ldr	r3, [pc, #316]	; (800378c <SX1276SetRx+0x3b4>)
 800364e:	2100      	movs	r1, #0
 8003650:	0018      	movs	r0, r3
 8003652:	f007 fe16 	bl	800b282 <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 8003656:	4b45      	ldr	r3, [pc, #276]	; (800376c <SX1276SetRx+0x394>)
 8003658:	2201      	movs	r2, #1
 800365a:	711a      	strb	r2, [r3, #4]
    if( timeout != 0 )
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d009      	beq.n	8003676 <SX1276SetRx+0x29e>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	4b4a      	ldr	r3, [pc, #296]	; (8003790 <SX1276SetRx+0x3b8>)
 8003666:	0011      	movs	r1, r2
 8003668:	0018      	movs	r0, r3
 800366a:	f005 ffeb 	bl	8009644 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 800366e:	4b48      	ldr	r3, [pc, #288]	; (8003790 <SX1276SetRx+0x3b8>)
 8003670:	0018      	movs	r0, r3
 8003672:	f005 fe3d 	bl	80092f0 <TimerStart>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 8003676:	4b3d      	ldr	r3, [pc, #244]	; (800376c <SX1276SetRx+0x394>)
 8003678:	795b      	ldrb	r3, [r3, #5]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d165      	bne.n	800374a <SX1276SetRx+0x372>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800367e:	2005      	movs	r0, #5
 8003680:	f000 fa20 	bl	8003ac4 <SX1276SetOpMode>

        if( rxContinuous == false )
 8003684:	230f      	movs	r3, #15
 8003686:	18fb      	adds	r3, r7, r3
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2201      	movs	r2, #1
 800368c:	4053      	eors	r3, r2
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	d066      	beq.n	8003762 <SX1276SetRx+0x38a>
        {
            TimerSetValue( &RxTimeoutSyncWord, (uint32_t) ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 8003694:	4b35      	ldr	r3, [pc, #212]	; (800376c <SX1276SetRx+0x394>)
 8003696:	8c1b      	ldrh	r3, [r3, #32]
 8003698:	0018      	movs	r0, r3
 800369a:	f7fe fd31 	bl	8002100 <__aeabi_i2d>
 800369e:	0004      	movs	r4, r0
 80036a0:	000d      	movs	r5, r1
                                                             ( ( SX1276Read( REG_SYNCCONFIG ) &
 80036a2:	2027      	movs	r0, #39	; 0x27
 80036a4:	f000 faad 	bl	8003c02 <SX1276Read>
 80036a8:	0003      	movs	r3, r0
 80036aa:	001a      	movs	r2, r3
 80036ac:	23f8      	movs	r3, #248	; 0xf8
 80036ae:	439a      	bics	r2, r3
 80036b0:	0013      	movs	r3, r2
                                                                ~RF_SYNCCONFIG_SYNCSIZE_MASK ) +
 80036b2:	0018      	movs	r0, r3
 80036b4:	f7fe fd24 	bl	8002100 <__aeabi_i2d>
 80036b8:	2200      	movs	r2, #0
 80036ba:	4b36      	ldr	r3, [pc, #216]	; (8003794 <SX1276SetRx+0x3bc>)
 80036bc:	f7fc fff2 	bl	80006a4 <__aeabi_dadd>
 80036c0:	0002      	movs	r2, r0
 80036c2:	000b      	movs	r3, r1
            TimerSetValue( &RxTimeoutSyncWord, (uint32_t) ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 80036c4:	0020      	movs	r0, r4
 80036c6:	0029      	movs	r1, r5
 80036c8:	f7fc ffec 	bl	80006a4 <__aeabi_dadd>
 80036cc:	0003      	movs	r3, r0
 80036ce:	000c      	movs	r4, r1
 80036d0:	0018      	movs	r0, r3
 80036d2:	0021      	movs	r1, r4
                                                                1.0 ) + 10.0 ) /
 80036d4:	2200      	movs	r2, #0
 80036d6:	4b30      	ldr	r3, [pc, #192]	; (8003798 <SX1276SetRx+0x3c0>)
 80036d8:	f7fc ffe4 	bl	80006a4 <__aeabi_dadd>
 80036dc:	0003      	movs	r3, r0
 80036de:	000c      	movs	r4, r1
 80036e0:	0018      	movs	r0, r3
 80036e2:	0021      	movs	r1, r4
            TimerSetValue( &RxTimeoutSyncWord, (uint32_t) ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 80036e4:	2200      	movs	r2, #0
 80036e6:	4b2d      	ldr	r3, [pc, #180]	; (800379c <SX1276SetRx+0x3c4>)
 80036e8:	f7fd ff20 	bl	800152c <__aeabi_dmul>
 80036ec:	0003      	movs	r3, r0
 80036ee:	000c      	movs	r4, r1
 80036f0:	0025      	movs	r5, r4
 80036f2:	001c      	movs	r4, r3
                                                             ( double )SX1276.Settings.Fsk.Datarate ) * 1e3 ) + 4 );
 80036f4:	4b1d      	ldr	r3, [pc, #116]	; (800376c <SX1276SetRx+0x394>)
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	0018      	movs	r0, r3
 80036fa:	f7fe fd43 	bl	8002184 <__aeabi_ui2d>
 80036fe:	0002      	movs	r2, r0
 8003700:	000b      	movs	r3, r1
                                                                1.0 ) + 10.0 ) /
 8003702:	0020      	movs	r0, r4
 8003704:	0029      	movs	r1, r5
 8003706:	f7fd fadd 	bl	8000cc4 <__aeabi_ddiv>
 800370a:	0003      	movs	r3, r0
 800370c:	000c      	movs	r4, r1
 800370e:	0018      	movs	r0, r3
 8003710:	0021      	movs	r1, r4
            TimerSetValue( &RxTimeoutSyncWord, (uint32_t) ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 8003712:	2200      	movs	r2, #0
 8003714:	4b22      	ldr	r3, [pc, #136]	; (80037a0 <SX1276SetRx+0x3c8>)
 8003716:	f7fd ff09 	bl	800152c <__aeabi_dmul>
 800371a:	0003      	movs	r3, r0
 800371c:	000c      	movs	r4, r1
 800371e:	0018      	movs	r0, r3
 8003720:	0021      	movs	r1, r4
 8003722:	f00a fd47 	bl	800e1b4 <ceil>
 8003726:	0003      	movs	r3, r0
 8003728:	000c      	movs	r4, r1
 800372a:	0018      	movs	r0, r3
 800372c:	0021      	movs	r1, r4
 800372e:	f7fc fedb 	bl	80004e8 <__aeabi_d2uiz>
 8003732:	0003      	movs	r3, r0
 8003734:	1d1a      	adds	r2, r3, #4
 8003736:	4b1b      	ldr	r3, [pc, #108]	; (80037a4 <SX1276SetRx+0x3cc>)
 8003738:	0011      	movs	r1, r2
 800373a:	0018      	movs	r0, r3
 800373c:	f005 ff82 	bl	8009644 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 8003740:	4b18      	ldr	r3, [pc, #96]	; (80037a4 <SX1276SetRx+0x3cc>)
 8003742:	0018      	movs	r0, r3
 8003744:	f005 fdd4 	bl	80092f0 <TimerStart>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 8003748:	e00b      	b.n	8003762 <SX1276SetRx+0x38a>
        if( rxContinuous == true )
 800374a:	230f      	movs	r3, #15
 800374c:	18fb      	adds	r3, r7, r3
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d003      	beq.n	800375c <SX1276SetRx+0x384>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8003754:	2005      	movs	r0, #5
 8003756:	f000 f9b5 	bl	8003ac4 <SX1276SetOpMode>
}
 800375a:	e002      	b.n	8003762 <SX1276SetRx+0x38a>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 800375c:	2006      	movs	r0, #6
 800375e:	f000 f9b1 	bl	8003ac4 <SX1276SetOpMode>
}
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	46bd      	mov	sp, r7
 8003766:	b004      	add	sp, #16
 8003768:	bdb0      	pop	{r4, r5, r7, pc}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	20000ed8 	.word	0x20000ed8
 8003770:	0800e550 	.word	0x0800e550
 8003774:	00001e82 	.word	0x00001e82
 8003778:	000028b4 	.word	0x000028b4
 800377c:	00003d04 	.word	0x00003d04
 8003780:	0000515e 	.word	0x0000515e
 8003784:	00007a12 	.word	0x00007a12
 8003788:	0000a2c6 	.word	0x0000a2c6
 800378c:	200006c0 	.word	0x200006c0
 8003790:	20000f38 	.word	0x20000f38
 8003794:	3ff00000 	.word	0x3ff00000
 8003798:	40240000 	.word	0x40240000
 800379c:	40200000 	.word	0x40200000
 80037a0:	408f4000 	.word	0x408f4000
 80037a4:	20000ec4 	.word	0x20000ec4

080037a8 <SX1276SetTx>:

void SX1276SetTx( uint32_t timeout )
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
    TimerSetValue( &TxTimeoutTimer, timeout );
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	4b38      	ldr	r3, [pc, #224]	; (8003894 <SX1276SetTx+0xec>)
 80037b4:	0011      	movs	r1, r2
 80037b6:	0018      	movs	r0, r3
 80037b8:	f005 ff44 	bl	8009644 <TimerSetValue>

    switch( SX1276.Settings.Modem )
 80037bc:	4b36      	ldr	r3, [pc, #216]	; (8003898 <SX1276SetTx+0xf0>)
 80037be:	795b      	ldrb	r3, [r3, #5]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d002      	beq.n	80037ca <SX1276SetTx+0x22>
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d028      	beq.n	800381a <SX1276SetTx+0x72>
 80037c8:	e056      	b.n	8003878 <SX1276SetTx+0xd0>
            // DIO1=FifoEmpty
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80037ca:	2040      	movs	r0, #64	; 0x40
 80037cc:	f000 fa19 	bl	8003c02 <SX1276Read>
 80037d0:	0003      	movs	r3, r0
 80037d2:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 80037d4:	2203      	movs	r2, #3
 80037d6:	4013      	ands	r3, r2
 80037d8:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
 80037da:	2210      	movs	r2, #16
 80037dc:	4313      	orrs	r3, r2
 80037de:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	0019      	movs	r1, r3
 80037e4:	2040      	movs	r0, #64	; 0x40
 80037e6:	f000 f9f8 	bl	8003bda <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_01 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 80037ea:	2041      	movs	r0, #65	; 0x41
 80037ec:	f000 fa09 	bl	8003c02 <SX1276Read>
 80037f0:	0003      	movs	r3, r0
 80037f2:	001a      	movs	r2, r3
 80037f4:	233e      	movs	r3, #62	; 0x3e
 80037f6:	4013      	ands	r3, r2
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	0019      	movs	r1, r3
 80037fc:	2041      	movs	r0, #65	; 0x41
 80037fe:	f000 f9ec 	bl	8003bda <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8003802:	2035      	movs	r0, #53	; 0x35
 8003804:	f000 f9fd 	bl	8003c02 <SX1276Read>
 8003808:	0003      	movs	r3, r0
 800380a:	001a      	movs	r2, r3
 800380c:	233f      	movs	r3, #63	; 0x3f
 800380e:	4013      	ands	r3, r2
 8003810:	b2d9      	uxtb	r1, r3
 8003812:	4b21      	ldr	r3, [pc, #132]	; (8003898 <SX1276SetTx+0xf0>)
 8003814:	223a      	movs	r2, #58	; 0x3a
 8003816:	5499      	strb	r1, [r3, r2]
        }
        break;
 8003818:	e02e      	b.n	8003878 <SX1276SetTx+0xd0>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800381a:	4b1f      	ldr	r3, [pc, #124]	; (8003898 <SX1276SetTx+0xf0>)
 800381c:	224f      	movs	r2, #79	; 0x4f
 800381e:	5c9b      	ldrb	r3, [r3, r2]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d014      	beq.n	800384e <SX1276SetTx+0xa6>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8003824:	21f5      	movs	r1, #245	; 0xf5
 8003826:	2011      	movs	r0, #17
 8003828:	f000 f9d7 	bl	8003bda <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 800382c:	2040      	movs	r0, #64	; 0x40
 800382e:	f000 f9e8 	bl	8003c02 <SX1276Read>
 8003832:	0003      	movs	r3, r0
 8003834:	b25b      	sxtb	r3, r3
 8003836:	2233      	movs	r2, #51	; 0x33
 8003838:	4013      	ands	r3, r2
 800383a:	b25b      	sxtb	r3, r3
 800383c:	2240      	movs	r2, #64	; 0x40
 800383e:	4313      	orrs	r3, r2
 8003840:	b25b      	sxtb	r3, r3
 8003842:	b2db      	uxtb	r3, r3
 8003844:	0019      	movs	r1, r3
 8003846:	2040      	movs	r0, #64	; 0x40
 8003848:	f000 f9c7 	bl	8003bda <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 800384c:	e013      	b.n	8003876 <SX1276SetTx+0xce>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800384e:	21f7      	movs	r1, #247	; 0xf7
 8003850:	2011      	movs	r0, #17
 8003852:	f000 f9c2 	bl	8003bda <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8003856:	2040      	movs	r0, #64	; 0x40
 8003858:	f000 f9d3 	bl	8003c02 <SX1276Read>
 800385c:	0003      	movs	r3, r0
 800385e:	b25b      	sxtb	r3, r3
 8003860:	223f      	movs	r2, #63	; 0x3f
 8003862:	4013      	ands	r3, r2
 8003864:	b25b      	sxtb	r3, r3
 8003866:	2240      	movs	r2, #64	; 0x40
 8003868:	4313      	orrs	r3, r2
 800386a:	b25b      	sxtb	r3, r3
 800386c:	b2db      	uxtb	r3, r3
 800386e:	0019      	movs	r1, r3
 8003870:	2040      	movs	r0, #64	; 0x40
 8003872:	f000 f9b2 	bl	8003bda <SX1276Write>
        break;
 8003876:	46c0      	nop			; (mov r8, r8)
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 8003878:	4b07      	ldr	r3, [pc, #28]	; (8003898 <SX1276SetTx+0xf0>)
 800387a:	2202      	movs	r2, #2
 800387c:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 800387e:	4b05      	ldr	r3, [pc, #20]	; (8003894 <SX1276SetTx+0xec>)
 8003880:	0018      	movs	r0, r3
 8003882:	f005 fd35 	bl	80092f0 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8003886:	2003      	movs	r0, #3
 8003888:	f000 f91c 	bl	8003ac4 <SX1276SetOpMode>
}
 800388c:	46c0      	nop			; (mov r8, r8)
 800388e:	46bd      	mov	sp, r7
 8003890:	b002      	add	sp, #8
 8003892:	bd80      	pop	{r7, pc}
 8003894:	20000eb0 	.word	0x20000eb0
 8003898:	20000ed8 	.word	0x20000ed8

0800389c <SX1276StartCad>:

void SX1276StartCad( void )
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 80038a0:	4b11      	ldr	r3, [pc, #68]	; (80038e8 <SX1276StartCad+0x4c>)
 80038a2:	795b      	ldrb	r3, [r3, #5]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d01a      	beq.n	80038de <SX1276StartCad+0x42>
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d000      	beq.n	80038ae <SX1276StartCad+0x12>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 80038ac:	e018      	b.n	80038e0 <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80038ae:	21fa      	movs	r1, #250	; 0xfa
 80038b0:	2011      	movs	r0, #17
 80038b2:	f000 f992 	bl	8003bda <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 80038b6:	2040      	movs	r0, #64	; 0x40
 80038b8:	f000 f9a3 	bl	8003c02 <SX1276Read>
 80038bc:	0003      	movs	r3, r0
 80038be:	001a      	movs	r2, r3
 80038c0:	2303      	movs	r3, #3
 80038c2:	439a      	bics	r2, r3
 80038c4:	0013      	movs	r3, r2
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	0019      	movs	r1, r3
 80038ca:	2040      	movs	r0, #64	; 0x40
 80038cc:	f000 f985 	bl	8003bda <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 80038d0:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <SX1276StartCad+0x4c>)
 80038d2:	2203      	movs	r2, #3
 80038d4:	711a      	strb	r2, [r3, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 80038d6:	2007      	movs	r0, #7
 80038d8:	f000 f8f4 	bl	8003ac4 <SX1276SetOpMode>
        break;
 80038dc:	e000      	b.n	80038e0 <SX1276StartCad+0x44>
        break;
 80038de:	46c0      	nop			; (mov r8, r8)
    }
}
 80038e0:	46c0      	nop			; (mov r8, r8)
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	20000ed8 	.word	0x20000ed8

080038ec <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 80038ec:	b590      	push	{r4, r7, lr}
 80038ee:	b08f      	sub	sp, #60	; 0x3c
 80038f0:	af0a      	add	r7, sp, #40	; 0x28
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	0008      	movs	r0, r1
 80038f6:	0011      	movs	r1, r2
 80038f8:	1cfb      	adds	r3, r7, #3
 80038fa:	1c02      	adds	r2, r0, #0
 80038fc:	701a      	strb	r2, [r3, #0]
 80038fe:	003b      	movs	r3, r7
 8003900:	1c0a      	adds	r2, r1, #0
 8003902:	801a      	strh	r2, [r3, #0]
    uint32_t timeout = ( uint32_t )( time * 1e3 );
 8003904:	003b      	movs	r3, r7
 8003906:	881b      	ldrh	r3, [r3, #0]
 8003908:	0018      	movs	r0, r3
 800390a:	f7fe fbf9 	bl	8002100 <__aeabi_i2d>
 800390e:	2200      	movs	r2, #0
 8003910:	4b29      	ldr	r3, [pc, #164]	; (80039b8 <SX1276SetTxContinuousWave+0xcc>)
 8003912:	f7fd fe0b 	bl	800152c <__aeabi_dmul>
 8003916:	0003      	movs	r3, r0
 8003918:	000c      	movs	r4, r1
 800391a:	0018      	movs	r0, r3
 800391c:	0021      	movs	r1, r4
 800391e:	f7fc fde3 	bl	80004e8 <__aeabi_d2uiz>
 8003922:	0003      	movs	r3, r0
 8003924:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	0018      	movs	r0, r3
 800392a:	f7fe fd83 	bl	8002434 <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 800392e:	1cfb      	adds	r3, r7, #3
 8003930:	2100      	movs	r1, #0
 8003932:	5659      	ldrsb	r1, [r3, r1]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	9308      	str	r3, [sp, #32]
 8003938:	2300      	movs	r3, #0
 800393a:	9307      	str	r3, [sp, #28]
 800393c:	2300      	movs	r3, #0
 800393e:	9306      	str	r3, [sp, #24]
 8003940:	2300      	movs	r3, #0
 8003942:	9305      	str	r3, [sp, #20]
 8003944:	2300      	movs	r3, #0
 8003946:	9304      	str	r3, [sp, #16]
 8003948:	2300      	movs	r3, #0
 800394a:	9303      	str	r3, [sp, #12]
 800394c:	2305      	movs	r3, #5
 800394e:	9302      	str	r3, [sp, #8]
 8003950:	2300      	movs	r3, #0
 8003952:	9301      	str	r3, [sp, #4]
 8003954:	2396      	movs	r3, #150	; 0x96
 8003956:	015b      	lsls	r3, r3, #5
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	2300      	movs	r3, #0
 800395c:	2200      	movs	r2, #0
 800395e:	2000      	movs	r0, #0
 8003960:	f7ff f8e6 	bl	8002b30 <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8003964:	2031      	movs	r0, #49	; 0x31
 8003966:	f000 f94c 	bl	8003c02 <SX1276Read>
 800396a:	0003      	movs	r3, r0
 800396c:	001a      	movs	r2, r3
 800396e:	2340      	movs	r3, #64	; 0x40
 8003970:	439a      	bics	r2, r3
 8003972:	0013      	movs	r3, r2
 8003974:	b2db      	uxtb	r3, r3
 8003976:	0019      	movs	r1, r3
 8003978:	2031      	movs	r0, #49	; 0x31
 800397a:	f000 f92e 	bl	8003bda <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 800397e:	21f0      	movs	r1, #240	; 0xf0
 8003980:	2040      	movs	r0, #64	; 0x40
 8003982:	f000 f92a 	bl	8003bda <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 8003986:	21a0      	movs	r1, #160	; 0xa0
 8003988:	2041      	movs	r0, #65	; 0x41
 800398a:	f000 f926 	bl	8003bda <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	4b0a      	ldr	r3, [pc, #40]	; (80039bc <SX1276SetTxContinuousWave+0xd0>)
 8003992:	0011      	movs	r1, r2
 8003994:	0018      	movs	r0, r3
 8003996:	f005 fe55 	bl	8009644 <TimerSetValue>

    SX1276.Settings.State = RF_TX_RUNNING;
 800399a:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <SX1276SetTxContinuousWave+0xd4>)
 800399c:	2202      	movs	r2, #2
 800399e:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 80039a0:	4b06      	ldr	r3, [pc, #24]	; (80039bc <SX1276SetTxContinuousWave+0xd0>)
 80039a2:	0018      	movs	r0, r3
 80039a4:	f005 fca4 	bl	80092f0 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 80039a8:	2003      	movs	r0, #3
 80039aa:	f000 f88b 	bl	8003ac4 <SX1276SetOpMode>
}
 80039ae:	46c0      	nop			; (mov r8, r8)
 80039b0:	46bd      	mov	sp, r7
 80039b2:	b005      	add	sp, #20
 80039b4:	bd90      	pop	{r4, r7, pc}
 80039b6:	46c0      	nop			; (mov r8, r8)
 80039b8:	408f4000 	.word	0x408f4000
 80039bc:	20000eb0 	.word	0x20000eb0
 80039c0:	20000ed8 	.word	0x20000ed8

080039c4 <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	0002      	movs	r2, r0
 80039cc:	1dfb      	adds	r3, r7, #7
 80039ce:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 80039d0:	230e      	movs	r3, #14
 80039d2:	18fb      	adds	r3, r7, r3
 80039d4:	2200      	movs	r2, #0
 80039d6:	801a      	strh	r2, [r3, #0]

    switch( modem )
 80039d8:	1dfb      	adds	r3, r7, #7
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d002      	beq.n	80039e6 <SX1276ReadRssi+0x22>
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d00d      	beq.n	8003a00 <SX1276ReadRssi+0x3c>
 80039e4:	e027      	b.n	8003a36 <SX1276ReadRssi+0x72>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 80039e6:	2011      	movs	r0, #17
 80039e8:	f000 f90b 	bl	8003c02 <SX1276Read>
 80039ec:	0003      	movs	r3, r0
 80039ee:	085b      	lsrs	r3, r3, #1
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	425b      	negs	r3, r3
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	230e      	movs	r3, #14
 80039fa:	18fb      	adds	r3, r7, r3
 80039fc:	801a      	strh	r2, [r3, #0]
        break;
 80039fe:	e020      	b.n	8003a42 <SX1276ReadRssi+0x7e>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8003a00:	4b14      	ldr	r3, [pc, #80]	; (8003a54 <SX1276ReadRssi+0x90>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	4a14      	ldr	r2, [pc, #80]	; (8003a58 <SX1276ReadRssi+0x94>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d90a      	bls.n	8003a20 <SX1276ReadRssi+0x5c>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8003a0a:	201b      	movs	r0, #27
 8003a0c:	f000 f8f9 	bl	8003c02 <SX1276Read>
 8003a10:	0003      	movs	r3, r0
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	3b9d      	subs	r3, #157	; 0x9d
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	230e      	movs	r3, #14
 8003a1a:	18fb      	adds	r3, r7, r3
 8003a1c:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 8003a1e:	e010      	b.n	8003a42 <SX1276ReadRssi+0x7e>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8003a20:	201b      	movs	r0, #27
 8003a22:	f000 f8ee 	bl	8003c02 <SX1276Read>
 8003a26:	0003      	movs	r3, r0
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	3ba4      	subs	r3, #164	; 0xa4
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	230e      	movs	r3, #14
 8003a30:	18fb      	adds	r3, r7, r3
 8003a32:	801a      	strh	r2, [r3, #0]
        break;
 8003a34:	e005      	b.n	8003a42 <SX1276ReadRssi+0x7e>
    default:
        rssi = -1;
 8003a36:	230e      	movs	r3, #14
 8003a38:	18fb      	adds	r3, r7, r3
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	4252      	negs	r2, r2
 8003a3e:	801a      	strh	r2, [r3, #0]
        break;
 8003a40:	46c0      	nop			; (mov r8, r8)
    }
    return rssi;
 8003a42:	230e      	movs	r3, #14
 8003a44:	18fb      	adds	r3, r7, r3
 8003a46:	2200      	movs	r2, #0
 8003a48:	5e9b      	ldrsh	r3, [r3, r2]
}
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	b004      	add	sp, #16
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	20000ed8 	.word	0x20000ed8
 8003a58:	1f4add40 	.word	0x1f4add40

08003a5c <SX1276Reset>:

void SX1276Reset( void )
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef initStruct={0};
 8003a62:	1d3b      	adds	r3, r7, #4
 8003a64:	0018      	movs	r0, r3
 8003a66:	2314      	movs	r3, #20
 8003a68:	001a      	movs	r2, r3
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	f007 fc09 	bl	800b282 <memset>

    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8003a70:	1d3b      	adds	r3, r7, #4
 8003a72:	2201      	movs	r2, #1
 8003a74:	605a      	str	r2, [r3, #4]
    initStruct.Pull = GPIO_NOPULL;
 8003a76:	1d3b      	adds	r3, r7, #4
 8003a78:	2200      	movs	r2, #0
 8003a7a:	609a      	str	r2, [r3, #8]
    initStruct.Speed = GPIO_SPEED_HIGH;
 8003a7c:	1d3b      	adds	r3, r7, #4
 8003a7e:	2203      	movs	r2, #3
 8003a80:	60da      	str	r2, [r3, #12]

    // Set RESET pin to 0
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct);
 8003a82:	1d3b      	adds	r3, r7, #4
 8003a84:	480e      	ldr	r0, [pc, #56]	; (8003ac0 <SX1276Reset+0x64>)
 8003a86:	001a      	movs	r2, r3
 8003a88:	2101      	movs	r1, #1
 8003a8a:	f005 fe67 	bl	800975c <HW_GPIO_Init>
    HW_GPIO_Write( RADIO_RESET_PORT, RADIO_RESET_PIN, 0 );
 8003a8e:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <SX1276Reset+0x64>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	2101      	movs	r1, #1
 8003a94:	0018      	movs	r0, r3
 8003a96:	f005 ff2d 	bl	80098f4 <HW_GPIO_Write>


    // Wait 1 ms
    DelayMs( 1 );
 8003a9a:	2001      	movs	r0, #1
 8003a9c:	f005 fbbc 	bl	8009218 <DelayMs>

    // Configure RESET as input
    initStruct.Mode = GPIO_NOPULL;
 8003aa0:	1d3b      	adds	r3, r7, #4
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	605a      	str	r2, [r3, #4]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct);
 8003aa6:	1d3b      	adds	r3, r7, #4
 8003aa8:	4805      	ldr	r0, [pc, #20]	; (8003ac0 <SX1276Reset+0x64>)
 8003aaa:	001a      	movs	r2, r3
 8003aac:	2101      	movs	r1, #1
 8003aae:	f005 fe55 	bl	800975c <HW_GPIO_Init>

    // Wait 6 ms
    DelayMs( 6 );
 8003ab2:	2006      	movs	r0, #6
 8003ab4:	f005 fbb0 	bl	8009218 <DelayMs>
}
 8003ab8:	46c0      	nop			; (mov r8, r8)
 8003aba:	46bd      	mov	sp, r7
 8003abc:	b006      	add	sp, #24
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	50000800 	.word	0x50000800

08003ac4 <SX1276SetOpMode>:

void SX1276SetOpMode( uint8_t opMode )
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	0002      	movs	r2, r0
 8003acc:	1dfb      	adds	r3, r7, #7
 8003ace:	701a      	strb	r2, [r3, #0]
    if( opMode == RF_OPMODE_SLEEP )
 8003ad0:	1dfb      	adds	r3, r7, #7
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d103      	bne.n	8003ae0 <SX1276SetOpMode+0x1c>
    {
        SX1276SetAntSwLowPower( true );
 8003ad8:	2001      	movs	r0, #1
 8003ada:	f000 ffb5 	bl	8004a48 <SX1276SetAntSwLowPower>
 8003ade:	e007      	b.n	8003af0 <SX1276SetOpMode+0x2c>
    }
    else
    {
        SX1276SetAntSwLowPower( false );
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	f000 ffb1 	bl	8004a48 <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
 8003ae6:	1dfb      	adds	r3, r7, #7
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	0018      	movs	r0, r3
 8003aec:	f001 f870 	bl	8004bd0 <SX1276SetAntSw>
    }
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8003af0:	2001      	movs	r0, #1
 8003af2:	f000 f886 	bl	8003c02 <SX1276Read>
 8003af6:	0003      	movs	r3, r0
 8003af8:	b25b      	sxtb	r3, r3
 8003afa:	2207      	movs	r2, #7
 8003afc:	4393      	bics	r3, r2
 8003afe:	b25a      	sxtb	r2, r3
 8003b00:	1dfb      	adds	r3, r7, #7
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	b25b      	sxtb	r3, r3
 8003b06:	4313      	orrs	r3, r2
 8003b08:	b25b      	sxtb	r3, r3
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	0019      	movs	r1, r3
 8003b0e:	2001      	movs	r0, #1
 8003b10:	f000 f863 	bl	8003bda <SX1276Write>
}
 8003b14:	46c0      	nop			; (mov r8, r8)
 8003b16:	46bd      	mov	sp, r7
 8003b18:	b002      	add	sp, #8
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	0002      	movs	r2, r0
 8003b24:	1dfb      	adds	r3, r7, #7
 8003b26:	701a      	strb	r2, [r3, #0]

    if( SX1276.Settings.Modem == modem )
 8003b28:	4b21      	ldr	r3, [pc, #132]	; (8003bb0 <SX1276SetModem+0x94>)
 8003b2a:	795b      	ldrb	r3, [r3, #5]
 8003b2c:	1dfa      	adds	r2, r7, #7
 8003b2e:	7812      	ldrb	r2, [r2, #0]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d039      	beq.n	8003ba8 <SX1276SetModem+0x8c>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 8003b34:	4b1e      	ldr	r3, [pc, #120]	; (8003bb0 <SX1276SetModem+0x94>)
 8003b36:	1dfa      	adds	r2, r7, #7
 8003b38:	7812      	ldrb	r2, [r2, #0]
 8003b3a:	715a      	strb	r2, [r3, #5]
    switch( SX1276.Settings.Modem )
 8003b3c:	4b1c      	ldr	r3, [pc, #112]	; (8003bb0 <SX1276SetModem+0x94>)
 8003b3e:	795b      	ldrb	r3, [r3, #5]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d017      	beq.n	8003b74 <SX1276SetModem+0x58>
    {
    default:
    case MODEM_FSK:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8003b44:	2000      	movs	r0, #0
 8003b46:	f7ff ffbd 	bl	8003ac4 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8003b4a:	2001      	movs	r0, #1
 8003b4c:	f000 f859 	bl	8003c02 <SX1276Read>
 8003b50:	0003      	movs	r3, r0
 8003b52:	001a      	movs	r2, r3
 8003b54:	237f      	movs	r3, #127	; 0x7f
 8003b56:	4013      	ands	r3, r2
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	0019      	movs	r1, r3
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	f000 f83c 	bl	8003bda <SX1276Write>
    
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8003b62:	2100      	movs	r1, #0
 8003b64:	2040      	movs	r0, #64	; 0x40
 8003b66:	f000 f838 	bl	8003bda <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8003b6a:	2130      	movs	r1, #48	; 0x30
 8003b6c:	2041      	movs	r0, #65	; 0x41
 8003b6e:	f000 f834 	bl	8003bda <SX1276Write>
        break;
 8003b72:	e01a      	b.n	8003baa <SX1276SetModem+0x8e>
    case MODEM_LORA:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8003b74:	2000      	movs	r0, #0
 8003b76:	f7ff ffa5 	bl	8003ac4 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8003b7a:	2001      	movs	r0, #1
 8003b7c:	f000 f841 	bl	8003c02 <SX1276Read>
 8003b80:	0003      	movs	r3, r0
 8003b82:	001a      	movs	r2, r3
 8003b84:	2380      	movs	r3, #128	; 0x80
 8003b86:	425b      	negs	r3, r3
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	0019      	movs	r1, r3
 8003b8e:	2001      	movs	r0, #1
 8003b90:	f000 f823 	bl	8003bda <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8003b94:	2100      	movs	r1, #0
 8003b96:	2040      	movs	r0, #64	; 0x40
 8003b98:	f000 f81f 	bl	8003bda <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	2041      	movs	r0, #65	; 0x41
 8003ba0:	f000 f81b 	bl	8003bda <SX1276Write>
        break;
 8003ba4:	46c0      	nop			; (mov r8, r8)
 8003ba6:	e000      	b.n	8003baa <SX1276SetModem+0x8e>
        return;
 8003ba8:	46c0      	nop			; (mov r8, r8)
    }
}
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b002      	add	sp, #8
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	20000ed8 	.word	0x20000ed8

08003bb4 <SX1276SetSyncWord>:

void SX1276SetSyncWord( uint8_t data )
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	0002      	movs	r2, r0
 8003bbc:	1dfb      	adds	r3, r7, #7
 8003bbe:	701a      	strb	r2, [r3, #0]
  SX1276SetModem( MODEM_LORA );
 8003bc0:	2001      	movs	r0, #1
 8003bc2:	f7ff ffab 	bl	8003b1c <SX1276SetModem>

  SX1276Write( REG_LR_SYNCWORD, data);
 8003bc6:	1dfb      	adds	r3, r7, #7
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	0019      	movs	r1, r3
 8003bcc:	2039      	movs	r0, #57	; 0x39
 8003bce:	f000 f804 	bl	8003bda <SX1276Write>
}
 8003bd2:	46c0      	nop			; (mov r8, r8)
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	b002      	add	sp, #8
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <SX1276Write>:


void SX1276Write( uint8_t addr, uint8_t data )
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b082      	sub	sp, #8
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	0002      	movs	r2, r0
 8003be2:	1dfb      	adds	r3, r7, #7
 8003be4:	701a      	strb	r2, [r3, #0]
 8003be6:	1dbb      	adds	r3, r7, #6
 8003be8:	1c0a      	adds	r2, r1, #0
 8003bea:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( addr, &data, 1 );
 8003bec:	1db9      	adds	r1, r7, #6
 8003bee:	1dfb      	adds	r3, r7, #7
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f000 f819 	bl	8003c2c <SX1276WriteBuffer>
}
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	b002      	add	sp, #8
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <SX1276Read>:


uint8_t SX1276Read( uint8_t addr )
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b084      	sub	sp, #16
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	0002      	movs	r2, r0
 8003c0a:	1dfb      	adds	r3, r7, #7
 8003c0c:	701a      	strb	r2, [r3, #0]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 8003c0e:	230f      	movs	r3, #15
 8003c10:	18f9      	adds	r1, r7, r3
 8003c12:	1dfb      	adds	r3, r7, #7
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	2201      	movs	r2, #1
 8003c18:	0018      	movs	r0, r3
 8003c1a:	f000 f84d 	bl	8003cb8 <SX1276ReadBuffer>
    return data;
 8003c1e:	230f      	movs	r3, #15
 8003c20:	18fb      	adds	r3, r7, r3
 8003c22:	781b      	ldrb	r3, [r3, #0]
}
 8003c24:	0018      	movs	r0, r3
 8003c26:	46bd      	mov	sp, r7
 8003c28:	b004      	add	sp, #16
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6039      	str	r1, [r7, #0]
 8003c34:	0011      	movs	r1, r2
 8003c36:	1dfb      	adds	r3, r7, #7
 8003c38:	1c02      	adds	r2, r0, #0
 8003c3a:	701a      	strb	r2, [r3, #0]
 8003c3c:	1dbb      	adds	r3, r7, #6
 8003c3e:	1c0a      	adds	r2, r1, #0
 8003c40:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8003c42:	2380      	movs	r3, #128	; 0x80
 8003c44:	0219      	lsls	r1, r3, #8
 8003c46:	23a0      	movs	r3, #160	; 0xa0
 8003c48:	05db      	lsls	r3, r3, #23
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	f005 fe51 	bl	80098f4 <HW_GPIO_Write>

    HW_SPI_InOut( addr | 0x80 );
 8003c52:	1dfb      	adds	r3, r7, #7
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	2280      	movs	r2, #128	; 0x80
 8003c58:	4252      	negs	r2, r2
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	0018      	movs	r0, r3
 8003c62:	f006 fac7 	bl	800a1f4 <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 8003c66:	230f      	movs	r3, #15
 8003c68:	18fb      	adds	r3, r7, r3
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	701a      	strb	r2, [r3, #0]
 8003c6e:	e010      	b.n	8003c92 <SX1276WriteBuffer+0x66>
    {
          HW_SPI_InOut( buffer[i] );
 8003c70:	230f      	movs	r3, #15
 8003c72:	18fb      	adds	r3, r7, r3
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	18d3      	adds	r3, r2, r3
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	0018      	movs	r0, r3
 8003c80:	f006 fab8 	bl	800a1f4 <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 8003c84:	230f      	movs	r3, #15
 8003c86:	18fb      	adds	r3, r7, r3
 8003c88:	781a      	ldrb	r2, [r3, #0]
 8003c8a:	230f      	movs	r3, #15
 8003c8c:	18fb      	adds	r3, r7, r3
 8003c8e:	3201      	adds	r2, #1
 8003c90:	701a      	strb	r2, [r3, #0]
 8003c92:	230f      	movs	r3, #15
 8003c94:	18fa      	adds	r2, r7, r3
 8003c96:	1dbb      	adds	r3, r7, #6
 8003c98:	7812      	ldrb	r2, [r2, #0]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d3e7      	bcc.n	8003c70 <SX1276WriteBuffer+0x44>
    }

    //NSS = 1;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8003ca0:	2380      	movs	r3, #128	; 0x80
 8003ca2:	0219      	lsls	r1, r3, #8
 8003ca4:	23a0      	movs	r3, #160	; 0xa0
 8003ca6:	05db      	lsls	r3, r3, #23
 8003ca8:	2201      	movs	r2, #1
 8003caa:	0018      	movs	r0, r3
 8003cac:	f005 fe22 	bl	80098f4 <HW_GPIO_Write>
}
 8003cb0:	46c0      	nop			; (mov r8, r8)
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	b004      	add	sp, #16
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
{
 8003cb8:	b590      	push	{r4, r7, lr}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6039      	str	r1, [r7, #0]
 8003cc0:	0011      	movs	r1, r2
 8003cc2:	1dfb      	adds	r3, r7, #7
 8003cc4:	1c02      	adds	r2, r0, #0
 8003cc6:	701a      	strb	r2, [r3, #0]
 8003cc8:	1dbb      	adds	r3, r7, #6
 8003cca:	1c0a      	adds	r2, r1, #0
 8003ccc:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8003cce:	2380      	movs	r3, #128	; 0x80
 8003cd0:	0219      	lsls	r1, r3, #8
 8003cd2:	23a0      	movs	r3, #160	; 0xa0
 8003cd4:	05db      	lsls	r3, r3, #23
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	0018      	movs	r0, r3
 8003cda:	f005 fe0b 	bl	80098f4 <HW_GPIO_Write>

    HW_SPI_InOut( addr & 0x7F );
 8003cde:	1dfb      	adds	r3, r7, #7
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	227f      	movs	r2, #127	; 0x7f
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	0018      	movs	r0, r3
 8003cec:	f006 fa82 	bl	800a1f4 <HW_SPI_InOut>

    for( i = 0; i < size; i++ )
 8003cf0:	230f      	movs	r3, #15
 8003cf2:	18fb      	adds	r3, r7, r3
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	701a      	strb	r2, [r3, #0]
 8003cf8:	e011      	b.n	8003d1e <SX1276ReadBuffer+0x66>
    {
          buffer[i] = HW_SPI_InOut( 0 );
 8003cfa:	230f      	movs	r3, #15
 8003cfc:	18fb      	adds	r3, r7, r3
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	18d4      	adds	r4, r2, r3
 8003d04:	2000      	movs	r0, #0
 8003d06:	f006 fa75 	bl	800a1f4 <HW_SPI_InOut>
 8003d0a:	0003      	movs	r3, r0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	7023      	strb	r3, [r4, #0]
    for( i = 0; i < size; i++ )
 8003d10:	230f      	movs	r3, #15
 8003d12:	18fb      	adds	r3, r7, r3
 8003d14:	781a      	ldrb	r2, [r3, #0]
 8003d16:	230f      	movs	r3, #15
 8003d18:	18fb      	adds	r3, r7, r3
 8003d1a:	3201      	adds	r2, #1
 8003d1c:	701a      	strb	r2, [r3, #0]
 8003d1e:	230f      	movs	r3, #15
 8003d20:	18fa      	adds	r2, r7, r3
 8003d22:	1dbb      	adds	r3, r7, #6
 8003d24:	7812      	ldrb	r2, [r2, #0]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d3e6      	bcc.n	8003cfa <SX1276ReadBuffer+0x42>
    }

    //NSS = 1;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8003d2c:	2380      	movs	r3, #128	; 0x80
 8003d2e:	0219      	lsls	r1, r3, #8
 8003d30:	23a0      	movs	r3, #160	; 0xa0
 8003d32:	05db      	lsls	r3, r3, #23
 8003d34:	2201      	movs	r2, #1
 8003d36:	0018      	movs	r0, r3
 8003d38:	f005 fddc 	bl	80098f4 <HW_GPIO_Write>
}
 8003d3c:	46c0      	nop			; (mov r8, r8)
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	b005      	add	sp, #20
 8003d42:	bd90      	pop	{r4, r7, pc}

08003d44 <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	000a      	movs	r2, r1
 8003d4e:	1cfb      	adds	r3, r7, #3
 8003d50:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( 0, buffer, size );
 8003d52:	1cfb      	adds	r3, r7, #3
 8003d54:	781a      	ldrb	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	0019      	movs	r1, r3
 8003d5a:	2000      	movs	r0, #0
 8003d5c:	f7ff ff66 	bl	8003c2c <SX1276WriteBuffer>
}
 8003d60:	46c0      	nop			; (mov r8, r8)
 8003d62:	46bd      	mov	sp, r7
 8003d64:	b002      	add	sp, #8
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	000a      	movs	r2, r1
 8003d72:	1cfb      	adds	r3, r7, #3
 8003d74:	701a      	strb	r2, [r3, #0]
    SX1276ReadBuffer( 0, buffer, size );
 8003d76:	1cfb      	adds	r3, r7, #3
 8003d78:	781a      	ldrb	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	0019      	movs	r1, r3
 8003d7e:	2000      	movs	r0, #0
 8003d80:	f7ff ff9a 	bl	8003cb8 <SX1276ReadBuffer>
}
 8003d84:	46c0      	nop			; (mov r8, r8)
 8003d86:	46bd      	mov	sp, r7
 8003d88:	b002      	add	sp, #8
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	0002      	movs	r2, r0
 8003d94:	1dfb      	adds	r3, r7, #7
 8003d96:	701a      	strb	r2, [r3, #0]
 8003d98:	1dbb      	adds	r3, r7, #6
 8003d9a:	1c0a      	adds	r2, r1, #0
 8003d9c:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 8003d9e:	1dfb      	adds	r3, r7, #7
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	0018      	movs	r0, r3
 8003da4:	f7ff feba 	bl	8003b1c <SX1276SetModem>

    switch( modem )
 8003da8:	1dfb      	adds	r3, r7, #7
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d002      	beq.n	8003db6 <SX1276SetMaxPayloadLength+0x2a>
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d00f      	beq.n	8003dd4 <SX1276SetMaxPayloadLength+0x48>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 8003db4:	e016      	b.n	8003de4 <SX1276SetMaxPayloadLength+0x58>
        if( SX1276.Settings.Fsk.FixLen == false )
 8003db6:	4b0d      	ldr	r3, [pc, #52]	; (8003dec <SX1276SetMaxPayloadLength+0x60>)
 8003db8:	2222      	movs	r2, #34	; 0x22
 8003dba:	5c9b      	ldrb	r3, [r3, r2]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	4053      	eors	r3, r2
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00d      	beq.n	8003de2 <SX1276SetMaxPayloadLength+0x56>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8003dc6:	1dbb      	adds	r3, r7, #6
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	0019      	movs	r1, r3
 8003dcc:	2032      	movs	r0, #50	; 0x32
 8003dce:	f7ff ff04 	bl	8003bda <SX1276Write>
        break;
 8003dd2:	e006      	b.n	8003de2 <SX1276SetMaxPayloadLength+0x56>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8003dd4:	1dbb      	adds	r3, r7, #6
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	0019      	movs	r1, r3
 8003dda:	2023      	movs	r0, #35	; 0x23
 8003ddc:	f7ff fefd 	bl	8003bda <SX1276Write>
        break;
 8003de0:	e000      	b.n	8003de4 <SX1276SetMaxPayloadLength+0x58>
        break;
 8003de2:	46c0      	nop			; (mov r8, r8)
}
 8003de4:	46c0      	nop			; (mov r8, r8)
 8003de6:	46bd      	mov	sp, r7
 8003de8:	b002      	add	sp, #8
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	20000ed8 	.word	0x20000ed8

08003df0 <SX1276OnTimeoutIrq>:

void SX1276OnTimeoutIrq( void )
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 8003df4:	4b31      	ldr	r3, [pc, #196]	; (8003ebc <SX1276OnTimeoutIrq+0xcc>)
 8003df6:	791b      	ldrb	r3, [r3, #4]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d002      	beq.n	8003e02 <SX1276OnTimeoutIrq+0x12>
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d045      	beq.n	8003e8c <SX1276OnTimeoutIrq+0x9c>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 8003e00:	e058      	b.n	8003eb4 <SX1276OnTimeoutIrq+0xc4>
        if( SX1276.Settings.Modem == MODEM_FSK )
 8003e02:	4b2e      	ldr	r3, [pc, #184]	; (8003ebc <SX1276OnTimeoutIrq+0xcc>)
 8003e04:	795b      	ldrb	r3, [r3, #5]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d132      	bne.n	8003e70 <SX1276OnTimeoutIrq+0x80>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8003e0a:	4b2c      	ldr	r3, [pc, #176]	; (8003ebc <SX1276OnTimeoutIrq+0xcc>)
 8003e0c:	222c      	movs	r2, #44	; 0x2c
 8003e0e:	2100      	movs	r1, #0
 8003e10:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8003e12:	4b2a      	ldr	r3, [pc, #168]	; (8003ebc <SX1276OnTimeoutIrq+0xcc>)
 8003e14:	222d      	movs	r2, #45	; 0x2d
 8003e16:	2100      	movs	r1, #0
 8003e18:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8003e1a:	4b28      	ldr	r3, [pc, #160]	; (8003ebc <SX1276OnTimeoutIrq+0xcc>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	871a      	strh	r2, [r3, #56]	; 0x38
            SX1276.Settings.FskPacketHandler.Size = 0;
 8003e20:	4b26      	ldr	r3, [pc, #152]	; (8003ebc <SX1276OnTimeoutIrq+0xcc>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	86da      	strh	r2, [r3, #54]	; 0x36
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8003e26:	210b      	movs	r1, #11
 8003e28:	203e      	movs	r0, #62	; 0x3e
 8003e2a:	f7ff fed6 	bl	8003bda <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8003e2e:	2110      	movs	r1, #16
 8003e30:	203f      	movs	r0, #63	; 0x3f
 8003e32:	f7ff fed2 	bl	8003bda <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 8003e36:	4b21      	ldr	r3, [pc, #132]	; (8003ebc <SX1276OnTimeoutIrq+0xcc>)
 8003e38:	2226      	movs	r2, #38	; 0x26
 8003e3a:	5c9b      	ldrb	r3, [r3, r2]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d010      	beq.n	8003e62 <SX1276OnTimeoutIrq+0x72>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8003e40:	200d      	movs	r0, #13
 8003e42:	f7ff fede 	bl	8003c02 <SX1276Read>
 8003e46:	0003      	movs	r3, r0
 8003e48:	001a      	movs	r2, r3
 8003e4a:	2340      	movs	r3, #64	; 0x40
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	0019      	movs	r1, r3
 8003e52:	200d      	movs	r0, #13
 8003e54:	f7ff fec1 	bl	8003bda <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 8003e58:	4b19      	ldr	r3, [pc, #100]	; (8003ec0 <SX1276OnTimeoutIrq+0xd0>)
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	f005 fa48 	bl	80092f0 <TimerStart>
 8003e60:	e006      	b.n	8003e70 <SX1276OnTimeoutIrq+0x80>
                SX1276.Settings.State = RF_IDLE;
 8003e62:	4b16      	ldr	r3, [pc, #88]	; (8003ebc <SX1276OnTimeoutIrq+0xcc>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	711a      	strb	r2, [r3, #4]
                TimerStop( &RxTimeoutSyncWord );
 8003e68:	4b15      	ldr	r3, [pc, #84]	; (8003ec0 <SX1276OnTimeoutIrq+0xd0>)
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	f005 fb56 	bl	800951c <TimerStop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8003e70:	4b14      	ldr	r3, [pc, #80]	; (8003ec4 <SX1276OnTimeoutIrq+0xd4>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d01a      	beq.n	8003eae <SX1276OnTimeoutIrq+0xbe>
 8003e78:	4b12      	ldr	r3, [pc, #72]	; (8003ec4 <SX1276OnTimeoutIrq+0xd4>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d015      	beq.n	8003eae <SX1276OnTimeoutIrq+0xbe>
            RadioEvents->RxTimeout( );
 8003e82:	4b10      	ldr	r3, [pc, #64]	; (8003ec4 <SX1276OnTimeoutIrq+0xd4>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	4798      	blx	r3
        break;
 8003e8a:	e010      	b.n	8003eae <SX1276OnTimeoutIrq+0xbe>
        SX1276.Settings.State = RF_IDLE;
 8003e8c:	4b0b      	ldr	r3, [pc, #44]	; (8003ebc <SX1276OnTimeoutIrq+0xcc>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	711a      	strb	r2, [r3, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8003e92:	4b0c      	ldr	r3, [pc, #48]	; (8003ec4 <SX1276OnTimeoutIrq+0xd4>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00b      	beq.n	8003eb2 <SX1276OnTimeoutIrq+0xc2>
 8003e9a:	4b0a      	ldr	r3, [pc, #40]	; (8003ec4 <SX1276OnTimeoutIrq+0xd4>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d006      	beq.n	8003eb2 <SX1276OnTimeoutIrq+0xc2>
            RadioEvents->TxTimeout( );
 8003ea4:	4b07      	ldr	r3, [pc, #28]	; (8003ec4 <SX1276OnTimeoutIrq+0xd4>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	4798      	blx	r3
        break;
 8003eac:	e001      	b.n	8003eb2 <SX1276OnTimeoutIrq+0xc2>
        break;
 8003eae:	46c0      	nop			; (mov r8, r8)
 8003eb0:	e000      	b.n	8003eb4 <SX1276OnTimeoutIrq+0xc4>
        break;
 8003eb2:	46c0      	nop			; (mov r8, r8)
    }
}
 8003eb4:	46c0      	nop			; (mov r8, r8)
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	46c0      	nop			; (mov r8, r8)
 8003ebc:	20000ed8 	.word	0x20000ed8
 8003ec0:	20000ec4 	.word	0x20000ec4
 8003ec4:	200006bc 	.word	0x200006bc

08003ec8 <SX1276OnDio0Irq>:

void SX1276OnDio0Irq( void )
{
 8003ec8:	b5b0      	push	{r4, r5, r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
    volatile uint8_t irqFlags = 0;
 8003ece:	1cfb      	adds	r3, r7, #3
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.State )
 8003ed4:	4bd6      	ldr	r3, [pc, #856]	; (8004230 <SX1276OnDio0Irq+0x368>)
 8003ed6:	791b      	ldrb	r3, [r3, #4]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d003      	beq.n	8003ee4 <SX1276OnDio0Irq+0x1c>
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d100      	bne.n	8003ee2 <SX1276OnDio0Irq+0x1a>
 8003ee0:	e201      	b.n	80042e6 <SX1276OnDio0Irq+0x41e>
                }
                break;
            }
            break;
        default:
            break;
 8003ee2:	e222      	b.n	800432a <SX1276OnDio0Irq+0x462>
            switch( SX1276.Settings.Modem )
 8003ee4:	4bd2      	ldr	r3, [pc, #840]	; (8004230 <SX1276OnDio0Irq+0x368>)
 8003ee6:	795b      	ldrb	r3, [r3, #5]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <SX1276OnDio0Irq+0x2c>
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d100      	bne.n	8003ef2 <SX1276OnDio0Irq+0x2a>
 8003ef0:	e0ea      	b.n	80040c8 <SX1276OnDio0Irq+0x200>
                break;
 8003ef2:	e1f7      	b.n	80042e4 <SX1276OnDio0Irq+0x41c>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8003ef4:	4bce      	ldr	r3, [pc, #824]	; (8004230 <SX1276OnDio0Irq+0x368>)
 8003ef6:	2224      	movs	r2, #36	; 0x24
 8003ef8:	5c9b      	ldrb	r3, [r3, r2]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d056      	beq.n	8003fac <SX1276OnDio0Irq+0xe4>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 8003efe:	203f      	movs	r0, #63	; 0x3f
 8003f00:	f7ff fe7f 	bl	8003c02 <SX1276Read>
 8003f04:	0003      	movs	r3, r0
 8003f06:	001a      	movs	r2, r3
 8003f08:	1cfb      	adds	r3, r7, #3
 8003f0a:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8003f0c:	1cfb      	adds	r3, r7, #3
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	001a      	movs	r2, r3
 8003f14:	2302      	movs	r3, #2
 8003f16:	4013      	ands	r3, r2
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d047      	beq.n	8003fac <SX1276OnDio0Irq+0xe4>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI | 
 8003f1c:	210b      	movs	r1, #11
 8003f1e:	203e      	movs	r0, #62	; 0x3e
 8003f20:	f7ff fe5b 	bl	8003bda <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8003f24:	2110      	movs	r1, #16
 8003f26:	203f      	movs	r0, #63	; 0x3f
 8003f28:	f7ff fe57 	bl	8003bda <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8003f2c:	4bc1      	ldr	r3, [pc, #772]	; (8004234 <SX1276OnDio0Irq+0x36c>)
 8003f2e:	0018      	movs	r0, r3
 8003f30:	f005 faf4 	bl	800951c <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 8003f34:	4bbe      	ldr	r3, [pc, #760]	; (8004230 <SX1276OnDio0Irq+0x368>)
 8003f36:	2226      	movs	r2, #38	; 0x26
 8003f38:	5c9b      	ldrb	r3, [r3, r2]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	4053      	eors	r3, r2
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d007      	beq.n	8003f54 <SX1276OnDio0Irq+0x8c>
                            TimerStop( &RxTimeoutSyncWord );
 8003f44:	4bbc      	ldr	r3, [pc, #752]	; (8004238 <SX1276OnDio0Irq+0x370>)
 8003f46:	0018      	movs	r0, r3
 8003f48:	f005 fae8 	bl	800951c <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 8003f4c:	4bb8      	ldr	r3, [pc, #736]	; (8004230 <SX1276OnDio0Irq+0x368>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	711a      	strb	r2, [r3, #4]
 8003f52:	e00f      	b.n	8003f74 <SX1276OnDio0Irq+0xac>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8003f54:	200d      	movs	r0, #13
 8003f56:	f7ff fe54 	bl	8003c02 <SX1276Read>
 8003f5a:	0003      	movs	r3, r0
 8003f5c:	001a      	movs	r2, r3
 8003f5e:	2340      	movs	r3, #64	; 0x40
 8003f60:	4313      	orrs	r3, r2
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	0019      	movs	r1, r3
 8003f66:	200d      	movs	r0, #13
 8003f68:	f7ff fe37 	bl	8003bda <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 8003f6c:	4bb2      	ldr	r3, [pc, #712]	; (8004238 <SX1276OnDio0Irq+0x370>)
 8003f6e:	0018      	movs	r0, r3
 8003f70:	f005 f9be 	bl	80092f0 <TimerStart>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8003f74:	4bb1      	ldr	r3, [pc, #708]	; (800423c <SX1276OnDio0Irq+0x374>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d008      	beq.n	8003f8e <SX1276OnDio0Irq+0xc6>
 8003f7c:	4baf      	ldr	r3, [pc, #700]	; (800423c <SX1276OnDio0Irq+0x374>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <SX1276OnDio0Irq+0xc6>
                            RadioEvents->RxError( );
 8003f86:	4bad      	ldr	r3, [pc, #692]	; (800423c <SX1276OnDio0Irq+0x374>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8003f8e:	4ba8      	ldr	r3, [pc, #672]	; (8004230 <SX1276OnDio0Irq+0x368>)
 8003f90:	222c      	movs	r2, #44	; 0x2c
 8003f92:	2100      	movs	r1, #0
 8003f94:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8003f96:	4ba6      	ldr	r3, [pc, #664]	; (8004230 <SX1276OnDio0Irq+0x368>)
 8003f98:	222d      	movs	r2, #45	; 0x2d
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8003f9e:	4ba4      	ldr	r3, [pc, #656]	; (8004230 <SX1276OnDio0Irq+0x368>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	871a      	strh	r2, [r3, #56]	; 0x38
                        SX1276.Settings.FskPacketHandler.Size = 0;
 8003fa4:	4ba2      	ldr	r3, [pc, #648]	; (8004230 <SX1276OnDio0Irq+0x368>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	86da      	strh	r2, [r3, #54]	; 0x36
                        break;
 8003faa:	e19b      	b.n	80042e4 <SX1276OnDio0Irq+0x41c>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8003fac:	4ba0      	ldr	r3, [pc, #640]	; (8004230 <SX1276OnDio0Irq+0x368>)
 8003fae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d12d      	bne.n	8004010 <SX1276OnDio0Irq+0x148>
 8003fb4:	4b9e      	ldr	r3, [pc, #632]	; (8004230 <SX1276OnDio0Irq+0x368>)
 8003fb6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d129      	bne.n	8004010 <SX1276OnDio0Irq+0x148>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8003fbc:	4b9c      	ldr	r3, [pc, #624]	; (8004230 <SX1276OnDio0Irq+0x368>)
 8003fbe:	2222      	movs	r2, #34	; 0x22
 8003fc0:	5c9b      	ldrb	r3, [r3, r2]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	4053      	eors	r3, r2
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d005      	beq.n	8003fd8 <SX1276OnDio0Irq+0x110>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8003fcc:	4b9c      	ldr	r3, [pc, #624]	; (8004240 <SX1276OnDio0Irq+0x378>)
 8003fce:	2101      	movs	r1, #1
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	f7ff fec9 	bl	8003d68 <SX1276ReadFifo>
 8003fd6:	e006      	b.n	8003fe6 <SX1276OnDio0Irq+0x11e>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8003fd8:	2032      	movs	r0, #50	; 0x32
 8003fda:	f7ff fe12 	bl	8003c02 <SX1276Read>
 8003fde:	0003      	movs	r3, r0
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	4b93      	ldr	r3, [pc, #588]	; (8004230 <SX1276OnDio0Irq+0x368>)
 8003fe4:	86da      	strh	r2, [r3, #54]	; 0x36
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8003fe6:	4b92      	ldr	r3, [pc, #584]	; (8004230 <SX1276OnDio0Irq+0x368>)
 8003fe8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003fea:	001a      	movs	r2, r3
 8003fec:	4b95      	ldr	r3, [pc, #596]	; (8004244 <SX1276OnDio0Irq+0x37c>)
 8003fee:	18d0      	adds	r0, r2, r3
 8003ff0:	4b8f      	ldr	r3, [pc, #572]	; (8004230 <SX1276OnDio0Irq+0x368>)
 8003ff2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	4b8e      	ldr	r3, [pc, #568]	; (8004230 <SX1276OnDio0Irq+0x368>)
 8003ff8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	0019      	movs	r1, r3
 8004002:	f7ff feb1 	bl	8003d68 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004006:	4b8a      	ldr	r3, [pc, #552]	; (8004230 <SX1276OnDio0Irq+0x368>)
 8004008:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800400a:	4b89      	ldr	r3, [pc, #548]	; (8004230 <SX1276OnDio0Irq+0x368>)
 800400c:	871a      	strh	r2, [r3, #56]	; 0x38
 800400e:	e013      	b.n	8004038 <SX1276OnDio0Irq+0x170>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004010:	4b87      	ldr	r3, [pc, #540]	; (8004230 <SX1276OnDio0Irq+0x368>)
 8004012:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004014:	001a      	movs	r2, r3
 8004016:	4b8b      	ldr	r3, [pc, #556]	; (8004244 <SX1276OnDio0Irq+0x37c>)
 8004018:	18d0      	adds	r0, r2, r3
 800401a:	4b85      	ldr	r3, [pc, #532]	; (8004230 <SX1276OnDio0Irq+0x368>)
 800401c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800401e:	b2da      	uxtb	r2, r3
 8004020:	4b83      	ldr	r3, [pc, #524]	; (8004230 <SX1276OnDio0Irq+0x368>)
 8004022:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004024:	b2db      	uxtb	r3, r3
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	b2db      	uxtb	r3, r3
 800402a:	0019      	movs	r1, r3
 800402c:	f7ff fe9c 	bl	8003d68 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004030:	4b7f      	ldr	r3, [pc, #508]	; (8004230 <SX1276OnDio0Irq+0x368>)
 8004032:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8004034:	4b7e      	ldr	r3, [pc, #504]	; (8004230 <SX1276OnDio0Irq+0x368>)
 8004036:	871a      	strh	r2, [r3, #56]	; 0x38
                TimerStop( &RxTimeoutTimer );
 8004038:	4b7e      	ldr	r3, [pc, #504]	; (8004234 <SX1276OnDio0Irq+0x36c>)
 800403a:	0018      	movs	r0, r3
 800403c:	f005 fa6e 	bl	800951c <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8004040:	4b7b      	ldr	r3, [pc, #492]	; (8004230 <SX1276OnDio0Irq+0x368>)
 8004042:	2226      	movs	r2, #38	; 0x26
 8004044:	5c9b      	ldrb	r3, [r3, r2]
 8004046:	2201      	movs	r2, #1
 8004048:	4053      	eors	r3, r2
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	d007      	beq.n	8004060 <SX1276OnDio0Irq+0x198>
                    SX1276.Settings.State = RF_IDLE;
 8004050:	4b77      	ldr	r3, [pc, #476]	; (8004230 <SX1276OnDio0Irq+0x368>)
 8004052:	2200      	movs	r2, #0
 8004054:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutSyncWord );
 8004056:	4b78      	ldr	r3, [pc, #480]	; (8004238 <SX1276OnDio0Irq+0x370>)
 8004058:	0018      	movs	r0, r3
 800405a:	f005 fa5f 	bl	800951c <TimerStop>
 800405e:	e00f      	b.n	8004080 <SX1276OnDio0Irq+0x1b8>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8004060:	200d      	movs	r0, #13
 8004062:	f7ff fdce 	bl	8003c02 <SX1276Read>
 8004066:	0003      	movs	r3, r0
 8004068:	001a      	movs	r2, r3
 800406a:	2340      	movs	r3, #64	; 0x40
 800406c:	4313      	orrs	r3, r2
 800406e:	b2db      	uxtb	r3, r3
 8004070:	0019      	movs	r1, r3
 8004072:	200d      	movs	r0, #13
 8004074:	f7ff fdb1 	bl	8003bda <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
 8004078:	4b6f      	ldr	r3, [pc, #444]	; (8004238 <SX1276OnDio0Irq+0x370>)
 800407a:	0018      	movs	r0, r3
 800407c:	f005 f938 	bl	80092f0 <TimerStart>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8004080:	4b6e      	ldr	r3, [pc, #440]	; (800423c <SX1276OnDio0Irq+0x374>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d010      	beq.n	80040aa <SX1276OnDio0Irq+0x1e2>
 8004088:	4b6c      	ldr	r3, [pc, #432]	; (800423c <SX1276OnDio0Irq+0x374>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00b      	beq.n	80040aa <SX1276OnDio0Irq+0x1e2>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8004092:	4b6a      	ldr	r3, [pc, #424]	; (800423c <SX1276OnDio0Irq+0x374>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689c      	ldr	r4, [r3, #8]
 8004098:	4b65      	ldr	r3, [pc, #404]	; (8004230 <SX1276OnDio0Irq+0x368>)
 800409a:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
 800409c:	4b64      	ldr	r3, [pc, #400]	; (8004230 <SX1276OnDio0Irq+0x368>)
 800409e:	222e      	movs	r2, #46	; 0x2e
 80040a0:	569b      	ldrsb	r3, [r3, r2]
 80040a2:	b21a      	sxth	r2, r3
 80040a4:	4867      	ldr	r0, [pc, #412]	; (8004244 <SX1276OnDio0Irq+0x37c>)
 80040a6:	2300      	movs	r3, #0
 80040a8:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80040aa:	4b61      	ldr	r3, [pc, #388]	; (8004230 <SX1276OnDio0Irq+0x368>)
 80040ac:	222c      	movs	r2, #44	; 0x2c
 80040ae:	2100      	movs	r1, #0
 80040b0:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80040b2:	4b5f      	ldr	r3, [pc, #380]	; (8004230 <SX1276OnDio0Irq+0x368>)
 80040b4:	222d      	movs	r2, #45	; 0x2d
 80040b6:	2100      	movs	r1, #0
 80040b8:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80040ba:	4b5d      	ldr	r3, [pc, #372]	; (8004230 <SX1276OnDio0Irq+0x368>)
 80040bc:	2200      	movs	r2, #0
 80040be:	871a      	strh	r2, [r3, #56]	; 0x38
                SX1276.Settings.FskPacketHandler.Size = 0;
 80040c0:	4b5b      	ldr	r3, [pc, #364]	; (8004230 <SX1276OnDio0Irq+0x368>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	86da      	strh	r2, [r3, #54]	; 0x36
                break;
 80040c6:	e10d      	b.n	80042e4 <SX1276OnDio0Irq+0x41c>
                    int8_t snr = 0;
 80040c8:	1dfb      	adds	r3, r7, #7
 80040ca:	2200      	movs	r2, #0
 80040cc:	701a      	strb	r2, [r3, #0]
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 80040ce:	2140      	movs	r1, #64	; 0x40
 80040d0:	2012      	movs	r0, #18
 80040d2:	f7ff fd82 	bl	8003bda <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 80040d6:	2012      	movs	r0, #18
 80040d8:	f7ff fd93 	bl	8003c02 <SX1276Read>
 80040dc:	0003      	movs	r3, r0
 80040de:	001a      	movs	r2, r3
 80040e0:	1cfb      	adds	r3, r7, #3
 80040e2:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 80040e4:	1cfb      	adds	r3, r7, #3
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	001a      	movs	r2, r3
 80040ec:	2320      	movs	r3, #32
 80040ee:	4013      	ands	r3, r2
 80040f0:	2b20      	cmp	r3, #32
 80040f2:	d122      	bne.n	800413a <SX1276OnDio0Irq+0x272>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 80040f4:	2120      	movs	r1, #32
 80040f6:	2012      	movs	r0, #18
 80040f8:	f7ff fd6f 	bl	8003bda <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 80040fc:	4b4c      	ldr	r3, [pc, #304]	; (8004230 <SX1276OnDio0Irq+0x368>)
 80040fe:	2252      	movs	r2, #82	; 0x52
 8004100:	5c9b      	ldrb	r3, [r3, r2]
 8004102:	2201      	movs	r2, #1
 8004104:	4053      	eors	r3, r2
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <SX1276OnDio0Irq+0x24a>
                            SX1276.Settings.State = RF_IDLE;
 800410c:	4b48      	ldr	r3, [pc, #288]	; (8004230 <SX1276OnDio0Irq+0x368>)
 800410e:	2200      	movs	r2, #0
 8004110:	711a      	strb	r2, [r3, #4]
                        TimerStop( &RxTimeoutTimer );
 8004112:	4b48      	ldr	r3, [pc, #288]	; (8004234 <SX1276OnDio0Irq+0x36c>)
 8004114:	0018      	movs	r0, r3
 8004116:	f005 fa01 	bl	800951c <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800411a:	4b48      	ldr	r3, [pc, #288]	; (800423c <SX1276OnDio0Irq+0x374>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d100      	bne.n	8004124 <SX1276OnDio0Irq+0x25c>
 8004122:	e0dc      	b.n	80042de <SX1276OnDio0Irq+0x416>
 8004124:	4b45      	ldr	r3, [pc, #276]	; (800423c <SX1276OnDio0Irq+0x374>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d100      	bne.n	8004130 <SX1276OnDio0Irq+0x268>
 800412e:	e0d6      	b.n	80042de <SX1276OnDio0Irq+0x416>
                            RadioEvents->RxError( );
 8004130:	4b42      	ldr	r3, [pc, #264]	; (800423c <SX1276OnDio0Irq+0x374>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	4798      	blx	r3
                        break;
 8004138:	e0d1      	b.n	80042de <SX1276OnDio0Irq+0x416>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = SX1276Read( REG_LR_PKTSNRVALUE );
 800413a:	2019      	movs	r0, #25
 800413c:	f7ff fd61 	bl	8003c02 <SX1276Read>
 8004140:	0003      	movs	r3, r0
 8004142:	b259      	sxtb	r1, r3
 8004144:	4b3a      	ldr	r3, [pc, #232]	; (8004230 <SX1276OnDio0Irq+0x368>)
 8004146:	2258      	movs	r2, #88	; 0x58
 8004148:	5499      	strb	r1, [r3, r2]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue & 0x80 ) // The SNR sign bit is 1
 800414a:	4b39      	ldr	r3, [pc, #228]	; (8004230 <SX1276OnDio0Irq+0x368>)
 800414c:	2258      	movs	r2, #88	; 0x58
 800414e:	569b      	ldrsb	r3, [r3, r2]
 8004150:	2b00      	cmp	r3, #0
 8004152:	da10      	bge.n	8004176 <SX1276OnDio0Irq+0x2ae>
                        snr = ( ( ~SX1276.Settings.LoRaPacketHandler.SnrValue + 1 ) & 0xFF ) >> 2;
 8004154:	4b36      	ldr	r3, [pc, #216]	; (8004230 <SX1276OnDio0Irq+0x368>)
 8004156:	2258      	movs	r2, #88	; 0x58
 8004158:	569b      	ldrsb	r3, [r3, r2]
 800415a:	425b      	negs	r3, r3
 800415c:	109b      	asrs	r3, r3, #2
 800415e:	b25a      	sxtb	r2, r3
 8004160:	1dfb      	adds	r3, r7, #7
 8004162:	213f      	movs	r1, #63	; 0x3f
 8004164:	400a      	ands	r2, r1
 8004166:	701a      	strb	r2, [r3, #0]
                        snr = -snr;
 8004168:	1dfb      	adds	r3, r7, #7
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	425b      	negs	r3, r3
 800416e:	b2da      	uxtb	r2, r3
 8004170:	1dfb      	adds	r3, r7, #7
 8004172:	701a      	strb	r2, [r3, #0]
 8004174:	e008      	b.n	8004188 <SX1276OnDio0Irq+0x2c0>
                        snr = ( SX1276.Settings.LoRaPacketHandler.SnrValue & 0xFF ) >> 2;
 8004176:	4b2e      	ldr	r3, [pc, #184]	; (8004230 <SX1276OnDio0Irq+0x368>)
 8004178:	2258      	movs	r2, #88	; 0x58
 800417a:	569b      	ldrsb	r3, [r3, r2]
 800417c:	109b      	asrs	r3, r3, #2
 800417e:	b25a      	sxtb	r2, r3
 8004180:	1dfb      	adds	r3, r7, #7
 8004182:	213f      	movs	r1, #63	; 0x3f
 8004184:	400a      	ands	r2, r1
 8004186:	701a      	strb	r2, [r3, #0]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8004188:	201a      	movs	r0, #26
 800418a:	f7ff fd3a 	bl	8003c02 <SX1276Read>
 800418e:	0003      	movs	r3, r0
 8004190:	001a      	movs	r2, r3
 8004192:	1d3b      	adds	r3, r7, #4
 8004194:	801a      	strh	r2, [r3, #0]
                    if( snr < 0 )
 8004196:	1dfb      	adds	r3, r7, #7
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	2b7f      	cmp	r3, #127	; 0x7f
 800419c:	d932      	bls.n	8004204 <SX1276OnDio0Irq+0x33c>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800419e:	4b24      	ldr	r3, [pc, #144]	; (8004230 <SX1276OnDio0Irq+0x368>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	4a29      	ldr	r2, [pc, #164]	; (8004248 <SX1276OnDio0Irq+0x380>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d916      	bls.n	80041d6 <SX1276OnDio0Irq+0x30e>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 80041a8:	1d3b      	adds	r3, r7, #4
 80041aa:	2200      	movs	r2, #0
 80041ac:	5e9b      	ldrsh	r3, [r3, r2]
 80041ae:	111b      	asrs	r3, r3, #4
 80041b0:	b21b      	sxth	r3, r3
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	1d3b      	adds	r3, r7, #4
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	18d3      	adds	r3, r2, r3
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	1dfb      	adds	r3, r7, #7
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	b25b      	sxtb	r3, r3
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	18d3      	adds	r3, r2, r3
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	3b9d      	subs	r3, #157	; 0x9d
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	b219      	sxth	r1, r3
 80041ce:	4b18      	ldr	r3, [pc, #96]	; (8004230 <SX1276OnDio0Irq+0x368>)
 80041d0:	225a      	movs	r2, #90	; 0x5a
 80041d2:	5299      	strh	r1, [r3, r2]
 80041d4:	e04a      	b.n	800426c <SX1276OnDio0Irq+0x3a4>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 80041d6:	1d3b      	adds	r3, r7, #4
 80041d8:	2200      	movs	r2, #0
 80041da:	5e9b      	ldrsh	r3, [r3, r2]
 80041dc:	111b      	asrs	r3, r3, #4
 80041de:	b21b      	sxth	r3, r3
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	1d3b      	adds	r3, r7, #4
 80041e4:	881b      	ldrh	r3, [r3, #0]
 80041e6:	18d3      	adds	r3, r2, r3
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	1dfb      	adds	r3, r7, #7
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	b25b      	sxtb	r3, r3
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	18d3      	adds	r3, r2, r3
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	3ba4      	subs	r3, #164	; 0xa4
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	b219      	sxth	r1, r3
 80041fc:	4b0c      	ldr	r3, [pc, #48]	; (8004230 <SX1276OnDio0Irq+0x368>)
 80041fe:	225a      	movs	r2, #90	; 0x5a
 8004200:	5299      	strh	r1, [r3, r2]
 8004202:	e033      	b.n	800426c <SX1276OnDio0Irq+0x3a4>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8004204:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <SX1276OnDio0Irq+0x368>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	4a0f      	ldr	r2, [pc, #60]	; (8004248 <SX1276OnDio0Irq+0x380>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d91e      	bls.n	800424c <SX1276OnDio0Irq+0x384>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 800420e:	1d3b      	adds	r3, r7, #4
 8004210:	2200      	movs	r2, #0
 8004212:	5e9b      	ldrsh	r3, [r3, r2]
 8004214:	111b      	asrs	r3, r3, #4
 8004216:	b21b      	sxth	r3, r3
 8004218:	b29a      	uxth	r2, r3
 800421a:	1d3b      	adds	r3, r7, #4
 800421c:	881b      	ldrh	r3, [r3, #0]
 800421e:	18d3      	adds	r3, r2, r3
 8004220:	b29b      	uxth	r3, r3
 8004222:	3b9d      	subs	r3, #157	; 0x9d
 8004224:	b29b      	uxth	r3, r3
 8004226:	b219      	sxth	r1, r3
 8004228:	4b01      	ldr	r3, [pc, #4]	; (8004230 <SX1276OnDio0Irq+0x368>)
 800422a:	225a      	movs	r2, #90	; 0x5a
 800422c:	5299      	strh	r1, [r3, r2]
 800422e:	e01d      	b.n	800426c <SX1276OnDio0Irq+0x3a4>
 8004230:	20000ed8 	.word	0x20000ed8
 8004234:	20000f38 	.word	0x20000f38
 8004238:	20000ec4 	.word	0x20000ec4
 800423c:	200006bc 	.word	0x200006bc
 8004240:	20000f0e 	.word	0x20000f0e
 8004244:	200006c0 	.word	0x200006c0
 8004248:	1f4add40 	.word	0x1f4add40
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 800424c:	1d3b      	adds	r3, r7, #4
 800424e:	2200      	movs	r2, #0
 8004250:	5e9b      	ldrsh	r3, [r3, r2]
 8004252:	111b      	asrs	r3, r3, #4
 8004254:	b21b      	sxth	r3, r3
 8004256:	b29a      	uxth	r2, r3
 8004258:	1d3b      	adds	r3, r7, #4
 800425a:	881b      	ldrh	r3, [r3, #0]
 800425c:	18d3      	adds	r3, r2, r3
 800425e:	b29b      	uxth	r3, r3
 8004260:	3ba4      	subs	r3, #164	; 0xa4
 8004262:	b29b      	uxth	r3, r3
 8004264:	b219      	sxth	r1, r3
 8004266:	4b33      	ldr	r3, [pc, #204]	; (8004334 <SX1276OnDio0Irq+0x46c>)
 8004268:	225a      	movs	r2, #90	; 0x5a
 800426a:	5299      	strh	r1, [r3, r2]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 800426c:	2013      	movs	r0, #19
 800426e:	f7ff fcc8 	bl	8003c02 <SX1276Read>
 8004272:	0003      	movs	r3, r0
 8004274:	0019      	movs	r1, r3
 8004276:	4b2f      	ldr	r3, [pc, #188]	; (8004334 <SX1276OnDio0Irq+0x46c>)
 8004278:	225c      	movs	r2, #92	; 0x5c
 800427a:	5499      	strb	r1, [r3, r2]
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 800427c:	4b2d      	ldr	r3, [pc, #180]	; (8004334 <SX1276OnDio0Irq+0x46c>)
 800427e:	225c      	movs	r2, #92	; 0x5c
 8004280:	5c9a      	ldrb	r2, [r3, r2]
 8004282:	4b2d      	ldr	r3, [pc, #180]	; (8004338 <SX1276OnDio0Irq+0x470>)
 8004284:	0011      	movs	r1, r2
 8004286:	0018      	movs	r0, r3
 8004288:	f7ff fd6e 	bl	8003d68 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 800428c:	4b29      	ldr	r3, [pc, #164]	; (8004334 <SX1276OnDio0Irq+0x46c>)
 800428e:	2252      	movs	r2, #82	; 0x52
 8004290:	5c9b      	ldrb	r3, [r3, r2]
 8004292:	2201      	movs	r2, #1
 8004294:	4053      	eors	r3, r2
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b00      	cmp	r3, #0
 800429a:	d002      	beq.n	80042a2 <SX1276OnDio0Irq+0x3da>
                        SX1276.Settings.State = RF_IDLE;
 800429c:	4b25      	ldr	r3, [pc, #148]	; (8004334 <SX1276OnDio0Irq+0x46c>)
 800429e:	2200      	movs	r2, #0
 80042a0:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutTimer );
 80042a2:	4b26      	ldr	r3, [pc, #152]	; (800433c <SX1276OnDio0Irq+0x474>)
 80042a4:	0018      	movs	r0, r3
 80042a6:	f005 f939 	bl	800951c <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80042aa:	4b25      	ldr	r3, [pc, #148]	; (8004340 <SX1276OnDio0Irq+0x478>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d017      	beq.n	80042e2 <SX1276OnDio0Irq+0x41a>
 80042b2:	4b23      	ldr	r3, [pc, #140]	; (8004340 <SX1276OnDio0Irq+0x478>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d012      	beq.n	80042e2 <SX1276OnDio0Irq+0x41a>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 80042bc:	4b20      	ldr	r3, [pc, #128]	; (8004340 <SX1276OnDio0Irq+0x478>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689c      	ldr	r4, [r3, #8]
 80042c2:	4b1c      	ldr	r3, [pc, #112]	; (8004334 <SX1276OnDio0Irq+0x46c>)
 80042c4:	225c      	movs	r2, #92	; 0x5c
 80042c6:	5c9b      	ldrb	r3, [r3, r2]
 80042c8:	b299      	uxth	r1, r3
 80042ca:	4b1a      	ldr	r3, [pc, #104]	; (8004334 <SX1276OnDio0Irq+0x46c>)
 80042cc:	225a      	movs	r2, #90	; 0x5a
 80042ce:	5e9d      	ldrsh	r5, [r3, r2]
 80042d0:	4b18      	ldr	r3, [pc, #96]	; (8004334 <SX1276OnDio0Irq+0x46c>)
 80042d2:	2258      	movs	r2, #88	; 0x58
 80042d4:	569b      	ldrsb	r3, [r3, r2]
 80042d6:	4818      	ldr	r0, [pc, #96]	; (8004338 <SX1276OnDio0Irq+0x470>)
 80042d8:	002a      	movs	r2, r5
 80042da:	47a0      	blx	r4
                break;
 80042dc:	e001      	b.n	80042e2 <SX1276OnDio0Irq+0x41a>
                        break;
 80042de:	46c0      	nop			; (mov r8, r8)
 80042e0:	e023      	b.n	800432a <SX1276OnDio0Irq+0x462>
                break;
 80042e2:	46c0      	nop			; (mov r8, r8)
            break;
 80042e4:	e021      	b.n	800432a <SX1276OnDio0Irq+0x462>
            TimerStop( &TxTimeoutTimer );
 80042e6:	4b17      	ldr	r3, [pc, #92]	; (8004344 <SX1276OnDio0Irq+0x47c>)
 80042e8:	0018      	movs	r0, r3
 80042ea:	f005 f917 	bl	800951c <TimerStop>
            switch( SX1276.Settings.Modem )
 80042ee:	4b11      	ldr	r3, [pc, #68]	; (8004334 <SX1276OnDio0Irq+0x46c>)
 80042f0:	795b      	ldrb	r3, [r3, #5]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d103      	bne.n	80042fe <SX1276OnDio0Irq+0x436>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 80042f6:	2108      	movs	r1, #8
 80042f8:	2012      	movs	r0, #18
 80042fa:	f7ff fc6e 	bl	8003bda <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 80042fe:	4b0d      	ldr	r3, [pc, #52]	; (8004334 <SX1276OnDio0Irq+0x46c>)
 8004300:	2200      	movs	r2, #0
 8004302:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8004304:	4b0e      	ldr	r3, [pc, #56]	; (8004340 <SX1276OnDio0Irq+0x478>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00c      	beq.n	8004326 <SX1276OnDio0Irq+0x45e>
 800430c:	4b0c      	ldr	r3, [pc, #48]	; (8004340 <SX1276OnDio0Irq+0x478>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d007      	beq.n	8004326 <SX1276OnDio0Irq+0x45e>
                    RadioEvents->TxDone( );
 8004316:	4b0a      	ldr	r3, [pc, #40]	; (8004340 <SX1276OnDio0Irq+0x478>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4798      	blx	r3
                   PRINTF("txDone\n\r");
 800431e:	4b0a      	ldr	r3, [pc, #40]	; (8004348 <SX1276OnDio0Irq+0x480>)
 8004320:	0018      	movs	r0, r3
 8004322:	f006 fe09 	bl	800af38 <vcom_Send>
                break;
 8004326:	46c0      	nop			; (mov r8, r8)
            break;
 8004328:	46c0      	nop			; (mov r8, r8)
    }
}
 800432a:	46c0      	nop			; (mov r8, r8)
 800432c:	46bd      	mov	sp, r7
 800432e:	b002      	add	sp, #8
 8004330:	bdb0      	pop	{r4, r5, r7, pc}
 8004332:	46c0      	nop			; (mov r8, r8)
 8004334:	20000ed8 	.word	0x20000ed8
 8004338:	200006c0 	.word	0x200006c0
 800433c:	20000f38 	.word	0x20000f38
 8004340:	200006bc 	.word	0x200006bc
 8004344:	20000eb0 	.word	0x20000eb0
 8004348:	0800e574 	.word	0x0800e574

0800434c <SX1276OnDio1Irq>:

void SX1276OnDio1Irq( void )
{
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 8004350:	4b60      	ldr	r3, [pc, #384]	; (80044d4 <SX1276OnDio1Irq+0x188>)
 8004352:	791b      	ldrb	r3, [r3, #4]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d003      	beq.n	8004360 <SX1276OnDio1Irq+0x14>
 8004358:	2b02      	cmp	r3, #2
 800435a:	d100      	bne.n	800435e <SX1276OnDio1Irq+0x12>
 800435c:	e078      	b.n	8004450 <SX1276OnDio1Irq+0x104>
            default:
                break;
            }
            break;
        default:
            break;
 800435e:	e0b6      	b.n	80044ce <SX1276OnDio1Irq+0x182>
            switch( SX1276.Settings.Modem )
 8004360:	4b5c      	ldr	r3, [pc, #368]	; (80044d4 <SX1276OnDio1Irq+0x188>)
 8004362:	795b      	ldrb	r3, [r3, #5]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <SX1276OnDio1Irq+0x22>
 8004368:	2b01      	cmp	r3, #1
 800436a:	d053      	beq.n	8004414 <SX1276OnDio1Irq+0xc8>
                break;
 800436c:	e06f      	b.n	800444e <SX1276OnDio1Irq+0x102>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800436e:	4b59      	ldr	r3, [pc, #356]	; (80044d4 <SX1276OnDio1Irq+0x188>)
 8004370:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004372:	2b00      	cmp	r3, #0
 8004374:	d118      	bne.n	80043a8 <SX1276OnDio1Irq+0x5c>
 8004376:	4b57      	ldr	r3, [pc, #348]	; (80044d4 <SX1276OnDio1Irq+0x188>)
 8004378:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800437a:	2b00      	cmp	r3, #0
 800437c:	d114      	bne.n	80043a8 <SX1276OnDio1Irq+0x5c>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800437e:	4b55      	ldr	r3, [pc, #340]	; (80044d4 <SX1276OnDio1Irq+0x188>)
 8004380:	2222      	movs	r2, #34	; 0x22
 8004382:	5c9b      	ldrb	r3, [r3, r2]
 8004384:	2201      	movs	r2, #1
 8004386:	4053      	eors	r3, r2
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d005      	beq.n	800439a <SX1276OnDio1Irq+0x4e>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 800438e:	4b52      	ldr	r3, [pc, #328]	; (80044d8 <SX1276OnDio1Irq+0x18c>)
 8004390:	2101      	movs	r1, #1
 8004392:	0018      	movs	r0, r3
 8004394:	f7ff fce8 	bl	8003d68 <SX1276ReadFifo>
 8004398:	e006      	b.n	80043a8 <SX1276OnDio1Irq+0x5c>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800439a:	2032      	movs	r0, #50	; 0x32
 800439c:	f7ff fc31 	bl	8003c02 <SX1276Read>
 80043a0:	0003      	movs	r3, r0
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	4b4b      	ldr	r3, [pc, #300]	; (80044d4 <SX1276OnDio1Irq+0x188>)
 80043a6:	86da      	strh	r2, [r3, #54]	; 0x36
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.FifoThresh )
 80043a8:	4b4a      	ldr	r3, [pc, #296]	; (80044d4 <SX1276OnDio1Irq+0x188>)
 80043aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043ac:	001a      	movs	r2, r3
 80043ae:	4b49      	ldr	r3, [pc, #292]	; (80044d4 <SX1276OnDio1Irq+0x188>)
 80043b0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	4a47      	ldr	r2, [pc, #284]	; (80044d4 <SX1276OnDio1Irq+0x188>)
 80043b6:	213a      	movs	r1, #58	; 0x3a
 80043b8:	5c52      	ldrb	r2, [r2, r1]
 80043ba:	4293      	cmp	r3, r2
 80043bc:	dd15      	ble.n	80043ea <SX1276OnDio1Irq+0x9e>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh );
 80043be:	4b45      	ldr	r3, [pc, #276]	; (80044d4 <SX1276OnDio1Irq+0x188>)
 80043c0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80043c2:	001a      	movs	r2, r3
 80043c4:	4b45      	ldr	r3, [pc, #276]	; (80044dc <SX1276OnDio1Irq+0x190>)
 80043c6:	18d0      	adds	r0, r2, r3
 80043c8:	4b42      	ldr	r3, [pc, #264]	; (80044d4 <SX1276OnDio1Irq+0x188>)
 80043ca:	223a      	movs	r2, #58	; 0x3a
 80043cc:	5c9b      	ldrb	r3, [r3, r2]
 80043ce:	0019      	movs	r1, r3
 80043d0:	f7ff fcca 	bl	8003d68 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh;
 80043d4:	4b3f      	ldr	r3, [pc, #252]	; (80044d4 <SX1276OnDio1Irq+0x188>)
 80043d6:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80043d8:	4b3e      	ldr	r3, [pc, #248]	; (80044d4 <SX1276OnDio1Irq+0x188>)
 80043da:	213a      	movs	r1, #58	; 0x3a
 80043dc:	5c5b      	ldrb	r3, [r3, r1]
 80043de:	b29b      	uxth	r3, r3
 80043e0:	18d3      	adds	r3, r2, r3
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	4b3b      	ldr	r3, [pc, #236]	; (80044d4 <SX1276OnDio1Irq+0x188>)
 80043e6:	871a      	strh	r2, [r3, #56]	; 0x38
                break;
 80043e8:	e031      	b.n	800444e <SX1276OnDio1Irq+0x102>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80043ea:	4b3a      	ldr	r3, [pc, #232]	; (80044d4 <SX1276OnDio1Irq+0x188>)
 80043ec:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80043ee:	001a      	movs	r2, r3
 80043f0:	4b3a      	ldr	r3, [pc, #232]	; (80044dc <SX1276OnDio1Irq+0x190>)
 80043f2:	18d0      	adds	r0, r2, r3
 80043f4:	4b37      	ldr	r3, [pc, #220]	; (80044d4 <SX1276OnDio1Irq+0x188>)
 80043f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	4b36      	ldr	r3, [pc, #216]	; (80044d4 <SX1276OnDio1Irq+0x188>)
 80043fc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	b2db      	uxtb	r3, r3
 8004404:	0019      	movs	r1, r3
 8004406:	f7ff fcaf 	bl	8003d68 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800440a:	4b32      	ldr	r3, [pc, #200]	; (80044d4 <SX1276OnDio1Irq+0x188>)
 800440c:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800440e:	4b31      	ldr	r3, [pc, #196]	; (80044d4 <SX1276OnDio1Irq+0x188>)
 8004410:	871a      	strh	r2, [r3, #56]	; 0x38
                break;
 8004412:	e01c      	b.n	800444e <SX1276OnDio1Irq+0x102>
                TimerStop( &RxTimeoutTimer );
 8004414:	4b32      	ldr	r3, [pc, #200]	; (80044e0 <SX1276OnDio1Irq+0x194>)
 8004416:	0018      	movs	r0, r3
 8004418:	f005 f880 	bl	800951c <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 800441c:	2180      	movs	r1, #128	; 0x80
 800441e:	2012      	movs	r0, #18
 8004420:	f7ff fbdb 	bl	8003bda <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8004424:	4b2b      	ldr	r3, [pc, #172]	; (80044d4 <SX1276OnDio1Irq+0x188>)
 8004426:	2200      	movs	r2, #0
 8004428:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800442a:	4b2e      	ldr	r3, [pc, #184]	; (80044e4 <SX1276OnDio1Irq+0x198>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00c      	beq.n	800444c <SX1276OnDio1Irq+0x100>
 8004432:	4b2c      	ldr	r3, [pc, #176]	; (80044e4 <SX1276OnDio1Irq+0x198>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d007      	beq.n	800444c <SX1276OnDio1Irq+0x100>
                    RadioEvents->RxTimeout( );
 800443c:	4b29      	ldr	r3, [pc, #164]	; (80044e4 <SX1276OnDio1Irq+0x198>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	4798      	blx	r3
                    PRINTF("rxTimeOut\n\r");
 8004444:	4b28      	ldr	r3, [pc, #160]	; (80044e8 <SX1276OnDio1Irq+0x19c>)
 8004446:	0018      	movs	r0, r3
 8004448:	f006 fd76 	bl	800af38 <vcom_Send>
                break;
 800444c:	46c0      	nop			; (mov r8, r8)
            break;
 800444e:	e03e      	b.n	80044ce <SX1276OnDio1Irq+0x182>
            switch( SX1276.Settings.Modem )
 8004450:	4b20      	ldr	r3, [pc, #128]	; (80044d4 <SX1276OnDio1Irq+0x188>)
 8004452:	795b      	ldrb	r3, [r3, #5]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d002      	beq.n	800445e <SX1276OnDio1Irq+0x112>
 8004458:	2b01      	cmp	r3, #1
 800445a:	d036      	beq.n	80044ca <SX1276OnDio1Irq+0x17e>
                break;
 800445c:	e036      	b.n	80044cc <SX1276OnDio1Irq+0x180>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 800445e:	4b1d      	ldr	r3, [pc, #116]	; (80044d4 <SX1276OnDio1Irq+0x188>)
 8004460:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004462:	001a      	movs	r2, r3
 8004464:	4b1b      	ldr	r3, [pc, #108]	; (80044d4 <SX1276OnDio1Irq+0x188>)
 8004466:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	4a1a      	ldr	r2, [pc, #104]	; (80044d4 <SX1276OnDio1Irq+0x188>)
 800446c:	213b      	movs	r1, #59	; 0x3b
 800446e:	5c52      	ldrb	r2, [r2, r1]
 8004470:	4293      	cmp	r3, r2
 8004472:	dd15      	ble.n	80044a0 <SX1276OnDio1Irq+0x154>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8004474:	4b17      	ldr	r3, [pc, #92]	; (80044d4 <SX1276OnDio1Irq+0x188>)
 8004476:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004478:	001a      	movs	r2, r3
 800447a:	4b18      	ldr	r3, [pc, #96]	; (80044dc <SX1276OnDio1Irq+0x190>)
 800447c:	18d0      	adds	r0, r2, r3
 800447e:	4b15      	ldr	r3, [pc, #84]	; (80044d4 <SX1276OnDio1Irq+0x188>)
 8004480:	223b      	movs	r2, #59	; 0x3b
 8004482:	5c9b      	ldrb	r3, [r3, r2]
 8004484:	0019      	movs	r1, r3
 8004486:	f7ff fc5d 	bl	8003d44 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800448a:	4b12      	ldr	r3, [pc, #72]	; (80044d4 <SX1276OnDio1Irq+0x188>)
 800448c:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800448e:	4b11      	ldr	r3, [pc, #68]	; (80044d4 <SX1276OnDio1Irq+0x188>)
 8004490:	213b      	movs	r1, #59	; 0x3b
 8004492:	5c5b      	ldrb	r3, [r3, r1]
 8004494:	b29b      	uxth	r3, r3
 8004496:	18d3      	adds	r3, r2, r3
 8004498:	b29a      	uxth	r2, r3
 800449a:	4b0e      	ldr	r3, [pc, #56]	; (80044d4 <SX1276OnDio1Irq+0x188>)
 800449c:	871a      	strh	r2, [r3, #56]	; 0x38
                break;
 800449e:	e015      	b.n	80044cc <SX1276OnDio1Irq+0x180>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80044a0:	4b0c      	ldr	r3, [pc, #48]	; (80044d4 <SX1276OnDio1Irq+0x188>)
 80044a2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80044a4:	001a      	movs	r2, r3
 80044a6:	4b0d      	ldr	r3, [pc, #52]	; (80044dc <SX1276OnDio1Irq+0x190>)
 80044a8:	18d0      	adds	r0, r2, r3
 80044aa:	4b0a      	ldr	r3, [pc, #40]	; (80044d4 <SX1276OnDio1Irq+0x188>)
 80044ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044ae:	b2da      	uxtb	r2, r3
 80044b0:	4b08      	ldr	r3, [pc, #32]	; (80044d4 <SX1276OnDio1Irq+0x188>)
 80044b2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	0019      	movs	r1, r3
 80044bc:	f7ff fc42 	bl	8003d44 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 80044c0:	4b04      	ldr	r3, [pc, #16]	; (80044d4 <SX1276OnDio1Irq+0x188>)
 80044c2:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 80044c4:	4b03      	ldr	r3, [pc, #12]	; (80044d4 <SX1276OnDio1Irq+0x188>)
 80044c6:	871a      	strh	r2, [r3, #56]	; 0x38
                break;
 80044c8:	e000      	b.n	80044cc <SX1276OnDio1Irq+0x180>
                break;
 80044ca:	46c0      	nop			; (mov r8, r8)
            break;
 80044cc:	46c0      	nop			; (mov r8, r8)
    }
}
 80044ce:	46c0      	nop			; (mov r8, r8)
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	20000ed8 	.word	0x20000ed8
 80044d8:	20000f0e 	.word	0x20000f0e
 80044dc:	200006c0 	.word	0x200006c0
 80044e0:	20000f38 	.word	0x20000f38
 80044e4:	200006bc 	.word	0x200006bc
 80044e8:	0800e580 	.word	0x0800e580

080044ec <SX1276OnDio2Irq>:

void SX1276OnDio2Irq( void )
{
 80044ec:	b590      	push	{r4, r7, lr}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
    uint32_t afcChannel = 0;
 80044f2:	2300      	movs	r3, #0
 80044f4:	60fb      	str	r3, [r7, #12]
    
    switch( SX1276.Settings.State )
 80044f6:	4b58      	ldr	r3, [pc, #352]	; (8004658 <SX1276OnDio2Irq+0x16c>)
 80044f8:	791b      	ldrb	r3, [r3, #4]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d003      	beq.n	8004506 <SX1276OnDio2Irq+0x1a>
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d100      	bne.n	8004504 <SX1276OnDio2Irq+0x18>
 8004502:	e079      	b.n	80045f8 <SX1276OnDio2Irq+0x10c>
            default:
                break;
            }
            break;
        default:
            break;
 8004504:	e0a3      	b.n	800464e <SX1276OnDio2Irq+0x162>
            switch( SX1276.Settings.Modem )
 8004506:	4b54      	ldr	r3, [pc, #336]	; (8004658 <SX1276OnDio2Irq+0x16c>)
 8004508:	795b      	ldrb	r3, [r3, #5]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d002      	beq.n	8004514 <SX1276OnDio2Irq+0x28>
 800450e:	2b01      	cmp	r3, #1
 8004510:	d04e      	beq.n	80045b0 <SX1276OnDio2Irq+0xc4>
                break;
 8004512:	e070      	b.n	80045f6 <SX1276OnDio2Irq+0x10a>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8004514:	4b50      	ldr	r3, [pc, #320]	; (8004658 <SX1276OnDio2Irq+0x16c>)
 8004516:	222c      	movs	r2, #44	; 0x2c
 8004518:	2101      	movs	r1, #1
 800451a:	5499      	strb	r1, [r3, r2]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 800451c:	4b4e      	ldr	r3, [pc, #312]	; (8004658 <SX1276OnDio2Irq+0x16c>)
 800451e:	222c      	movs	r2, #44	; 0x2c
 8004520:	5c9b      	ldrb	r3, [r3, r2]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d164      	bne.n	80045f0 <SX1276OnDio2Irq+0x104>
 8004526:	4b4c      	ldr	r3, [pc, #304]	; (8004658 <SX1276OnDio2Irq+0x16c>)
 8004528:	222d      	movs	r2, #45	; 0x2d
 800452a:	5c9b      	ldrb	r3, [r3, r2]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d15f      	bne.n	80045f0 <SX1276OnDio2Irq+0x104>
                    TimerStop( &RxTimeoutSyncWord );
 8004530:	4b4a      	ldr	r3, [pc, #296]	; (800465c <SX1276OnDio2Irq+0x170>)
 8004532:	0018      	movs	r0, r3
 8004534:	f004 fff2 	bl	800951c <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8004538:	4b47      	ldr	r3, [pc, #284]	; (8004658 <SX1276OnDio2Irq+0x16c>)
 800453a:	222d      	movs	r2, #45	; 0x2d
 800453c:	2101      	movs	r1, #1
 800453e:	5499      	strb	r1, [r3, r2]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8004540:	2011      	movs	r0, #17
 8004542:	f7ff fb5e 	bl	8003c02 <SX1276Read>
 8004546:	0003      	movs	r3, r0
 8004548:	085b      	lsrs	r3, r3, #1
 800454a:	b2db      	uxtb	r3, r3
 800454c:	425b      	negs	r3, r3
 800454e:	b2db      	uxtb	r3, r3
 8004550:	b259      	sxtb	r1, r3
 8004552:	4b41      	ldr	r3, [pc, #260]	; (8004658 <SX1276OnDio2Irq+0x16c>)
 8004554:	222e      	movs	r2, #46	; 0x2e
 8004556:	5499      	strb	r1, [r3, r2]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8004558:	201b      	movs	r0, #27
 800455a:	f7ff fb52 	bl	8003c02 <SX1276Read>
 800455e:	0003      	movs	r3, r0
 8004560:	021c      	lsls	r4, r3, #8
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 8004562:	201c      	movs	r0, #28
 8004564:	f7ff fb4d 	bl	8003c02 <SX1276Read>
 8004568:	0003      	movs	r3, r0
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800456a:	4323      	orrs	r3, r4
 800456c:	60fb      	str	r3, [r7, #12]
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	0a1b      	lsrs	r3, r3, #8
 8004572:	60bb      	str	r3, [r7, #8]
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	021b      	lsls	r3, r3, #8
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	607b      	str	r3, [r7, #4]
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	4a37      	ldr	r2, [pc, #220]	; (8004660 <SX1276OnDio2Irq+0x174>)
 8004582:	435a      	muls	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4936      	ldr	r1, [pc, #216]	; (8004660 <SX1276OnDio2Irq+0x174>)
 8004588:	434b      	muls	r3, r1
 800458a:	3380      	adds	r3, #128	; 0x80
 800458c:	0a1b      	lsrs	r3, r3, #8
 800458e:	18d3      	adds	r3, r2, r3
 8004590:	001a      	movs	r2, r3
 8004592:	4b31      	ldr	r3, [pc, #196]	; (8004658 <SX1276OnDio2Irq+0x16c>)
 8004594:	631a      	str	r2, [r3, #48]	; 0x30
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8004596:	200c      	movs	r0, #12
 8004598:	f7ff fb33 	bl	8003c02 <SX1276Read>
 800459c:	0003      	movs	r3, r0
 800459e:	095b      	lsrs	r3, r3, #5
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2207      	movs	r2, #7
 80045a4:	4013      	ands	r3, r2
 80045a6:	b2d9      	uxtb	r1, r3
 80045a8:	4b2b      	ldr	r3, [pc, #172]	; (8004658 <SX1276OnDio2Irq+0x16c>)
 80045aa:	2234      	movs	r2, #52	; 0x34
 80045ac:	5499      	strb	r1, [r3, r2]
                break;
 80045ae:	e01f      	b.n	80045f0 <SX1276OnDio2Irq+0x104>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 80045b0:	4b29      	ldr	r3, [pc, #164]	; (8004658 <SX1276OnDio2Irq+0x16c>)
 80045b2:	224f      	movs	r2, #79	; 0x4f
 80045b4:	5c9b      	ldrb	r3, [r3, r2]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d01c      	beq.n	80045f4 <SX1276OnDio2Irq+0x108>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 80045ba:	2102      	movs	r1, #2
 80045bc:	2012      	movs	r0, #18
 80045be:	f7ff fb0c 	bl	8003bda <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 80045c2:	4b28      	ldr	r3, [pc, #160]	; (8004664 <SX1276OnDio2Irq+0x178>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d014      	beq.n	80045f4 <SX1276OnDio2Irq+0x108>
 80045ca:	4b26      	ldr	r3, [pc, #152]	; (8004664 <SX1276OnDio2Irq+0x178>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00f      	beq.n	80045f4 <SX1276OnDio2Irq+0x108>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 80045d4:	4b23      	ldr	r3, [pc, #140]	; (8004664 <SX1276OnDio2Irq+0x178>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	695c      	ldr	r4, [r3, #20]
 80045da:	201c      	movs	r0, #28
 80045dc:	f7ff fb11 	bl	8003c02 <SX1276Read>
 80045e0:	0003      	movs	r3, r0
 80045e2:	001a      	movs	r2, r3
 80045e4:	233f      	movs	r3, #63	; 0x3f
 80045e6:	4013      	ands	r3, r2
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	0018      	movs	r0, r3
 80045ec:	47a0      	blx	r4
                break;
 80045ee:	e001      	b.n	80045f4 <SX1276OnDio2Irq+0x108>
                break;
 80045f0:	46c0      	nop			; (mov r8, r8)
 80045f2:	e02c      	b.n	800464e <SX1276OnDio2Irq+0x162>
                break;
 80045f4:	46c0      	nop			; (mov r8, r8)
            break;
 80045f6:	e02a      	b.n	800464e <SX1276OnDio2Irq+0x162>
            switch( SX1276.Settings.Modem )
 80045f8:	4b17      	ldr	r3, [pc, #92]	; (8004658 <SX1276OnDio2Irq+0x16c>)
 80045fa:	795b      	ldrb	r3, [r3, #5]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d022      	beq.n	8004646 <SX1276OnDio2Irq+0x15a>
 8004600:	2b01      	cmp	r3, #1
 8004602:	d000      	beq.n	8004606 <SX1276OnDio2Irq+0x11a>
                break;
 8004604:	e022      	b.n	800464c <SX1276OnDio2Irq+0x160>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8004606:	4b14      	ldr	r3, [pc, #80]	; (8004658 <SX1276OnDio2Irq+0x16c>)
 8004608:	224f      	movs	r2, #79	; 0x4f
 800460a:	5c9b      	ldrb	r3, [r3, r2]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d01c      	beq.n	800464a <SX1276OnDio2Irq+0x15e>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8004610:	2102      	movs	r1, #2
 8004612:	2012      	movs	r0, #18
 8004614:	f7ff fae1 	bl	8003bda <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8004618:	4b12      	ldr	r3, [pc, #72]	; (8004664 <SX1276OnDio2Irq+0x178>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d014      	beq.n	800464a <SX1276OnDio2Irq+0x15e>
 8004620:	4b10      	ldr	r3, [pc, #64]	; (8004664 <SX1276OnDio2Irq+0x178>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00f      	beq.n	800464a <SX1276OnDio2Irq+0x15e>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800462a:	4b0e      	ldr	r3, [pc, #56]	; (8004664 <SX1276OnDio2Irq+0x178>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	695c      	ldr	r4, [r3, #20]
 8004630:	201c      	movs	r0, #28
 8004632:	f7ff fae6 	bl	8003c02 <SX1276Read>
 8004636:	0003      	movs	r3, r0
 8004638:	001a      	movs	r2, r3
 800463a:	233f      	movs	r3, #63	; 0x3f
 800463c:	4013      	ands	r3, r2
 800463e:	b2db      	uxtb	r3, r3
 8004640:	0018      	movs	r0, r3
 8004642:	47a0      	blx	r4
                break;
 8004644:	e001      	b.n	800464a <SX1276OnDio2Irq+0x15e>
                break;
 8004646:	46c0      	nop			; (mov r8, r8)
 8004648:	e000      	b.n	800464c <SX1276OnDio2Irq+0x160>
                break;
 800464a:	46c0      	nop			; (mov r8, r8)
            break;
 800464c:	46c0      	nop			; (mov r8, r8)
    }
}
 800464e:	46c0      	nop			; (mov r8, r8)
 8004650:	46bd      	mov	sp, r7
 8004652:	b005      	add	sp, #20
 8004654:	bd90      	pop	{r4, r7, pc}
 8004656:	46c0      	nop			; (mov r8, r8)
 8004658:	20000ed8 	.word	0x20000ed8
 800465c:	20000ec4 	.word	0x20000ec4
 8004660:	00003d09 	.word	0x00003d09
 8004664:	200006bc 	.word	0x200006bc

08004668 <SX1276OnDio3Irq>:

void SX1276OnDio3Irq( void )
{
 8004668:	b580      	push	{r7, lr}
 800466a:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 800466c:	4b1d      	ldr	r3, [pc, #116]	; (80046e4 <SX1276OnDio3Irq+0x7c>)
 800466e:	795b      	ldrb	r3, [r3, #5]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d031      	beq.n	80046d8 <SX1276OnDio3Irq+0x70>
 8004674:	2b01      	cmp	r3, #1
 8004676:	d000      	beq.n	800467a <SX1276OnDio3Irq+0x12>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 8004678:	e031      	b.n	80046de <SX1276OnDio3Irq+0x76>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 800467a:	2012      	movs	r0, #18
 800467c:	f7ff fac1 	bl	8003c02 <SX1276Read>
 8004680:	0003      	movs	r3, r0
 8004682:	001a      	movs	r2, r3
 8004684:	2301      	movs	r3, #1
 8004686:	4013      	ands	r3, r2
 8004688:	2b01      	cmp	r3, #1
 800468a:	d112      	bne.n	80046b2 <SX1276OnDio3Irq+0x4a>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 800468c:	2105      	movs	r1, #5
 800468e:	2012      	movs	r0, #18
 8004690:	f7ff faa3 	bl	8003bda <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8004694:	4b14      	ldr	r3, [pc, #80]	; (80046e8 <SX1276OnDio3Irq+0x80>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d01f      	beq.n	80046dc <SX1276OnDio3Irq+0x74>
 800469c:	4b12      	ldr	r3, [pc, #72]	; (80046e8 <SX1276OnDio3Irq+0x80>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d01a      	beq.n	80046dc <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( true );
 80046a6:	4b10      	ldr	r3, [pc, #64]	; (80046e8 <SX1276OnDio3Irq+0x80>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	2001      	movs	r0, #1
 80046ae:	4798      	blx	r3
        break;
 80046b0:	e014      	b.n	80046dc <SX1276OnDio3Irq+0x74>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 80046b2:	2104      	movs	r1, #4
 80046b4:	2012      	movs	r0, #18
 80046b6:	f7ff fa90 	bl	8003bda <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80046ba:	4b0b      	ldr	r3, [pc, #44]	; (80046e8 <SX1276OnDio3Irq+0x80>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00c      	beq.n	80046dc <SX1276OnDio3Irq+0x74>
 80046c2:	4b09      	ldr	r3, [pc, #36]	; (80046e8 <SX1276OnDio3Irq+0x80>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d007      	beq.n	80046dc <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( false );
 80046cc:	4b06      	ldr	r3, [pc, #24]	; (80046e8 <SX1276OnDio3Irq+0x80>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	2000      	movs	r0, #0
 80046d4:	4798      	blx	r3
        break;
 80046d6:	e001      	b.n	80046dc <SX1276OnDio3Irq+0x74>
        break;
 80046d8:	46c0      	nop			; (mov r8, r8)
 80046da:	e000      	b.n	80046de <SX1276OnDio3Irq+0x76>
        break;
 80046dc:	46c0      	nop			; (mov r8, r8)
    }
}
 80046de:	46c0      	nop			; (mov r8, r8)
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	20000ed8 	.word	0x20000ed8
 80046e8:	200006bc 	.word	0x200006bc

080046ec <SX1276OnDio4Irq>:

void SX1276OnDio4Irq( void )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 80046f0:	4b0b      	ldr	r3, [pc, #44]	; (8004720 <SX1276OnDio4Irq+0x34>)
 80046f2:	795b      	ldrb	r3, [r3, #5]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <SX1276OnDio4Irq+0x12>
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d00a      	beq.n	8004712 <SX1276OnDio4Irq+0x26>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 80046fc:	e00c      	b.n	8004718 <SX1276OnDio4Irq+0x2c>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 80046fe:	4b08      	ldr	r3, [pc, #32]	; (8004720 <SX1276OnDio4Irq+0x34>)
 8004700:	222c      	movs	r2, #44	; 0x2c
 8004702:	5c9b      	ldrb	r3, [r3, r2]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d106      	bne.n	8004716 <SX1276OnDio4Irq+0x2a>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8004708:	4b05      	ldr	r3, [pc, #20]	; (8004720 <SX1276OnDio4Irq+0x34>)
 800470a:	222c      	movs	r2, #44	; 0x2c
 800470c:	2101      	movs	r1, #1
 800470e:	5499      	strb	r1, [r3, r2]
        break;
 8004710:	e001      	b.n	8004716 <SX1276OnDio4Irq+0x2a>
        break;
 8004712:	46c0      	nop			; (mov r8, r8)
 8004714:	e000      	b.n	8004718 <SX1276OnDio4Irq+0x2c>
        break;
 8004716:	46c0      	nop			; (mov r8, r8)
    }
}
 8004718:	46c0      	nop			; (mov r8, r8)
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	46c0      	nop			; (mov r8, r8)
 8004720:	20000ed8 	.word	0x20000ed8

08004724 <SX1276IoInit>:
  SX1276SetMaxPayloadLength
};


void SX1276IoInit( void )
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 800472a:	1d3b      	adds	r3, r7, #4
 800472c:	0018      	movs	r0, r3
 800472e:	2314      	movs	r3, #20
 8004730:	001a      	movs	r2, r3
 8004732:	2100      	movs	r1, #0
 8004734:	f006 fda5 	bl	800b282 <memset>
  
  initStruct.Mode =GPIO_MODE_IT_RISING;
 8004738:	1d3b      	adds	r3, r7, #4
 800473a:	4a19      	ldr	r2, [pc, #100]	; (80047a0 <SX1276IoInit+0x7c>)
 800473c:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_PULLUP;
 800473e:	1d3b      	adds	r3, r7, #4
 8004740:	2201      	movs	r2, #1
 8004742:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8004744:	1d3b      	adds	r3, r7, #4
 8004746:	2203      	movs	r2, #3
 8004748:	60da      	str	r2, [r3, #12]

  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 800474a:	1d3b      	adds	r3, r7, #4
 800474c:	4815      	ldr	r0, [pc, #84]	; (80047a4 <SX1276IoInit+0x80>)
 800474e:	001a      	movs	r2, r3
 8004750:	2110      	movs	r1, #16
 8004752:	f005 f803 	bl	800975c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 8004756:	1d3b      	adds	r3, r7, #4
 8004758:	4812      	ldr	r0, [pc, #72]	; (80047a4 <SX1276IoInit+0x80>)
 800475a:	001a      	movs	r2, r3
 800475c:	2102      	movs	r1, #2
 800475e:	f004 fffd 	bl	800975c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 8004762:	1d3b      	adds	r3, r7, #4
 8004764:	480f      	ldr	r0, [pc, #60]	; (80047a4 <SX1276IoInit+0x80>)
 8004766:	001a      	movs	r2, r3
 8004768:	2101      	movs	r1, #1
 800476a:	f004 fff7 	bl	800975c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 800476e:	1d3a      	adds	r2, r7, #4
 8004770:	2380      	movs	r3, #128	; 0x80
 8004772:	019b      	lsls	r3, r3, #6
 8004774:	480c      	ldr	r0, [pc, #48]	; (80047a8 <SX1276IoInit+0x84>)
 8004776:	0019      	movs	r1, r3
 8004778:	f004 fff0 	bl	800975c <HW_GPIO_Init>
  
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 800477c:	1d3b      	adds	r3, r7, #4
 800477e:	2201      	movs	r2, #1
 8004780:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;  
 8004782:	1d3b      	adds	r3, r7, #4
 8004784:	2200      	movs	r2, #0
 8004786:	609a      	str	r2, [r3, #8]
  HW_GPIO_Init( RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, &initStruct );
 8004788:	1d3a      	adds	r2, r7, #4
 800478a:	2380      	movs	r3, #128	; 0x80
 800478c:	0159      	lsls	r1, r3, #5
 800478e:	23a0      	movs	r3, #160	; 0xa0
 8004790:	05db      	lsls	r3, r3, #23
 8004792:	0018      	movs	r0, r3
 8004794:	f004 ffe2 	bl	800975c <HW_GPIO_Init>
}
 8004798:	46c0      	nop			; (mov r8, r8)
 800479a:	46bd      	mov	sp, r7
 800479c:	b006      	add	sp, #24
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	10110000 	.word	0x10110000
 80047a4:	50000400 	.word	0x50000400
 80047a8:	50000800 	.word	0x50000800

080047ac <SX1276IoIrqInit>:

void SX1276IoIrqInit( DioIrqHandler **irqHandlers )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4811      	ldr	r0, [pc, #68]	; (8004800 <SX1276IoIrqInit+0x54>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	2110      	movs	r1, #16
 80047be:	f005 f841 	bl	8009844 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	3304      	adds	r3, #4
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	480d      	ldr	r0, [pc, #52]	; (8004800 <SX1276IoIrqInit+0x54>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	2102      	movs	r1, #2
 80047ce:	f005 f839 	bl	8009844 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	3308      	adds	r3, #8
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4809      	ldr	r0, [pc, #36]	; (8004800 <SX1276IoIrqInit+0x54>)
 80047da:	2200      	movs	r2, #0
 80047dc:	2101      	movs	r1, #1
 80047de:	f005 f831 	bl	8009844 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	330c      	adds	r3, #12
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	2380      	movs	r3, #128	; 0x80
 80047ea:	0199      	lsls	r1, r3, #6
 80047ec:	4805      	ldr	r0, [pc, #20]	; (8004804 <SX1276IoIrqInit+0x58>)
 80047ee:	0013      	movs	r3, r2
 80047f0:	2200      	movs	r2, #0
 80047f2:	f005 f827 	bl	8009844 <HW_GPIO_SetIrq>
}
 80047f6:	46c0      	nop			; (mov r8, r8)
 80047f8:	46bd      	mov	sp, r7
 80047fa:	b002      	add	sp, #8
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	46c0      	nop			; (mov r8, r8)
 8004800:	50000400 	.word	0x50000400
 8004804:	50000800 	.word	0x50000800

08004808 <SX1276IoDeInit>:


void SX1276IoDeInit( void )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 800480e:	1d3b      	adds	r3, r7, #4
 8004810:	0018      	movs	r0, r3
 8004812:	2314      	movs	r3, #20
 8004814:	001a      	movs	r2, r3
 8004816:	2100      	movs	r1, #0
 8004818:	f006 fd33 	bl	800b282 <memset>

  initStruct.Mode = GPIO_MODE_IT_RISING ; //GPIO_MODE_ANALOG;
 800481c:	1d3b      	adds	r3, r7, #4
 800481e:	4a11      	ldr	r2, [pc, #68]	; (8004864 <SX1276IoDeInit+0x5c>)
 8004820:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_PULLDOWN;
 8004822:	1d3b      	adds	r3, r7, #4
 8004824:	2202      	movs	r2, #2
 8004826:	609a      	str	r2, [r3, #8]
  
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8004828:	1d3b      	adds	r3, r7, #4
 800482a:	480f      	ldr	r0, [pc, #60]	; (8004868 <SX1276IoDeInit+0x60>)
 800482c:	001a      	movs	r2, r3
 800482e:	2110      	movs	r1, #16
 8004830:	f004 ff94 	bl	800975c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 8004834:	1d3b      	adds	r3, r7, #4
 8004836:	480c      	ldr	r0, [pc, #48]	; (8004868 <SX1276IoDeInit+0x60>)
 8004838:	001a      	movs	r2, r3
 800483a:	2102      	movs	r1, #2
 800483c:	f004 ff8e 	bl	800975c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 8004840:	1d3b      	adds	r3, r7, #4
 8004842:	4809      	ldr	r0, [pc, #36]	; (8004868 <SX1276IoDeInit+0x60>)
 8004844:	001a      	movs	r2, r3
 8004846:	2101      	movs	r1, #1
 8004848:	f004 ff88 	bl	800975c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 800484c:	1d3a      	adds	r2, r7, #4
 800484e:	2380      	movs	r3, #128	; 0x80
 8004850:	019b      	lsls	r3, r3, #6
 8004852:	4806      	ldr	r0, [pc, #24]	; (800486c <SX1276IoDeInit+0x64>)
 8004854:	0019      	movs	r1, r3
 8004856:	f004 ff81 	bl	800975c <HW_GPIO_Init>
}
 800485a:	46c0      	nop			; (mov r8, r8)
 800485c:	46bd      	mov	sp, r7
 800485e:	b006      	add	sp, #24
 8004860:	bd80      	pop	{r7, pc}
 8004862:	46c0      	nop			; (mov r8, r8)
 8004864:	10110000 	.word	0x10110000
 8004868:	50000400 	.word	0x50000400
 800486c:	50000800 	.word	0x50000800

08004870 <SX1276SetRfTxPower>:

void SX1276SetRfTxPower( int8_t power )
{
 8004870:	b590      	push	{r4, r7, lr}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	0002      	movs	r2, r0
 8004878:	1dfb      	adds	r3, r7, #7
 800487a:	701a      	strb	r2, [r3, #0]
    uint8_t paConfig = 0;
 800487c:	230f      	movs	r3, #15
 800487e:	18fb      	adds	r3, r7, r3
 8004880:	2200      	movs	r2, #0
 8004882:	701a      	strb	r2, [r3, #0]
    uint8_t paDac = 0;
 8004884:	230e      	movs	r3, #14
 8004886:	18fb      	adds	r3, r7, r3
 8004888:	2200      	movs	r2, #0
 800488a:	701a      	strb	r2, [r3, #0]

    paConfig = SX1276Read( REG_PACONFIG );
 800488c:	230f      	movs	r3, #15
 800488e:	18fc      	adds	r4, r7, r3
 8004890:	2009      	movs	r0, #9
 8004892:	f7ff f9b6 	bl	8003c02 <SX1276Read>
 8004896:	0003      	movs	r3, r0
 8004898:	7023      	strb	r3, [r4, #0]
    paDac = SX1276Read( REG_PADAC );
 800489a:	230e      	movs	r3, #14
 800489c:	18fc      	adds	r4, r7, r3
 800489e:	204d      	movs	r0, #77	; 0x4d
 80048a0:	f7ff f9af 	bl	8003c02 <SX1276Read>
 80048a4:	0003      	movs	r3, r0
 80048a6:	7023      	strb	r3, [r4, #0]

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( SX1276.Settings.Channel );
 80048a8:	230f      	movs	r3, #15
 80048aa:	18fb      	adds	r3, r7, r3
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	b25b      	sxtb	r3, r3
 80048b0:	227f      	movs	r2, #127	; 0x7f
 80048b2:	4013      	ands	r3, r2
 80048b4:	b25c      	sxtb	r4, r3
 80048b6:	4b5e      	ldr	r3, [pc, #376]	; (8004a30 <SX1276SetRfTxPower+0x1c0>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	0018      	movs	r0, r3
 80048bc:	f000 f8ba 	bl	8004a34 <SX1276GetPaSelect>
 80048c0:	0003      	movs	r3, r0
 80048c2:	b25b      	sxtb	r3, r3
 80048c4:	4323      	orrs	r3, r4
 80048c6:	b25a      	sxtb	r2, r3
 80048c8:	230f      	movs	r3, #15
 80048ca:	18fb      	adds	r3, r7, r3
 80048cc:	701a      	strb	r2, [r3, #0]
    paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK ) | 0x70;
 80048ce:	230f      	movs	r3, #15
 80048d0:	18fb      	adds	r3, r7, r3
 80048d2:	220f      	movs	r2, #15
 80048d4:	18ba      	adds	r2, r7, r2
 80048d6:	7812      	ldrb	r2, [r2, #0]
 80048d8:	2170      	movs	r1, #112	; 0x70
 80048da:	430a      	orrs	r2, r1
 80048dc:	701a      	strb	r2, [r3, #0]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 80048de:	230f      	movs	r3, #15
 80048e0:	18fb      	adds	r3, r7, r3
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	b25b      	sxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	da6b      	bge.n	80049c2 <SX1276SetRfTxPower+0x152>
    {
        if( power > 17 )
 80048ea:	1dfb      	adds	r3, r7, #7
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	b25b      	sxtb	r3, r3
 80048f0:	2b11      	cmp	r3, #17
 80048f2:	dd08      	ble.n	8004906 <SX1276SetRfTxPower+0x96>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 80048f4:	230e      	movs	r3, #14
 80048f6:	18fb      	adds	r3, r7, r3
 80048f8:	220e      	movs	r2, #14
 80048fa:	18ba      	adds	r2, r7, r2
 80048fc:	7812      	ldrb	r2, [r2, #0]
 80048fe:	2107      	movs	r1, #7
 8004900:	430a      	orrs	r2, r1
 8004902:	701a      	strb	r2, [r3, #0]
 8004904:	e00c      	b.n	8004920 <SX1276SetRfTxPower+0xb0>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 8004906:	230e      	movs	r3, #14
 8004908:	18fb      	adds	r3, r7, r3
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	b25b      	sxtb	r3, r3
 800490e:	2207      	movs	r2, #7
 8004910:	4393      	bics	r3, r2
 8004912:	b25b      	sxtb	r3, r3
 8004914:	2204      	movs	r2, #4
 8004916:	4313      	orrs	r3, r2
 8004918:	b25a      	sxtb	r2, r3
 800491a:	230e      	movs	r3, #14
 800491c:	18fb      	adds	r3, r7, r3
 800491e:	701a      	strb	r2, [r3, #0]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 8004920:	230e      	movs	r3, #14
 8004922:	18fb      	adds	r3, r7, r3
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	2207      	movs	r2, #7
 8004928:	4013      	ands	r3, r2
 800492a:	2b07      	cmp	r3, #7
 800492c:	d124      	bne.n	8004978 <SX1276SetRfTxPower+0x108>
        {
            if( power < 5 )
 800492e:	1dfb      	adds	r3, r7, #7
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	b25b      	sxtb	r3, r3
 8004934:	2b04      	cmp	r3, #4
 8004936:	dc02      	bgt.n	800493e <SX1276SetRfTxPower+0xce>
            {
                power = 5;
 8004938:	1dfb      	adds	r3, r7, #7
 800493a:	2205      	movs	r2, #5
 800493c:	701a      	strb	r2, [r3, #0]
            }
            if( power > 20 )
 800493e:	1dfb      	adds	r3, r7, #7
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	b25b      	sxtb	r3, r3
 8004944:	2b14      	cmp	r3, #20
 8004946:	dd02      	ble.n	800494e <SX1276SetRfTxPower+0xde>
            {
                power = 20;
 8004948:	1dfb      	adds	r3, r7, #7
 800494a:	2214      	movs	r2, #20
 800494c:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 800494e:	230f      	movs	r3, #15
 8004950:	18fb      	adds	r3, r7, r3
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	b25b      	sxtb	r3, r3
 8004956:	220f      	movs	r2, #15
 8004958:	4393      	bics	r3, r2
 800495a:	b25a      	sxtb	r2, r3
 800495c:	1dfb      	adds	r3, r7, #7
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	3b05      	subs	r3, #5
 8004962:	b2db      	uxtb	r3, r3
 8004964:	b25b      	sxtb	r3, r3
 8004966:	210f      	movs	r1, #15
 8004968:	400b      	ands	r3, r1
 800496a:	b25b      	sxtb	r3, r3
 800496c:	4313      	orrs	r3, r2
 800496e:	b25a      	sxtb	r2, r3
 8004970:	230f      	movs	r3, #15
 8004972:	18fb      	adds	r3, r7, r3
 8004974:	701a      	strb	r2, [r3, #0]
 8004976:	e048      	b.n	8004a0a <SX1276SetRfTxPower+0x19a>
        }
        else
        {
            if( power < 2 )
 8004978:	1dfb      	adds	r3, r7, #7
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	b25b      	sxtb	r3, r3
 800497e:	2b01      	cmp	r3, #1
 8004980:	dc02      	bgt.n	8004988 <SX1276SetRfTxPower+0x118>
            {
                power = 2;
 8004982:	1dfb      	adds	r3, r7, #7
 8004984:	2202      	movs	r2, #2
 8004986:	701a      	strb	r2, [r3, #0]
            }
            if( power > 17 )
 8004988:	1dfb      	adds	r3, r7, #7
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	b25b      	sxtb	r3, r3
 800498e:	2b11      	cmp	r3, #17
 8004990:	dd02      	ble.n	8004998 <SX1276SetRfTxPower+0x128>
            {
                power = 17;
 8004992:	1dfb      	adds	r3, r7, #7
 8004994:	2211      	movs	r2, #17
 8004996:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8004998:	230f      	movs	r3, #15
 800499a:	18fb      	adds	r3, r7, r3
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	b25b      	sxtb	r3, r3
 80049a0:	220f      	movs	r2, #15
 80049a2:	4393      	bics	r3, r2
 80049a4:	b25a      	sxtb	r2, r3
 80049a6:	1dfb      	adds	r3, r7, #7
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	3b02      	subs	r3, #2
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	b25b      	sxtb	r3, r3
 80049b0:	210f      	movs	r1, #15
 80049b2:	400b      	ands	r3, r1
 80049b4:	b25b      	sxtb	r3, r3
 80049b6:	4313      	orrs	r3, r2
 80049b8:	b25a      	sxtb	r2, r3
 80049ba:	230f      	movs	r3, #15
 80049bc:	18fb      	adds	r3, r7, r3
 80049be:	701a      	strb	r2, [r3, #0]
 80049c0:	e023      	b.n	8004a0a <SX1276SetRfTxPower+0x19a>
        }
    }
    else
    {
        if( power < -1 )
 80049c2:	1dfb      	adds	r3, r7, #7
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	b25b      	sxtb	r3, r3
 80049c8:	3301      	adds	r3, #1
 80049ca:	da02      	bge.n	80049d2 <SX1276SetRfTxPower+0x162>
        {
            power = -1;
 80049cc:	1dfb      	adds	r3, r7, #7
 80049ce:	22ff      	movs	r2, #255	; 0xff
 80049d0:	701a      	strb	r2, [r3, #0]
        }
        if( power > 14 )
 80049d2:	1dfb      	adds	r3, r7, #7
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	b25b      	sxtb	r3, r3
 80049d8:	2b0e      	cmp	r3, #14
 80049da:	dd02      	ble.n	80049e2 <SX1276SetRfTxPower+0x172>
        {
            power = 14;
 80049dc:	1dfb      	adds	r3, r7, #7
 80049de:	220e      	movs	r2, #14
 80049e0:	701a      	strb	r2, [r3, #0]
        }
        paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
 80049e2:	230f      	movs	r3, #15
 80049e4:	18fb      	adds	r3, r7, r3
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	b25b      	sxtb	r3, r3
 80049ea:	220f      	movs	r2, #15
 80049ec:	4393      	bics	r3, r2
 80049ee:	b25a      	sxtb	r2, r3
 80049f0:	1dfb      	adds	r3, r7, #7
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	3301      	adds	r3, #1
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	b25b      	sxtb	r3, r3
 80049fa:	210f      	movs	r1, #15
 80049fc:	400b      	ands	r3, r1
 80049fe:	b25b      	sxtb	r3, r3
 8004a00:	4313      	orrs	r3, r2
 8004a02:	b25a      	sxtb	r2, r3
 8004a04:	230f      	movs	r3, #15
 8004a06:	18fb      	adds	r3, r7, r3
 8004a08:	701a      	strb	r2, [r3, #0]
    }
    SX1276Write( REG_PACONFIG, paConfig );
 8004a0a:	230f      	movs	r3, #15
 8004a0c:	18fb      	adds	r3, r7, r3
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	0019      	movs	r1, r3
 8004a12:	2009      	movs	r0, #9
 8004a14:	f7ff f8e1 	bl	8003bda <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 8004a18:	230e      	movs	r3, #14
 8004a1a:	18fb      	adds	r3, r7, r3
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	0019      	movs	r1, r3
 8004a20:	204d      	movs	r0, #77	; 0x4d
 8004a22:	f7ff f8da 	bl	8003bda <SX1276Write>
}
 8004a26:	46c0      	nop			; (mov r8, r8)
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	b005      	add	sp, #20
 8004a2c:	bd90      	pop	{r4, r7, pc}
 8004a2e:	46c0      	nop			; (mov r8, r8)
 8004a30:	20000ed8 	.word	0x20000ed8

08004a34 <SX1276GetPaSelect>:
uint8_t SX1276GetPaSelect( uint32_t channel )
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
    return RF_PACONFIG_PASELECT_RFO;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	0018      	movs	r0, r3
 8004a40:	46bd      	mov	sp, r7
 8004a42:	b002      	add	sp, #8
 8004a44:	bd80      	pop	{r7, pc}
	...

08004a48 <SX1276SetAntSwLowPower>:



void SX1276SetAntSwLowPower( bool status )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	0002      	movs	r2, r0
 8004a50:	1dfb      	adds	r3, r7, #7
 8004a52:	701a      	strb	r2, [r3, #0]
  if( RadioIsActive != status )
 8004a54:	4b1b      	ldr	r3, [pc, #108]	; (8004ac4 <SX1276SetAntSwLowPower+0x7c>)
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	1dfa      	adds	r2, r7, #7
 8004a5a:	7812      	ldrb	r2, [r2, #0]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d02d      	beq.n	8004abc <SX1276SetAntSwLowPower+0x74>
  {
    RadioIsActive = status;
 8004a60:	4b18      	ldr	r3, [pc, #96]	; (8004ac4 <SX1276SetAntSwLowPower+0x7c>)
 8004a62:	1dfa      	adds	r2, r7, #7
 8004a64:	7812      	ldrb	r2, [r2, #0]
 8004a66:	701a      	strb	r2, [r3, #0]
    
    if( status == false )
 8004a68:	1dfb      	adds	r3, r7, #7
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	4053      	eors	r3, r2
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d011      	beq.n	8004a9a <SX1276SetAntSwLowPower+0x52>
    {
      TimerStop( &TcxoStopTimer );
 8004a76:	4b14      	ldr	r3, [pc, #80]	; (8004ac8 <SX1276SetAntSwLowPower+0x80>)
 8004a78:	0018      	movs	r0, r3
 8004a7a:	f004 fd4f 	bl	800951c <TimerStop>
      
      MLM_TCXO_ON();  //TCXO ON
 8004a7e:	2380      	movs	r3, #128	; 0x80
 8004a80:	0159      	lsls	r1, r3, #5
 8004a82:	23a0      	movs	r3, #160	; 0xa0
 8004a84:	05db      	lsls	r3, r3, #23
 8004a86:	2201      	movs	r2, #1
 8004a88:	0018      	movs	r0, r3
 8004a8a:	f004 ff33 	bl	80098f4 <HW_GPIO_Write>
      
      DelayMs( BOARD_WAKEUP_TIME ); //start up time of TCXO
 8004a8e:	2003      	movs	r0, #3
 8004a90:	f004 fbc2 	bl	8009218 <DelayMs>
      
      SX1276AntSwInit( );
 8004a94:	f000 f81c 	bl	8004ad0 <SX1276AntSwInit>
      TimerSetValue( &TcxoStopTimer, TCXO_OFF_DELAY);
      
      TimerStart( &TcxoStopTimer );
    }
  }
}
 8004a98:	e010      	b.n	8004abc <SX1276SetAntSwLowPower+0x74>
      SX1276AntSwDeInit( );
 8004a9a:	f000 f859 	bl	8004b50 <SX1276AntSwDeInit>
      TimerInit( &TcxoStopTimer, OnTcxoStopTimerEvent );
 8004a9e:	4a0b      	ldr	r2, [pc, #44]	; (8004acc <SX1276SetAntSwLowPower+0x84>)
 8004aa0:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <SX1276SetAntSwLowPower+0x80>)
 8004aa2:	0011      	movs	r1, r2
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	f004 fc0b 	bl	80092c0 <TimerInit>
      TimerSetValue( &TcxoStopTimer, TCXO_OFF_DELAY);
 8004aaa:	4b07      	ldr	r3, [pc, #28]	; (8004ac8 <SX1276SetAntSwLowPower+0x80>)
 8004aac:	2102      	movs	r1, #2
 8004aae:	0018      	movs	r0, r3
 8004ab0:	f004 fdc8 	bl	8009644 <TimerSetValue>
      TimerStart( &TcxoStopTimer );
 8004ab4:	4b04      	ldr	r3, [pc, #16]	; (8004ac8 <SX1276SetAntSwLowPower+0x80>)
 8004ab6:	0018      	movs	r0, r3
 8004ab8:	f004 fc1a 	bl	80092f0 <TimerStart>
}
 8004abc:	46c0      	nop			; (mov r8, r8)
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	b002      	add	sp, #8
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	200007d4 	.word	0x200007d4
 8004ac8:	200007c0 	.word	0x200007c0
 8004acc:	08004c49 	.word	0x08004c49

08004ad0 <SX1276AntSwInit>:

static void SX1276AntSwInit( void )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 8004ad6:	1d3b      	adds	r3, r7, #4
 8004ad8:	0018      	movs	r0, r3
 8004ada:	2314      	movs	r3, #20
 8004adc:	001a      	movs	r2, r3
 8004ade:	2100      	movs	r1, #0
 8004ae0:	f006 fbcf 	bl	800b282 <memset>

  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8004ae4:	1d3b      	adds	r3, r7, #4
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL; //GPIO_PULLUP;
 8004aea:	1d3b      	adds	r3, r7, #4
 8004aec:	2200      	movs	r2, #0
 8004aee:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8004af0:	1d3b      	adds	r3, r7, #4
 8004af2:	2203      	movs	r2, #3
 8004af4:	60da      	str	r2, [r3, #12]
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, &initStruct  ); 
 8004af6:	1d3a      	adds	r2, r7, #4
 8004af8:	23a0      	movs	r3, #160	; 0xa0
 8004afa:	05db      	lsls	r3, r3, #23
 8004afc:	2102      	movs	r1, #2
 8004afe:	0018      	movs	r0, r3
 8004b00:	f004 fe2c 	bl	800975c <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 0);
 8004b04:	23a0      	movs	r3, #160	; 0xa0
 8004b06:	05db      	lsls	r3, r3, #23
 8004b08:	2200      	movs	r2, #0
 8004b0a:	2102      	movs	r1, #2
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	f004 fef1 	bl	80098f4 <HW_GPIO_Write>
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, &initStruct  ); 
 8004b12:	1d3b      	adds	r3, r7, #4
 8004b14:	480d      	ldr	r0, [pc, #52]	; (8004b4c <SX1276AntSwInit+0x7c>)
 8004b16:	001a      	movs	r2, r3
 8004b18:	2102      	movs	r1, #2
 8004b1a:	f004 fe1f 	bl	800975c <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 0);
 8004b1e:	4b0b      	ldr	r3, [pc, #44]	; (8004b4c <SX1276AntSwInit+0x7c>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	2102      	movs	r1, #2
 8004b24:	0018      	movs	r0, r3
 8004b26:	f004 fee5 	bl	80098f4 <HW_GPIO_Write>
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, &initStruct  ); 
 8004b2a:	1d3b      	adds	r3, r7, #4
 8004b2c:	4807      	ldr	r0, [pc, #28]	; (8004b4c <SX1276AntSwInit+0x7c>)
 8004b2e:	001a      	movs	r2, r3
 8004b30:	2104      	movs	r1, #4
 8004b32:	f004 fe13 	bl	800975c <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 0);
 8004b36:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <SX1276AntSwInit+0x7c>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	2104      	movs	r1, #4
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	f004 fed9 	bl	80098f4 <HW_GPIO_Write>
}
 8004b42:	46c0      	nop			; (mov r8, r8)
 8004b44:	46bd      	mov	sp, r7
 8004b46:	b006      	add	sp, #24
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	46c0      	nop			; (mov r8, r8)
 8004b4c:	50000800 	.word	0x50000800

08004b50 <SX1276AntSwDeInit>:

static void SX1276AntSwDeInit( void )
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 8004b56:	1d3b      	adds	r3, r7, #4
 8004b58:	0018      	movs	r0, r3
 8004b5a:	2314      	movs	r3, #20
 8004b5c:	001a      	movs	r2, r3
 8004b5e:	2100      	movs	r1, #0
 8004b60:	f006 fb8f 	bl	800b282 <memset>

  initStruct.Mode = GPIO_MODE_ANALOG ;
 8004b64:	1d3b      	adds	r3, r7, #4
 8004b66:	2203      	movs	r2, #3
 8004b68:	605a      	str	r2, [r3, #4]
  
  initStruct.Pull = GPIO_NOPULL;
 8004b6a:	1d3b      	adds	r3, r7, #4
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8004b70:	1d3b      	adds	r3, r7, #4
 8004b72:	2203      	movs	r2, #3
 8004b74:	60da      	str	r2, [r3, #12]

  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, &initStruct  ); 
 8004b76:	1d3a      	adds	r2, r7, #4
 8004b78:	23a0      	movs	r3, #160	; 0xa0
 8004b7a:	05db      	lsls	r3, r3, #23
 8004b7c:	2102      	movs	r1, #2
 8004b7e:	0018      	movs	r0, r3
 8004b80:	f004 fdec 	bl	800975c <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 0);
 8004b84:	23a0      	movs	r3, #160	; 0xa0
 8004b86:	05db      	lsls	r3, r3, #23
 8004b88:	2200      	movs	r2, #0
 8004b8a:	2102      	movs	r1, #2
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	f004 feb1 	bl	80098f4 <HW_GPIO_Write>
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, &initStruct  ); 
 8004b92:	1d3b      	adds	r3, r7, #4
 8004b94:	480d      	ldr	r0, [pc, #52]	; (8004bcc <SX1276AntSwDeInit+0x7c>)
 8004b96:	001a      	movs	r2, r3
 8004b98:	2102      	movs	r1, #2
 8004b9a:	f004 fddf 	bl	800975c <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 0);
 8004b9e:	4b0b      	ldr	r3, [pc, #44]	; (8004bcc <SX1276AntSwDeInit+0x7c>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	2102      	movs	r1, #2
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	f004 fea5 	bl	80098f4 <HW_GPIO_Write>
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, &initStruct  ); 
 8004baa:	1d3b      	adds	r3, r7, #4
 8004bac:	4807      	ldr	r0, [pc, #28]	; (8004bcc <SX1276AntSwDeInit+0x7c>)
 8004bae:	001a      	movs	r2, r3
 8004bb0:	2104      	movs	r1, #4
 8004bb2:	f004 fdd3 	bl	800975c <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 0);
 8004bb6:	4b05      	ldr	r3, [pc, #20]	; (8004bcc <SX1276AntSwDeInit+0x7c>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	2104      	movs	r1, #4
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	f004 fe99 	bl	80098f4 <HW_GPIO_Write>
}
 8004bc2:	46c0      	nop			; (mov r8, r8)
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	b006      	add	sp, #24
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	46c0      	nop			; (mov r8, r8)
 8004bcc:	50000800 	.word	0x50000800

08004bd0 <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t opMode )
{
 8004bd0:	b590      	push	{r4, r7, lr}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	0002      	movs	r2, r0
 8004bd8:	1dfb      	adds	r3, r7, #7
 8004bda:	701a      	strb	r2, [r3, #0]
 uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 8004bdc:	230f      	movs	r3, #15
 8004bde:	18fc      	adds	r4, r7, r3
 8004be0:	2009      	movs	r0, #9
 8004be2:	f7ff f80e 	bl	8003c02 <SX1276Read>
 8004be6:	0003      	movs	r3, r0
 8004be8:	7023      	strb	r3, [r4, #0]
      switch( opMode )
 8004bea:	1dfb      	adds	r3, r7, #7
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	2b03      	cmp	r3, #3
 8004bf0:	d116      	bne.n	8004c20 <SX1276SetAntSw+0x50>
    {
    case RFLR_OPMODE_TRANSMITTER:
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8004bf2:	230f      	movs	r3, #15
 8004bf4:	18fb      	adds	r3, r7, r3
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	b25b      	sxtb	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	da06      	bge.n	8004c0c <SX1276SetAntSw+0x3c>
      {
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 1 );
 8004bfe:	4b10      	ldr	r3, [pc, #64]	; (8004c40 <SX1276SetAntSw+0x70>)
 8004c00:	2201      	movs	r2, #1
 8004c02:	2102      	movs	r1, #2
 8004c04:	0018      	movs	r0, r3
 8004c06:	f004 fe75 	bl	80098f4 <HW_GPIO_Write>
 8004c0a:	e005      	b.n	8004c18 <SX1276SetAntSw+0x48>
      }
      else
      {
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 1 );
 8004c0c:	4b0c      	ldr	r3, [pc, #48]	; (8004c40 <SX1276SetAntSw+0x70>)
 8004c0e:	2201      	movs	r2, #1
 8004c10:	2104      	movs	r1, #4
 8004c12:	0018      	movs	r0, r3
 8004c14:	f004 fe6e 	bl	80098f4 <HW_GPIO_Write>
      }
      SX1276.RxTx = 1;
 8004c18:	4b0a      	ldr	r3, [pc, #40]	; (8004c44 <SX1276SetAntSw+0x74>)
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	701a      	strb	r2, [r3, #0]
	  break;
 8004c1e:	e00a      	b.n	8004c36 <SX1276SetAntSw+0x66>
    case RFLR_OPMODE_RECEIVER:
    case RFLR_OPMODE_RECEIVER_SINGLE:
    case RFLR_OPMODE_CAD:
    default:
    	SX1276.RxTx = 0;
 8004c20:	4b08      	ldr	r3, [pc, #32]	; (8004c44 <SX1276SetAntSw+0x74>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	701a      	strb	r2, [r3, #0]
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 1 );
 8004c26:	23a0      	movs	r3, #160	; 0xa0
 8004c28:	05db      	lsls	r3, r3, #23
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	2102      	movs	r1, #2
 8004c2e:	0018      	movs	r0, r3
 8004c30:	f004 fe60 	bl	80098f4 <HW_GPIO_Write>
        break;
 8004c34:	46c0      	nop			; (mov r8, r8)
    }
  
}
 8004c36:	46c0      	nop			; (mov r8, r8)
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	b005      	add	sp, #20
 8004c3c:	bd90      	pop	{r4, r7, pc}
 8004c3e:	46c0      	nop			; (mov r8, r8)
 8004c40:	50000800 	.word	0x50000800
 8004c44:	20000ed8 	.word	0x20000ed8

08004c48 <OnTcxoStopTimerEvent>:

static void OnTcxoStopTimerEvent( void )
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
  TimerStop( &TcxoStopTimer );
 8004c4c:	4b07      	ldr	r3, [pc, #28]	; (8004c6c <OnTcxoStopTimerEvent+0x24>)
 8004c4e:	0018      	movs	r0, r3
 8004c50:	f004 fc64 	bl	800951c <TimerStop>

  MLM_TCXO_OFF();  //TCXO OFF
 8004c54:	2380      	movs	r3, #128	; 0x80
 8004c56:	0159      	lsls	r1, r3, #5
 8004c58:	23a0      	movs	r3, #160	; 0xa0
 8004c5a:	05db      	lsls	r3, r3, #23
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	0018      	movs	r0, r3
 8004c60:	f004 fe48 	bl	80098f4 <HW_GPIO_Write>
}
 8004c64:	46c0      	nop			; (mov r8, r8)
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	46c0      	nop			; (mov r8, r8)
 8004c6c:	200007c0 	.word	0x200007c0

08004c70 <SX1276CheckRfFrequency>:



bool SX1276CheckRfFrequency( uint32_t frequency )
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
    // Implement check. Currently all frequencies are supported
    return true;
 8004c78:	2301      	movs	r3, #1
}
 8004c7a:	0018      	movs	r0, r3
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	b002      	add	sp, #8
 8004c80:	bd80      	pop	{r7, pc}
	...

08004c84 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004c88:	4b0a      	ldr	r3, [pc, #40]	; (8004cb4 <HAL_Init+0x30>)
 8004c8a:	4a0a      	ldr	r2, [pc, #40]	; (8004cb4 <HAL_Init+0x30>)
 8004c8c:	6812      	ldr	r2, [r2, #0]
 8004c8e:	2140      	movs	r1, #64	; 0x40
 8004c90:	430a      	orrs	r2, r1
 8004c92:	601a      	str	r2, [r3, #0]
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c94:	4b07      	ldr	r3, [pc, #28]	; (8004cb4 <HAL_Init+0x30>)
 8004c96:	4a07      	ldr	r2, [pc, #28]	; (8004cb4 <HAL_Init+0x30>)
 8004c98:	6812      	ldr	r2, [r2, #0]
 8004c9a:	2102      	movs	r1, #2
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004ca0:	2003      	movs	r0, #3
 8004ca2:	f005 fcd3 	bl	800a64c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ca6:	f005 fce7 	bl	800a678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	0018      	movs	r0, r3
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	46c0      	nop			; (mov r8, r8)
 8004cb4:	40022000 	.word	0x40022000

08004cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	af00      	add	r7, sp, #0
  return uwTick;
 8004cbc:	4b02      	ldr	r3, [pc, #8]	; (8004cc8 <HAL_GetTick+0x10>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
}
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	46c0      	nop			; (mov r8, r8)
 8004cc8:	20000f4c 	.word	0x20000f4c

08004ccc <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e153      	b.n	8004f86 <HAL_ADC_Init+0x2ba>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10a      	bne.n	8004cfc <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	65da      	str	r2, [r3, #92]	; 0x5c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2254      	movs	r2, #84	; 0x54
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	0018      	movs	r0, r3
 8004cf8:	f000 f956 	bl	8004fa8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d00:	2210      	movs	r2, #16
 8004d02:	4013      	ands	r3, r2
 8004d04:	d105      	bne.n	8004d12 <HAL_ADC_Init+0x46>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	2204      	movs	r2, #4
 8004d0e:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004d10:	d00b      	beq.n	8004d2a <HAL_ADC_Init+0x5e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d16:	2210      	movs	r2, #16
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	659a      	str	r2, [r3, #88]	; 0x58
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2254      	movs	r2, #84	; 0x54
 8004d22:	2100      	movs	r1, #0
 8004d24:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e12d      	b.n	8004f86 <HAL_ADC_Init+0x2ba>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d2e:	4a98      	ldr	r2, [pc, #608]	; (8004f90 <HAL_ADC_Init+0x2c4>)
 8004d30:	4013      	ands	r3, r2
 8004d32:	2202      	movs	r2, #2
 8004d34:	431a      	orrs	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	659a      	str	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	2203      	movs	r2, #3
 8004d42:	4013      	ands	r3, r2
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d108      	bne.n	8004d5a <HAL_ADC_Init+0x8e>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	4013      	ands	r3, r2
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d101      	bne.n	8004d5a <HAL_ADC_Init+0x8e>
 8004d56:	2301      	movs	r3, #1
 8004d58:	e000      	b.n	8004d5c <HAL_ADC_Init+0x90>
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d149      	bne.n	8004df4 <HAL_ADC_Init+0x128>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	23c0      	movs	r3, #192	; 0xc0
 8004d66:	061b      	lsls	r3, r3, #24
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d00b      	beq.n	8004d84 <HAL_ADC_Init+0xb8>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	2380      	movs	r3, #128	; 0x80
 8004d72:	05db      	lsls	r3, r3, #23
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d005      	beq.n	8004d84 <HAL_ADC_Init+0xb8>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	2380      	movs	r3, #128	; 0x80
 8004d7e:	061b      	lsls	r3, r3, #24
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d111      	bne.n	8004da8 <HAL_ADC_Init+0xdc>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6812      	ldr	r2, [r2, #0]
 8004d8c:	6912      	ldr	r2, [r2, #16]
 8004d8e:	0092      	lsls	r2, r2, #2
 8004d90:	0892      	lsrs	r2, r2, #2
 8004d92:	611a      	str	r2, [r3, #16]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	6812      	ldr	r2, [r2, #0]
 8004d9c:	6911      	ldr	r1, [r2, #16]
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	6852      	ldr	r2, [r2, #4]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	611a      	str	r2, [r3, #16]
 8004da6:	e014      	b.n	8004dd2 <HAL_ADC_Init+0x106>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6812      	ldr	r2, [r2, #0]
 8004db0:	6912      	ldr	r2, [r2, #16]
 8004db2:	0092      	lsls	r2, r2, #2
 8004db4:	0892      	lsrs	r2, r2, #2
 8004db6:	611a      	str	r2, [r3, #16]
 8004db8:	4b76      	ldr	r3, [pc, #472]	; (8004f94 <HAL_ADC_Init+0x2c8>)
 8004dba:	4a76      	ldr	r2, [pc, #472]	; (8004f94 <HAL_ADC_Init+0x2c8>)
 8004dbc:	6812      	ldr	r2, [r2, #0]
 8004dbe:	4976      	ldr	r1, [pc, #472]	; (8004f98 <HAL_ADC_Init+0x2cc>)
 8004dc0:	400a      	ands	r2, r1
 8004dc2:	601a      	str	r2, [r3, #0]
 8004dc4:	4a73      	ldr	r2, [pc, #460]	; (8004f94 <HAL_ADC_Init+0x2c8>)
 8004dc6:	4b73      	ldr	r3, [pc, #460]	; (8004f94 <HAL_ADC_Init+0x2c8>)
 8004dc8:	6819      	ldr	r1, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	430b      	orrs	r3, r1
 8004dd0:	6013      	str	r3, [r2, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6812      	ldr	r2, [r2, #0]
 8004dda:	68d2      	ldr	r2, [r2, #12]
 8004ddc:	2118      	movs	r1, #24
 8004dde:	438a      	bics	r2, r1
 8004de0:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	6812      	ldr	r2, [r2, #0]
 8004dea:	68d1      	ldr	r1, [r2, #12]
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	6892      	ldr	r2, [r2, #8]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8004df4:	4b67      	ldr	r3, [pc, #412]	; (8004f94 <HAL_ADC_Init+0x2c8>)
 8004df6:	4a67      	ldr	r2, [pc, #412]	; (8004f94 <HAL_ADC_Init+0x2c8>)
 8004df8:	6812      	ldr	r2, [r2, #0]
 8004dfa:	4968      	ldr	r1, [pc, #416]	; (8004f9c <HAL_ADC_Init+0x2d0>)
 8004dfc:	400a      	ands	r2, r1
 8004dfe:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8004e00:	4a64      	ldr	r2, [pc, #400]	; (8004f94 <HAL_ADC_Init+0x2c8>)
 8004e02:	4b64      	ldr	r3, [pc, #400]	; (8004f94 <HAL_ADC_Init+0x2c8>)
 8004e04:	6819      	ldr	r1, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0a:	065b      	lsls	r3, r3, #25
 8004e0c:	430b      	orrs	r3, r1
 8004e0e:	6013      	str	r3, [r2, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689a      	ldr	r2, [r3, #8]
 8004e16:	2380      	movs	r3, #128	; 0x80
 8004e18:	055b      	lsls	r3, r3, #21
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	d108      	bne.n	8004e30 <HAL_ADC_Init+0x164>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	6812      	ldr	r2, [r2, #0]
 8004e26:	6892      	ldr	r2, [r2, #8]
 8004e28:	2180      	movs	r1, #128	; 0x80
 8004e2a:	0549      	lsls	r1, r1, #21
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6812      	ldr	r2, [r2, #0]
 8004e38:	68d2      	ldr	r2, [r2, #12]
 8004e3a:	4959      	ldr	r1, [pc, #356]	; (8004fa0 <HAL_ADC_Init+0x2d4>)
 8004e3c:	400a      	ands	r2, r1
 8004e3e:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	6812      	ldr	r2, [r2, #0]
 8004e48:	68d1      	ldr	r1, [r2, #12]
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	68d0      	ldr	r0, [r2, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	6912      	ldr	r2, [r2, #16]
 8004e52:	2a02      	cmp	r2, #2
 8004e54:	d101      	bne.n	8004e5a <HAL_ADC_Init+0x18e>
 8004e56:	2204      	movs	r2, #4
 8004e58:	e000      	b.n	8004e5c <HAL_ADC_Init+0x190>
 8004e5a:	2200      	movs	r2, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004e5c:	4310      	orrs	r0, r2
                            ADC_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	6a12      	ldr	r2, [r2, #32]
 8004e62:	0352      	lsls	r2, r2, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004e64:	4310      	orrs	r0, r2
                            ADC_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e6a:	0052      	lsls	r2, r2, #1
                            ADC_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8004e6c:	4310      	orrs	r0, r2
                            hadc->Init.Overrun                               |
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	6b52      	ldr	r2, [r2, #52]	; 0x34
                            ADC_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 8004e72:	4310      	orrs	r0, r2
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	6992      	ldr	r2, [r2, #24]
 8004e78:	0392      	lsls	r2, r2, #14
                            hadc->Init.Overrun                               |
 8004e7a:	4310      	orrs	r0, r2
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	69d2      	ldr	r2, [r2, #28]
 8004e80:	03d2      	lsls	r2, r2, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004e82:	4302      	orrs	r2, r0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004e84:	430a      	orrs	r2, r1
 8004e86:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e8c:	23c2      	movs	r3, #194	; 0xc2
 8004e8e:	33ff      	adds	r3, #255	; 0xff
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d00b      	beq.n	8004eac <HAL_ADC_Init+0x1e0>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6812      	ldr	r2, [r2, #0]
 8004e9c:	68d1      	ldr	r1, [r2, #12]
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	6a90      	ldr	r0, [r2, #40]	; 0x28
                             hadc->Init.ExternalTrigConvEdge;
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004ea6:	4302      	orrs	r2, r0
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d119      	bne.n	8004ee8 <HAL_ADC_Init+0x21c>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d109      	bne.n	8004ed0 <HAL_ADC_Init+0x204>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	6812      	ldr	r2, [r2, #0]
 8004ec4:	68d2      	ldr	r2, [r2, #12]
 8004ec6:	2180      	movs	r1, #128	; 0x80
 8004ec8:	0249      	lsls	r1, r1, #9
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	60da      	str	r2, [r3, #12]
 8004ece:	e00b      	b.n	8004ee8 <HAL_ADC_Init+0x21c>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	65da      	str	r2, [r3, #92]	; 0x5c
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d11f      	bne.n	8004f30 <HAL_ADC_Init+0x264>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6812      	ldr	r2, [r2, #0]
 8004ef8:	6912      	ldr	r2, [r2, #16]
 8004efa:	492a      	ldr	r1, [pc, #168]	; (8004fa4 <HAL_ADC_Init+0x2d8>)
 8004efc:	400a      	ands	r2, r1
 8004efe:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	6812      	ldr	r2, [r2, #0]
 8004f08:	6911      	ldr	r1, [r2, #16]
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	6c50      	ldr	r0, [r2, #68]	; 0x44
                               hadc->Init.Oversample.RightBitShift             |
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	6c92      	ldr	r2, [r2, #72]	; 0x48
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004f12:	4310      	orrs	r0, r2
                               hadc->Init.Oversample.TriggeredMode );
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
                               hadc->Init.Oversample.RightBitShift             |
 8004f18:	4302      	orrs	r2, r0
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	6812      	ldr	r2, [r2, #0]
 8004f26:	6912      	ldr	r2, [r2, #16]
 8004f28:	2101      	movs	r1, #1
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	611a      	str	r2, [r3, #16]
 8004f2e:	e00d      	b.n	8004f4c <HAL_ADC_Init+0x280>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	2201      	movs	r2, #1
 8004f38:	4013      	ands	r3, r2
 8004f3a:	d007      	beq.n	8004f4c <HAL_ADC_Init+0x280>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6812      	ldr	r2, [r2, #0]
 8004f44:	6912      	ldr	r2, [r2, #16]
 8004f46:	2101      	movs	r1, #1
 8004f48:	438a      	bics	r2, r1
 8004f4a:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	6812      	ldr	r2, [r2, #0]
 8004f54:	6952      	ldr	r2, [r2, #20]
 8004f56:	2107      	movs	r1, #7
 8004f58:	438a      	bics	r2, r1
 8004f5a:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	6812      	ldr	r2, [r2, #0]
 8004f64:	6951      	ldr	r1, [r2, #20]
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f78:	2203      	movs	r2, #3
 8004f7a:	4393      	bics	r3, r2
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	659a      	str	r2, [r3, #88]	; 0x58
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	0018      	movs	r0, r3
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	b002      	add	sp, #8
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	46c0      	nop			; (mov r8, r8)
 8004f90:	fffffefd 	.word	0xfffffefd
 8004f94:	40012708 	.word	0x40012708
 8004f98:	ffc3ffff 	.word	0xffc3ffff
 8004f9c:	fdffffff 	.word	0xfdffffff
 8004fa0:	fffe0219 	.word	0xfffe0219
 8004fa4:	fffffc03 	.word	0xfffffc03

08004fa8 <HAL_ADC_MspInit>:
  * @brief  Initialize the ADC MSP.
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */ 
}
 8004fb0:	46c0      	nop			; (mov r8, r8)
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	b002      	add	sp, #8
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004fb8:	b590      	push	{r4, r7, lr}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fc0:	230f      	movs	r3, #15
 8004fc2:	18fb      	adds	r3, r7, r3
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	2204      	movs	r2, #4
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	d138      	bne.n	8005046 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2254      	movs	r2, #84	; 0x54
 8004fd8:	5c9b      	ldrb	r3, [r3, r2]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d101      	bne.n	8004fe2 <HAL_ADC_Start+0x2a>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e038      	b.n	8005054 <HAL_ADC_Start+0x9c>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2254      	movs	r2, #84	; 0x54
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d007      	beq.n	8005002 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8004ff2:	230f      	movs	r3, #15
 8004ff4:	18fc      	adds	r4, r7, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	0018      	movs	r0, r3
 8004ffa:	f000 f957 	bl	80052ac <ADC_Enable>
 8004ffe:	0003      	movs	r3, r0
 8005000:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005002:	230f      	movs	r3, #15
 8005004:	18fb      	adds	r3, r7, r3
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d120      	bne.n	800504e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005010:	4a12      	ldr	r2, [pc, #72]	; (800505c <HAL_ADC_Start+0xa4>)
 8005012:	4013      	ands	r3, r2
 8005014:	2280      	movs	r2, #128	; 0x80
 8005016:	0052      	lsls	r2, r2, #1
 8005018:	431a      	orrs	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	65da      	str	r2, [r3, #92]	; 0x5c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2254      	movs	r2, #84	; 0x54
 8005028:	2100      	movs	r1, #0
 800502a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	221c      	movs	r2, #28
 8005032:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	6812      	ldr	r2, [r2, #0]
 800503c:	6892      	ldr	r2, [r2, #8]
 800503e:	2104      	movs	r1, #4
 8005040:	430a      	orrs	r2, r1
 8005042:	609a      	str	r2, [r3, #8]
 8005044:	e003      	b.n	800504e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005046:	230f      	movs	r3, #15
 8005048:	18fb      	adds	r3, r7, r3
 800504a:	2202      	movs	r2, #2
 800504c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800504e:	230f      	movs	r3, #15
 8005050:	18fb      	adds	r3, r7, r3
 8005052:	781b      	ldrb	r3, [r3, #0]
}
 8005054:	0018      	movs	r0, r3
 8005056:	46bd      	mov	sp, r7
 8005058:	b005      	add	sp, #20
 800505a:	bd90      	pop	{r4, r7, pc}
 800505c:	fffff0fe 	.word	0xfffff0fe

08005060 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800506a:	2300      	movs	r3, #0
 800506c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800506e:	2300      	movs	r3, #0
 8005070:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	2b08      	cmp	r3, #8
 8005078:	d102      	bne.n	8005080 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800507a:	2308      	movs	r3, #8
 800507c:	60fb      	str	r3, [r7, #12]
 800507e:	e013      	b.n	80050a8 <HAL_ADC_PollForConversion+0x48>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	2201      	movs	r2, #1
 8005088:	4013      	ands	r3, r2
 800508a:	d00b      	beq.n	80050a4 <HAL_ADC_PollForConversion+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005090:	2220      	movs	r2, #32
 8005092:	431a      	orrs	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2254      	movs	r2, #84	; 0x54
 800509c:	2100      	movs	r1, #0
 800509e:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e06b      	b.n	800517c <HAL_ADC_PollForConversion+0x11c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80050a4:	230c      	movs	r3, #12
 80050a6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80050a8:	f7ff fe06 	bl	8004cb8 <HAL_GetTick>
 80050ac:	0003      	movs	r3, r0
 80050ae:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80050b0:	e019      	b.n	80050e6 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	3301      	adds	r3, #1
 80050b6:	d016      	beq.n	80050e6 <HAL_ADC_PollForConversion+0x86>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d007      	beq.n	80050ce <HAL_ADC_PollForConversion+0x6e>
 80050be:	f7ff fdfb 	bl	8004cb8 <HAL_GetTick>
 80050c2:	0002      	movs	r2, r0
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	1ad2      	subs	r2, r2, r3
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d90b      	bls.n	80050e6 <HAL_ADC_PollForConversion+0x86>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d2:	2204      	movs	r2, #4
 80050d4:	431a      	orrs	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2254      	movs	r2, #84	; 0x54
 80050de:	2100      	movs	r1, #0
 80050e0:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e04a      	b.n	800517c <HAL_ADC_PollForConversion+0x11c>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	4013      	ands	r3, r2
 80050f0:	d0df      	beq.n	80050b2 <HAL_ADC_PollForConversion+0x52>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f6:	2280      	movs	r2, #128	; 0x80
 80050f8:	0092      	lsls	r2, r2, #2
 80050fa:	431a      	orrs	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68da      	ldr	r2, [r3, #12]
 8005106:	23c0      	movs	r3, #192	; 0xc0
 8005108:	011b      	lsls	r3, r3, #4
 800510a:	4013      	ands	r3, r2
 800510c:	d12d      	bne.n	800516a <HAL_ADC_PollForConversion+0x10a>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a1b      	ldr	r3, [r3, #32]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005112:	2b00      	cmp	r3, #0
 8005114:	d129      	bne.n	800516a <HAL_ADC_PollForConversion+0x10a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2208      	movs	r2, #8
 800511e:	4013      	ands	r3, r2
 8005120:	2b08      	cmp	r3, #8
 8005122:	d122      	bne.n	800516a <HAL_ADC_PollForConversion+0x10a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	2204      	movs	r2, #4
 800512c:	4013      	ands	r3, r2
 800512e:	d110      	bne.n	8005152 <HAL_ADC_PollForConversion+0xf2>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6812      	ldr	r2, [r2, #0]
 8005138:	6852      	ldr	r2, [r2, #4]
 800513a:	210c      	movs	r1, #12
 800513c:	438a      	bics	r2, r1
 800513e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005144:	4a0f      	ldr	r2, [pc, #60]	; (8005184 <HAL_ADC_PollForConversion+0x124>)
 8005146:	4013      	ands	r3, r2
 8005148:	2201      	movs	r2, #1
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	659a      	str	r2, [r3, #88]	; 0x58
 8005150:	e00b      	b.n	800516a <HAL_ADC_PollForConversion+0x10a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005156:	2220      	movs	r2, #32
 8005158:	431a      	orrs	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005162:	2201      	movs	r2, #1
 8005164:	431a      	orrs	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	65da      	str	r2, [r3, #92]	; 0x5c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d103      	bne.n	800517a <HAL_ADC_PollForConversion+0x11a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	220c      	movs	r2, #12
 8005178:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	0018      	movs	r0, r3
 800517e:	46bd      	mov	sp, r7
 8005180:	b004      	add	sp, #16
 8005182:	bd80      	pop	{r7, pc}
 8005184:	fffffefe 	.word	0xfffffefe

08005188 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005196:	0018      	movs	r0, r3
 8005198:	46bd      	mov	sp, r7
 800519a:	b002      	add	sp, #8
 800519c:	bd80      	pop	{r7, pc}
	...

080051a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2254      	movs	r2, #84	; 0x54
 80051ae:	5c9b      	ldrb	r3, [r3, r2]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d101      	bne.n	80051b8 <HAL_ADC_ConfigChannel+0x18>
 80051b4:	2302      	movs	r3, #2
 80051b6:	e06c      	b.n	8005292 <HAL_ADC_ConfigChannel+0xf2>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2254      	movs	r2, #84	; 0x54
 80051bc:	2101      	movs	r1, #1
 80051be:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	2204      	movs	r2, #4
 80051c8:	4013      	ands	r3, r2
 80051ca:	d00b      	beq.n	80051e4 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d0:	2220      	movs	r2, #32
 80051d2:	431a      	orrs	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2254      	movs	r2, #84	; 0x54
 80051dc:	2100      	movs	r1, #0
 80051de:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e056      	b.n	8005292 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	4a2c      	ldr	r2, [pc, #176]	; (800529c <HAL_ADC_ConfigChannel+0xfc>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d028      	beq.n	8005240 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	6812      	ldr	r2, [r2, #0]
 80051f6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	6812      	ldr	r2, [r2, #0]
 80051fc:	0352      	lsls	r2, r2, #13
 80051fe:	0b52      	lsrs	r2, r2, #13
 8005200:	430a      	orrs	r2, r1
 8005202:	629a      	str	r2, [r3, #40]	; 0x28
    /* internal measurement paths enable: If internal channel selected, enable  */
    /* dedicated internal buffers and path.                                     */
    
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	2380      	movs	r3, #128	; 0x80
 800520a:	02db      	lsls	r3, r3, #11
 800520c:	4013      	ands	r3, r2
 800520e:	d009      	beq.n	8005224 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8005210:	4b23      	ldr	r3, [pc, #140]	; (80052a0 <HAL_ADC_ConfigChannel+0x100>)
 8005212:	4a23      	ldr	r2, [pc, #140]	; (80052a0 <HAL_ADC_ConfigChannel+0x100>)
 8005214:	6812      	ldr	r2, [r2, #0]
 8005216:	2180      	movs	r1, #128	; 0x80
 8005218:	0409      	lsls	r1, r1, #16
 800521a:	430a      	orrs	r2, r1
 800521c:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800521e:	200a      	movs	r0, #10
 8005220:	f000 f8a4 	bl	800536c <ADC_DelayMicroSecond>
    }
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	2380      	movs	r3, #128	; 0x80
 800522a:	029b      	lsls	r3, r3, #10
 800522c:	4013      	ands	r3, r2
 800522e:	d02b      	beq.n	8005288 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8005230:	4b1b      	ldr	r3, [pc, #108]	; (80052a0 <HAL_ADC_ConfigChannel+0x100>)
 8005232:	4a1b      	ldr	r2, [pc, #108]	; (80052a0 <HAL_ADC_ConfigChannel+0x100>)
 8005234:	6812      	ldr	r2, [r2, #0]
 8005236:	2180      	movs	r1, #128	; 0x80
 8005238:	03c9      	lsls	r1, r1, #15
 800523a:	430a      	orrs	r2, r1
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	e023      	b.n	8005288 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	6812      	ldr	r2, [r2, #0]
 8005248:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	6812      	ldr	r2, [r2, #0]
 800524e:	0352      	lsls	r2, r2, #13
 8005250:	0b52      	lsrs	r2, r2, #13
 8005252:	43d2      	mvns	r2, r2
 8005254:	400a      	ands	r2, r1
 8005256:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	2380      	movs	r3, #128	; 0x80
 800525e:	02db      	lsls	r3, r3, #11
 8005260:	4013      	ands	r3, r2
 8005262:	d005      	beq.n	8005270 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8005264:	4b0e      	ldr	r3, [pc, #56]	; (80052a0 <HAL_ADC_ConfigChannel+0x100>)
 8005266:	4a0e      	ldr	r2, [pc, #56]	; (80052a0 <HAL_ADC_ConfigChannel+0x100>)
 8005268:	6812      	ldr	r2, [r2, #0]
 800526a:	490e      	ldr	r1, [pc, #56]	; (80052a4 <HAL_ADC_ConfigChannel+0x104>)
 800526c:	400a      	ands	r2, r1
 800526e:	601a      	str	r2, [r3, #0]
    }
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	2380      	movs	r3, #128	; 0x80
 8005276:	029b      	lsls	r3, r3, #10
 8005278:	4013      	ands	r3, r2
 800527a:	d005      	beq.n	8005288 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800527c:	4b08      	ldr	r3, [pc, #32]	; (80052a0 <HAL_ADC_ConfigChannel+0x100>)
 800527e:	4a08      	ldr	r2, [pc, #32]	; (80052a0 <HAL_ADC_ConfigChannel+0x100>)
 8005280:	6812      	ldr	r2, [r2, #0]
 8005282:	4909      	ldr	r1, [pc, #36]	; (80052a8 <HAL_ADC_ConfigChannel+0x108>)
 8005284:	400a      	ands	r2, r1
 8005286:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2254      	movs	r2, #84	; 0x54
 800528c:	2100      	movs	r1, #0
 800528e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	0018      	movs	r0, r3
 8005294:	46bd      	mov	sp, r7
 8005296:	b002      	add	sp, #8
 8005298:	bd80      	pop	{r7, pc}
 800529a:	46c0      	nop			; (mov r8, r8)
 800529c:	00001001 	.word	0x00001001
 80052a0:	40012708 	.word	0x40012708
 80052a4:	ff7fffff 	.word	0xff7fffff
 80052a8:	ffbfffff 	.word	0xffbfffff

080052ac <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052b4:	2300      	movs	r3, #0
 80052b6:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	2203      	movs	r2, #3
 80052c0:	4013      	ands	r3, r2
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d108      	bne.n	80052d8 <ADC_Enable+0x2c>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2201      	movs	r2, #1
 80052ce:	4013      	ands	r3, r2
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d101      	bne.n	80052d8 <ADC_Enable+0x2c>
 80052d4:	2301      	movs	r3, #1
 80052d6:	e000      	b.n	80052da <ADC_Enable+0x2e>
 80052d8:	2300      	movs	r3, #0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d13f      	bne.n	800535e <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	4a20      	ldr	r2, [pc, #128]	; (8005368 <ADC_Enable+0xbc>)
 80052e6:	4013      	ands	r3, r2
 80052e8:	d00d      	beq.n	8005306 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ee:	2210      	movs	r2, #16
 80052f0:	431a      	orrs	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052fa:	2201      	movs	r2, #1
 80052fc:	431a      	orrs	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	65da      	str	r2, [r3, #92]	; 0x5c
      
      return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e02c      	b.n	8005360 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	6812      	ldr	r2, [r2, #0]
 800530e:	6892      	ldr	r2, [r2, #8]
 8005310:	2101      	movs	r1, #1
 8005312:	430a      	orrs	r2, r1
 8005314:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8005316:	2001      	movs	r0, #1
 8005318:	f000 f828 	bl	800536c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800531c:	f7ff fccc 	bl	8004cb8 <HAL_GetTick>
 8005320:	0003      	movs	r3, r0
 8005322:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005324:	e014      	b.n	8005350 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005326:	f7ff fcc7 	bl	8004cb8 <HAL_GetTick>
 800532a:	0002      	movs	r2, r0
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	2b0a      	cmp	r3, #10
 8005332:	d90d      	bls.n	8005350 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005338:	2210      	movs	r2, #16
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005344:	2201      	movs	r2, #1
 8005346:	431a      	orrs	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	65da      	str	r2, [r3, #92]	; 0x5c
        
        return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e007      	b.n	8005360 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2201      	movs	r2, #1
 8005358:	4013      	ands	r3, r2
 800535a:	2b01      	cmp	r3, #1
 800535c:	d1e3      	bne.n	8005326 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	0018      	movs	r0, r3
 8005362:	46bd      	mov	sp, r7
 8005364:	b004      	add	sp, #16
 8005366:	bd80      	pop	{r7, pc}
 8005368:	80000017 	.word	0x80000017

0800536c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond : delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8005374:	4b0a      	ldr	r3, [pc, #40]	; (80053a0 <ADC_DelayMicroSecond+0x34>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	490a      	ldr	r1, [pc, #40]	; (80053a4 <ADC_DelayMicroSecond+0x38>)
 800537a:	0018      	movs	r0, r3
 800537c:	f7fa fee0 	bl	8000140 <__udivsi3>
 8005380:	0003      	movs	r3, r0
 8005382:	001a      	movs	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4353      	muls	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800538a:	e002      	b.n	8005392 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	3b01      	subs	r3, #1
 8005390:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1f9      	bne.n	800538c <ADC_DelayMicroSecond+0x20>
  } 
}
 8005398:	46c0      	nop			; (mov r8, r8)
 800539a:	46bd      	mov	sp, r7
 800539c:	b004      	add	sp, #16
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	2000002c 	.word	0x2000002c
 80053a4:	000f4240 	.word	0x000f4240

080053a8 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053b2:	2317      	movs	r3, #23
 80053b4:	18fb      	adds	r3, r7, r3
 80053b6:	2200      	movs	r2, #0
 80053b8:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80053ba:	2300      	movs	r3, #0
 80053bc:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80053be:	2300      	movs	r3, #0
 80053c0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2254      	movs	r2, #84	; 0x54
 80053c6:	5c9b      	ldrb	r3, [r3, r2]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d101      	bne.n	80053d0 <HAL_ADCEx_Calibration_Start+0x28>
 80053cc:	2302      	movs	r3, #2
 80053ce:	e076      	b.n	80054be <HAL_ADCEx_Calibration_Start+0x116>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2254      	movs	r2, #84	; 0x54
 80053d4:	2101      	movs	r1, #1
 80053d6:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	2203      	movs	r2, #3
 80053e0:	4013      	ands	r3, r2
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d108      	bne.n	80053f8 <HAL_ADCEx_Calibration_Start+0x50>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2201      	movs	r2, #1
 80053ee:	4013      	ands	r3, r2
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d101      	bne.n	80053f8 <HAL_ADCEx_Calibration_Start+0x50>
 80053f4:	2301      	movs	r3, #1
 80053f6:	e000      	b.n	80053fa <HAL_ADCEx_Calibration_Start+0x52>
 80053f8:	2300      	movs	r3, #0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d14e      	bne.n	800549c <HAL_ADCEx_Calibration_Start+0xf4>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005402:	4a31      	ldr	r2, [pc, #196]	; (80054c8 <HAL_ADCEx_Calibration_Start+0x120>)
 8005404:	4013      	ands	r3, r2
 8005406:	2202      	movs	r2, #2
 8005408:	431a      	orrs	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	2203      	movs	r2, #3
 8005416:	4013      	ands	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	6812      	ldr	r2, [r2, #0]
 8005422:	68d2      	ldr	r2, [r2, #12]
 8005424:	2103      	movs	r1, #3
 8005426:	438a      	bics	r2, r1
 8005428:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	6812      	ldr	r2, [r2, #0]
 8005432:	6892      	ldr	r2, [r2, #8]
 8005434:	2180      	movs	r1, #128	; 0x80
 8005436:	0609      	lsls	r1, r1, #24
 8005438:	430a      	orrs	r2, r1
 800543a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800543c:	f7ff fc3c 	bl	8004cb8 <HAL_GetTick>
 8005440:	0003      	movs	r3, r0
 8005442:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8005444:	e014      	b.n	8005470 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8005446:	f7ff fc37 	bl	8004cb8 <HAL_GetTick>
 800544a:	0002      	movs	r2, r0
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b0a      	cmp	r3, #10
 8005452:	d90d      	bls.n	8005470 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005458:	2212      	movs	r2, #18
 800545a:	4393      	bics	r3, r2
 800545c:	2210      	movs	r2, #16
 800545e:	431a      	orrs	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2254      	movs	r2, #84	; 0x54
 8005468:	2100      	movs	r1, #0
 800546a:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e026      	b.n	80054be <HAL_ADCEx_Calibration_Start+0x116>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	2b00      	cmp	r3, #0
 8005478:	dbe5      	blt.n	8005446 <HAL_ADCEx_Calibration_Start+0x9e>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	6812      	ldr	r2, [r2, #0]
 8005482:	68d1      	ldr	r1, [r2, #12]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	430a      	orrs	r2, r1
 8005488:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548e:	2203      	movs	r2, #3
 8005490:	4393      	bics	r3, r2
 8005492:	2201      	movs	r2, #1
 8005494:	431a      	orrs	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	659a      	str	r2, [r3, #88]	; 0x58
 800549a:	e009      	b.n	80054b0 <HAL_ADCEx_Calibration_Start+0x108>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a0:	2220      	movs	r2, #32
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 80054a8:	2317      	movs	r3, #23
 80054aa:	18fb      	adds	r3, r7, r3
 80054ac:	2201      	movs	r2, #1
 80054ae:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2254      	movs	r2, #84	; 0x54
 80054b4:	2100      	movs	r1, #0
 80054b6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80054b8:	2317      	movs	r3, #23
 80054ba:	18fb      	adds	r3, r7, r3
 80054bc:	781b      	ldrb	r3, [r3, #0]
}
 80054be:	0018      	movs	r0, r3
 80054c0:	46bd      	mov	sp, r7
 80054c2:	b006      	add	sp, #24
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	46c0      	nop			; (mov r8, r8)
 80054c8:	fffffefd 	.word	0xfffffefd

080054cc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	0002      	movs	r2, r0
 80054d4:	1dfb      	adds	r3, r7, #7
 80054d6:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80054d8:	4b06      	ldr	r3, [pc, #24]	; (80054f4 <NVIC_EnableIRQ+0x28>)
 80054da:	1dfa      	adds	r2, r7, #7
 80054dc:	7812      	ldrb	r2, [r2, #0]
 80054de:	0011      	movs	r1, r2
 80054e0:	221f      	movs	r2, #31
 80054e2:	400a      	ands	r2, r1
 80054e4:	2101      	movs	r1, #1
 80054e6:	4091      	lsls	r1, r2
 80054e8:	000a      	movs	r2, r1
 80054ea:	601a      	str	r2, [r3, #0]
}
 80054ec:	46c0      	nop			; (mov r8, r8)
 80054ee:	46bd      	mov	sp, r7
 80054f0:	b002      	add	sp, #8
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	e000e100 	.word	0xe000e100

080054f8 <NVIC_SetPendingIRQ>:
  \brief   Set Pending Interrupt
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	0002      	movs	r2, r0
 8005500:	1dfb      	adds	r3, r7, #7
 8005502:	701a      	strb	r2, [r3, #0]
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8005504:	4907      	ldr	r1, [pc, #28]	; (8005524 <NVIC_SetPendingIRQ+0x2c>)
 8005506:	1dfb      	adds	r3, r7, #7
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	001a      	movs	r2, r3
 800550c:	231f      	movs	r3, #31
 800550e:	4013      	ands	r3, r2
 8005510:	2201      	movs	r2, #1
 8005512:	409a      	lsls	r2, r3
 8005514:	2380      	movs	r3, #128	; 0x80
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	50ca      	str	r2, [r1, r3]
}
 800551a:	46c0      	nop			; (mov r8, r8)
 800551c:	46bd      	mov	sp, r7
 800551e:	b002      	add	sp, #8
 8005520:	bd80      	pop	{r7, pc}
 8005522:	46c0      	nop			; (mov r8, r8)
 8005524:	e000e100 	.word	0xe000e100

08005528 <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	0002      	movs	r2, r0
 8005530:	1dfb      	adds	r3, r7, #7
 8005532:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8005534:	4907      	ldr	r1, [pc, #28]	; (8005554 <NVIC_ClearPendingIRQ+0x2c>)
 8005536:	1dfb      	adds	r3, r7, #7
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	001a      	movs	r2, r3
 800553c:	231f      	movs	r3, #31
 800553e:	4013      	ands	r3, r2
 8005540:	2201      	movs	r2, #1
 8005542:	409a      	lsls	r2, r3
 8005544:	23c0      	movs	r3, #192	; 0xc0
 8005546:	005b      	lsls	r3, r3, #1
 8005548:	50ca      	str	r2, [r1, r3]
}
 800554a:	46c0      	nop			; (mov r8, r8)
 800554c:	46bd      	mov	sp, r7
 800554e:	b002      	add	sp, #8
 8005550:	bd80      	pop	{r7, pc}
 8005552:	46c0      	nop			; (mov r8, r8)
 8005554:	e000e100 	.word	0xe000e100

08005558 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005558:	b5b0      	push	{r4, r5, r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	0002      	movs	r2, r0
 8005560:	6039      	str	r1, [r7, #0]
 8005562:	1dfb      	adds	r3, r7, #7
 8005564:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8005566:	1dfb      	adds	r3, r7, #7
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	2b7f      	cmp	r3, #127	; 0x7f
 800556c:	d932      	bls.n	80055d4 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800556e:	4c2f      	ldr	r4, [pc, #188]	; (800562c <NVIC_SetPriority+0xd4>)
 8005570:	1dfb      	adds	r3, r7, #7
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	001a      	movs	r2, r3
 8005576:	230f      	movs	r3, #15
 8005578:	4013      	ands	r3, r2
 800557a:	3b08      	subs	r3, #8
 800557c:	0899      	lsrs	r1, r3, #2
 800557e:	4a2b      	ldr	r2, [pc, #172]	; (800562c <NVIC_SetPriority+0xd4>)
 8005580:	1dfb      	adds	r3, r7, #7
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	0018      	movs	r0, r3
 8005586:	230f      	movs	r3, #15
 8005588:	4003      	ands	r3, r0
 800558a:	3b08      	subs	r3, #8
 800558c:	089b      	lsrs	r3, r3, #2
 800558e:	3306      	adds	r3, #6
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	18d3      	adds	r3, r2, r3
 8005594:	3304      	adds	r3, #4
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	1dfa      	adds	r2, r7, #7
 800559a:	7812      	ldrb	r2, [r2, #0]
 800559c:	0010      	movs	r0, r2
 800559e:	2203      	movs	r2, #3
 80055a0:	4002      	ands	r2, r0
 80055a2:	00d2      	lsls	r2, r2, #3
 80055a4:	20ff      	movs	r0, #255	; 0xff
 80055a6:	4090      	lsls	r0, r2
 80055a8:	0002      	movs	r2, r0
 80055aa:	43d2      	mvns	r2, r2
 80055ac:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	019b      	lsls	r3, r3, #6
 80055b2:	20ff      	movs	r0, #255	; 0xff
 80055b4:	4018      	ands	r0, r3
 80055b6:	1dfb      	adds	r3, r7, #7
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	001d      	movs	r5, r3
 80055bc:	2303      	movs	r3, #3
 80055be:	402b      	ands	r3, r5
 80055c0:	00db      	lsls	r3, r3, #3
 80055c2:	4098      	lsls	r0, r3
 80055c4:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80055c6:	431a      	orrs	r2, r3
 80055c8:	1d8b      	adds	r3, r1, #6
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	18e3      	adds	r3, r4, r3
 80055ce:	3304      	adds	r3, #4
 80055d0:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80055d2:	e027      	b.n	8005624 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80055d4:	4c16      	ldr	r4, [pc, #88]	; (8005630 <NVIC_SetPriority+0xd8>)
 80055d6:	1dfb      	adds	r3, r7, #7
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	b25b      	sxtb	r3, r3
 80055dc:	089b      	lsrs	r3, r3, #2
 80055de:	4914      	ldr	r1, [pc, #80]	; (8005630 <NVIC_SetPriority+0xd8>)
 80055e0:	1dfa      	adds	r2, r7, #7
 80055e2:	7812      	ldrb	r2, [r2, #0]
 80055e4:	b252      	sxtb	r2, r2
 80055e6:	0892      	lsrs	r2, r2, #2
 80055e8:	32c0      	adds	r2, #192	; 0xc0
 80055ea:	0092      	lsls	r2, r2, #2
 80055ec:	5852      	ldr	r2, [r2, r1]
 80055ee:	1df9      	adds	r1, r7, #7
 80055f0:	7809      	ldrb	r1, [r1, #0]
 80055f2:	0008      	movs	r0, r1
 80055f4:	2103      	movs	r1, #3
 80055f6:	4001      	ands	r1, r0
 80055f8:	00c9      	lsls	r1, r1, #3
 80055fa:	20ff      	movs	r0, #255	; 0xff
 80055fc:	4088      	lsls	r0, r1
 80055fe:	0001      	movs	r1, r0
 8005600:	43c9      	mvns	r1, r1
 8005602:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005604:	683a      	ldr	r2, [r7, #0]
 8005606:	0192      	lsls	r2, r2, #6
 8005608:	20ff      	movs	r0, #255	; 0xff
 800560a:	4010      	ands	r0, r2
 800560c:	1dfa      	adds	r2, r7, #7
 800560e:	7812      	ldrb	r2, [r2, #0]
 8005610:	0015      	movs	r5, r2
 8005612:	2203      	movs	r2, #3
 8005614:	402a      	ands	r2, r5
 8005616:	00d2      	lsls	r2, r2, #3
 8005618:	4090      	lsls	r0, r2
 800561a:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800561c:	430a      	orrs	r2, r1
 800561e:	33c0      	adds	r3, #192	; 0xc0
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	511a      	str	r2, [r3, r4]
}
 8005624:	46c0      	nop			; (mov r8, r8)
 8005626:	46bd      	mov	sp, r7
 8005628:	b002      	add	sp, #8
 800562a:	bdb0      	pop	{r4, r5, r7, pc}
 800562c:	e000ed00 	.word	0xe000ed00
 8005630:	e000e100 	.word	0xe000e100

08005634 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	60b9      	str	r1, [r7, #8]
 800563c:	607a      	str	r2, [r7, #4]
 800563e:	230f      	movs	r3, #15
 8005640:	18fb      	adds	r3, r7, r3
 8005642:	1c02      	adds	r2, r0, #0
 8005644:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	230f      	movs	r3, #15
 800564a:	18fb      	adds	r3, r7, r3
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	b25b      	sxtb	r3, r3
 8005650:	0011      	movs	r1, r2
 8005652:	0018      	movs	r0, r3
 8005654:	f7ff ff80 	bl	8005558 <NVIC_SetPriority>
}
 8005658:	46c0      	nop			; (mov r8, r8)
 800565a:	46bd      	mov	sp, r7
 800565c:	b004      	add	sp, #16
 800565e:	bd80      	pop	{r7, pc}

08005660 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	0002      	movs	r2, r0
 8005668:	1dfb      	adds	r3, r7, #7
 800566a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800566c:	1dfb      	adds	r3, r7, #7
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	b25b      	sxtb	r3, r3
 8005672:	0018      	movs	r0, r3
 8005674:	f7ff ff2a 	bl	80054cc <NVIC_EnableIRQ>
}
 8005678:	46c0      	nop			; (mov r8, r8)
 800567a:	46bd      	mov	sp, r7
 800567c:	b002      	add	sp, #8
 800567e:	bd80      	pop	{r7, pc}

08005680 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{ 
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	0002      	movs	r2, r0
 8005688:	1dfb      	adds	r3, r7, #7
 800568a:	701a      	strb	r2, [r3, #0]
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800568c:	1dfb      	adds	r3, r7, #7
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	b25b      	sxtb	r3, r3
 8005692:	0018      	movs	r0, r3
 8005694:	f7ff ff30 	bl	80054f8 <NVIC_SetPendingIRQ>
}
 8005698:	46c0      	nop			; (mov r8, r8)
 800569a:	46bd      	mov	sp, r7
 800569c:	b002      	add	sp, #8
 800569e:	bd80      	pop	{r7, pc}

080056a0 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	0002      	movs	r2, r0
 80056a8:	1dfb      	adds	r3, r7, #7
 80056aa:	701a      	strb	r2, [r3, #0]
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80056ac:	1dfb      	adds	r3, r7, #7
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	b25b      	sxtb	r3, r3
 80056b2:	0018      	movs	r0, r3
 80056b4:	f7ff ff38 	bl	8005528 <NVIC_ClearPendingIRQ>
}
 80056b8:	46c0      	nop			; (mov r8, r8)
 80056ba:	46bd      	mov	sp, r7
 80056bc:	b002      	add	sp, #8
 80056be:	bd80      	pop	{r7, pc}

080056c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b086      	sub	sp, #24
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80056ca:	2300      	movs	r3, #0
 80056cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80056ce:	2300      	movs	r3, #0
 80056d0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80056d6:	e155      	b.n	8005984 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2101      	movs	r1, #1
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	4091      	lsls	r1, r2
 80056e2:	000a      	movs	r2, r1
 80056e4:	4013      	ands	r3, r2
 80056e6:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d100      	bne.n	80056f0 <HAL_GPIO_Init+0x30>
 80056ee:	e146      	b.n	800597e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d003      	beq.n	8005700 <HAL_GPIO_Init+0x40>
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	2b12      	cmp	r3, #18
 80056fe:	d123      	bne.n	8005748 <HAL_GPIO_Init+0x88>
      {
        /* Check if the Alternate function is compliant with the GPIO in use */
        assert_param(IS_GPIO_AF_AVAILABLE(GPIOx,(GPIO_Init->Alternate)));
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	08da      	lsrs	r2, r3, #3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	3208      	adds	r2, #8
 8005708:	0092      	lsls	r2, r2, #2
 800570a:	58d3      	ldr	r3, [r2, r3]
 800570c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	2207      	movs	r2, #7
 8005712:	4013      	ands	r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	220f      	movs	r2, #15
 8005718:	409a      	lsls	r2, r3
 800571a:	0013      	movs	r3, r2
 800571c:	43da      	mvns	r2, r3
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	4013      	ands	r3, r2
 8005722:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	691a      	ldr	r2, [r3, #16]
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	2107      	movs	r1, #7
 800572c:	400b      	ands	r3, r1
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	409a      	lsls	r2, r3
 8005732:	0013      	movs	r3, r2
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	4313      	orrs	r3, r2
 8005738:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	08da      	lsrs	r2, r3, #3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	3208      	adds	r2, #8
 8005742:	0092      	lsls	r2, r2, #2
 8005744:	6939      	ldr	r1, [r7, #16]
 8005746:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d00b      	beq.n	8005768 <HAL_GPIO_Init+0xa8>
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	2b02      	cmp	r3, #2
 8005756:	d007      	beq.n	8005768 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800575c:	2b11      	cmp	r3, #17
 800575e:	d003      	beq.n	8005768 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	2b12      	cmp	r3, #18
 8005766:	d130      	bne.n	80057ca <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	005b      	lsls	r3, r3, #1
 8005772:	2203      	movs	r2, #3
 8005774:	409a      	lsls	r2, r3
 8005776:	0013      	movs	r3, r2
 8005778:	43da      	mvns	r2, r3
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	4013      	ands	r3, r2
 800577e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	68da      	ldr	r2, [r3, #12]
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	005b      	lsls	r3, r3, #1
 8005788:	409a      	lsls	r2, r3
 800578a:	0013      	movs	r3, r2
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	4313      	orrs	r3, r2
 8005790:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800579e:	2201      	movs	r2, #1
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	409a      	lsls	r2, r3
 80057a4:	0013      	movs	r3, r2
 80057a6:	43da      	mvns	r2, r3
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	4013      	ands	r3, r2
 80057ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	091b      	lsrs	r3, r3, #4
 80057b4:	2201      	movs	r2, #1
 80057b6:	401a      	ands	r2, r3
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	409a      	lsls	r2, r3
 80057bc:	0013      	movs	r3, r2
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	005b      	lsls	r3, r3, #1
 80057d4:	2203      	movs	r2, #3
 80057d6:	409a      	lsls	r2, r3
 80057d8:	0013      	movs	r3, r2
 80057da:	43da      	mvns	r2, r3
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	4013      	ands	r3, r2
 80057e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	2203      	movs	r2, #3
 80057e8:	401a      	ands	r2, r3
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	005b      	lsls	r3, r3, #1
 80057ee:	409a      	lsls	r2, r3
 80057f0:	0013      	movs	r3, r2
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	005b      	lsls	r3, r3, #1
 8005808:	2203      	movs	r2, #3
 800580a:	409a      	lsls	r2, r3
 800580c:	0013      	movs	r3, r2
 800580e:	43da      	mvns	r2, r3
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	4013      	ands	r3, r2
 8005814:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	689a      	ldr	r2, [r3, #8]
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	409a      	lsls	r2, r3
 8005820:	0013      	movs	r3, r2
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	4313      	orrs	r3, r2
 8005826:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	685a      	ldr	r2, [r3, #4]
 8005832:	2380      	movs	r3, #128	; 0x80
 8005834:	055b      	lsls	r3, r3, #21
 8005836:	4013      	ands	r3, r2
 8005838:	d100      	bne.n	800583c <HAL_GPIO_Init+0x17c>
 800583a:	e0a0      	b.n	800597e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800583c:	4b57      	ldr	r3, [pc, #348]	; (800599c <HAL_GPIO_Init+0x2dc>)
 800583e:	4a57      	ldr	r2, [pc, #348]	; (800599c <HAL_GPIO_Init+0x2dc>)
 8005840:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005842:	2101      	movs	r1, #1
 8005844:	430a      	orrs	r2, r1
 8005846:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8005848:	4a55      	ldr	r2, [pc, #340]	; (80059a0 <HAL_GPIO_Init+0x2e0>)
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	089b      	lsrs	r3, r3, #2
 800584e:	3302      	adds	r3, #2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	589b      	ldr	r3, [r3, r2]
 8005854:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2203      	movs	r2, #3
 800585a:	4013      	ands	r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	220f      	movs	r2, #15
 8005860:	409a      	lsls	r2, r3
 8005862:	0013      	movs	r3, r2
 8005864:	43da      	mvns	r2, r3
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	4013      	ands	r3, r2
 800586a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	23a0      	movs	r3, #160	; 0xa0
 8005870:	05db      	lsls	r3, r3, #23
 8005872:	429a      	cmp	r2, r3
 8005874:	d01f      	beq.n	80058b6 <HAL_GPIO_Init+0x1f6>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a4a      	ldr	r2, [pc, #296]	; (80059a4 <HAL_GPIO_Init+0x2e4>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d019      	beq.n	80058b2 <HAL_GPIO_Init+0x1f2>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a49      	ldr	r2, [pc, #292]	; (80059a8 <HAL_GPIO_Init+0x2e8>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d013      	beq.n	80058ae <HAL_GPIO_Init+0x1ee>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a48      	ldr	r2, [pc, #288]	; (80059ac <HAL_GPIO_Init+0x2ec>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d00d      	beq.n	80058aa <HAL_GPIO_Init+0x1ea>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a47      	ldr	r2, [pc, #284]	; (80059b0 <HAL_GPIO_Init+0x2f0>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d007      	beq.n	80058a6 <HAL_GPIO_Init+0x1e6>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a46      	ldr	r2, [pc, #280]	; (80059b4 <HAL_GPIO_Init+0x2f4>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d101      	bne.n	80058a2 <HAL_GPIO_Init+0x1e2>
 800589e:	2305      	movs	r3, #5
 80058a0:	e00a      	b.n	80058b8 <HAL_GPIO_Init+0x1f8>
 80058a2:	2306      	movs	r3, #6
 80058a4:	e008      	b.n	80058b8 <HAL_GPIO_Init+0x1f8>
 80058a6:	2304      	movs	r3, #4
 80058a8:	e006      	b.n	80058b8 <HAL_GPIO_Init+0x1f8>
 80058aa:	2303      	movs	r3, #3
 80058ac:	e004      	b.n	80058b8 <HAL_GPIO_Init+0x1f8>
 80058ae:	2302      	movs	r3, #2
 80058b0:	e002      	b.n	80058b8 <HAL_GPIO_Init+0x1f8>
 80058b2:	2301      	movs	r3, #1
 80058b4:	e000      	b.n	80058b8 <HAL_GPIO_Init+0x1f8>
 80058b6:	2300      	movs	r3, #0
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	2103      	movs	r1, #3
 80058bc:	400a      	ands	r2, r1
 80058be:	0092      	lsls	r2, r2, #2
 80058c0:	4093      	lsls	r3, r2
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058c8:	4935      	ldr	r1, [pc, #212]	; (80059a0 <HAL_GPIO_Init+0x2e0>)
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	089b      	lsrs	r3, r3, #2
 80058ce:	3302      	adds	r3, #2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80058d6:	4b38      	ldr	r3, [pc, #224]	; (80059b8 <HAL_GPIO_Init+0x2f8>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	43da      	mvns	r2, r3
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	4013      	ands	r3, r2
 80058e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	2380      	movs	r3, #128	; 0x80
 80058ec:	025b      	lsls	r3, r3, #9
 80058ee:	4013      	ands	r3, r2
 80058f0:	d003      	beq.n	80058fa <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80058fa:	4b2f      	ldr	r3, [pc, #188]	; (80059b8 <HAL_GPIO_Init+0x2f8>)
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8005900:	4b2d      	ldr	r3, [pc, #180]	; (80059b8 <HAL_GPIO_Init+0x2f8>)
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	43da      	mvns	r2, r3
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	4013      	ands	r3, r2
 800590e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	2380      	movs	r3, #128	; 0x80
 8005916:	029b      	lsls	r3, r3, #10
 8005918:	4013      	ands	r3, r2
 800591a:	d003      	beq.n	8005924 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	4313      	orrs	r3, r2
 8005922:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005924:	4b24      	ldr	r3, [pc, #144]	; (80059b8 <HAL_GPIO_Init+0x2f8>)
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800592a:	4b23      	ldr	r3, [pc, #140]	; (80059b8 <HAL_GPIO_Init+0x2f8>)
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	43da      	mvns	r2, r3
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	4013      	ands	r3, r2
 8005938:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	2380      	movs	r3, #128	; 0x80
 8005940:	035b      	lsls	r3, r3, #13
 8005942:	4013      	ands	r3, r2
 8005944:	d003      	beq.n	800594e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	4313      	orrs	r3, r2
 800594c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800594e:	4b1a      	ldr	r3, [pc, #104]	; (80059b8 <HAL_GPIO_Init+0x2f8>)
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005954:	4b18      	ldr	r3, [pc, #96]	; (80059b8 <HAL_GPIO_Init+0x2f8>)
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	43da      	mvns	r2, r3
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	4013      	ands	r3, r2
 8005962:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	2380      	movs	r3, #128	; 0x80
 800596a:	039b      	lsls	r3, r3, #14
 800596c:	4013      	ands	r3, r2
 800596e:	d003      	beq.n	8005978 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	4313      	orrs	r3, r2
 8005976:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005978:	4b0f      	ldr	r3, [pc, #60]	; (80059b8 <HAL_GPIO_Init+0x2f8>)
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	3301      	adds	r3, #1
 8005982:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	40da      	lsrs	r2, r3
 800598c:	1e13      	subs	r3, r2, #0
 800598e:	d000      	beq.n	8005992 <HAL_GPIO_Init+0x2d2>
 8005990:	e6a2      	b.n	80056d8 <HAL_GPIO_Init+0x18>
  }
}
 8005992:	46c0      	nop			; (mov r8, r8)
 8005994:	46bd      	mov	sp, r7
 8005996:	b006      	add	sp, #24
 8005998:	bd80      	pop	{r7, pc}
 800599a:	46c0      	nop			; (mov r8, r8)
 800599c:	40021000 	.word	0x40021000
 80059a0:	40010000 	.word	0x40010000
 80059a4:	50000400 	.word	0x50000400
 80059a8:	50000800 	.word	0x50000800
 80059ac:	50000c00 	.word	0x50000c00
 80059b0:	50001000 	.word	0x50001000
 80059b4:	50001c00 	.word	0x50001c00
 80059b8:	40010400 	.word	0x40010400

080059bc <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	0008      	movs	r0, r1
 80059c6:	0011      	movs	r1, r2
 80059c8:	1cbb      	adds	r3, r7, #2
 80059ca:	1c02      	adds	r2, r0, #0
 80059cc:	801a      	strh	r2, [r3, #0]
 80059ce:	1c7b      	adds	r3, r7, #1
 80059d0:	1c0a      	adds	r2, r1, #0
 80059d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80059d4:	1c7b      	adds	r3, r7, #1
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d004      	beq.n	80059e6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80059dc:	1cbb      	adds	r3, r7, #2
 80059de:	881a      	ldrh	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80059e4:	e003      	b.n	80059ee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80059e6:	1cbb      	adds	r3, r7, #2
 80059e8:	881a      	ldrh	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	629a      	str	r2, [r3, #40]	; 0x28
}
 80059ee:	46c0      	nop			; (mov r8, r8)
 80059f0:	46bd      	mov	sp, r7
 80059f2:	b002      	add	sp, #8
 80059f4:	bd80      	pop	{r7, pc}
	...

080059f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	0002      	movs	r2, r0
 8005a00:	1dbb      	adds	r3, r7, #6
 8005a02:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8005a04:	4b09      	ldr	r3, [pc, #36]	; (8005a2c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	1dba      	adds	r2, r7, #6
 8005a0a:	8812      	ldrh	r2, [r2, #0]
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	d008      	beq.n	8005a22 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a10:	4b06      	ldr	r3, [pc, #24]	; (8005a2c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8005a12:	1dba      	adds	r2, r7, #6
 8005a14:	8812      	ldrh	r2, [r2, #0]
 8005a16:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a18:	1dbb      	adds	r3, r7, #6
 8005a1a:	881b      	ldrh	r3, [r3, #0]
 8005a1c:	0018      	movs	r0, r3
 8005a1e:	f004 fe91 	bl	800a744 <HAL_GPIO_EXTI_Callback>
  }
}
 8005a22:	46c0      	nop			; (mov r8, r8)
 8005a24:	46bd      	mov	sp, r7
 8005a26:	b002      	add	sp, #8
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	46c0      	nop			; (mov r8, r8)
 8005a2c:	40010400 	.word	0x40010400

08005a30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e081      	b.n	8005b46 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2241      	movs	r2, #65	; 0x41
 8005a46:	5c9b      	ldrb	r3, [r3, r2]
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d107      	bne.n	8005a5e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2240      	movs	r2, #64	; 0x40
 8005a52:	2100      	movs	r1, #0
 8005a54:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	0018      	movs	r0, r3
 8005a5a:	f004 fe9d 	bl	800a798 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2241      	movs	r2, #65	; 0x41
 8005a62:	2124      	movs	r1, #36	; 0x24
 8005a64:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	6812      	ldr	r2, [r2, #0]
 8005a6e:	6812      	ldr	r2, [r2, #0]
 8005a70:	2101      	movs	r1, #1
 8005a72:	438a      	bics	r2, r1
 8005a74:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	6852      	ldr	r2, [r2, #4]
 8005a7e:	4934      	ldr	r1, [pc, #208]	; (8005b50 <HAL_I2C_Init+0x120>)
 8005a80:	400a      	ands	r2, r1
 8005a82:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	6812      	ldr	r2, [r2, #0]
 8005a8c:	6892      	ldr	r2, [r2, #8]
 8005a8e:	4931      	ldr	r1, [pc, #196]	; (8005b54 <HAL_I2C_Init+0x124>)
 8005a90:	400a      	ands	r2, r1
 8005a92:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d108      	bne.n	8005aae <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6892      	ldr	r2, [r2, #8]
 8005aa4:	2180      	movs	r1, #128	; 0x80
 8005aa6:	0209      	lsls	r1, r1, #8
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	609a      	str	r2, [r3, #8]
 8005aac:	e007      	b.n	8005abe <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	6892      	ldr	r2, [r2, #8]
 8005ab6:	2184      	movs	r1, #132	; 0x84
 8005ab8:	0209      	lsls	r1, r1, #8
 8005aba:	430a      	orrs	r2, r1
 8005abc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d104      	bne.n	8005ad0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2280      	movs	r2, #128	; 0x80
 8005acc:	0112      	lsls	r2, r2, #4
 8005ace:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	6812      	ldr	r2, [r2, #0]
 8005ad8:	6852      	ldr	r2, [r2, #4]
 8005ada:	491f      	ldr	r1, [pc, #124]	; (8005b58 <HAL_I2C_Init+0x128>)
 8005adc:	430a      	orrs	r2, r1
 8005ade:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	6812      	ldr	r2, [r2, #0]
 8005ae8:	68d2      	ldr	r2, [r2, #12]
 8005aea:	491a      	ldr	r1, [pc, #104]	; (8005b54 <HAL_I2C_Init+0x124>)
 8005aec:	400a      	ands	r2, r1
 8005aee:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	6911      	ldr	r1, [r2, #16]
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	6952      	ldr	r2, [r2, #20]
 8005afc:	4311      	orrs	r1, r2
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	6992      	ldr	r2, [r2, #24]
 8005b02:	0212      	lsls	r2, r2, #8
 8005b04:	430a      	orrs	r2, r1
 8005b06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	69d1      	ldr	r1, [r2, #28]
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	6a12      	ldr	r2, [r2, #32]
 8005b14:	430a      	orrs	r2, r1
 8005b16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	6812      	ldr	r2, [r2, #0]
 8005b20:	6812      	ldr	r2, [r2, #0]
 8005b22:	2101      	movs	r1, #1
 8005b24:	430a      	orrs	r2, r1
 8005b26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2241      	movs	r2, #65	; 0x41
 8005b32:	2120      	movs	r1, #32
 8005b34:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2242      	movs	r2, #66	; 0x42
 8005b40:	2100      	movs	r1, #0
 8005b42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	0018      	movs	r0, r3
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	b002      	add	sp, #8
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	46c0      	nop			; (mov r8, r8)
 8005b50:	f0ffffff 	.word	0xf0ffffff
 8005b54:	ffff7fff 	.word	0xffff7fff
 8005b58:	02008000 	.word	0x02008000

08005b5c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b5c:	b590      	push	{r4, r7, lr}
 8005b5e:	b089      	sub	sp, #36	; 0x24
 8005b60:	af02      	add	r7, sp, #8
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	000c      	movs	r4, r1
 8005b66:	0010      	movs	r0, r2
 8005b68:	0019      	movs	r1, r3
 8005b6a:	230a      	movs	r3, #10
 8005b6c:	18fb      	adds	r3, r7, r3
 8005b6e:	1c22      	adds	r2, r4, #0
 8005b70:	801a      	strh	r2, [r3, #0]
 8005b72:	2308      	movs	r3, #8
 8005b74:	18fb      	adds	r3, r7, r3
 8005b76:	1c02      	adds	r2, r0, #0
 8005b78:	801a      	strh	r2, [r3, #0]
 8005b7a:	1dbb      	adds	r3, r7, #6
 8005b7c:	1c0a      	adds	r2, r1, #0
 8005b7e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8005b80:	2300      	movs	r3, #0
 8005b82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2241      	movs	r2, #65	; 0x41
 8005b88:	5c9b      	ldrb	r3, [r3, r2]
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b20      	cmp	r3, #32
 8005b8e:	d000      	beq.n	8005b92 <HAL_I2C_Mem_Write+0x36>
 8005b90:	e11c      	b.n	8005dcc <HAL_I2C_Mem_Write+0x270>
  {
    if((pData == NULL) || (Size == 0U))
 8005b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d004      	beq.n	8005ba2 <HAL_I2C_Mem_Write+0x46>
 8005b98:	232c      	movs	r3, #44	; 0x2c
 8005b9a:	18fb      	adds	r3, r7, r3
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d101      	bne.n	8005ba6 <HAL_I2C_Mem_Write+0x4a>
    {
      return  HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e113      	b.n	8005dce <HAL_I2C_Mem_Write+0x272>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2240      	movs	r2, #64	; 0x40
 8005baa:	5c9b      	ldrb	r3, [r3, r2]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d101      	bne.n	8005bb4 <HAL_I2C_Mem_Write+0x58>
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	e10c      	b.n	8005dce <HAL_I2C_Mem_Write+0x272>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2240      	movs	r2, #64	; 0x40
 8005bb8:	2101      	movs	r1, #1
 8005bba:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005bbc:	f7ff f87c 	bl	8004cb8 <HAL_GetTick>
 8005bc0:	0003      	movs	r3, r0
 8005bc2:	617b      	str	r3, [r7, #20]

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005bc4:	2380      	movs	r3, #128	; 0x80
 8005bc6:	0219      	lsls	r1, r3, #8
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	2319      	movs	r3, #25
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f000 f994 	bl	8005efe <I2C_WaitOnFlagUntilTimeout>
 8005bd6:	1e03      	subs	r3, r0, #0
 8005bd8:	d001      	beq.n	8005bde <HAL_I2C_Mem_Write+0x82>
    {
      return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e0f7      	b.n	8005dce <HAL_I2C_Mem_Write+0x272>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2241      	movs	r2, #65	; 0x41
 8005be2:	2121      	movs	r1, #33	; 0x21
 8005be4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2242      	movs	r2, #66	; 0x42
 8005bea:	2140      	movs	r1, #64	; 0x40
 8005bec:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bf8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	222c      	movs	r2, #44	; 0x2c
 8005bfe:	18ba      	adds	r2, r7, r2
 8005c00:	8812      	ldrh	r2, [r2, #0]
 8005c02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c0a:	1dbb      	adds	r3, r7, #6
 8005c0c:	881c      	ldrh	r4, [r3, #0]
 8005c0e:	2308      	movs	r3, #8
 8005c10:	18fb      	adds	r3, r7, r3
 8005c12:	881a      	ldrh	r2, [r3, #0]
 8005c14:	230a      	movs	r3, #10
 8005c16:	18fb      	adds	r3, r7, r3
 8005c18:	8819      	ldrh	r1, [r3, #0]
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	9301      	str	r3, [sp, #4]
 8005c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	0023      	movs	r3, r4
 8005c26:	f000 f8d9 	bl	8005ddc <I2C_RequestMemoryWrite>
 8005c2a:	1e03      	subs	r3, r0, #0
 8005c2c:	d00f      	beq.n	8005c4e <HAL_I2C_Mem_Write+0xf2>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d105      	bne.n	8005c42 <HAL_I2C_Mem_Write+0xe6>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2240      	movs	r2, #64	; 0x40
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e0c5      	b.n	8005dce <HAL_I2C_Mem_Write+0x272>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2240      	movs	r2, #64	; 0x40
 8005c46:	2100      	movs	r1, #0
 8005c48:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e0bf      	b.n	8005dce <HAL_I2C_Mem_Write+0x272>
      }
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	2bff      	cmp	r3, #255	; 0xff
 8005c56:	d911      	bls.n	8005c7c <HAL_I2C_Mem_Write+0x120>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	22ff      	movs	r2, #255	; 0xff
 8005c5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	2380      	movs	r3, #128	; 0x80
 8005c66:	045c      	lsls	r4, r3, #17
 8005c68:	230a      	movs	r3, #10
 8005c6a:	18fb      	adds	r3, r7, r3
 8005c6c:	8819      	ldrh	r1, [r3, #0]
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	2300      	movs	r3, #0
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	0023      	movs	r3, r4
 8005c76:	f000 fa55 	bl	8006124 <I2C_TransferConfig>
 8005c7a:	e012      	b.n	8005ca2 <HAL_I2C_Mem_Write+0x146>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	2380      	movs	r3, #128	; 0x80
 8005c8e:	049c      	lsls	r4, r3, #18
 8005c90:	230a      	movs	r3, #10
 8005c92:	18fb      	adds	r3, r7, r3
 8005c94:	8819      	ldrh	r1, [r3, #0]
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	2300      	movs	r3, #0
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	0023      	movs	r3, r4
 8005c9e:	f000 fa41 	bl	8006124 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	0018      	movs	r0, r3
 8005caa:	f000 f961 	bl	8005f70 <I2C_WaitOnTXISFlagUntilTimeout>
 8005cae:	1e03      	subs	r3, r0, #0
 8005cb0:	d007      	beq.n	8005cc2 <HAL_I2C_Mem_Write+0x166>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	d101      	bne.n	8005cbe <HAL_I2C_Mem_Write+0x162>
        {
          return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e087      	b.n	8005dce <HAL_I2C_Mem_Write+0x272>
        }
        else
        {
          return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e085      	b.n	8005dce <HAL_I2C_Mem_Write+0x272>
        }
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005cca:	1c50      	adds	r0, r2, #1
 8005ccc:	68f9      	ldr	r1, [r7, #12]
 8005cce:	6248      	str	r0, [r1, #36]	; 0x24
 8005cd0:	7812      	ldrb	r2, [r2, #0]
 8005cd2:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	851a      	strh	r2, [r3, #40]	; 0x28

      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d13b      	bne.n	8005d6e <HAL_I2C_Mem_Write+0x212>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d036      	beq.n	8005d6e <HAL_I2C_Mem_Write+0x212>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005d00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	9300      	str	r3, [sp, #0]
 8005d08:	0013      	movs	r3, r2
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	2180      	movs	r1, #128	; 0x80
 8005d0e:	f000 f8f6 	bl	8005efe <I2C_WaitOnFlagUntilTimeout>
 8005d12:	1e03      	subs	r3, r0, #0
 8005d14:	d001      	beq.n	8005d1a <HAL_I2C_Mem_Write+0x1be>
        {
          return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e059      	b.n	8005dce <HAL_I2C_Mem_Write+0x272>
        }

        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	2bff      	cmp	r3, #255	; 0xff
 8005d22:	d911      	bls.n	8005d48 <HAL_I2C_Mem_Write+0x1ec>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	22ff      	movs	r2, #255	; 0xff
 8005d28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	2380      	movs	r3, #128	; 0x80
 8005d32:	045c      	lsls	r4, r3, #17
 8005d34:	230a      	movs	r3, #10
 8005d36:	18fb      	adds	r3, r7, r3
 8005d38:	8819      	ldrh	r1, [r3, #0]
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	0023      	movs	r3, r4
 8005d42:	f000 f9ef 	bl	8006124 <I2C_TransferConfig>
 8005d46:	e012      	b.n	8005d6e <HAL_I2C_Mem_Write+0x212>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d56:	b2da      	uxtb	r2, r3
 8005d58:	2380      	movs	r3, #128	; 0x80
 8005d5a:	049c      	lsls	r4, r3, #18
 8005d5c:	230a      	movs	r3, #10
 8005d5e:	18fb      	adds	r3, r7, r3
 8005d60:	8819      	ldrh	r1, [r3, #0]
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	2300      	movs	r3, #0
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	0023      	movs	r3, r4
 8005d6a:	f000 f9db 	bl	8006124 <I2C_TransferConfig>
        }
      }

    }while(hi2c->XferCount > 0U);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d194      	bne.n	8005ca2 <HAL_I2C_Mem_Write+0x146>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */ 
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	0018      	movs	r0, r3
 8005d80:	f000 f935 	bl	8005fee <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d84:	1e03      	subs	r3, r0, #0
 8005d86:	d007      	beq.n	8005d98 <HAL_I2C_Mem_Write+0x23c>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d8c:	2b04      	cmp	r3, #4
 8005d8e:	d101      	bne.n	8005d94 <HAL_I2C_Mem_Write+0x238>
      {
        return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e01c      	b.n	8005dce <HAL_I2C_Mem_Write+0x272>
      }
      else
      {
        return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e01a      	b.n	8005dce <HAL_I2C_Mem_Write+0x272>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2220      	movs	r2, #32
 8005d9e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	6812      	ldr	r2, [r2, #0]
 8005da8:	6852      	ldr	r2, [r2, #4]
 8005daa:	490b      	ldr	r1, [pc, #44]	; (8005dd8 <HAL_I2C_Mem_Write+0x27c>)
 8005dac:	400a      	ands	r2, r1
 8005dae:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2241      	movs	r2, #65	; 0x41
 8005db4:	2120      	movs	r1, #32
 8005db6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2242      	movs	r2, #66	; 0x42
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2240      	movs	r2, #64	; 0x40
 8005dc4:	2100      	movs	r1, #0
 8005dc6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	e000      	b.n	8005dce <HAL_I2C_Mem_Write+0x272>
  }
  else
  {
    return HAL_BUSY;
 8005dcc:	2302      	movs	r3, #2
  }
}
 8005dce:	0018      	movs	r0, r3
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	b007      	add	sp, #28
 8005dd4:	bd90      	pop	{r4, r7, pc}
 8005dd6:	46c0      	nop			; (mov r8, r8)
 8005dd8:	fe00e800 	.word	0xfe00e800

08005ddc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ddc:	b590      	push	{r4, r7, lr}
 8005dde:	b087      	sub	sp, #28
 8005de0:	af02      	add	r7, sp, #8
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	000c      	movs	r4, r1
 8005de6:	0010      	movs	r0, r2
 8005de8:	0019      	movs	r1, r3
 8005dea:	230a      	movs	r3, #10
 8005dec:	18fb      	adds	r3, r7, r3
 8005dee:	1c22      	adds	r2, r4, #0
 8005df0:	801a      	strh	r2, [r3, #0]
 8005df2:	2308      	movs	r3, #8
 8005df4:	18fb      	adds	r3, r7, r3
 8005df6:	1c02      	adds	r2, r0, #0
 8005df8:	801a      	strh	r2, [r3, #0]
 8005dfa:	1dbb      	adds	r3, r7, #6
 8005dfc:	1c0a      	adds	r2, r1, #0
 8005dfe:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005e00:	1dbb      	adds	r3, r7, #6
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	b2da      	uxtb	r2, r3
 8005e06:	2380      	movs	r3, #128	; 0x80
 8005e08:	045c      	lsls	r4, r3, #17
 8005e0a:	230a      	movs	r3, #10
 8005e0c:	18fb      	adds	r3, r7, r3
 8005e0e:	8819      	ldrh	r1, [r3, #0]
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	2380      	movs	r3, #128	; 0x80
 8005e14:	019b      	lsls	r3, r3, #6
 8005e16:	9300      	str	r3, [sp, #0]
 8005e18:	0023      	movs	r3, r4
 8005e1a:	f000 f983 	bl	8006124 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e20:	6a39      	ldr	r1, [r7, #32]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	0018      	movs	r0, r3
 8005e26:	f000 f8a3 	bl	8005f70 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e2a:	1e03      	subs	r3, r0, #0
 8005e2c:	d007      	beq.n	8005e3e <I2C_RequestMemoryWrite+0x62>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e32:	2b04      	cmp	r3, #4
 8005e34:	d101      	bne.n	8005e3a <I2C_RequestMemoryWrite+0x5e>
    {
      return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e03b      	b.n	8005eb2 <I2C_RequestMemoryWrite+0xd6>
    }
    else
    {
      return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e039      	b.n	8005eb2 <I2C_RequestMemoryWrite+0xd6>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e3e:	1dbb      	adds	r3, r7, #6
 8005e40:	881b      	ldrh	r3, [r3, #0]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d107      	bne.n	8005e56 <I2C_RequestMemoryWrite+0x7a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2208      	movs	r2, #8
 8005e4c:	18ba      	adds	r2, r7, r2
 8005e4e:	8812      	ldrh	r2, [r2, #0]
 8005e50:	b2d2      	uxtb	r2, r2
 8005e52:	629a      	str	r2, [r3, #40]	; 0x28
 8005e54:	e01f      	b.n	8005e96 <I2C_RequestMemoryWrite+0xba>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2208      	movs	r2, #8
 8005e5c:	18ba      	adds	r2, r7, r2
 8005e5e:	8812      	ldrh	r2, [r2, #0]
 8005e60:	0a12      	lsrs	r2, r2, #8
 8005e62:	b292      	uxth	r2, r2
 8005e64:	b2d2      	uxtb	r2, r2
 8005e66:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e6a:	6a39      	ldr	r1, [r7, #32]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	0018      	movs	r0, r3
 8005e70:	f000 f87e 	bl	8005f70 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e74:	1e03      	subs	r3, r0, #0
 8005e76:	d007      	beq.n	8005e88 <I2C_RequestMemoryWrite+0xac>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e7c:	2b04      	cmp	r3, #4
 8005e7e:	d101      	bne.n	8005e84 <I2C_RequestMemoryWrite+0xa8>
      {
        return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e016      	b.n	8005eb2 <I2C_RequestMemoryWrite+0xd6>
      }
      else
      {
        return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e014      	b.n	8005eb2 <I2C_RequestMemoryWrite+0xd6>
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2208      	movs	r2, #8
 8005e8e:	18ba      	adds	r2, r7, r2
 8005e90:	8812      	ldrh	r2, [r2, #0]
 8005e92:	b2d2      	uxtb	r2, r2
 8005e94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005e96:	6a3a      	ldr	r2, [r7, #32]
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	0013      	movs	r3, r2
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	2180      	movs	r1, #128	; 0x80
 8005ea4:	f000 f82b 	bl	8005efe <I2C_WaitOnFlagUntilTimeout>
 8005ea8:	1e03      	subs	r3, r0, #0
 8005eaa:	d001      	beq.n	8005eb0 <I2C_RequestMemoryWrite+0xd4>
  {
    return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e000      	b.n	8005eb2 <I2C_RequestMemoryWrite+0xd6>
  }

return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	0018      	movs	r0, r3
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	b005      	add	sp, #20
 8005eb8:	bd90      	pop	{r4, r7, pc}

08005eba <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b082      	sub	sp, #8
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	2202      	movs	r2, #2
 8005eca:	4013      	ands	r3, r2
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d103      	bne.n	8005ed8 <I2C_Flush_TXDR+0x1e>
  {
     hi2c->Instance->TXDR = 0x00U;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d007      	beq.n	8005ef6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	6812      	ldr	r2, [r2, #0]
 8005eee:	6992      	ldr	r2, [r2, #24]
 8005ef0:	2101      	movs	r1, #1
 8005ef2:	430a      	orrs	r2, r1
 8005ef4:	619a      	str	r2, [r3, #24]
  }
}
 8005ef6:	46c0      	nop			; (mov r8, r8)
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	b002      	add	sp, #8
 8005efc:	bd80      	pop	{r7, pc}

08005efe <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b084      	sub	sp, #16
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	60f8      	str	r0, [r7, #12]
 8005f06:	60b9      	str	r1, [r7, #8]
 8005f08:	603b      	str	r3, [r7, #0]
 8005f0a:	1dfb      	adds	r3, r7, #7
 8005f0c:	701a      	strb	r2, [r3, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f0e:	e01b      	b.n	8005f48 <I2C_WaitOnFlagUntilTimeout+0x4a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	3301      	adds	r3, #1
 8005f14:	d018      	beq.n	8005f48 <I2C_WaitOnFlagUntilTimeout+0x4a>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d007      	beq.n	8005f2c <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005f1c:	f7fe fecc 	bl	8004cb8 <HAL_GetTick>
 8005f20:	0002      	movs	r2, r0
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	1ad2      	subs	r2, r2, r3
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d90d      	bls.n	8005f48 <I2C_WaitOnFlagUntilTimeout+0x4a>
      {
        hi2c->State= HAL_I2C_STATE_READY;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2241      	movs	r2, #65	; 0x41
 8005f30:	2120      	movs	r1, #32
 8005f32:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2242      	movs	r2, #66	; 0x42
 8005f38:	2100      	movs	r1, #0
 8005f3a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2240      	movs	r2, #64	; 0x40
 8005f40:	2100      	movs	r1, #0
 8005f42:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e00f      	b.n	8005f68 <I2C_WaitOnFlagUntilTimeout+0x6a>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	68ba      	ldr	r2, [r7, #8]
 8005f50:	401a      	ands	r2, r3
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	425a      	negs	r2, r3
 8005f58:	4153      	adcs	r3, r2
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	001a      	movs	r2, r3
 8005f5e:	1dfb      	adds	r3, r7, #7
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d0d4      	beq.n	8005f10 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	0018      	movs	r0, r3
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	b004      	add	sp, #16
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f7c:	e02b      	b.n	8005fd6 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	68b9      	ldr	r1, [r7, #8]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	0018      	movs	r0, r3
 8005f86:	f000 f86f 	bl	8006068 <I2C_IsAcknowledgeFailed>
 8005f8a:	1e03      	subs	r3, r0, #0
 8005f8c:	d001      	beq.n	8005f92 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e029      	b.n	8005fe6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	3301      	adds	r3, #1
 8005f96:	d01e      	beq.n	8005fd6 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d007      	beq.n	8005fae <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005f9e:	f7fe fe8b 	bl	8004cb8 <HAL_GetTick>
 8005fa2:	0002      	movs	r2, r0
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	1ad2      	subs	r2, r2, r3
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d913      	bls.n	8005fd6 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb2:	2220      	movs	r2, #32
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State= HAL_I2C_STATE_READY;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2241      	movs	r2, #65	; 0x41
 8005fbe:	2120      	movs	r1, #32
 8005fc0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2242      	movs	r2, #66	; 0x42
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2240      	movs	r2, #64	; 0x40
 8005fce:	2100      	movs	r1, #0
 8005fd0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e007      	b.n	8005fe6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	2202      	movs	r2, #2
 8005fde:	4013      	ands	r3, r2
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d1cc      	bne.n	8005f7e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	0018      	movs	r0, r3
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	b004      	add	sp, #16
 8005fec:	bd80      	pop	{r7, pc}

08005fee <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b084      	sub	sp, #16
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	60f8      	str	r0, [r7, #12]
 8005ff6:	60b9      	str	r1, [r7, #8]
 8005ff8:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ffa:	e028      	b.n	800604e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	68b9      	ldr	r1, [r7, #8]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	0018      	movs	r0, r3
 8006004:	f000 f830 	bl	8006068 <I2C_IsAcknowledgeFailed>
 8006008:	1e03      	subs	r3, r0, #0
 800600a:	d001      	beq.n	8006010 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e026      	b.n	800605e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d007      	beq.n	8006026 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006016:	f7fe fe4f 	bl	8004cb8 <HAL_GetTick>
 800601a:	0002      	movs	r2, r0
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	1ad2      	subs	r2, r2, r3
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	429a      	cmp	r2, r3
 8006024:	d913      	bls.n	800604e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800602a:	2220      	movs	r2, #32
 800602c:	431a      	orrs	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2241      	movs	r2, #65	; 0x41
 8006036:	2120      	movs	r1, #32
 8006038:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2242      	movs	r2, #66	; 0x42
 800603e:	2100      	movs	r1, #0
 8006040:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2240      	movs	r2, #64	; 0x40
 8006046:	2100      	movs	r1, #0
 8006048:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e007      	b.n	800605e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	2220      	movs	r2, #32
 8006056:	4013      	ands	r3, r2
 8006058:	2b20      	cmp	r3, #32
 800605a:	d1cf      	bne.n	8005ffc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	0018      	movs	r0, r3
 8006060:	46bd      	mov	sp, r7
 8006062:	b004      	add	sp, #16
 8006064:	bd80      	pop	{r7, pc}
	...

08006068 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	2210      	movs	r2, #16
 800607c:	4013      	ands	r3, r2
 800607e:	2b10      	cmp	r3, #16
 8006080:	d148      	bne.n	8006114 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006082:	e01b      	b.n	80060bc <I2C_IsAcknowledgeFailed+0x54>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	3301      	adds	r3, #1
 8006088:	d018      	beq.n	80060bc <I2C_IsAcknowledgeFailed+0x54>
      {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d007      	beq.n	80060a0 <I2C_IsAcknowledgeFailed+0x38>
 8006090:	f7fe fe12 	bl	8004cb8 <HAL_GetTick>
 8006094:	0002      	movs	r2, r0
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	1ad2      	subs	r2, r2, r3
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	429a      	cmp	r2, r3
 800609e:	d90d      	bls.n	80060bc <I2C_IsAcknowledgeFailed+0x54>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2241      	movs	r2, #65	; 0x41
 80060a4:	2120      	movs	r1, #32
 80060a6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2242      	movs	r2, #66	; 0x42
 80060ac:	2100      	movs	r1, #0
 80060ae:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2240      	movs	r2, #64	; 0x40
 80060b4:	2100      	movs	r1, #0
 80060b6:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e02c      	b.n	8006116 <I2C_IsAcknowledgeFailed+0xae>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	2220      	movs	r2, #32
 80060c4:	4013      	ands	r3, r2
 80060c6:	2b20      	cmp	r3, #32
 80060c8:	d1dc      	bne.n	8006084 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2210      	movs	r2, #16
 80060d0:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2220      	movs	r2, #32
 80060d8:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	0018      	movs	r0, r3
 80060de:	f7ff feec 	bl	8005eba <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	6812      	ldr	r2, [r2, #0]
 80060ea:	6852      	ldr	r2, [r2, #4]
 80060ec:	490c      	ldr	r1, [pc, #48]	; (8006120 <I2C_IsAcknowledgeFailed+0xb8>)
 80060ee:	400a      	ands	r2, r1
 80060f0:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2204      	movs	r2, #4
 80060f6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State= HAL_I2C_STATE_READY;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2241      	movs	r2, #65	; 0x41
 80060fc:	2120      	movs	r1, #32
 80060fe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2242      	movs	r2, #66	; 0x42
 8006104:	2100      	movs	r1, #0
 8006106:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2240      	movs	r2, #64	; 0x40
 800610c:	2100      	movs	r1, #0
 800610e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e000      	b.n	8006116 <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	0018      	movs	r0, r3
 8006118:	46bd      	mov	sp, r7
 800611a:	b004      	add	sp, #16
 800611c:	bd80      	pop	{r7, pc}
 800611e:	46c0      	nop			; (mov r8, r8)
 8006120:	fe00e800 	.word	0xfe00e800

08006124 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	0008      	movs	r0, r1
 800612e:	0011      	movs	r1, r2
 8006130:	607b      	str	r3, [r7, #4]
 8006132:	230a      	movs	r3, #10
 8006134:	18fb      	adds	r3, r7, r3
 8006136:	1c02      	adds	r2, r0, #0
 8006138:	801a      	strh	r2, [r3, #0]
 800613a:	2309      	movs	r3, #9
 800613c:	18fb      	adds	r3, r7, r3
 800613e:	1c0a      	adds	r2, r1, #0
 8006140:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8006142:	2300      	movs	r3, #0
 8006144:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	4a0f      	ldr	r2, [pc, #60]	; (8006190 <I2C_TransferConfig+0x6c>)
 8006152:	4013      	ands	r3, r2
 8006154:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8006156:	230a      	movs	r3, #10
 8006158:	18fb      	adds	r3, r7, r3
 800615a:	881b      	ldrh	r3, [r3, #0]
 800615c:	059b      	lsls	r3, r3, #22
 800615e:	0d9a      	lsrs	r2, r3, #22
 8006160:	2309      	movs	r3, #9
 8006162:	18fb      	adds	r3, r7, r3
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	0419      	lsls	r1, r3, #16
 8006168:	23ff      	movs	r3, #255	; 0xff
 800616a:	041b      	lsls	r3, r3, #16
 800616c:	400b      	ands	r3, r1
 800616e:	431a      	orrs	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	431a      	orrs	r2, r3
 8006174:	6a3b      	ldr	r3, [r7, #32]
 8006176:	4313      	orrs	r3, r2
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	4313      	orrs	r3, r2
 800617c:	617b      	str	r3, [r7, #20]
            (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	605a      	str	r2, [r3, #4]
}
 8006186:	46c0      	nop			; (mov r8, r8)
 8006188:	46bd      	mov	sp, r7
 800618a:	b006      	add	sp, #24
 800618c:	bd80      	pop	{r7, pc}
 800618e:	46c0      	nop			; (mov r8, r8)
 8006190:	fc009800 	.word	0xfc009800

08006194 <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	af00      	add	r7, sp, #0
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8006198:	4b04      	ldr	r3, [pc, #16]	; (80061ac <HAL_PWR_DisablePVD+0x18>)
 800619a:	4a04      	ldr	r2, [pc, #16]	; (80061ac <HAL_PWR_DisablePVD+0x18>)
 800619c:	6812      	ldr	r2, [r2, #0]
 800619e:	2110      	movs	r1, #16
 80061a0:	438a      	bics	r2, r1
 80061a2:	601a      	str	r2, [r3, #0]
}
 80061a4:	46c0      	nop			; (mov r8, r8)
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	46c0      	nop			; (mov r8, r8)
 80061ac:	40007000 	.word	0x40007000

080061b0 <HAL_PWREx_EnableFastWakeUp>:
  *        Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when 
  *        exiting from low power mode.
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	af00      	add	r7, sp, #0
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 80061b4:	4b04      	ldr	r3, [pc, #16]	; (80061c8 <HAL_PWREx_EnableFastWakeUp+0x18>)
 80061b6:	4a04      	ldr	r2, [pc, #16]	; (80061c8 <HAL_PWREx_EnableFastWakeUp+0x18>)
 80061b8:	6812      	ldr	r2, [r2, #0]
 80061ba:	2180      	movs	r1, #128	; 0x80
 80061bc:	00c9      	lsls	r1, r1, #3
 80061be:	430a      	orrs	r2, r1
 80061c0:	601a      	str	r2, [r3, #0]
}
 80061c2:	46c0      	nop			; (mov r8, r8)
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	40007000 	.word	0x40007000

080061cc <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	af00      	add	r7, sp, #0
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 80061d0:	4b04      	ldr	r3, [pc, #16]	; (80061e4 <HAL_PWREx_EnableUltraLowPower+0x18>)
 80061d2:	4a04      	ldr	r2, [pc, #16]	; (80061e4 <HAL_PWREx_EnableUltraLowPower+0x18>)
 80061d4:	6812      	ldr	r2, [r2, #0]
 80061d6:	2180      	movs	r1, #128	; 0x80
 80061d8:	0089      	lsls	r1, r1, #2
 80061da:	430a      	orrs	r2, r1
 80061dc:	601a      	str	r2, [r3, #0]
}
 80061de:	46c0      	nop			; (mov r8, r8)
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	40007000 	.word	0x40007000

080061e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b086      	sub	sp, #24
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80061f0:	2300      	movs	r3, #0
 80061f2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2201      	movs	r2, #1
 80061fa:	4013      	ands	r3, r2
 80061fc:	d100      	bne.n	8006200 <HAL_RCC_OscConfig+0x18>
 80061fe:	e087      	b.n	8006310 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006200:	4bc0      	ldr	r3, [pc, #768]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	220c      	movs	r2, #12
 8006206:	4013      	ands	r3, r2
 8006208:	2b08      	cmp	r3, #8
 800620a:	d00e      	beq.n	800622a <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800620c:	4bbd      	ldr	r3, [pc, #756]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	220c      	movs	r2, #12
 8006212:	4013      	ands	r3, r2
 8006214:	2b0c      	cmp	r3, #12
 8006216:	d116      	bne.n	8006246 <HAL_RCC_OscConfig+0x5e>
 8006218:	4bba      	ldr	r3, [pc, #744]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 800621a:	68da      	ldr	r2, [r3, #12]
 800621c:	2380      	movs	r3, #128	; 0x80
 800621e:	025b      	lsls	r3, r3, #9
 8006220:	401a      	ands	r2, r3
 8006222:	2380      	movs	r3, #128	; 0x80
 8006224:	025b      	lsls	r3, r3, #9
 8006226:	429a      	cmp	r2, r3
 8006228:	d10d      	bne.n	8006246 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800622a:	4bb6      	ldr	r3, [pc, #728]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	2380      	movs	r3, #128	; 0x80
 8006230:	029b      	lsls	r3, r3, #10
 8006232:	4013      	ands	r3, r2
 8006234:	d100      	bne.n	8006238 <HAL_RCC_OscConfig+0x50>
 8006236:	e06a      	b.n	800630e <HAL_RCC_OscConfig+0x126>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d166      	bne.n	800630e <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	f000 fb69 	bl	8006918 <HAL_RCC_OscConfig+0x730>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685a      	ldr	r2, [r3, #4]
 800624a:	2380      	movs	r3, #128	; 0x80
 800624c:	025b      	lsls	r3, r3, #9
 800624e:	429a      	cmp	r2, r3
 8006250:	d107      	bne.n	8006262 <HAL_RCC_OscConfig+0x7a>
 8006252:	4bac      	ldr	r3, [pc, #688]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 8006254:	4aab      	ldr	r2, [pc, #684]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 8006256:	6812      	ldr	r2, [r2, #0]
 8006258:	2180      	movs	r1, #128	; 0x80
 800625a:	0249      	lsls	r1, r1, #9
 800625c:	430a      	orrs	r2, r1
 800625e:	601a      	str	r2, [r3, #0]
 8006260:	e027      	b.n	80062b2 <HAL_RCC_OscConfig+0xca>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685a      	ldr	r2, [r3, #4]
 8006266:	23a0      	movs	r3, #160	; 0xa0
 8006268:	02db      	lsls	r3, r3, #11
 800626a:	429a      	cmp	r2, r3
 800626c:	d10e      	bne.n	800628c <HAL_RCC_OscConfig+0xa4>
 800626e:	4ba5      	ldr	r3, [pc, #660]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 8006270:	4aa4      	ldr	r2, [pc, #656]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 8006272:	6812      	ldr	r2, [r2, #0]
 8006274:	2180      	movs	r1, #128	; 0x80
 8006276:	02c9      	lsls	r1, r1, #11
 8006278:	430a      	orrs	r2, r1
 800627a:	601a      	str	r2, [r3, #0]
 800627c:	4ba1      	ldr	r3, [pc, #644]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 800627e:	4aa1      	ldr	r2, [pc, #644]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 8006280:	6812      	ldr	r2, [r2, #0]
 8006282:	2180      	movs	r1, #128	; 0x80
 8006284:	0249      	lsls	r1, r1, #9
 8006286:	430a      	orrs	r2, r1
 8006288:	601a      	str	r2, [r3, #0]
 800628a:	e012      	b.n	80062b2 <HAL_RCC_OscConfig+0xca>
 800628c:	4b9d      	ldr	r3, [pc, #628]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 800628e:	4a9d      	ldr	r2, [pc, #628]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 8006290:	6812      	ldr	r2, [r2, #0]
 8006292:	499d      	ldr	r1, [pc, #628]	; (8006508 <HAL_RCC_OscConfig+0x320>)
 8006294:	400a      	ands	r2, r1
 8006296:	601a      	str	r2, [r3, #0]
 8006298:	4b9a      	ldr	r3, [pc, #616]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	2380      	movs	r3, #128	; 0x80
 800629e:	025b      	lsls	r3, r3, #9
 80062a0:	4013      	ands	r3, r2
 80062a2:	60fb      	str	r3, [r7, #12]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	4b97      	ldr	r3, [pc, #604]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 80062a8:	4a96      	ldr	r2, [pc, #600]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 80062aa:	6812      	ldr	r2, [r2, #0]
 80062ac:	4997      	ldr	r1, [pc, #604]	; (800650c <HAL_RCC_OscConfig+0x324>)
 80062ae:	400a      	ands	r2, r1
 80062b0:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d014      	beq.n	80062e4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062ba:	f7fe fcfd 	bl	8004cb8 <HAL_GetTick>
 80062be:	0003      	movs	r3, r0
 80062c0:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062c2:	e008      	b.n	80062d6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062c4:	f7fe fcf8 	bl	8004cb8 <HAL_GetTick>
 80062c8:	0002      	movs	r2, r0
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	2b64      	cmp	r3, #100	; 0x64
 80062d0:	d901      	bls.n	80062d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e320      	b.n	8006918 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062d6:	4b8b      	ldr	r3, [pc, #556]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	2380      	movs	r3, #128	; 0x80
 80062dc:	029b      	lsls	r3, r3, #10
 80062de:	4013      	ands	r3, r2
 80062e0:	d0f0      	beq.n	80062c4 <HAL_RCC_OscConfig+0xdc>
 80062e2:	e015      	b.n	8006310 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062e4:	f7fe fce8 	bl	8004cb8 <HAL_GetTick>
 80062e8:	0003      	movs	r3, r0
 80062ea:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062ec:	e008      	b.n	8006300 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062ee:	f7fe fce3 	bl	8004cb8 <HAL_GetTick>
 80062f2:	0002      	movs	r2, r0
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	2b64      	cmp	r3, #100	; 0x64
 80062fa:	d901      	bls.n	8006300 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e30b      	b.n	8006918 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006300:	4b80      	ldr	r3, [pc, #512]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	2380      	movs	r3, #128	; 0x80
 8006306:	029b      	lsls	r3, r3, #10
 8006308:	4013      	ands	r3, r2
 800630a:	d1f0      	bne.n	80062ee <HAL_RCC_OscConfig+0x106>
 800630c:	e000      	b.n	8006310 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800630e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2202      	movs	r2, #2
 8006316:	4013      	ands	r3, r2
 8006318:	d100      	bne.n	800631c <HAL_RCC_OscConfig+0x134>
 800631a:	e06c      	b.n	80063f6 <HAL_RCC_OscConfig+0x20e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800631c:	4b79      	ldr	r3, [pc, #484]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	220c      	movs	r2, #12
 8006322:	4013      	ands	r3, r2
 8006324:	2b04      	cmp	r3, #4
 8006326:	d00b      	beq.n	8006340 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006328:	4b76      	ldr	r3, [pc, #472]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	220c      	movs	r2, #12
 800632e:	4013      	ands	r3, r2
 8006330:	2b0c      	cmp	r3, #12
 8006332:	d11b      	bne.n	800636c <HAL_RCC_OscConfig+0x184>
 8006334:	4b73      	ldr	r3, [pc, #460]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 8006336:	68da      	ldr	r2, [r3, #12]
 8006338:	2380      	movs	r3, #128	; 0x80
 800633a:	025b      	lsls	r3, r3, #9
 800633c:	4013      	ands	r3, r2
 800633e:	d115      	bne.n	800636c <HAL_RCC_OscConfig+0x184>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006340:	4b70      	ldr	r3, [pc, #448]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2204      	movs	r2, #4
 8006346:	4013      	ands	r3, r2
 8006348:	d005      	beq.n	8006356 <HAL_RCC_OscConfig+0x16e>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d001      	beq.n	8006356 <HAL_RCC_OscConfig+0x16e>
      {
        return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e2e0      	b.n	8006918 <HAL_RCC_OscConfig+0x730>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006356:	4a6b      	ldr	r2, [pc, #428]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 8006358:	4b6a      	ldr	r3, [pc, #424]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	496c      	ldr	r1, [pc, #432]	; (8006510 <HAL_RCC_OscConfig+0x328>)
 800635e:	4019      	ands	r1, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	021b      	lsls	r3, r3, #8
 8006366:	430b      	orrs	r3, r1
 8006368:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800636a:	e044      	b.n	80063f6 <HAL_RCC_OscConfig+0x20e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d027      	beq.n	80063c4 <HAL_RCC_OscConfig+0x1dc>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006374:	4a63      	ldr	r2, [pc, #396]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 8006376:	4b63      	ldr	r3, [pc, #396]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2109      	movs	r1, #9
 800637c:	438b      	bics	r3, r1
 800637e:	0019      	movs	r1, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	430b      	orrs	r3, r1
 8006386:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006388:	f7fe fc96 	bl	8004cb8 <HAL_GetTick>
 800638c:	0003      	movs	r3, r0
 800638e:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006390:	e008      	b.n	80063a4 <HAL_RCC_OscConfig+0x1bc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006392:	f7fe fc91 	bl	8004cb8 <HAL_GetTick>
 8006396:	0002      	movs	r2, r0
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	2b02      	cmp	r3, #2
 800639e:	d901      	bls.n	80063a4 <HAL_RCC_OscConfig+0x1bc>
          {
            return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e2b9      	b.n	8006918 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063a4:	4b57      	ldr	r3, [pc, #348]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2204      	movs	r2, #4
 80063aa:	4013      	ands	r3, r2
 80063ac:	d0f1      	beq.n	8006392 <HAL_RCC_OscConfig+0x1aa>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063ae:	4a55      	ldr	r2, [pc, #340]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 80063b0:	4b54      	ldr	r3, [pc, #336]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	4956      	ldr	r1, [pc, #344]	; (8006510 <HAL_RCC_OscConfig+0x328>)
 80063b6:	4019      	ands	r1, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	021b      	lsls	r3, r3, #8
 80063be:	430b      	orrs	r3, r1
 80063c0:	6053      	str	r3, [r2, #4]
 80063c2:	e018      	b.n	80063f6 <HAL_RCC_OscConfig+0x20e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063c4:	4b4f      	ldr	r3, [pc, #316]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 80063c6:	4a4f      	ldr	r2, [pc, #316]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 80063c8:	6812      	ldr	r2, [r2, #0]
 80063ca:	2101      	movs	r1, #1
 80063cc:	438a      	bics	r2, r1
 80063ce:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063d0:	f7fe fc72 	bl	8004cb8 <HAL_GetTick>
 80063d4:	0003      	movs	r3, r0
 80063d6:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063d8:	e008      	b.n	80063ec <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063da:	f7fe fc6d 	bl	8004cb8 <HAL_GetTick>
 80063de:	0002      	movs	r2, r0
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d901      	bls.n	80063ec <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e295      	b.n	8006918 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063ec:	4b45      	ldr	r3, [pc, #276]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2204      	movs	r2, #4
 80063f2:	4013      	ands	r3, r2
 80063f4:	d1f1      	bne.n	80063da <HAL_RCC_OscConfig+0x1f2>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2210      	movs	r2, #16
 80063fc:	4013      	ands	r3, r2
 80063fe:	d100      	bne.n	8006402 <HAL_RCC_OscConfig+0x21a>
 8006400:	e0c2      	b.n	8006588 <HAL_RCC_OscConfig+0x3a0>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8006402:	4b40      	ldr	r3, [pc, #256]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	220c      	movs	r2, #12
 8006408:	4013      	ands	r3, r2
 800640a:	d162      	bne.n	80064d2 <HAL_RCC_OscConfig+0x2ea>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800640c:	4b3d      	ldr	r3, [pc, #244]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	2380      	movs	r3, #128	; 0x80
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4013      	ands	r3, r2
 8006416:	d005      	beq.n	8006424 <HAL_RCC_OscConfig+0x23c>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	69db      	ldr	r3, [r3, #28]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d101      	bne.n	8006424 <HAL_RCC_OscConfig+0x23c>
      {
        return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e279      	b.n	8006918 <HAL_RCC_OscConfig+0x730>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006428:	4b36      	ldr	r3, [pc, #216]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 800642a:	6859      	ldr	r1, [r3, #4]
 800642c:	23e0      	movs	r3, #224	; 0xe0
 800642e:	021b      	lsls	r3, r3, #8
 8006430:	400b      	ands	r3, r1
 8006432:	429a      	cmp	r2, r3
 8006434:	d91c      	bls.n	8006470 <HAL_RCC_OscConfig+0x288>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643a:	0018      	movs	r0, r3
 800643c:	f000 fc44 	bl	8006cc8 <RCC_SetFlashLatencyFromMSIRange>
 8006440:	1e03      	subs	r3, r0, #0
 8006442:	d001      	beq.n	8006448 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e267      	b.n	8006918 <HAL_RCC_OscConfig+0x730>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006448:	4a2e      	ldr	r2, [pc, #184]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 800644a:	4b2e      	ldr	r3, [pc, #184]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	4931      	ldr	r1, [pc, #196]	; (8006514 <HAL_RCC_OscConfig+0x32c>)
 8006450:	4019      	ands	r1, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006456:	430b      	orrs	r3, r1
 8006458:	6053      	str	r3, [r2, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800645a:	4a2a      	ldr	r2, [pc, #168]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 800645c:	4b29      	ldr	r3, [pc, #164]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	021b      	lsls	r3, r3, #8
 8006462:	0a19      	lsrs	r1, r3, #8
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a1b      	ldr	r3, [r3, #32]
 8006468:	061b      	lsls	r3, r3, #24
 800646a:	430b      	orrs	r3, r1
 800646c:	6053      	str	r3, [r2, #4]
 800646e:	e01b      	b.n	80064a8 <HAL_RCC_OscConfig+0x2c0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006470:	4a24      	ldr	r2, [pc, #144]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 8006472:	4b24      	ldr	r3, [pc, #144]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	4927      	ldr	r1, [pc, #156]	; (8006514 <HAL_RCC_OscConfig+0x32c>)
 8006478:	4019      	ands	r1, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647e:	430b      	orrs	r3, r1
 8006480:	6053      	str	r3, [r2, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006482:	4a20      	ldr	r2, [pc, #128]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 8006484:	4b1f      	ldr	r3, [pc, #124]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	021b      	lsls	r3, r3, #8
 800648a:	0a19      	lsrs	r1, r3, #8
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	061b      	lsls	r3, r3, #24
 8006492:	430b      	orrs	r3, r1
 8006494:	6053      	str	r3, [r2, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649a:	0018      	movs	r0, r3
 800649c:	f000 fc14 	bl	8006cc8 <RCC_SetFlashLatencyFromMSIRange>
 80064a0:	1e03      	subs	r3, r0, #0
 80064a2:	d001      	beq.n	80064a8 <HAL_RCC_OscConfig+0x2c0>
          {
            return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e237      	b.n	8006918 <HAL_RCC_OscConfig+0x730>
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ac:	0b5b      	lsrs	r3, r3, #13
 80064ae:	3301      	adds	r3, #1
 80064b0:	2280      	movs	r2, #128	; 0x80
 80064b2:	0212      	lsls	r2, r2, #8
 80064b4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80064b6:	4b13      	ldr	r3, [pc, #76]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	091b      	lsrs	r3, r3, #4
 80064bc:	210f      	movs	r1, #15
 80064be:	400b      	ands	r3, r1
 80064c0:	4915      	ldr	r1, [pc, #84]	; (8006518 <HAL_RCC_OscConfig+0x330>)
 80064c2:	5ccb      	ldrb	r3, [r1, r3]
 80064c4:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80064c6:	4b15      	ldr	r3, [pc, #84]	; (800651c <HAL_RCC_OscConfig+0x334>)
 80064c8:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 80064ca:	2003      	movs	r0, #3
 80064cc:	f004 f8be 	bl	800a64c <HAL_InitTick>
 80064d0:	e05a      	b.n	8006588 <HAL_RCC_OscConfig+0x3a0>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	69db      	ldr	r3, [r3, #28]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d03c      	beq.n	8006554 <HAL_RCC_OscConfig+0x36c>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80064da:	4b0a      	ldr	r3, [pc, #40]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 80064dc:	4a09      	ldr	r2, [pc, #36]	; (8006504 <HAL_RCC_OscConfig+0x31c>)
 80064de:	6812      	ldr	r2, [r2, #0]
 80064e0:	2180      	movs	r1, #128	; 0x80
 80064e2:	0049      	lsls	r1, r1, #1
 80064e4:	430a      	orrs	r2, r1
 80064e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064e8:	f7fe fbe6 	bl	8004cb8 <HAL_GetTick>
 80064ec:	0003      	movs	r3, r0
 80064ee:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80064f0:	e016      	b.n	8006520 <HAL_RCC_OscConfig+0x338>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80064f2:	f7fe fbe1 	bl	8004cb8 <HAL_GetTick>
 80064f6:	0002      	movs	r2, r0
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d90f      	bls.n	8006520 <HAL_RCC_OscConfig+0x338>
          {
            return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e209      	b.n	8006918 <HAL_RCC_OscConfig+0x730>
 8006504:	40021000 	.word	0x40021000
 8006508:	fffeffff 	.word	0xfffeffff
 800650c:	fffbffff 	.word	0xfffbffff
 8006510:	ffffe0ff 	.word	0xffffe0ff
 8006514:	ffff1fff 	.word	0xffff1fff
 8006518:	0800e69c 	.word	0x0800e69c
 800651c:	2000002c 	.word	0x2000002c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8006520:	4bc7      	ldr	r3, [pc, #796]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	2380      	movs	r3, #128	; 0x80
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4013      	ands	r3, r2
 800652a:	d0e2      	beq.n	80064f2 <HAL_RCC_OscConfig+0x30a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800652c:	4ac4      	ldr	r2, [pc, #784]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 800652e:	4bc4      	ldr	r3, [pc, #784]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	49c4      	ldr	r1, [pc, #784]	; (8006844 <HAL_RCC_OscConfig+0x65c>)
 8006534:	4019      	ands	r1, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653a:	430b      	orrs	r3, r1
 800653c:	6053      	str	r3, [r2, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800653e:	4ac0      	ldr	r2, [pc, #768]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 8006540:	4bbf      	ldr	r3, [pc, #764]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	021b      	lsls	r3, r3, #8
 8006546:	0a19      	lsrs	r1, r3, #8
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	061b      	lsls	r3, r3, #24
 800654e:	430b      	orrs	r3, r1
 8006550:	6053      	str	r3, [r2, #4]
 8006552:	e019      	b.n	8006588 <HAL_RCC_OscConfig+0x3a0>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006554:	4bba      	ldr	r3, [pc, #744]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 8006556:	4aba      	ldr	r2, [pc, #744]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 8006558:	6812      	ldr	r2, [r2, #0]
 800655a:	49bb      	ldr	r1, [pc, #748]	; (8006848 <HAL_RCC_OscConfig+0x660>)
 800655c:	400a      	ands	r2, r1
 800655e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006560:	f7fe fbaa 	bl	8004cb8 <HAL_GetTick>
 8006564:	0003      	movs	r3, r0
 8006566:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8006568:	e008      	b.n	800657c <HAL_RCC_OscConfig+0x394>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800656a:	f7fe fba5 	bl	8004cb8 <HAL_GetTick>
 800656e:	0002      	movs	r2, r0
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	2b02      	cmp	r3, #2
 8006576:	d901      	bls.n	800657c <HAL_RCC_OscConfig+0x394>
          {
            return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e1cd      	b.n	8006918 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 800657c:	4bb0      	ldr	r3, [pc, #704]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	2380      	movs	r3, #128	; 0x80
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4013      	ands	r3, r2
 8006586:	d1f0      	bne.n	800656a <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }  
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2208      	movs	r2, #8
 800658e:	4013      	ands	r3, r2
 8006590:	d036      	beq.n	8006600 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d019      	beq.n	80065ce <HAL_RCC_OscConfig+0x3e6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800659a:	4ba9      	ldr	r3, [pc, #676]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 800659c:	4aa8      	ldr	r2, [pc, #672]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 800659e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80065a0:	2101      	movs	r1, #1
 80065a2:	430a      	orrs	r2, r1
 80065a4:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065a6:	f7fe fb87 	bl	8004cb8 <HAL_GetTick>
 80065aa:	0003      	movs	r3, r0
 80065ac:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065ae:	e008      	b.n	80065c2 <HAL_RCC_OscConfig+0x3da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065b0:	f7fe fb82 	bl	8004cb8 <HAL_GetTick>
 80065b4:	0002      	movs	r2, r0
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d901      	bls.n	80065c2 <HAL_RCC_OscConfig+0x3da>
        {
          return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e1aa      	b.n	8006918 <HAL_RCC_OscConfig+0x730>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065c2:	4b9f      	ldr	r3, [pc, #636]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 80065c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065c6:	2202      	movs	r2, #2
 80065c8:	4013      	ands	r3, r2
 80065ca:	d0f1      	beq.n	80065b0 <HAL_RCC_OscConfig+0x3c8>
 80065cc:	e018      	b.n	8006600 <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065ce:	4b9c      	ldr	r3, [pc, #624]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 80065d0:	4a9b      	ldr	r2, [pc, #620]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 80065d2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80065d4:	2101      	movs	r1, #1
 80065d6:	438a      	bics	r2, r1
 80065d8:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065da:	f7fe fb6d 	bl	8004cb8 <HAL_GetTick>
 80065de:	0003      	movs	r3, r0
 80065e0:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065e2:	e008      	b.n	80065f6 <HAL_RCC_OscConfig+0x40e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065e4:	f7fe fb68 	bl	8004cb8 <HAL_GetTick>
 80065e8:	0002      	movs	r2, r0
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d901      	bls.n	80065f6 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e190      	b.n	8006918 <HAL_RCC_OscConfig+0x730>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065f6:	4b92      	ldr	r3, [pc, #584]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 80065f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065fa:	2202      	movs	r2, #2
 80065fc:	4013      	ands	r3, r2
 80065fe:	d1f1      	bne.n	80065e4 <HAL_RCC_OscConfig+0x3fc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2204      	movs	r2, #4
 8006606:	4013      	ands	r3, r2
 8006608:	d100      	bne.n	800660c <HAL_RCC_OscConfig+0x424>
 800660a:	e0af      	b.n	800676c <HAL_RCC_OscConfig+0x584>
  {
    FlagStatus       pwrclkchanged = RESET;
 800660c:	2317      	movs	r3, #23
 800660e:	18fb      	adds	r3, r7, r3
 8006610:	2200      	movs	r2, #0
 8006612:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006614:	4b8a      	ldr	r3, [pc, #552]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 8006616:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006618:	2380      	movs	r3, #128	; 0x80
 800661a:	055b      	lsls	r3, r3, #21
 800661c:	4013      	ands	r3, r2
 800661e:	d10a      	bne.n	8006636 <HAL_RCC_OscConfig+0x44e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006620:	4b87      	ldr	r3, [pc, #540]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 8006622:	4a87      	ldr	r2, [pc, #540]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 8006624:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006626:	2180      	movs	r1, #128	; 0x80
 8006628:	0549      	lsls	r1, r1, #21
 800662a:	430a      	orrs	r2, r1
 800662c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800662e:	2317      	movs	r3, #23
 8006630:	18fb      	adds	r3, r7, r3
 8006632:	2201      	movs	r2, #1
 8006634:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006636:	4b85      	ldr	r3, [pc, #532]	; (800684c <HAL_RCC_OscConfig+0x664>)
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	2380      	movs	r3, #128	; 0x80
 800663c:	005b      	lsls	r3, r3, #1
 800663e:	4013      	ands	r3, r2
 8006640:	d11a      	bne.n	8006678 <HAL_RCC_OscConfig+0x490>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006642:	4b82      	ldr	r3, [pc, #520]	; (800684c <HAL_RCC_OscConfig+0x664>)
 8006644:	4a81      	ldr	r2, [pc, #516]	; (800684c <HAL_RCC_OscConfig+0x664>)
 8006646:	6812      	ldr	r2, [r2, #0]
 8006648:	2180      	movs	r1, #128	; 0x80
 800664a:	0049      	lsls	r1, r1, #1
 800664c:	430a      	orrs	r2, r1
 800664e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006650:	f7fe fb32 	bl	8004cb8 <HAL_GetTick>
 8006654:	0003      	movs	r3, r0
 8006656:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006658:	e008      	b.n	800666c <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800665a:	f7fe fb2d 	bl	8004cb8 <HAL_GetTick>
 800665e:	0002      	movs	r2, r0
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	2b64      	cmp	r3, #100	; 0x64
 8006666:	d901      	bls.n	800666c <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e155      	b.n	8006918 <HAL_RCC_OscConfig+0x730>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800666c:	4b77      	ldr	r3, [pc, #476]	; (800684c <HAL_RCC_OscConfig+0x664>)
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	2380      	movs	r3, #128	; 0x80
 8006672:	005b      	lsls	r3, r3, #1
 8006674:	4013      	ands	r3, r2
 8006676:	d0f0      	beq.n	800665a <HAL_RCC_OscConfig+0x472>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	689a      	ldr	r2, [r3, #8]
 800667c:	2380      	movs	r3, #128	; 0x80
 800667e:	005b      	lsls	r3, r3, #1
 8006680:	429a      	cmp	r2, r3
 8006682:	d107      	bne.n	8006694 <HAL_RCC_OscConfig+0x4ac>
 8006684:	4b6e      	ldr	r3, [pc, #440]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 8006686:	4a6e      	ldr	r2, [pc, #440]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 8006688:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800668a:	2180      	movs	r1, #128	; 0x80
 800668c:	0049      	lsls	r1, r1, #1
 800668e:	430a      	orrs	r2, r1
 8006690:	651a      	str	r2, [r3, #80]	; 0x50
 8006692:	e031      	b.n	80066f8 <HAL_RCC_OscConfig+0x510>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10c      	bne.n	80066b6 <HAL_RCC_OscConfig+0x4ce>
 800669c:	4b68      	ldr	r3, [pc, #416]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 800669e:	4a68      	ldr	r2, [pc, #416]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 80066a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80066a2:	4969      	ldr	r1, [pc, #420]	; (8006848 <HAL_RCC_OscConfig+0x660>)
 80066a4:	400a      	ands	r2, r1
 80066a6:	651a      	str	r2, [r3, #80]	; 0x50
 80066a8:	4b65      	ldr	r3, [pc, #404]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 80066aa:	4a65      	ldr	r2, [pc, #404]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 80066ac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80066ae:	4968      	ldr	r1, [pc, #416]	; (8006850 <HAL_RCC_OscConfig+0x668>)
 80066b0:	400a      	ands	r2, r1
 80066b2:	651a      	str	r2, [r3, #80]	; 0x50
 80066b4:	e020      	b.n	80066f8 <HAL_RCC_OscConfig+0x510>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	689a      	ldr	r2, [r3, #8]
 80066ba:	23a0      	movs	r3, #160	; 0xa0
 80066bc:	00db      	lsls	r3, r3, #3
 80066be:	429a      	cmp	r2, r3
 80066c0:	d10e      	bne.n	80066e0 <HAL_RCC_OscConfig+0x4f8>
 80066c2:	4b5f      	ldr	r3, [pc, #380]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 80066c4:	4a5e      	ldr	r2, [pc, #376]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 80066c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80066c8:	2180      	movs	r1, #128	; 0x80
 80066ca:	00c9      	lsls	r1, r1, #3
 80066cc:	430a      	orrs	r2, r1
 80066ce:	651a      	str	r2, [r3, #80]	; 0x50
 80066d0:	4b5b      	ldr	r3, [pc, #364]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 80066d2:	4a5b      	ldr	r2, [pc, #364]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 80066d4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80066d6:	2180      	movs	r1, #128	; 0x80
 80066d8:	0049      	lsls	r1, r1, #1
 80066da:	430a      	orrs	r2, r1
 80066dc:	651a      	str	r2, [r3, #80]	; 0x50
 80066de:	e00b      	b.n	80066f8 <HAL_RCC_OscConfig+0x510>
 80066e0:	4b57      	ldr	r3, [pc, #348]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 80066e2:	4a57      	ldr	r2, [pc, #348]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 80066e4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80066e6:	4958      	ldr	r1, [pc, #352]	; (8006848 <HAL_RCC_OscConfig+0x660>)
 80066e8:	400a      	ands	r2, r1
 80066ea:	651a      	str	r2, [r3, #80]	; 0x50
 80066ec:	4b54      	ldr	r3, [pc, #336]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 80066ee:	4a54      	ldr	r2, [pc, #336]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 80066f0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80066f2:	4957      	ldr	r1, [pc, #348]	; (8006850 <HAL_RCC_OscConfig+0x668>)
 80066f4:	400a      	ands	r2, r1
 80066f6:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d015      	beq.n	800672c <HAL_RCC_OscConfig+0x544>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006700:	f7fe fada 	bl	8004cb8 <HAL_GetTick>
 8006704:	0003      	movs	r3, r0
 8006706:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006708:	e009      	b.n	800671e <HAL_RCC_OscConfig+0x536>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800670a:	f7fe fad5 	bl	8004cb8 <HAL_GetTick>
 800670e:	0002      	movs	r2, r0
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	4a4f      	ldr	r2, [pc, #316]	; (8006854 <HAL_RCC_OscConfig+0x66c>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d901      	bls.n	800671e <HAL_RCC_OscConfig+0x536>
        {
          return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e0fc      	b.n	8006918 <HAL_RCC_OscConfig+0x730>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800671e:	4b48      	ldr	r3, [pc, #288]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 8006720:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006722:	2380      	movs	r3, #128	; 0x80
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4013      	ands	r3, r2
 8006728:	d0ef      	beq.n	800670a <HAL_RCC_OscConfig+0x522>
 800672a:	e014      	b.n	8006756 <HAL_RCC_OscConfig+0x56e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800672c:	f7fe fac4 	bl	8004cb8 <HAL_GetTick>
 8006730:	0003      	movs	r3, r0
 8006732:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006734:	e009      	b.n	800674a <HAL_RCC_OscConfig+0x562>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006736:	f7fe fabf 	bl	8004cb8 <HAL_GetTick>
 800673a:	0002      	movs	r2, r0
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	4a44      	ldr	r2, [pc, #272]	; (8006854 <HAL_RCC_OscConfig+0x66c>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d901      	bls.n	800674a <HAL_RCC_OscConfig+0x562>
        {
          return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e0e6      	b.n	8006918 <HAL_RCC_OscConfig+0x730>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800674a:	4b3d      	ldr	r3, [pc, #244]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 800674c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800674e:	2380      	movs	r3, #128	; 0x80
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4013      	ands	r3, r2
 8006754:	d1ef      	bne.n	8006736 <HAL_RCC_OscConfig+0x54e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006756:	2317      	movs	r3, #23
 8006758:	18fb      	adds	r3, r7, r3
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d105      	bne.n	800676c <HAL_RCC_OscConfig+0x584>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006760:	4b37      	ldr	r3, [pc, #220]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 8006762:	4a37      	ldr	r2, [pc, #220]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 8006764:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006766:	493c      	ldr	r1, [pc, #240]	; (8006858 <HAL_RCC_OscConfig+0x670>)
 8006768:	400a      	ands	r2, r1
 800676a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2220      	movs	r2, #32
 8006772:	4013      	ands	r3, r2
 8006774:	d049      	beq.n	800680a <HAL_RCC_OscConfig+0x622>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d026      	beq.n	80067cc <HAL_RCC_OscConfig+0x5e4>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800677e:	4b30      	ldr	r3, [pc, #192]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 8006780:	4a2f      	ldr	r2, [pc, #188]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 8006782:	6892      	ldr	r2, [r2, #8]
 8006784:	2101      	movs	r1, #1
 8006786:	430a      	orrs	r2, r1
 8006788:	609a      	str	r2, [r3, #8]
 800678a:	4b2d      	ldr	r3, [pc, #180]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 800678c:	4a2c      	ldr	r2, [pc, #176]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 800678e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006790:	2101      	movs	r1, #1
 8006792:	430a      	orrs	r2, r1
 8006794:	635a      	str	r2, [r3, #52]	; 0x34
 8006796:	4b31      	ldr	r3, [pc, #196]	; (800685c <HAL_RCC_OscConfig+0x674>)
 8006798:	4a30      	ldr	r2, [pc, #192]	; (800685c <HAL_RCC_OscConfig+0x674>)
 800679a:	6a12      	ldr	r2, [r2, #32]
 800679c:	2180      	movs	r1, #128	; 0x80
 800679e:	0189      	lsls	r1, r1, #6
 80067a0:	430a      	orrs	r2, r1
 80067a2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067a4:	f7fe fa88 	bl	8004cb8 <HAL_GetTick>
 80067a8:	0003      	movs	r3, r0
 80067aa:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80067ac:	e008      	b.n	80067c0 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067ae:	f7fe fa83 	bl	8004cb8 <HAL_GetTick>
 80067b2:	0002      	movs	r2, r0
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d901      	bls.n	80067c0 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e0ab      	b.n	8006918 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80067c0:	4b1f      	ldr	r3, [pc, #124]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	2202      	movs	r2, #2
 80067c6:	4013      	ands	r3, r2
 80067c8:	d0f1      	beq.n	80067ae <HAL_RCC_OscConfig+0x5c6>
 80067ca:	e01e      	b.n	800680a <HAL_RCC_OscConfig+0x622>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80067cc:	4b1c      	ldr	r3, [pc, #112]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 80067ce:	4a1c      	ldr	r2, [pc, #112]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 80067d0:	6892      	ldr	r2, [r2, #8]
 80067d2:	2101      	movs	r1, #1
 80067d4:	438a      	bics	r2, r1
 80067d6:	609a      	str	r2, [r3, #8]
 80067d8:	4b20      	ldr	r3, [pc, #128]	; (800685c <HAL_RCC_OscConfig+0x674>)
 80067da:	4a20      	ldr	r2, [pc, #128]	; (800685c <HAL_RCC_OscConfig+0x674>)
 80067dc:	6a12      	ldr	r2, [r2, #32]
 80067de:	4920      	ldr	r1, [pc, #128]	; (8006860 <HAL_RCC_OscConfig+0x678>)
 80067e0:	400a      	ands	r2, r1
 80067e2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067e4:	f7fe fa68 	bl	8004cb8 <HAL_GetTick>
 80067e8:	0003      	movs	r3, r0
 80067ea:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80067ec:	e008      	b.n	8006800 <HAL_RCC_OscConfig+0x618>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067ee:	f7fe fa63 	bl	8004cb8 <HAL_GetTick>
 80067f2:	0002      	movs	r2, r0
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d901      	bls.n	8006800 <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e08b      	b.n	8006918 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8006800:	4b0f      	ldr	r3, [pc, #60]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	2202      	movs	r2, #2
 8006806:	4013      	ands	r3, r2
 8006808:	d1f1      	bne.n	80067ee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800680e:	2b00      	cmp	r3, #0
 8006810:	d100      	bne.n	8006814 <HAL_RCC_OscConfig+0x62c>
 8006812:	e080      	b.n	8006916 <HAL_RCC_OscConfig+0x72e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006814:	4b0a      	ldr	r3, [pc, #40]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	220c      	movs	r2, #12
 800681a:	4013      	ands	r3, r2
 800681c:	2b0c      	cmp	r3, #12
 800681e:	d100      	bne.n	8006822 <HAL_RCC_OscConfig+0x63a>
 8006820:	e077      	b.n	8006912 <HAL_RCC_OscConfig+0x72a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006826:	2b02      	cmp	r3, #2
 8006828:	d158      	bne.n	80068dc <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800682a:	4b05      	ldr	r3, [pc, #20]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 800682c:	4a04      	ldr	r2, [pc, #16]	; (8006840 <HAL_RCC_OscConfig+0x658>)
 800682e:	6812      	ldr	r2, [r2, #0]
 8006830:	490c      	ldr	r1, [pc, #48]	; (8006864 <HAL_RCC_OscConfig+0x67c>)
 8006832:	400a      	ands	r2, r1
 8006834:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006836:	f7fe fa3f 	bl	8004cb8 <HAL_GetTick>
 800683a:	0003      	movs	r3, r0
 800683c:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800683e:	e01c      	b.n	800687a <HAL_RCC_OscConfig+0x692>
 8006840:	40021000 	.word	0x40021000
 8006844:	ffff1fff 	.word	0xffff1fff
 8006848:	fffffeff 	.word	0xfffffeff
 800684c:	40007000 	.word	0x40007000
 8006850:	fffffbff 	.word	0xfffffbff
 8006854:	00001388 	.word	0x00001388
 8006858:	efffffff 	.word	0xefffffff
 800685c:	40010000 	.word	0x40010000
 8006860:	ffffdfff 	.word	0xffffdfff
 8006864:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006868:	f7fe fa26 	bl	8004cb8 <HAL_GetTick>
 800686c:	0002      	movs	r2, r0
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	2b02      	cmp	r3, #2
 8006874:	d901      	bls.n	800687a <HAL_RCC_OscConfig+0x692>
          {
            return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e04e      	b.n	8006918 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800687a:	4b29      	ldr	r3, [pc, #164]	; (8006920 <HAL_RCC_OscConfig+0x738>)
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	2380      	movs	r3, #128	; 0x80
 8006880:	049b      	lsls	r3, r3, #18
 8006882:	4013      	ands	r3, r2
 8006884:	d1f0      	bne.n	8006868 <HAL_RCC_OscConfig+0x680>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006886:	4a26      	ldr	r2, [pc, #152]	; (8006920 <HAL_RCC_OscConfig+0x738>)
 8006888:	4b25      	ldr	r3, [pc, #148]	; (8006920 <HAL_RCC_OscConfig+0x738>)
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	4925      	ldr	r1, [pc, #148]	; (8006924 <HAL_RCC_OscConfig+0x73c>)
 800688e:	4019      	ands	r1, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006898:	4318      	orrs	r0, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800689e:	4303      	orrs	r3, r0
 80068a0:	430b      	orrs	r3, r1
 80068a2:	60d3      	str	r3, [r2, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068a4:	4b1e      	ldr	r3, [pc, #120]	; (8006920 <HAL_RCC_OscConfig+0x738>)
 80068a6:	4a1e      	ldr	r2, [pc, #120]	; (8006920 <HAL_RCC_OscConfig+0x738>)
 80068a8:	6812      	ldr	r2, [r2, #0]
 80068aa:	2180      	movs	r1, #128	; 0x80
 80068ac:	0449      	lsls	r1, r1, #17
 80068ae:	430a      	orrs	r2, r1
 80068b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068b2:	f7fe fa01 	bl	8004cb8 <HAL_GetTick>
 80068b6:	0003      	movs	r3, r0
 80068b8:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80068ba:	e008      	b.n	80068ce <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068bc:	f7fe f9fc 	bl	8004cb8 <HAL_GetTick>
 80068c0:	0002      	movs	r2, r0
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d901      	bls.n	80068ce <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e024      	b.n	8006918 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80068ce:	4b14      	ldr	r3, [pc, #80]	; (8006920 <HAL_RCC_OscConfig+0x738>)
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	2380      	movs	r3, #128	; 0x80
 80068d4:	049b      	lsls	r3, r3, #18
 80068d6:	4013      	ands	r3, r2
 80068d8:	d0f0      	beq.n	80068bc <HAL_RCC_OscConfig+0x6d4>
 80068da:	e01c      	b.n	8006916 <HAL_RCC_OscConfig+0x72e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068dc:	4b10      	ldr	r3, [pc, #64]	; (8006920 <HAL_RCC_OscConfig+0x738>)
 80068de:	4a10      	ldr	r2, [pc, #64]	; (8006920 <HAL_RCC_OscConfig+0x738>)
 80068e0:	6812      	ldr	r2, [r2, #0]
 80068e2:	4911      	ldr	r1, [pc, #68]	; (8006928 <HAL_RCC_OscConfig+0x740>)
 80068e4:	400a      	ands	r2, r1
 80068e6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068e8:	f7fe f9e6 	bl	8004cb8 <HAL_GetTick>
 80068ec:	0003      	movs	r3, r0
 80068ee:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068f0:	e008      	b.n	8006904 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068f2:	f7fe f9e1 	bl	8004cb8 <HAL_GetTick>
 80068f6:	0002      	movs	r2, r0
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d901      	bls.n	8006904 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e009      	b.n	8006918 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006904:	4b06      	ldr	r3, [pc, #24]	; (8006920 <HAL_RCC_OscConfig+0x738>)
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	2380      	movs	r3, #128	; 0x80
 800690a:	049b      	lsls	r3, r3, #18
 800690c:	4013      	ands	r3, r2
 800690e:	d1f0      	bne.n	80068f2 <HAL_RCC_OscConfig+0x70a>
 8006910:	e001      	b.n	8006916 <HAL_RCC_OscConfig+0x72e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e000      	b.n	8006918 <HAL_RCC_OscConfig+0x730>
    }
  }
  
  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	0018      	movs	r0, r3
 800691a:	46bd      	mov	sp, r7
 800691c:	b006      	add	sp, #24
 800691e:	bd80      	pop	{r7, pc}
 8006920:	40021000 	.word	0x40021000
 8006924:	ff02ffff 	.word	0xff02ffff
 8006928:	feffffff 	.word	0xfeffffff

0800692c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006936:	2300      	movs	r3, #0
 8006938:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800693a:	4b82      	ldr	r3, [pc, #520]	; (8006b44 <HAL_RCC_ClockConfig+0x218>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2201      	movs	r2, #1
 8006940:	401a      	ands	r2, r3
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	429a      	cmp	r2, r3
 8006946:	d211      	bcs.n	800696c <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006948:	4b7e      	ldr	r3, [pc, #504]	; (8006b44 <HAL_RCC_ClockConfig+0x218>)
 800694a:	4a7e      	ldr	r2, [pc, #504]	; (8006b44 <HAL_RCC_ClockConfig+0x218>)
 800694c:	6812      	ldr	r2, [r2, #0]
 800694e:	2101      	movs	r1, #1
 8006950:	438a      	bics	r2, r1
 8006952:	0011      	movs	r1, r2
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	430a      	orrs	r2, r1
 8006958:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800695a:	4b7a      	ldr	r3, [pc, #488]	; (8006b44 <HAL_RCC_ClockConfig+0x218>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2201      	movs	r2, #1
 8006960:	401a      	ands	r2, r3
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	429a      	cmp	r2, r3
 8006966:	d001      	beq.n	800696c <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e0e6      	b.n	8006b3a <HAL_RCC_ClockConfig+0x20e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2202      	movs	r2, #2
 8006972:	4013      	ands	r3, r2
 8006974:	d009      	beq.n	800698a <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006976:	4a74      	ldr	r2, [pc, #464]	; (8006b48 <HAL_RCC_ClockConfig+0x21c>)
 8006978:	4b73      	ldr	r3, [pc, #460]	; (8006b48 <HAL_RCC_ClockConfig+0x21c>)
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	21f0      	movs	r1, #240	; 0xf0
 800697e:	438b      	bics	r3, r1
 8006980:	0019      	movs	r1, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	430b      	orrs	r3, r1
 8006988:	60d3      	str	r3, [r2, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2201      	movs	r2, #1
 8006990:	4013      	ands	r3, r2
 8006992:	d100      	bne.n	8006996 <HAL_RCC_ClockConfig+0x6a>
 8006994:	e089      	b.n	8006aaa <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	2b02      	cmp	r3, #2
 800699c:	d107      	bne.n	80069ae <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800699e:	4b6a      	ldr	r3, [pc, #424]	; (8006b48 <HAL_RCC_ClockConfig+0x21c>)
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	2380      	movs	r3, #128	; 0x80
 80069a4:	029b      	lsls	r3, r3, #10
 80069a6:	4013      	ands	r3, r2
 80069a8:	d120      	bne.n	80069ec <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e0c5      	b.n	8006b3a <HAL_RCC_ClockConfig+0x20e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	2b03      	cmp	r3, #3
 80069b4:	d107      	bne.n	80069c6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069b6:	4b64      	ldr	r3, [pc, #400]	; (8006b48 <HAL_RCC_ClockConfig+0x21c>)
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	2380      	movs	r3, #128	; 0x80
 80069bc:	049b      	lsls	r3, r3, #18
 80069be:	4013      	ands	r3, r2
 80069c0:	d114      	bne.n	80069ec <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e0b9      	b.n	8006b3a <HAL_RCC_ClockConfig+0x20e>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d106      	bne.n	80069dc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069ce:	4b5e      	ldr	r3, [pc, #376]	; (8006b48 <HAL_RCC_ClockConfig+0x21c>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2204      	movs	r2, #4
 80069d4:	4013      	ands	r3, r2
 80069d6:	d109      	bne.n	80069ec <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e0ae      	b.n	8006b3a <HAL_RCC_ClockConfig+0x20e>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80069dc:	4b5a      	ldr	r3, [pc, #360]	; (8006b48 <HAL_RCC_ClockConfig+0x21c>)
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	2380      	movs	r3, #128	; 0x80
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4013      	ands	r3, r2
 80069e6:	d101      	bne.n	80069ec <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e0a6      	b.n	8006b3a <HAL_RCC_ClockConfig+0x20e>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069ec:	4a56      	ldr	r2, [pc, #344]	; (8006b48 <HAL_RCC_ClockConfig+0x21c>)
 80069ee:	4b56      	ldr	r3, [pc, #344]	; (8006b48 <HAL_RCC_ClockConfig+0x21c>)
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	2103      	movs	r1, #3
 80069f4:	438b      	bics	r3, r1
 80069f6:	0019      	movs	r1, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	430b      	orrs	r3, r1
 80069fe:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a00:	f7fe f95a 	bl	8004cb8 <HAL_GetTick>
 8006a04:	0003      	movs	r3, r0
 8006a06:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d111      	bne.n	8006a34 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a10:	e009      	b.n	8006a26 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a12:	f7fe f951 	bl	8004cb8 <HAL_GetTick>
 8006a16:	0002      	movs	r2, r0
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	4a4b      	ldr	r2, [pc, #300]	; (8006b4c <HAL_RCC_ClockConfig+0x220>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d901      	bls.n	8006a26 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e089      	b.n	8006b3a <HAL_RCC_ClockConfig+0x20e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a26:	4b48      	ldr	r3, [pc, #288]	; (8006b48 <HAL_RCC_ClockConfig+0x21c>)
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	220c      	movs	r2, #12
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	2b08      	cmp	r3, #8
 8006a30:	d1ef      	bne.n	8006a12 <HAL_RCC_ClockConfig+0xe6>
 8006a32:	e03a      	b.n	8006aaa <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	2b03      	cmp	r3, #3
 8006a3a:	d111      	bne.n	8006a60 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a3c:	e009      	b.n	8006a52 <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a3e:	f7fe f93b 	bl	8004cb8 <HAL_GetTick>
 8006a42:	0002      	movs	r2, r0
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	4a40      	ldr	r2, [pc, #256]	; (8006b4c <HAL_RCC_ClockConfig+0x220>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d901      	bls.n	8006a52 <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e073      	b.n	8006b3a <HAL_RCC_ClockConfig+0x20e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a52:	4b3d      	ldr	r3, [pc, #244]	; (8006b48 <HAL_RCC_ClockConfig+0x21c>)
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	220c      	movs	r2, #12
 8006a58:	4013      	ands	r3, r2
 8006a5a:	2b0c      	cmp	r3, #12
 8006a5c:	d1ef      	bne.n	8006a3e <HAL_RCC_ClockConfig+0x112>
 8006a5e:	e024      	b.n	8006aaa <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d11b      	bne.n	8006aa0 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a68:	e009      	b.n	8006a7e <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a6a:	f7fe f925 	bl	8004cb8 <HAL_GetTick>
 8006a6e:	0002      	movs	r2, r0
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	4a35      	ldr	r2, [pc, #212]	; (8006b4c <HAL_RCC_ClockConfig+0x220>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d901      	bls.n	8006a7e <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e05d      	b.n	8006b3a <HAL_RCC_ClockConfig+0x20e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a7e:	4b32      	ldr	r3, [pc, #200]	; (8006b48 <HAL_RCC_ClockConfig+0x21c>)
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	220c      	movs	r2, #12
 8006a84:	4013      	ands	r3, r2
 8006a86:	2b04      	cmp	r3, #4
 8006a88:	d1ef      	bne.n	8006a6a <HAL_RCC_ClockConfig+0x13e>
 8006a8a:	e00e      	b.n	8006aaa <HAL_RCC_ClockConfig+0x17e>
    }      
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a8c:	f7fe f914 	bl	8004cb8 <HAL_GetTick>
 8006a90:	0002      	movs	r2, r0
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	4a2d      	ldr	r2, [pc, #180]	; (8006b4c <HAL_RCC_ClockConfig+0x220>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d901      	bls.n	8006aa0 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e04c      	b.n	8006b3a <HAL_RCC_ClockConfig+0x20e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006aa0:	4b29      	ldr	r3, [pc, #164]	; (8006b48 <HAL_RCC_ClockConfig+0x21c>)
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	220c      	movs	r2, #12
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	d1f0      	bne.n	8006a8c <HAL_RCC_ClockConfig+0x160>
        }
      }
    }
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8006aaa:	4b26      	ldr	r3, [pc, #152]	; (8006b44 <HAL_RCC_ClockConfig+0x218>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	401a      	ands	r2, r3
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d911      	bls.n	8006adc <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ab8:	4b22      	ldr	r3, [pc, #136]	; (8006b44 <HAL_RCC_ClockConfig+0x218>)
 8006aba:	4a22      	ldr	r2, [pc, #136]	; (8006b44 <HAL_RCC_ClockConfig+0x218>)
 8006abc:	6812      	ldr	r2, [r2, #0]
 8006abe:	2101      	movs	r1, #1
 8006ac0:	438a      	bics	r2, r1
 8006ac2:	0011      	movs	r1, r2
 8006ac4:	683a      	ldr	r2, [r7, #0]
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006aca:	4b1e      	ldr	r3, [pc, #120]	; (8006b44 <HAL_RCC_ClockConfig+0x218>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	401a      	ands	r2, r3
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d001      	beq.n	8006adc <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e02e      	b.n	8006b3a <HAL_RCC_ClockConfig+0x20e>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2204      	movs	r2, #4
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	d008      	beq.n	8006af8 <HAL_RCC_ClockConfig+0x1cc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ae6:	4a18      	ldr	r2, [pc, #96]	; (8006b48 <HAL_RCC_ClockConfig+0x21c>)
 8006ae8:	4b17      	ldr	r3, [pc, #92]	; (8006b48 <HAL_RCC_ClockConfig+0x21c>)
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	4918      	ldr	r1, [pc, #96]	; (8006b50 <HAL_RCC_ClockConfig+0x224>)
 8006aee:	4019      	ands	r1, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	430b      	orrs	r3, r1
 8006af6:	60d3      	str	r3, [r2, #12]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2208      	movs	r2, #8
 8006afe:	4013      	ands	r3, r2
 8006b00:	d009      	beq.n	8006b16 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006b02:	4a11      	ldr	r2, [pc, #68]	; (8006b48 <HAL_RCC_ClockConfig+0x21c>)
 8006b04:	4b10      	ldr	r3, [pc, #64]	; (8006b48 <HAL_RCC_ClockConfig+0x21c>)
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	4912      	ldr	r1, [pc, #72]	; (8006b54 <HAL_RCC_ClockConfig+0x228>)
 8006b0a:	4019      	ands	r1, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	00db      	lsls	r3, r3, #3
 8006b12:	430b      	orrs	r3, r1
 8006b14:	60d3      	str	r3, [r2, #12]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006b16:	f000 f823 	bl	8006b60 <HAL_RCC_GetSysClockFreq>
 8006b1a:	0001      	movs	r1, r0
 8006b1c:	4b0a      	ldr	r3, [pc, #40]	; (8006b48 <HAL_RCC_ClockConfig+0x21c>)
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	091b      	lsrs	r3, r3, #4
 8006b22:	220f      	movs	r2, #15
 8006b24:	4013      	ands	r3, r2
 8006b26:	4a0c      	ldr	r2, [pc, #48]	; (8006b58 <HAL_RCC_ClockConfig+0x22c>)
 8006b28:	5cd3      	ldrb	r3, [r2, r3]
 8006b2a:	000a      	movs	r2, r1
 8006b2c:	40da      	lsrs	r2, r3
 8006b2e:	4b0b      	ldr	r3, [pc, #44]	; (8006b5c <HAL_RCC_ClockConfig+0x230>)
 8006b30:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006b32:	2003      	movs	r0, #3
 8006b34:	f003 fd8a 	bl	800a64c <HAL_InitTick>
  
  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	0018      	movs	r0, r3
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	b004      	add	sp, #16
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	46c0      	nop			; (mov r8, r8)
 8006b44:	40022000 	.word	0x40022000
 8006b48:	40021000 	.word	0x40021000
 8006b4c:	00001388 	.word	0x00001388
 8006b50:	fffff8ff 	.word	0xfffff8ff
 8006b54:	ffffc7ff 	.word	0xffffc7ff
 8006b58:	0800e69c 	.word	0x0800e69c
 8006b5c:	2000002c 	.word	0x2000002c

08006b60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0, pllm = 0, plld = 0, pllvco = 0, msiclkrange = 0;
 8006b66:	2300      	movs	r3, #0
 8006b68:	60fb      	str	r3, [r7, #12]
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	60bb      	str	r3, [r7, #8]
 8006b6e:	2300      	movs	r3, #0
 8006b70:	607b      	str	r3, [r7, #4]
 8006b72:	2300      	movs	r3, #0
 8006b74:	617b      	str	r3, [r7, #20]
 8006b76:	2300      	movs	r3, #0
 8006b78:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8006b7e:	4b32      	ldr	r3, [pc, #200]	; (8006c48 <HAL_RCC_GetSysClockFreq+0xe8>)
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	220c      	movs	r2, #12
 8006b88:	4013      	ands	r3, r2
 8006b8a:	2b08      	cmp	r3, #8
 8006b8c:	d00e      	beq.n	8006bac <HAL_RCC_GetSysClockFreq+0x4c>
 8006b8e:	2b0c      	cmp	r3, #12
 8006b90:	d00f      	beq.n	8006bb2 <HAL_RCC_GetSysClockFreq+0x52>
 8006b92:	2b04      	cmp	r3, #4
 8006b94:	d145      	bne.n	8006c22 <HAL_RCC_GetSysClockFreq+0xc2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 8006b96:	4b2c      	ldr	r3, [pc, #176]	; (8006c48 <HAL_RCC_GetSysClockFreq+0xe8>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2210      	movs	r2, #16
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	d002      	beq.n	8006ba6 <HAL_RCC_GetSysClockFreq+0x46>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8006ba0:	4b2a      	ldr	r3, [pc, #168]	; (8006c4c <HAL_RCC_GetSysClockFreq+0xec>)
 8006ba2:	613b      	str	r3, [r7, #16]
      }
      else 
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8006ba4:	e04b      	b.n	8006c3e <HAL_RCC_GetSysClockFreq+0xde>
        sysclockfreq =  HSI_VALUE;
 8006ba6:	4b2a      	ldr	r3, [pc, #168]	; (8006c50 <HAL_RCC_GetSysClockFreq+0xf0>)
 8006ba8:	613b      	str	r3, [r7, #16]
      break;
 8006baa:	e048      	b.n	8006c3e <HAL_RCC_GetSysClockFreq+0xde>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006bac:	4b29      	ldr	r3, [pc, #164]	; (8006c54 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006bae:	613b      	str	r3, [r7, #16]
      break;
 8006bb0:	e045      	b.n	8006c3e <HAL_RCC_GetSysClockFreq+0xde>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	0c9b      	lsrs	r3, r3, #18
 8006bb6:	220f      	movs	r2, #15
 8006bb8:	4013      	ands	r3, r2
 8006bba:	4a27      	ldr	r2, [pc, #156]	; (8006c58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006bbc:	5cd3      	ldrb	r3, [r2, r3]
 8006bbe:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	0d9b      	lsrs	r3, r3, #22
 8006bc4:	2203      	movs	r2, #3
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	3301      	adds	r3, #1
 8006bca:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006bcc:	4b1e      	ldr	r3, [pc, #120]	; (8006c48 <HAL_RCC_GetSysClockFreq+0xe8>)
 8006bce:	68da      	ldr	r2, [r3, #12]
 8006bd0:	2380      	movs	r3, #128	; 0x80
 8006bd2:	025b      	lsls	r3, r3, #9
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	d009      	beq.n	8006bec <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	4a1e      	ldr	r2, [pc, #120]	; (8006c54 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006bdc:	4353      	muls	r3, r2
 8006bde:	6879      	ldr	r1, [r7, #4]
 8006be0:	0018      	movs	r0, r3
 8006be2:	f7f9 faad 	bl	8000140 <__udivsi3>
 8006be6:	0003      	movs	r3, r0
 8006be8:	617b      	str	r3, [r7, #20]
 8006bea:	e017      	b.n	8006c1c <HAL_RCC_GetSysClockFreq+0xbc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 8006bec:	4b16      	ldr	r3, [pc, #88]	; (8006c48 <HAL_RCC_GetSysClockFreq+0xe8>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2210      	movs	r2, #16
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	d009      	beq.n	8006c0a <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	4a14      	ldr	r2, [pc, #80]	; (8006c4c <HAL_RCC_GetSysClockFreq+0xec>)
 8006bfa:	4353      	muls	r3, r2
 8006bfc:	6879      	ldr	r1, [r7, #4]
 8006bfe:	0018      	movs	r0, r3
 8006c00:	f7f9 fa9e 	bl	8000140 <__udivsi3>
 8006c04:	0003      	movs	r3, r0
 8006c06:	617b      	str	r3, [r7, #20]
 8006c08:	e008      	b.n	8006c1c <HAL_RCC_GetSysClockFreq+0xbc>
        }
        else 
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	4a10      	ldr	r2, [pc, #64]	; (8006c50 <HAL_RCC_GetSysClockFreq+0xf0>)
 8006c0e:	4353      	muls	r3, r2
 8006c10:	6879      	ldr	r1, [r7, #4]
 8006c12:	0018      	movs	r0, r3
 8006c14:	f7f9 fa94 	bl	8000140 <__udivsi3>
 8006c18:	0003      	movs	r3, r0
 8006c1a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	613b      	str	r3, [r7, #16]
      break;
 8006c20:	e00d      	b.n	8006c3e <HAL_RCC_GetSysClockFreq+0xde>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8006c22:	4b09      	ldr	r3, [pc, #36]	; (8006c48 <HAL_RCC_GetSysClockFreq+0xe8>)
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	0b5b      	lsrs	r3, r3, #13
 8006c28:	2207      	movs	r2, #7
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	3301      	adds	r3, #1
 8006c32:	2280      	movs	r2, #128	; 0x80
 8006c34:	0212      	lsls	r2, r2, #8
 8006c36:	409a      	lsls	r2, r3
 8006c38:	0013      	movs	r3, r2
 8006c3a:	613b      	str	r3, [r7, #16]
      break;
 8006c3c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006c3e:	693b      	ldr	r3, [r7, #16]
}
 8006c40:	0018      	movs	r0, r3
 8006c42:	46bd      	mov	sp, r7
 8006c44:	b006      	add	sp, #24
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	40021000 	.word	0x40021000
 8006c4c:	003d0900 	.word	0x003d0900
 8006c50:	00f42400 	.word	0x00f42400
 8006c54:	007a1200 	.word	0x007a1200
 8006c58:	0800e6b4 	.word	0x0800e6b4

08006c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c60:	4b02      	ldr	r3, [pc, #8]	; (8006c6c <HAL_RCC_GetHCLKFreq+0x10>)
 8006c62:	681b      	ldr	r3, [r3, #0]
}
 8006c64:	0018      	movs	r0, r3
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	46c0      	nop			; (mov r8, r8)
 8006c6c:	2000002c 	.word	0x2000002c

08006c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006c74:	f7ff fff2 	bl	8006c5c <HAL_RCC_GetHCLKFreq>
 8006c78:	0001      	movs	r1, r0
 8006c7a:	4b06      	ldr	r3, [pc, #24]	; (8006c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	0a1b      	lsrs	r3, r3, #8
 8006c80:	2207      	movs	r2, #7
 8006c82:	4013      	ands	r3, r2
 8006c84:	4a04      	ldr	r2, [pc, #16]	; (8006c98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c86:	5cd3      	ldrb	r3, [r2, r3]
 8006c88:	40d9      	lsrs	r1, r3
 8006c8a:	000b      	movs	r3, r1
}    
 8006c8c:	0018      	movs	r0, r3
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	46c0      	nop			; (mov r8, r8)
 8006c94:	40021000 	.word	0x40021000
 8006c98:	0800e6ac 	.word	0x0800e6ac

08006c9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006ca0:	f7ff ffdc 	bl	8006c5c <HAL_RCC_GetHCLKFreq>
 8006ca4:	0001      	movs	r1, r0
 8006ca6:	4b06      	ldr	r3, [pc, #24]	; (8006cc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	0adb      	lsrs	r3, r3, #11
 8006cac:	2207      	movs	r2, #7
 8006cae:	4013      	ands	r3, r2
 8006cb0:	4a04      	ldr	r2, [pc, #16]	; (8006cc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006cb2:	5cd3      	ldrb	r3, [r2, r3]
 8006cb4:	40d9      	lsrs	r1, r3
 8006cb6:	000b      	movs	r3, r1
} 
 8006cb8:	0018      	movs	r0, r3
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	46c0      	nop			; (mov r8, r8)
 8006cc0:	40021000 	.word	0x40021000
 8006cc4:	0800e6ac 	.word	0x0800e6ac

08006cc8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	60fb      	str	r3, [r7, #12]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	60bb      	str	r3, [r7, #8]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006cd8:	4b23      	ldr	r3, [pc, #140]	; (8006d68 <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	22f0      	movs	r2, #240	; 0xf0
 8006cde:	4013      	ands	r3, r2
 8006ce0:	d12b      	bne.n	8006d3a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006ce2:	4b21      	ldr	r3, [pc, #132]	; (8006d68 <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8006ce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ce6:	2380      	movs	r3, #128	; 0x80
 8006ce8:	055b      	lsls	r3, r3, #21
 8006cea:	4013      	ands	r3, r2
 8006cec:	d006      	beq.n	8006cfc <RCC_SetFlashLatencyFromMSIRange+0x34>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8006cee:	4b1f      	ldr	r3, [pc, #124]	; (8006d6c <RCC_SetFlashLatencyFromMSIRange+0xa4>)
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	23c0      	movs	r3, #192	; 0xc0
 8006cf4:	015b      	lsls	r3, r3, #5
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	60fb      	str	r3, [r7, #12]
 8006cfa:	e012      	b.n	8006d22 <RCC_SetFlashLatencyFromMSIRange+0x5a>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cfc:	4b1a      	ldr	r3, [pc, #104]	; (8006d68 <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8006cfe:	4a1a      	ldr	r2, [pc, #104]	; (8006d68 <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8006d00:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d02:	2180      	movs	r1, #128	; 0x80
 8006d04:	0549      	lsls	r1, r1, #21
 8006d06:	430a      	orrs	r2, r1
 8006d08:	639a      	str	r2, [r3, #56]	; 0x38
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8006d0a:	4b18      	ldr	r3, [pc, #96]	; (8006d6c <RCC_SetFlashLatencyFromMSIRange+0xa4>)
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	23c0      	movs	r3, #192	; 0xc0
 8006d10:	015b      	lsls	r3, r3, #5
 8006d12:	4013      	ands	r3, r2
 8006d14:	60fb      	str	r3, [r7, #12]
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d16:	4b14      	ldr	r3, [pc, #80]	; (8006d68 <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8006d18:	4a13      	ldr	r2, [pc, #76]	; (8006d68 <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8006d1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d1c:	4914      	ldr	r1, [pc, #80]	; (8006d70 <RCC_SetFlashLatencyFromMSIRange+0xa8>)
 8006d1e:	400a      	ands	r2, r1
 8006d20:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	23c0      	movs	r3, #192	; 0xc0
 8006d26:	015b      	lsls	r3, r3, #5
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d106      	bne.n	8006d3a <RCC_SetFlashLatencyFromMSIRange+0x72>
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	23c0      	movs	r3, #192	; 0xc0
 8006d30:	021b      	lsls	r3, r3, #8
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d101      	bne.n	8006d3a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8006d36:	2301      	movs	r3, #1
 8006d38:	60bb      	str	r3, [r7, #8]
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 8006d3a:	4b0e      	ldr	r3, [pc, #56]	; (8006d74 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006d3c:	4a0d      	ldr	r2, [pc, #52]	; (8006d74 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006d3e:	6812      	ldr	r2, [r2, #0]
 8006d40:	2101      	movs	r1, #1
 8006d42:	438a      	bics	r2, r1
 8006d44:	0011      	movs	r1, r2
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	430a      	orrs	r2, r1
 8006d4a:	601a      	str	r2, [r3, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8006d4c:	4b09      	ldr	r3, [pc, #36]	; (8006d74 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2201      	movs	r2, #1
 8006d52:	401a      	ands	r2, r3
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d001      	beq.n	8006d5e <RCC_SetFlashLatencyFromMSIRange+0x96>
  {
    return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e000      	b.n	8006d60 <RCC_SetFlashLatencyFromMSIRange+0x98>
  }
  
  return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	0018      	movs	r0, r3
 8006d62:	46bd      	mov	sp, r7
 8006d64:	b004      	add	sp, #16
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	40021000 	.word	0x40021000
 8006d6c:	40007000 	.word	0x40007000
 8006d70:	efffffff 	.word	0xefffffff
 8006d74:	40022000 	.word	0x40022000

08006d78 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b086      	sub	sp, #24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d80:	2300      	movs	r3, #0
 8006d82:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006d84:	2300      	movs	r3, #0
 8006d86:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2220      	movs	r2, #32
 8006d8e:	4013      	ands	r3, r2
 8006d90:	d100      	bne.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8006d92:	e0c3      	b.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8006d94:	2317      	movs	r3, #23
 8006d96:	18fb      	adds	r3, r7, r3
 8006d98:	2200      	movs	r2, #0
 8006d9a:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d9c:	4b94      	ldr	r3, [pc, #592]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006d9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006da0:	2380      	movs	r3, #128	; 0x80
 8006da2:	055b      	lsls	r3, r3, #21
 8006da4:	4013      	ands	r3, r2
 8006da6:	d10a      	bne.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006da8:	4b91      	ldr	r3, [pc, #580]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006daa:	4a91      	ldr	r2, [pc, #580]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006dac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006dae:	2180      	movs	r1, #128	; 0x80
 8006db0:	0549      	lsls	r1, r1, #21
 8006db2:	430a      	orrs	r2, r1
 8006db4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006db6:	2317      	movs	r3, #23
 8006db8:	18fb      	adds	r3, r7, r3
 8006dba:	2201      	movs	r2, #1
 8006dbc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dbe:	4b8d      	ldr	r3, [pc, #564]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	2380      	movs	r3, #128	; 0x80
 8006dc4:	005b      	lsls	r3, r3, #1
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	d11a      	bne.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006dca:	4b8a      	ldr	r3, [pc, #552]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006dcc:	4a89      	ldr	r2, [pc, #548]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006dce:	6812      	ldr	r2, [r2, #0]
 8006dd0:	2180      	movs	r1, #128	; 0x80
 8006dd2:	0049      	lsls	r1, r1, #1
 8006dd4:	430a      	orrs	r2, r1
 8006dd6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006dd8:	f7fd ff6e 	bl	8004cb8 <HAL_GetTick>
 8006ddc:	0003      	movs	r3, r0
 8006dde:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006de0:	e008      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006de2:	f7fd ff69 	bl	8004cb8 <HAL_GetTick>
 8006de6:	0002      	movs	r2, r0
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	2b64      	cmp	r3, #100	; 0x64
 8006dee:	d901      	bls.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        {
          return HAL_TIMEOUT;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e0f9      	b.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x270>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006df4:	4b7f      	ldr	r3, [pc, #508]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	2380      	movs	r3, #128	; 0x80
 8006dfa:	005b      	lsls	r3, r3, #1
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	d0f0      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */ 
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006e00:	4b7b      	ldr	r3, [pc, #492]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	23c0      	movs	r3, #192	; 0xc0
 8006e06:	039b      	lsls	r3, r3, #14
 8006e08:	4013      	ands	r3, r2
 8006e0a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685a      	ldr	r2, [r3, #4]
 8006e10:	23c0      	movs	r3, #192	; 0xc0
 8006e12:	039b      	lsls	r3, r3, #14
 8006e14:	401a      	ands	r2, r3
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d010      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685a      	ldr	r2, [r3, #4]
 8006e20:	23c0      	movs	r3, #192	; 0xc0
 8006e22:	029b      	lsls	r3, r3, #10
 8006e24:	401a      	ands	r2, r3
 8006e26:	23c0      	movs	r3, #192	; 0xc0
 8006e28:	029b      	lsls	r3, r3, #10
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d107      	bne.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
 8006e2e:	4b70      	ldr	r3, [pc, #448]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	2380      	movs	r3, #128	; 0x80
 8006e34:	029b      	lsls	r3, r3, #10
 8006e36:	4013      	ands	r3, r2
 8006e38:	d001      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
      {
        /* To update HSE divider, first switch-OFF HSE clock oscillator*/
        return HAL_ERROR; 
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e0d4      	b.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x270>
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006e3e:	4b6c      	ldr	r3, [pc, #432]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006e40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e42:	23c0      	movs	r3, #192	; 0xc0
 8006e44:	029b      	lsls	r3, r3, #10
 8006e46:	4013      	ands	r3, r2
 8006e48:	60fb      	str	r3, [r7, #12]
    
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d03b      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685a      	ldr	r2, [r3, #4]
 8006e54:	23c0      	movs	r3, #192	; 0xc0
 8006e56:	029b      	lsls	r3, r3, #10
 8006e58:	401a      	ands	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d033      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2220      	movs	r2, #32
 8006e66:	4013      	ands	r3, r2
 8006e68:	d02e      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x150>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006e6a:	4b61      	ldr	r3, [pc, #388]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e6e:	4a62      	ldr	r2, [pc, #392]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e70:	4013      	ands	r3, r2
 8006e72:	60fb      	str	r3, [r7, #12]
      
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006e74:	4b5e      	ldr	r3, [pc, #376]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006e76:	4a5e      	ldr	r2, [pc, #376]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006e78:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006e7a:	2180      	movs	r1, #128	; 0x80
 8006e7c:	0309      	lsls	r1, r1, #12
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006e82:	4b5b      	ldr	r3, [pc, #364]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006e84:	4a5a      	ldr	r2, [pc, #360]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006e86:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006e88:	495c      	ldr	r1, [pc, #368]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006e8a:	400a      	ands	r2, r1
 8006e8c:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8006e8e:	4b58      	ldr	r3, [pc, #352]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	651a      	str	r2, [r3, #80]	; 0x50
      
       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	2380      	movs	r3, #128	; 0x80
 8006e98:	005b      	lsls	r3, r3, #1
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	d014      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e9e:	f7fd ff0b 	bl	8004cb8 <HAL_GetTick>
 8006ea2:	0003      	movs	r3, r0
 8006ea4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ea6:	e009      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ea8:	f7fd ff06 	bl	8004cb8 <HAL_GetTick>
 8006eac:	0002      	movs	r2, r0
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	4a53      	ldr	r2, [pc, #332]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d901      	bls.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e095      	b.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ebc:	4b4c      	ldr	r3, [pc, #304]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006ebe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ec0:	2380      	movs	r3, #128	; 0x80
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	d0ef      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x130>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	23c0      	movs	r3, #192	; 0xc0
 8006ece:	029b      	lsls	r3, r3, #10
 8006ed0:	401a      	ands	r2, r3
 8006ed2:	23c0      	movs	r3, #192	; 0xc0
 8006ed4:	029b      	lsls	r3, r3, #10
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d10b      	bne.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006eda:	4a45      	ldr	r2, [pc, #276]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006edc:	4b44      	ldr	r3, [pc, #272]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4948      	ldr	r1, [pc, #288]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006ee2:	4019      	ands	r1, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6858      	ldr	r0, [r3, #4]
 8006ee8:	23c0      	movs	r3, #192	; 0xc0
 8006eea:	039b      	lsls	r3, r3, #14
 8006eec:	4003      	ands	r3, r0
 8006eee:	430b      	orrs	r3, r1
 8006ef0:	6013      	str	r3, [r2, #0]
 8006ef2:	4a3f      	ldr	r2, [pc, #252]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006ef4:	4b3e      	ldr	r3, [pc, #248]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006ef6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6858      	ldr	r0, [r3, #4]
 8006efc:	23c0      	movs	r3, #192	; 0xc0
 8006efe:	029b      	lsls	r3, r3, #10
 8006f00:	4003      	ands	r3, r0
 8006f02:	430b      	orrs	r3, r1
 8006f04:	6513      	str	r3, [r2, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006f06:	2317      	movs	r3, #23
 8006f08:	18fb      	adds	r3, r7, r3
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d105      	bne.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f10:	4b37      	ldr	r3, [pc, #220]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006f12:	4a37      	ldr	r2, [pc, #220]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006f14:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006f16:	493c      	ldr	r1, [pc, #240]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006f18:	400a      	ands	r2, r1
 8006f1a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  
#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2201      	movs	r2, #1
 8006f22:	4013      	ands	r3, r2
 8006f24:	d009      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f26:	4a32      	ldr	r2, [pc, #200]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006f28:	4b31      	ldr	r3, [pc, #196]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f2c:	2103      	movs	r1, #3
 8006f2e:	438b      	bics	r3, r1
 8006f30:	0019      	movs	r1, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	430b      	orrs	r3, r1
 8006f38:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */
  
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2202      	movs	r2, #2
 8006f40:	4013      	ands	r3, r2
 8006f42:	d009      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006f44:	4a2a      	ldr	r2, [pc, #168]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006f46:	4b2a      	ldr	r3, [pc, #168]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f4a:	210c      	movs	r1, #12
 8006f4c:	438b      	bics	r3, r1
 8006f4e:	0019      	movs	r1, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	430b      	orrs	r3, r1
 8006f56:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
  
  /*------------------------------ LPUART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2204      	movs	r2, #4
 8006f5e:	4013      	ands	r3, r2
 8006f60:	d008      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
    
    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f62:	4a23      	ldr	r2, [pc, #140]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006f64:	4b22      	ldr	r3, [pc, #136]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f68:	4928      	ldr	r1, [pc, #160]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006f6a:	4019      	ands	r1, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	430b      	orrs	r3, r1
 8006f72:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2208      	movs	r2, #8
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	d008      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006f7e:	4a1c      	ldr	r2, [pc, #112]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006f80:	4b1b      	ldr	r3, [pc, #108]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f84:	4922      	ldr	r1, [pc, #136]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006f86:	4019      	ands	r1, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	695b      	ldr	r3, [r3, #20]
 8006f8c:	430b      	orrs	r3, r1
 8006f8e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	2380      	movs	r3, #128	; 0x80
 8006f96:	005b      	lsls	r3, r3, #1
 8006f98:	4013      	ands	r3, r2
 8006f9a:	d008      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006f9c:	4a14      	ldr	r2, [pc, #80]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006f9e:	4b14      	ldr	r3, [pc, #80]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fa2:	4915      	ldr	r1, [pc, #84]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fa4:	4019      	ands	r1, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	430b      	orrs	r3, r1
 8006fac:	64d3      	str	r3, [r2, #76]	; 0x4c
  }  
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2240      	movs	r2, #64	; 0x40
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	d008      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006fb8:	4a0d      	ldr	r2, [pc, #52]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006fba:	4b0d      	ldr	r3, [pc, #52]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fbe:	4915      	ldr	r1, [pc, #84]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006fc0:	4019      	ands	r1, r3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	430b      	orrs	r3, r1
 8006fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* USB */
  
  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2280      	movs	r2, #128	; 0x80
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	d008      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006fd4:	4a06      	ldr	r2, [pc, #24]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006fd6:	4b06      	ldr	r3, [pc, #24]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fda:	490f      	ldr	r1, [pc, #60]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8006fdc:	4019      	ands	r1, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	430b      	orrs	r3, r1
 8006fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	0018      	movs	r0, r3
 8006fea:	46bd      	mov	sp, r7
 8006fec:	b006      	add	sp, #24
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	40021000 	.word	0x40021000
 8006ff4:	40007000 	.word	0x40007000
 8006ff8:	fffcffff 	.word	0xfffcffff
 8006ffc:	fff7ffff 	.word	0xfff7ffff
 8007000:	00001388 	.word	0x00001388
 8007004:	ffcfffff 	.word	0xffcfffff
 8007008:	efffffff 	.word	0xefffffff
 800700c:	fffff3ff 	.word	0xfffff3ff
 8007010:	ffffcfff 	.word	0xffffcfff
 8007014:	fbffffff 	.word	0xfbffffff
 8007018:	fff3ffff 	.word	0xfff3ffff

0800701c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_I2C3     I2C3 peripheral clock (*)
  * @note   (*) means that this peripheral is not present on all the devices
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b08a      	sub	sp, #40	; 0x28
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  uint32_t temp_reg = 0U, clkprediv = 0U, frequency = 0U;
 8007024:	2300      	movs	r3, #0
 8007026:	61fb      	str	r3, [r7, #28]
 8007028:	2300      	movs	r3, #0
 800702a:	61bb      	str	r3, [r7, #24]
 800702c:	2300      	movs	r3, #0
 800702e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t srcclk = 0U;
 8007030:	2300      	movs	r3, #0
 8007032:	617b      	str	r3, [r7, #20]
#if defined(USB)
    uint32_t pllmul = 0U, plldiv = 0U, pllvco = 0U;
 8007034:	2300      	movs	r3, #0
 8007036:	613b      	str	r3, [r7, #16]
 8007038:	2300      	movs	r3, #0
 800703a:	60fb      	str	r3, [r7, #12]
 800703c:	2300      	movs	r3, #0
 800703e:	623b      	str	r3, [r7, #32]
#endif /* USB */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2b08      	cmp	r3, #8
 8007044:	d100      	bne.n	8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
 8007046:	e159      	b.n	80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8007048:	d809      	bhi.n	800705e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800704a:	2b02      	cmp	r3, #2
 800704c:	d100      	bne.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
 800704e:	e0ec      	b.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007050:	2b04      	cmp	r3, #4
 8007052:	d100      	bne.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007054:	e11a      	b.n	800728c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
 8007056:	2b01      	cmp	r3, #1
 8007058:	d100      	bne.n	800705c <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 800705a:	e0b5      	b.n	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      break;
    } 
#endif /* RCC_CCIPR_I2C3SEL */
  default: 
    {
      break;
 800705c:	e1c4      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
  switch (PeriphClk)
 800705e:	2b20      	cmp	r3, #32
 8007060:	d00c      	beq.n	800707c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 8007062:	d803      	bhi.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8007064:	2b10      	cmp	r3, #16
 8007066:	d100      	bne.n	800706a <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
 8007068:	e170      	b.n	800734c <HAL_RCCEx_GetPeriphCLKFreq+0x330>
      break;
 800706a:	e1bd      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
  switch (PeriphClk)
 800706c:	2b40      	cmp	r3, #64	; 0x40
 800706e:	d058      	beq.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0x106>
 8007070:	2280      	movs	r2, #128	; 0x80
 8007072:	0052      	lsls	r2, r2, #1
 8007074:	4293      	cmp	r3, r2
 8007076:	d100      	bne.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8007078:	e18e      	b.n	8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
      break;
 800707a:	e1b5      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      temp_reg = RCC->CSR;
 800707c:	4bbc      	ldr	r3, [pc, #752]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800707e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007080:	61fb      	str	r3, [r7, #28]
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007082:	4bbb      	ldr	r3, [pc, #748]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8007084:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007086:	23c0      	movs	r3, #192	; 0xc0
 8007088:	029b      	lsls	r3, r3, #10
 800708a:	4013      	ands	r3, r2
 800708c:	617b      	str	r3, [r7, #20]
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	2380      	movs	r3, #128	; 0x80
 8007092:	025b      	lsls	r3, r3, #9
 8007094:	429a      	cmp	r2, r3
 8007096:	d108      	bne.n	80070aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
 8007098:	69fa      	ldr	r2, [r7, #28]
 800709a:	2380      	movs	r3, #128	; 0x80
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4013      	ands	r3, r2
 80070a0:	d003      	beq.n	80070aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
        frequency = LSE_VALUE;
 80070a2:	2380      	movs	r3, #128	; 0x80
 80070a4:	021b      	lsls	r3, r3, #8
 80070a6:	627b      	str	r3, [r7, #36]	; 0x24
 80070a8:	e03a      	b.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSIRDY)))
 80070aa:	697a      	ldr	r2, [r7, #20]
 80070ac:	2380      	movs	r3, #128	; 0x80
 80070ae:	029b      	lsls	r3, r3, #10
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d106      	bne.n	80070c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	2202      	movs	r2, #2
 80070b8:	4013      	ands	r3, r2
 80070ba:	d002      	beq.n	80070c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
        frequency = LSI_VALUE;
 80070bc:	4bad      	ldr	r3, [pc, #692]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 80070be:	627b      	str	r3, [r7, #36]	; 0x24
 80070c0:	e02e      	b.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
      else if ((srcclk == RCC_RTCCLKSOURCE_HSE_DIVX) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	23c0      	movs	r3, #192	; 0xc0
 80070c6:	029b      	lsls	r3, r3, #10
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d126      	bne.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80070cc:	4ba8      	ldr	r3, [pc, #672]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	2380      	movs	r3, #128	; 0x80
 80070d2:	029b      	lsls	r3, r3, #10
 80070d4:	4013      	ands	r3, r2
 80070d6:	d020      	beq.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        clkprediv = __HAL_RCC_GET_RTC_HSE_PRESCALER();
 80070d8:	4ba5      	ldr	r3, [pc, #660]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	23c0      	movs	r3, #192	; 0xc0
 80070de:	039b      	lsls	r3, r3, #14
 80070e0:	4013      	ands	r3, r2
 80070e2:	61bb      	str	r3, [r7, #24]
        switch (clkprediv)
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	2280      	movs	r2, #128	; 0x80
 80070e8:	0392      	lsls	r2, r2, #14
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d00b      	beq.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 80070ee:	22c0      	movs	r2, #192	; 0xc0
 80070f0:	0392      	lsls	r2, r2, #14
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d004      	beq.n	8007100 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 80070f6:	2280      	movs	r2, #128	; 0x80
 80070f8:	0352      	lsls	r2, r2, #13
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d006      	beq.n	800710c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 80070fe:	e008      	b.n	8007112 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
            frequency = HSE_VALUE / 16U;
 8007100:	4b9d      	ldr	r3, [pc, #628]	; (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 8007102:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007104:	e008      	b.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
            frequency = HSE_VALUE / 8U;
 8007106:	4b9d      	ldr	r3, [pc, #628]	; (800737c <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8007108:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800710a:	e005      	b.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
            frequency = HSE_VALUE / 4U;
 800710c:	4b9c      	ldr	r3, [pc, #624]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 800710e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007110:	e002      	b.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
            frequency = HSE_VALUE / 2U;
 8007112:	4b9c      	ldr	r3, [pc, #624]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
 8007114:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007116:	46c0      	nop			; (mov r8, r8)
      }
 8007118:	e002      	b.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
        frequency = 0U;
 800711a:	2300      	movs	r3, #0
 800711c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800711e:	e163      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8007120:	e162      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8007122:	4b93      	ldr	r3, [pc, #588]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8007124:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007126:	2380      	movs	r3, #128	; 0x80
 8007128:	04db      	lsls	r3, r3, #19
 800712a:	4013      	ands	r3, r2
 800712c:	617b      	str	r3, [r7, #20]
        if((srcclk == RCC_USBCLKSOURCE_PLL) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d138      	bne.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 8007134:	4b8e      	ldr	r3, [pc, #568]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	2380      	movs	r3, #128	; 0x80
 800713a:	049b      	lsls	r3, r3, #18
 800713c:	4013      	ands	r3, r2
 800713e:	d032      	beq.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
            pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8007140:	4b8b      	ldr	r3, [pc, #556]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8007142:	68da      	ldr	r2, [r3, #12]
 8007144:	23f0      	movs	r3, #240	; 0xf0
 8007146:	039b      	lsls	r3, r3, #14
 8007148:	4013      	ands	r3, r2
 800714a:	613b      	str	r3, [r7, #16]
            plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 800714c:	4b88      	ldr	r3, [pc, #544]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800714e:	68da      	ldr	r2, [r3, #12]
 8007150:	23c0      	movs	r3, #192	; 0xc0
 8007152:	041b      	lsls	r3, r3, #16
 8007154:	4013      	ands	r3, r2
 8007156:	60fb      	str	r3, [r7, #12]
            pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	0c9b      	lsrs	r3, r3, #18
 800715c:	4a8a      	ldr	r2, [pc, #552]	; (8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800715e:	5cd3      	ldrb	r3, [r2, r3]
 8007160:	613b      	str	r3, [r7, #16]
            plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;   
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	0d9b      	lsrs	r3, r3, #22
 8007166:	3301      	adds	r3, #1
 8007168:	60fb      	str	r3, [r7, #12]
            if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)
 800716a:	4b81      	ldr	r3, [pc, #516]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800716c:	68da      	ldr	r2, [r3, #12]
 800716e:	2380      	movs	r3, #128	; 0x80
 8007170:	025b      	lsls	r3, r3, #9
 8007172:	4013      	ands	r3, r2
 8007174:	d10a      	bne.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0x170>
                if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8007176:	4b7e      	ldr	r3, [pc, #504]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2210      	movs	r2, #16
 800717c:	4013      	ands	r3, r2
 800717e:	d002      	beq.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
                    pllvco =  (HSI_VALUE >> 2U);
 8007180:	4b80      	ldr	r3, [pc, #512]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
 8007182:	623b      	str	r3, [r7, #32]
 8007184:	e004      	b.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
                    pllvco =  HSI_VALUE;
 8007186:	4b81      	ldr	r3, [pc, #516]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 8007188:	623b      	str	r3, [r7, #32]
 800718a:	e001      	b.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
                pllvco = HSE_VALUE;
 800718c:	4b80      	ldr	r3, [pc, #512]	; (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 800718e:	623b      	str	r3, [r7, #32]
            pllvco = (pllvco * pllmul);
 8007190:	6a3b      	ldr	r3, [r7, #32]
 8007192:	693a      	ldr	r2, [r7, #16]
 8007194:	4353      	muls	r3, r2
 8007196:	623b      	str	r3, [r7, #32]
            frequency = (pllvco/ plldiv);
 8007198:	68f9      	ldr	r1, [r7, #12]
 800719a:	6a38      	ldr	r0, [r7, #32]
 800719c:	f7f8 ffd0 	bl	8000140 <__udivsi3>
 80071a0:	0003      	movs	r3, r0
 80071a2:	627b      	str	r3, [r7, #36]	; 0x24
 80071a4:	e00f      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
        else if((srcclk == RCC_USBCLKSOURCE_HSI48) && (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)))
 80071a6:	697a      	ldr	r2, [r7, #20]
 80071a8:	2380      	movs	r3, #128	; 0x80
 80071aa:	04db      	lsls	r3, r3, #19
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d107      	bne.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80071b0:	4b6f      	ldr	r3, [pc, #444]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	2202      	movs	r2, #2
 80071b6:	4013      	ands	r3, r2
 80071b8:	d002      	beq.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
            frequency = HSI48_VALUE;
 80071ba:	4b76      	ldr	r3, [pc, #472]	; (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 80071bc:	627b      	str	r3, [r7, #36]	; 0x24
 80071be:	e002      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
            frequency = 0U;
 80071c0:	2300      	movs	r3, #0
 80071c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80071c4:	e110      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80071c6:	e10f      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80071c8:	4b69      	ldr	r3, [pc, #420]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80071ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071cc:	2203      	movs	r2, #3
 80071ce:	4013      	ands	r3, r2
 80071d0:	617b      	str	r3, [r7, #20]
      if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d104      	bne.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
        frequency = HAL_RCC_GetPCLK2Freq();
 80071d8:	f7ff fd60 	bl	8006c9c <HAL_RCC_GetPCLK2Freq>
 80071dc:	0003      	movs	r3, r0
 80071de:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80071e0:	e102      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      else if ((srcclk == RCC_USART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d107      	bne.n	80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 80071e8:	4b61      	ldr	r3, [pc, #388]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2204      	movs	r2, #4
 80071ee:	4013      	ands	r3, r2
 80071f0:	d002      	beq.n	80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
        frequency = HSI_VALUE;
 80071f2:	4b66      	ldr	r3, [pc, #408]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 80071f4:	627b      	str	r3, [r7, #36]	; 0x24
 80071f6:	e017      	b.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
      else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d104      	bne.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        frequency = HAL_RCC_GetSysClockFreq();
 80071fe:	f7ff fcaf 	bl	8006b60 <HAL_RCC_GetSysClockFreq>
 8007202:	0003      	movs	r3, r0
 8007204:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007206:	e0ef      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      else if ((srcclk == RCC_USART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	2b03      	cmp	r3, #3
 800720c:	d109      	bne.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 800720e:	4b58      	ldr	r3, [pc, #352]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8007210:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007212:	2380      	movs	r3, #128	; 0x80
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4013      	ands	r3, r2
 8007218:	d003      	beq.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        frequency = LSE_VALUE;
 800721a:	2380      	movs	r3, #128	; 0x80
 800721c:	021b      	lsls	r3, r3, #8
 800721e:	627b      	str	r3, [r7, #36]	; 0x24
 8007220:	e002      	b.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
        frequency = 0U;
 8007222:	2300      	movs	r3, #0
 8007224:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007226:	e0df      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8007228:	e0de      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800722a:	4b51      	ldr	r3, [pc, #324]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800722c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800722e:	220c      	movs	r2, #12
 8007230:	4013      	ands	r3, r2
 8007232:	617b      	str	r3, [r7, #20]
      if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d104      	bne.n	8007244 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
        frequency = HAL_RCC_GetPCLK1Freq();
 800723a:	f7ff fd19 	bl	8006c70 <HAL_RCC_GetPCLK1Freq>
 800723e:	0003      	movs	r3, r0
 8007240:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007242:	e0d1      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      else if ((srcclk == RCC_USART2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	2b08      	cmp	r3, #8
 8007248:	d107      	bne.n	800725a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800724a:	4b49      	ldr	r3, [pc, #292]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2204      	movs	r2, #4
 8007250:	4013      	ands	r3, r2
 8007252:	d002      	beq.n	800725a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        frequency = HSI_VALUE;
 8007254:	4b4d      	ldr	r3, [pc, #308]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 8007256:	627b      	str	r3, [r7, #36]	; 0x24
 8007258:	e017      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x26e>
      else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	2b04      	cmp	r3, #4
 800725e:	d104      	bne.n	800726a <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
        frequency = HAL_RCC_GetSysClockFreq();
 8007260:	f7ff fc7e 	bl	8006b60 <HAL_RCC_GetSysClockFreq>
 8007264:	0003      	movs	r3, r0
 8007266:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007268:	e0be      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      else if ((srcclk == RCC_USART2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	2b0c      	cmp	r3, #12
 800726e:	d109      	bne.n	8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
 8007270:	4b3f      	ldr	r3, [pc, #252]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8007272:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007274:	2380      	movs	r3, #128	; 0x80
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	4013      	ands	r3, r2
 800727a:	d003      	beq.n	8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = LSE_VALUE;
 800727c:	2380      	movs	r3, #128	; 0x80
 800727e:	021b      	lsls	r3, r3, #8
 8007280:	627b      	str	r3, [r7, #36]	; 0x24
 8007282:	e002      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x26e>
        frequency = 0U;
 8007284:	2300      	movs	r3, #0
 8007286:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007288:	e0ae      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800728a:	e0ad      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800728c:	4b38      	ldr	r3, [pc, #224]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800728e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007290:	23c0      	movs	r3, #192	; 0xc0
 8007292:	011b      	lsls	r3, r3, #4
 8007294:	4013      	ands	r3, r2
 8007296:	617b      	str	r3, [r7, #20]
      if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d104      	bne.n	80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
        frequency = HAL_RCC_GetPCLK1Freq();
 800729e:	f7ff fce7 	bl	8006c70 <HAL_RCC_GetPCLK1Freq>
 80072a2:	0003      	movs	r3, r0
 80072a4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80072a6:	e09f      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      else if ((srcclk == RCC_LPUART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80072a8:	697a      	ldr	r2, [r7, #20]
 80072aa:	2380      	movs	r3, #128	; 0x80
 80072ac:	011b      	lsls	r3, r3, #4
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d107      	bne.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 80072b2:	4b2f      	ldr	r3, [pc, #188]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2204      	movs	r2, #4
 80072b8:	4013      	ands	r3, r2
 80072ba:	d002      	beq.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        frequency = HSI_VALUE;
 80072bc:	4b33      	ldr	r3, [pc, #204]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 80072be:	627b      	str	r3, [r7, #36]	; 0x24
 80072c0:	e01b      	b.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
      else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80072c2:	697a      	ldr	r2, [r7, #20]
 80072c4:	2380      	movs	r3, #128	; 0x80
 80072c6:	00db      	lsls	r3, r3, #3
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d104      	bne.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
        frequency = HAL_RCC_GetSysClockFreq();
 80072cc:	f7ff fc48 	bl	8006b60 <HAL_RCC_GetSysClockFreq>
 80072d0:	0003      	movs	r3, r0
 80072d2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80072d4:	e088      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      else if ((srcclk == RCC_LPUART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	23c0      	movs	r3, #192	; 0xc0
 80072da:	011b      	lsls	r3, r3, #4
 80072dc:	429a      	cmp	r2, r3
 80072de:	d109      	bne.n	80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 80072e0:	4b23      	ldr	r3, [pc, #140]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80072e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80072e4:	2380      	movs	r3, #128	; 0x80
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	4013      	ands	r3, r2
 80072ea:	d003      	beq.n	80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
        frequency = LSE_VALUE;
 80072ec:	2380      	movs	r3, #128	; 0x80
 80072ee:	021b      	lsls	r3, r3, #8
 80072f0:	627b      	str	r3, [r7, #36]	; 0x24
 80072f2:	e002      	b.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
        frequency = 0U;
 80072f4:	2300      	movs	r3, #0
 80072f6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80072f8:	e076      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80072fa:	e075      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80072fc:	4b1c      	ldr	r3, [pc, #112]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80072fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007300:	23c0      	movs	r3, #192	; 0xc0
 8007302:	019b      	lsls	r3, r3, #6
 8007304:	4013      	ands	r3, r2
 8007306:	617b      	str	r3, [r7, #20]
      if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d104      	bne.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
        frequency = HAL_RCC_GetPCLK1Freq();
 800730e:	f7ff fcaf 	bl	8006c70 <HAL_RCC_GetPCLK1Freq>
 8007312:	0003      	movs	r3, r0
 8007314:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007316:	e067      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      else if ((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	2380      	movs	r3, #128	; 0x80
 800731c:	019b      	lsls	r3, r3, #6
 800731e:	429a      	cmp	r2, r3
 8007320:	d107      	bne.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0x316>
 8007322:	4b13      	ldr	r3, [pc, #76]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2204      	movs	r2, #4
 8007328:	4013      	ands	r3, r2
 800732a:	d002      	beq.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0x316>
        frequency = HSI_VALUE;
 800732c:	4b17      	ldr	r3, [pc, #92]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 800732e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007330:	e05a      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	2380      	movs	r3, #128	; 0x80
 8007336:	015b      	lsls	r3, r3, #5
 8007338:	429a      	cmp	r2, r3
 800733a:	d104      	bne.n	8007346 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
        frequency = HAL_RCC_GetSysClockFreq();
 800733c:	f7ff fc10 	bl	8006b60 <HAL_RCC_GetSysClockFreq>
 8007340:	0003      	movs	r3, r0
 8007342:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007344:	e050      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
        frequency = 0U;
 8007346:	2300      	movs	r3, #0
 8007348:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800734a:	e04d      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      if (READ_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C2EN))==RCC_APB1ENR_I2C2EN)
 800734c:	4b08      	ldr	r3, [pc, #32]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800734e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007350:	2380      	movs	r3, #128	; 0x80
 8007352:	03db      	lsls	r3, r3, #15
 8007354:	401a      	ands	r2, r3
 8007356:	2380      	movs	r3, #128	; 0x80
 8007358:	03db      	lsls	r3, r3, #15
 800735a:	429a      	cmp	r2, r3
 800735c:	d104      	bne.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
        frequency = HAL_RCC_GetPCLK1Freq();
 800735e:	f7ff fc87 	bl	8006c70 <HAL_RCC_GetPCLK1Freq>
 8007362:	0003      	movs	r3, r0
 8007364:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007366:	e03f      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
        frequency = 0U;
 8007368:	2300      	movs	r3, #0
 800736a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800736c:	e03c      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800736e:	46c0      	nop			; (mov r8, r8)
 8007370:	40021000 	.word	0x40021000
 8007374:	00009088 	.word	0x00009088
 8007378:	0007a120 	.word	0x0007a120
 800737c:	000f4240 	.word	0x000f4240
 8007380:	001e8480 	.word	0x001e8480
 8007384:	003d0900 	.word	0x003d0900
 8007388:	0800e6b4 	.word	0x0800e6b4
 800738c:	00f42400 	.word	0x00f42400
 8007390:	007a1200 	.word	0x007a1200
 8007394:	02dc6c00 	.word	0x02dc6c00
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007398:	4b16      	ldr	r3, [pc, #88]	; (80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>)
 800739a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800739c:	23c0      	movs	r3, #192	; 0xc0
 800739e:	029b      	lsls	r3, r3, #10
 80073a0:	4013      	ands	r3, r2
 80073a2:	617b      	str	r3, [r7, #20]
      if (srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d104      	bne.n	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        frequency = HAL_RCC_GetPCLK1Freq();
 80073aa:	f7ff fc61 	bl	8006c70 <HAL_RCC_GetPCLK1Freq>
 80073ae:	0003      	movs	r3, r0
 80073b0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80073b2:	e018      	b.n	80073e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	2380      	movs	r3, #128	; 0x80
 80073b8:	029b      	lsls	r3, r3, #10
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d107      	bne.n	80073ce <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80073be:	4b0d      	ldr	r3, [pc, #52]	; (80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2204      	movs	r2, #4
 80073c4:	4013      	ands	r3, r2
 80073c6:	d002      	beq.n	80073ce <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        frequency = HSI_VALUE;
 80073c8:	4b0b      	ldr	r3, [pc, #44]	; (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>)
 80073ca:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80073cc:	e00b      	b.n	80073e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
      else if (srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	2380      	movs	r3, #128	; 0x80
 80073d2:	025b      	lsls	r3, r3, #9
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d104      	bne.n	80073e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
        frequency = HAL_RCC_GetSysClockFreq();
 80073d8:	f7ff fbc2 	bl	8006b60 <HAL_RCC_GetSysClockFreq>
 80073dc:	0003      	movs	r3, r0
 80073de:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80073e0:	e001      	b.n	80073e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
        frequency = 0U;
 80073e2:	2300      	movs	r3, #0
 80073e4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80073e6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return(frequency);
 80073e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80073ea:	0018      	movs	r0, r3
 80073ec:	46bd      	mov	sp, r7
 80073ee:	b00a      	add	sp, #40	; 0x28
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	46c0      	nop			; (mov r8, r8)
 80073f4:	40021000 	.word	0x40021000
 80073f8:	00f42400 	.word	0x00f42400

080073fc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d101      	bne.n	800740e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e074      	b.n	80074f8 <HAL_RTC_Init+0xfc>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
  
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2221      	movs	r2, #33	; 0x21
 8007412:	5c9b      	ldrb	r3, [r3, r2]
 8007414:	b2db      	uxtb	r3, r3
 8007416:	2b00      	cmp	r3, #0
 8007418:	d107      	bne.n	800742a <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2220      	movs	r2, #32
 800741e:	2100      	movs	r1, #0
 8007420:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	0018      	movs	r0, r3
 8007426:	f003 f941 	bl	800a6ac <HAL_RTC_MspInit>
  }

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2221      	movs	r2, #33	; 0x21
 800742e:	2102      	movs	r1, #2
 8007430:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	22ca      	movs	r2, #202	; 0xca
 8007438:	625a      	str	r2, [r3, #36]	; 0x24
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2253      	movs	r2, #83	; 0x53
 8007440:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	0018      	movs	r0, r3
 8007446:	f000 fd20 	bl	8007e8a <RTC_EnterInitMode>
 800744a:	1e03      	subs	r3, r0, #0
 800744c:	d009      	beq.n	8007462 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	22ff      	movs	r2, #255	; 0xff
 8007454:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2221      	movs	r2, #33	; 0x21
 800745a:	2104      	movs	r1, #4
 800745c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e04a      	b.n	80074f8 <HAL_RTC_Init+0xfc>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	6812      	ldr	r2, [r2, #0]
 800746a:	6892      	ldr	r2, [r2, #8]
 800746c:	4924      	ldr	r1, [pc, #144]	; (8007500 <HAL_RTC_Init+0x104>)
 800746e:	400a      	ands	r2, r1
 8007470:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	6812      	ldr	r2, [r2, #0]
 800747a:	6891      	ldr	r1, [r2, #8]
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	6850      	ldr	r0, [r2, #4]
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	6912      	ldr	r2, [r2, #16]
 8007484:	4310      	orrs	r0, r2
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	6992      	ldr	r2, [r2, #24]
 800748a:	4302      	orrs	r2, r0
 800748c:	430a      	orrs	r2, r1
 800748e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	68d2      	ldr	r2, [r2, #12]
 8007498:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	6812      	ldr	r2, [r2, #0]
 80074a2:	6911      	ldr	r1, [r2, #16]
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	6892      	ldr	r2, [r2, #8]
 80074a8:	0412      	lsls	r2, r2, #16
 80074aa:	430a      	orrs	r2, r1
 80074ac:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	6812      	ldr	r2, [r2, #0]
 80074b6:	68d2      	ldr	r2, [r2, #12]
 80074b8:	2180      	movs	r1, #128	; 0x80
 80074ba:	438a      	bics	r2, r1
 80074bc:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	6812      	ldr	r2, [r2, #0]
 80074c6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80074c8:	2103      	movs	r1, #3
 80074ca:	438a      	bics	r2, r1
 80074cc:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	6812      	ldr	r2, [r2, #0]
 80074d6:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	69d0      	ldr	r0, [r2, #28]
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	6952      	ldr	r2, [r2, #20]
 80074e0:	4302      	orrs	r2, r0
 80074e2:	430a      	orrs	r2, r1
 80074e4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	22ff      	movs	r2, #255	; 0xff
 80074ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2221      	movs	r2, #33	; 0x21
 80074f2:	2101      	movs	r1, #1
 80074f4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80074f6:	2300      	movs	r3, #0
  }
}
 80074f8:	0018      	movs	r0, r3
 80074fa:	46bd      	mov	sp, r7
 80074fc:	b002      	add	sp, #8
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	ff8fffbf 	.word	0xff8fffbf

08007504 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007504:	b590      	push	{r4, r7, lr}
 8007506:	b087      	sub	sp, #28
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007510:	2300      	movs	r3, #0
 8007512:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2220      	movs	r2, #32
 8007518:	5c9b      	ldrb	r3, [r3, r2]
 800751a:	2b01      	cmp	r3, #1
 800751c:	d101      	bne.n	8007522 <HAL_RTC_SetTime+0x1e>
 800751e:	2302      	movs	r3, #2
 8007520:	e0b5      	b.n	800768e <HAL_RTC_SetTime+0x18a>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2220      	movs	r2, #32
 8007526:	2101      	movs	r1, #1
 8007528:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2221      	movs	r2, #33	; 0x21
 800752e:	2102      	movs	r1, #2
 8007530:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d125      	bne.n	8007584 <HAL_RTC_SetTime+0x80>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	2240      	movs	r2, #64	; 0x40
 8007540:	4013      	ands	r3, r2
 8007542:	d102      	bne.n	800754a <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	2200      	movs	r2, #0
 8007548:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	0018      	movs	r0, r3
 8007550:	f000 fcc7 	bl	8007ee2 <RTC_ByteToBcd2>
 8007554:	0003      	movs	r3, r0
 8007556:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	785b      	ldrb	r3, [r3, #1]
 800755c:	0018      	movs	r0, r3
 800755e:	f000 fcc0 	bl	8007ee2 <RTC_ByteToBcd2>
 8007562:	0003      	movs	r3, r0
 8007564:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007566:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	789b      	ldrb	r3, [r3, #2]
 800756c:	0018      	movs	r0, r3
 800756e:	f000 fcb8 	bl	8007ee2 <RTC_ByteToBcd2>
 8007572:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007574:	0022      	movs	r2, r4
 8007576:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	78db      	ldrb	r3, [r3, #3]
 800757c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800757e:	4313      	orrs	r3, r2
 8007580:	617b      	str	r3, [r7, #20]
 8007582:	e01f      	b.n	80075c4 <HAL_RTC_SetTime+0xc0>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	2240      	movs	r2, #64	; 0x40
 800758c:	4013      	ands	r3, r2
 800758e:	d007      	beq.n	80075a0 <HAL_RTC_SetTime+0x9c>
    {
      tmpreg = RTC_Bcd2ToByte(sTime->Hours);
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	0018      	movs	r0, r3
 8007596:	f000 fcc5 	bl	8007f24 <RTC_Bcd2ToByte>
 800759a:	0003      	movs	r3, r0
 800759c:	617b      	str	r3, [r7, #20]
 800759e:	e002      	b.n	80075a6 <HAL_RTC_SetTime+0xa2>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	2200      	movs	r2, #0
 80075a4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	785b      	ldrb	r3, [r3, #1]
 80075b0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80075b2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80075b4:	68ba      	ldr	r2, [r7, #8]
 80075b6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80075b8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	78db      	ldrb	r3, [r3, #3]
 80075be:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80075c0:	4313      	orrs	r3, r2
 80075c2:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	22ca      	movs	r2, #202	; 0xca
 80075ca:	625a      	str	r2, [r3, #36]	; 0x24
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2253      	movs	r2, #83	; 0x53
 80075d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	0018      	movs	r0, r3
 80075d8:	f000 fc57 	bl	8007e8a <RTC_EnterInitMode>
 80075dc:	1e03      	subs	r3, r0, #0
 80075de:	d00d      	beq.n	80075fc <HAL_RTC_SetTime+0xf8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	22ff      	movs	r2, #255	; 0xff
 80075e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2221      	movs	r2, #33	; 0x21
 80075ec:	2104      	movs	r1, #4
 80075ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2220      	movs	r2, #32
 80075f4:	2100      	movs	r1, #0
 80075f6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	e048      	b.n	800768e <HAL_RTC_SetTime+0x18a>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	697a      	ldr	r2, [r7, #20]
 8007602:	4925      	ldr	r1, [pc, #148]	; (8007698 <HAL_RTC_SetTime+0x194>)
 8007604:	400a      	ands	r2, r1
 8007606:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	6812      	ldr	r2, [r2, #0]
 8007610:	6892      	ldr	r2, [r2, #8]
 8007612:	4922      	ldr	r1, [pc, #136]	; (800769c <HAL_RTC_SetTime+0x198>)
 8007614:	400a      	ands	r2, r1
 8007616:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	6812      	ldr	r2, [r2, #0]
 8007620:	6891      	ldr	r1, [r2, #8]
 8007622:	68ba      	ldr	r2, [r7, #8]
 8007624:	68d0      	ldr	r0, [r2, #12]
 8007626:	68ba      	ldr	r2, [r7, #8]
 8007628:	6912      	ldr	r2, [r2, #16]
 800762a:	4302      	orrs	r2, r0
 800762c:	430a      	orrs	r2, r1
 800762e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	6812      	ldr	r2, [r2, #0]
 8007638:	68d2      	ldr	r2, [r2, #12]
 800763a:	2180      	movs	r1, #128	; 0x80
 800763c:	438a      	bics	r2, r1
 800763e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	2220      	movs	r2, #32
 8007648:	4013      	ands	r3, r2
 800764a:	d113      	bne.n	8007674 <HAL_RTC_SetTime+0x170>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	0018      	movs	r0, r3
 8007650:	f000 fbf2 	bl	8007e38 <HAL_RTC_WaitForSynchro>
 8007654:	1e03      	subs	r3, r0, #0
 8007656:	d00d      	beq.n	8007674 <HAL_RTC_SetTime+0x170>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	22ff      	movs	r2, #255	; 0xff
 800765e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2221      	movs	r2, #33	; 0x21
 8007664:	2104      	movs	r1, #4
 8007666:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2220      	movs	r2, #32
 800766c:	2100      	movs	r1, #0
 800766e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e00c      	b.n	800768e <HAL_RTC_SetTime+0x18a>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	22ff      	movs	r2, #255	; 0xff
 800767a:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2221      	movs	r2, #33	; 0x21
 8007680:	2101      	movs	r1, #1
 8007682:	5499      	strb	r1, [r3, r2]

   __HAL_UNLOCK(hrtc); 
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2220      	movs	r2, #32
 8007688:	2100      	movs	r1, #0
 800768a:	5499      	strb	r1, [r3, r2]

   return HAL_OK;
 800768c:	2300      	movs	r3, #0
  }
}
 800768e:	0018      	movs	r0, r3
 8007690:	46bd      	mov	sp, r7
 8007692:	b007      	add	sp, #28
 8007694:	bd90      	pop	{r4, r7, pc}
 8007696:	46c0      	nop			; (mov r8, r8)
 8007698:	007f7f7f 	.word	0x007f7f7f
 800769c:	fffbffff 	.word	0xfffbffff

080076a0 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b086      	sub	sp, #24
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80076ac:	2300      	movs	r3, #0
 80076ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	045b      	lsls	r3, r3, #17
 80076c2:	0c5a      	lsrs	r2, r3, #17
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	609a      	str	r2, [r3, #8]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a22      	ldr	r2, [pc, #136]	; (8007758 <HAL_RTC_GetTime+0xb8>)
 80076d0:	4013      	ands	r3, r2
 80076d2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	0c1b      	lsrs	r3, r3, #16
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	223f      	movs	r2, #63	; 0x3f
 80076dc:	4013      	ands	r3, r2
 80076de:	b2da      	uxtb	r2, r3
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	0a1b      	lsrs	r3, r3, #8
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	227f      	movs	r2, #127	; 0x7f
 80076ec:	4013      	ands	r3, r2
 80076ee:	b2da      	uxtb	r2, r3
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	227f      	movs	r2, #127	; 0x7f
 80076fa:	4013      	ands	r3, r2
 80076fc:	b2da      	uxtb	r2, r3
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	0c1b      	lsrs	r3, r3, #16
 8007706:	b2db      	uxtb	r3, r3
 8007708:	2240      	movs	r2, #64	; 0x40
 800770a:	4013      	ands	r3, r2
 800770c:	b2da      	uxtb	r2, r3
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d11a      	bne.n	800774e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	0018      	movs	r0, r3
 800771e:	f000 fc01 	bl	8007f24 <RTC_Bcd2ToByte>
 8007722:	0003      	movs	r3, r0
 8007724:	001a      	movs	r2, r3
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	785b      	ldrb	r3, [r3, #1]
 800772e:	0018      	movs	r0, r3
 8007730:	f000 fbf8 	bl	8007f24 <RTC_Bcd2ToByte>
 8007734:	0003      	movs	r3, r0
 8007736:	001a      	movs	r2, r3
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	789b      	ldrb	r3, [r3, #2]
 8007740:	0018      	movs	r0, r3
 8007742:	f000 fbef 	bl	8007f24 <RTC_Bcd2ToByte>
 8007746:	0003      	movs	r3, r0
 8007748:	001a      	movs	r2, r3
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800774e:	2300      	movs	r3, #0
}
 8007750:	0018      	movs	r0, r3
 8007752:	46bd      	mov	sp, r7
 8007754:	b006      	add	sp, #24
 8007756:	bd80      	pop	{r7, pc}
 8007758:	007f7f7f 	.word	0x007f7f7f

0800775c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800775c:	b590      	push	{r4, r7, lr}
 800775e:	b087      	sub	sp, #28
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007768:	2300      	movs	r3, #0
 800776a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2220      	movs	r2, #32
 8007770:	5c9b      	ldrb	r3, [r3, r2]
 8007772:	2b01      	cmp	r3, #1
 8007774:	d101      	bne.n	800777a <HAL_RTC_SetDate+0x1e>
 8007776:	2302      	movs	r3, #2
 8007778:	e0a7      	b.n	80078ca <HAL_RTC_SetDate+0x16e>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2220      	movs	r2, #32
 800777e:	2101      	movs	r1, #1
 8007780:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2221      	movs	r2, #33	; 0x21
 8007786:	2102      	movs	r1, #2
 8007788:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10e      	bne.n	80077ae <HAL_RTC_SetDate+0x52>
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	785b      	ldrb	r3, [r3, #1]
 8007794:	001a      	movs	r2, r3
 8007796:	2310      	movs	r3, #16
 8007798:	4013      	ands	r3, r2
 800779a:	d008      	beq.n	80077ae <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	785b      	ldrb	r3, [r3, #1]
 80077a0:	2210      	movs	r2, #16
 80077a2:	4393      	bics	r3, r2
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	330a      	adds	r3, #10
 80077a8:	b2da      	uxtb	r2, r3
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d11c      	bne.n	80077ee <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	78db      	ldrb	r3, [r3, #3]
 80077b8:	0018      	movs	r0, r3
 80077ba:	f000 fb92 	bl	8007ee2 <RTC_ByteToBcd2>
 80077be:	0003      	movs	r3, r0
 80077c0:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	785b      	ldrb	r3, [r3, #1]
 80077c6:	0018      	movs	r0, r3
 80077c8:	f000 fb8b 	bl	8007ee2 <RTC_ByteToBcd2>
 80077cc:	0003      	movs	r3, r0
 80077ce:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80077d0:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	789b      	ldrb	r3, [r3, #2]
 80077d6:	0018      	movs	r0, r3
 80077d8:	f000 fb83 	bl	8007ee2 <RTC_ByteToBcd2>
 80077dc:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80077de:	0022      	movs	r2, r4
 80077e0:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80077e8:	4313      	orrs	r3, r2
 80077ea:	617b      	str	r3, [r7, #20]
 80077ec:	e01c      	b.n	8007828 <HAL_RTC_SetDate+0xcc>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	785b      	ldrb	r3, [r3, #1]
 80077f2:	0018      	movs	r0, r3
 80077f4:	f000 fb96 	bl	8007f24 <RTC_Bcd2ToByte>
 80077f8:	0003      	movs	r3, r0
 80077fa:	617b      	str	r3, [r7, #20]
    assert_param(IS_RTC_MONTH(datetmpreg));
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	789b      	ldrb	r3, [r3, #2]
 8007800:	0018      	movs	r0, r3
 8007802:	f000 fb8f 	bl	8007f24 <RTC_Bcd2ToByte>
 8007806:	0003      	movs	r3, r0
 8007808:	617b      	str	r3, [r7, #20]
    assert_param(IS_RTC_DATE(datetmpreg));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	78db      	ldrb	r3, [r3, #3]
 800780e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	785b      	ldrb	r3, [r3, #1]
 8007814:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007816:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800781c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007824:	4313      	orrs	r3, r2
 8007826:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	22ca      	movs	r2, #202	; 0xca
 800782e:	625a      	str	r2, [r3, #36]	; 0x24
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2253      	movs	r2, #83	; 0x53
 8007836:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	0018      	movs	r0, r3
 800783c:	f000 fb25 	bl	8007e8a <RTC_EnterInitMode>
 8007840:	1e03      	subs	r3, r0, #0
 8007842:	d00d      	beq.n	8007860 <HAL_RTC_SetDate+0x104>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	22ff      	movs	r2, #255	; 0xff
 800784a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2221      	movs	r2, #33	; 0x21
 8007850:	2104      	movs	r1, #4
 8007852:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2220      	movs	r2, #32
 8007858:	2100      	movs	r1, #0
 800785a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e034      	b.n	80078ca <HAL_RTC_SetDate+0x16e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	697a      	ldr	r2, [r7, #20]
 8007866:	491b      	ldr	r1, [pc, #108]	; (80078d4 <HAL_RTC_SetDate+0x178>)
 8007868:	400a      	ands	r2, r1
 800786a:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	6812      	ldr	r2, [r2, #0]
 8007874:	68d2      	ldr	r2, [r2, #12]
 8007876:	2180      	movs	r1, #128	; 0x80
 8007878:	438a      	bics	r2, r1
 800787a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	2220      	movs	r2, #32
 8007884:	4013      	ands	r3, r2
 8007886:	d113      	bne.n	80078b0 <HAL_RTC_SetDate+0x154>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	0018      	movs	r0, r3
 800788c:	f000 fad4 	bl	8007e38 <HAL_RTC_WaitForSynchro>
 8007890:	1e03      	subs	r3, r0, #0
 8007892:	d00d      	beq.n	80078b0 <HAL_RTC_SetDate+0x154>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	22ff      	movs	r2, #255	; 0xff
 800789a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2221      	movs	r2, #33	; 0x21
 80078a0:	2104      	movs	r1, #4
 80078a2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2220      	movs	r2, #32
 80078a8:	2100      	movs	r1, #0
 80078aa:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	e00c      	b.n	80078ca <HAL_RTC_SetDate+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	22ff      	movs	r2, #255	; 0xff
 80078b6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2221      	movs	r2, #33	; 0x21
 80078bc:	2101      	movs	r1, #1
 80078be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2220      	movs	r2, #32
 80078c4:	2100      	movs	r1, #0
 80078c6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80078c8:	2300      	movs	r3, #0
  }
}
 80078ca:	0018      	movs	r0, r3
 80078cc:	46bd      	mov	sp, r7
 80078ce:	b007      	add	sp, #28
 80078d0:	bd90      	pop	{r4, r7, pc}
 80078d2:	46c0      	nop			; (mov r8, r8)
 80078d4:	00ffff3f 	.word	0x00ffff3f

080078d8 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b086      	sub	sp, #24
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80078e4:	2300      	movs	r3, #0
 80078e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	4a21      	ldr	r2, [pc, #132]	; (8007974 <HAL_RTC_GetDate+0x9c>)
 80078f0:	4013      	ands	r3, r2
 80078f2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	0c1b      	lsrs	r3, r3, #16
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	0a1b      	lsrs	r3, r3, #8
 8007902:	b2db      	uxtb	r3, r3
 8007904:	221f      	movs	r2, #31
 8007906:	4013      	ands	r3, r2
 8007908:	b2da      	uxtb	r2, r3
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	b2db      	uxtb	r3, r3
 8007912:	223f      	movs	r2, #63	; 0x3f
 8007914:	4013      	ands	r3, r2
 8007916:	b2da      	uxtb	r2, r3
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	0b5b      	lsrs	r3, r3, #13
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2207      	movs	r2, #7
 8007924:	4013      	ands	r3, r2
 8007926:	b2da      	uxtb	r2, r3
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d11a      	bne.n	8007968 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	78db      	ldrb	r3, [r3, #3]
 8007936:	0018      	movs	r0, r3
 8007938:	f000 faf4 	bl	8007f24 <RTC_Bcd2ToByte>
 800793c:	0003      	movs	r3, r0
 800793e:	001a      	movs	r2, r3
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	785b      	ldrb	r3, [r3, #1]
 8007948:	0018      	movs	r0, r3
 800794a:	f000 faeb 	bl	8007f24 <RTC_Bcd2ToByte>
 800794e:	0003      	movs	r3, r0
 8007950:	001a      	movs	r2, r3
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	789b      	ldrb	r3, [r3, #2]
 800795a:	0018      	movs	r0, r3
 800795c:	f000 fae2 	bl	8007f24 <RTC_Bcd2ToByte>
 8007960:	0003      	movs	r3, r0
 8007962:	001a      	movs	r2, r3
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	0018      	movs	r0, r3
 800796c:	46bd      	mov	sp, r7
 800796e:	b006      	add	sp, #24
 8007970:	bd80      	pop	{r7, pc}
 8007972:	46c0      	nop			; (mov r8, r8)
 8007974:	00ffff3f 	.word	0x00ffff3f

08007978 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).   
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007978:	b590      	push	{r4, r7, lr}
 800797a:	b089      	sub	sp, #36	; 0x24
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8007984:	2300      	movs	r3, #0
 8007986:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8007988:	2300      	movs	r3, #0
 800798a:	61fb      	str	r3, [r7, #28]
 800798c:	2300      	movs	r3, #0
 800798e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2220      	movs	r2, #32
 8007994:	5c9b      	ldrb	r3, [r3, r2]
 8007996:	2b01      	cmp	r3, #1
 8007998:	d101      	bne.n	800799e <HAL_RTC_SetAlarm_IT+0x26>
 800799a:	2302      	movs	r3, #2
 800799c:	e14d      	b.n	8007c3a <HAL_RTC_SetAlarm_IT+0x2c2>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2220      	movs	r2, #32
 80079a2:	2101      	movs	r1, #1
 80079a4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2221      	movs	r2, #33	; 0x21
 80079aa:	2102      	movs	r1, #2
 80079ac:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d136      	bne.n	8007a22 <HAL_RTC_SetAlarm_IT+0xaa>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	2240      	movs	r2, #64	; 0x40
 80079bc:	4013      	ands	r3, r2
 80079be:	d102      	bne.n	80079c6 <HAL_RTC_SetAlarm_IT+0x4e>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	2200      	movs	r2, #0
 80079c4:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	0018      	movs	r0, r3
 80079cc:	f000 fa89 	bl	8007ee2 <RTC_ByteToBcd2>
 80079d0:	0003      	movs	r3, r0
 80079d2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	785b      	ldrb	r3, [r3, #1]
 80079d8:	0018      	movs	r0, r3
 80079da:	f000 fa82 	bl	8007ee2 <RTC_ByteToBcd2>
 80079de:	0003      	movs	r3, r0
 80079e0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80079e2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	789b      	ldrb	r3, [r3, #2]
 80079e8:	0018      	movs	r0, r3
 80079ea:	f000 fa7a 	bl	8007ee2 <RTC_ByteToBcd2>
 80079ee:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80079f0:	0022      	movs	r2, r4
 80079f2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	78db      	ldrb	r3, [r3, #3]
 80079f8:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80079fa:	431a      	orrs	r2, r3
 80079fc:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	2220      	movs	r2, #32
 8007a02:	5c9b      	ldrb	r3, [r3, r2]
 8007a04:	0018      	movs	r0, r3
 8007a06:	f000 fa6c 	bl	8007ee2 <RTC_ByteToBcd2>
 8007a0a:	0003      	movs	r3, r0
 8007a0c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007a0e:	0022      	movs	r2, r4
 8007a10:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007a16:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	61fb      	str	r3, [r7, #28]
 8007a20:	e03f      	b.n	8007aa2 <HAL_RTC_SetAlarm_IT+0x12a>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	2240      	movs	r2, #64	; 0x40
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	d007      	beq.n	8007a3e <HAL_RTC_SetAlarm_IT+0xc6>
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	0018      	movs	r0, r3
 8007a34:	f000 fa76 	bl	8007f24 <RTC_Bcd2ToByte>
 8007a38:	0003      	movs	r3, r0
 8007a3a:	61fb      	str	r3, [r7, #28]
 8007a3c:	e002      	b.n	8007a44 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    } 
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	2200      	movs	r2, #0
 8007a42:	70da      	strb	r2, [r3, #3]
    }

    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
    
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	69db      	ldr	r3, [r3, #28]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d108      	bne.n	8007a5e <HAL_RTC_SetAlarm_IT+0xe6>
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	2220      	movs	r2, #32
 8007a50:	5c9b      	ldrb	r3, [r3, r2]
 8007a52:	0018      	movs	r0, r3
 8007a54:	f000 fa66 	bl	8007f24 <RTC_Bcd2ToByte>
 8007a58:	0003      	movs	r3, r0
 8007a5a:	61fb      	str	r3, [r7, #28]
 8007a5c:	e007      	b.n	8007a6e <HAL_RTC_SetAlarm_IT+0xf6>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));
    }
    else
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	2220      	movs	r2, #32
 8007a62:	5c9b      	ldrb	r3, [r3, r2]
 8007a64:	0018      	movs	r0, r3
 8007a66:	f000 fa5d 	bl	8007f24 <RTC_Bcd2ToByte>
 8007a6a:	0003      	movs	r3, r0
 8007a6c:	61fb      	str	r3, [r7, #28]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	785b      	ldrb	r3, [r3, #1]
 8007a78:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8007a7a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007a80:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	78db      	ldrb	r3, [r3, #3]
 8007a86:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007a88:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	2120      	movs	r1, #32
 8007a8e:	5c5b      	ldrb	r3, [r3, r1]
 8007a90:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007a92:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007a98:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));     
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	685a      	ldr	r2, [r3, #4]
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	699b      	ldr	r3, [r3, #24]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	22ca      	movs	r2, #202	; 0xca
 8007ab4:	625a      	str	r2, [r3, #36]	; 0x24
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2253      	movs	r2, #83	; 0x53
 8007abc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ac2:	2380      	movs	r3, #128	; 0x80
 8007ac4:	005b      	lsls	r3, r3, #1
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d14e      	bne.n	8007b68 <HAL_RTC_SetAlarm_IT+0x1f0>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	6812      	ldr	r2, [r2, #0]
 8007ad2:	6892      	ldr	r2, [r2, #8]
 8007ad4:	495b      	ldr	r1, [pc, #364]	; (8007c44 <HAL_RTC_SetAlarm_IT+0x2cc>)
 8007ad6:	400a      	ands	r2, r1
 8007ad8:	609a      	str	r2, [r3, #8]
    
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	68fa      	ldr	r2, [r7, #12]
 8007ae0:	6812      	ldr	r2, [r2, #0]
 8007ae2:	68d2      	ldr	r2, [r2, #12]
 8007ae4:	21ff      	movs	r1, #255	; 0xff
 8007ae6:	400a      	ands	r2, r1
 8007ae8:	4957      	ldr	r1, [pc, #348]	; (8007c48 <HAL_RTC_SetAlarm_IT+0x2d0>)
 8007aea:	430a      	orrs	r2, r1
 8007aec:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007aee:	f7fd f8e3 	bl	8004cb8 <HAL_GetTick>
 8007af2:	0003      	movs	r3, r0
 8007af4:	61bb      	str	r3, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007af6:	e016      	b.n	8007b26 <HAL_RTC_SetAlarm_IT+0x1ae>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007af8:	f7fd f8de 	bl	8004cb8 <HAL_GetTick>
 8007afc:	0002      	movs	r2, r0
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	1ad2      	subs	r2, r2, r3
 8007b02:	23fa      	movs	r3, #250	; 0xfa
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d90d      	bls.n	8007b26 <HAL_RTC_SetAlarm_IT+0x1ae>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	22ff      	movs	r2, #255	; 0xff
 8007b10:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2221      	movs	r2, #33	; 0x21
 8007b16:	2103      	movs	r1, #3
 8007b18:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2220      	movs	r2, #32
 8007b1e:	2100      	movs	r1, #0
 8007b20:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	e089      	b.n	8007c3a <HAL_RTC_SetAlarm_IT+0x2c2>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	4013      	ands	r3, r2
 8007b30:	d0e2      	beq.n	8007af8 <HAL_RTC_SetAlarm_IT+0x180>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	69fa      	ldr	r2, [r7, #28]
 8007b38:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	6812      	ldr	r2, [r2, #0]
 8007b4a:	6892      	ldr	r2, [r2, #8]
 8007b4c:	2180      	movs	r1, #128	; 0x80
 8007b4e:	0049      	lsls	r1, r1, #1
 8007b50:	430a      	orrs	r2, r1
 8007b52:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	6812      	ldr	r2, [r2, #0]
 8007b5c:	6892      	ldr	r2, [r2, #8]
 8007b5e:	2180      	movs	r1, #128	; 0x80
 8007b60:	0149      	lsls	r1, r1, #5
 8007b62:	430a      	orrs	r2, r1
 8007b64:	609a      	str	r2, [r3, #8]
 8007b66:	e04d      	b.n	8007c04 <HAL_RTC_SetAlarm_IT+0x28c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	6812      	ldr	r2, [r2, #0]
 8007b70:	6892      	ldr	r2, [r2, #8]
 8007b72:	4936      	ldr	r1, [pc, #216]	; (8007c4c <HAL_RTC_SetAlarm_IT+0x2d4>)
 8007b74:	400a      	ands	r2, r1
 8007b76:	609a      	str	r2, [r3, #8]
    
    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	6812      	ldr	r2, [r2, #0]
 8007b80:	68d2      	ldr	r2, [r2, #12]
 8007b82:	21ff      	movs	r1, #255	; 0xff
 8007b84:	400a      	ands	r2, r1
 8007b86:	4932      	ldr	r1, [pc, #200]	; (8007c50 <HAL_RTC_SetAlarm_IT+0x2d8>)
 8007b88:	430a      	orrs	r2, r1
 8007b8a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007b8c:	f7fd f894 	bl	8004cb8 <HAL_GetTick>
 8007b90:	0003      	movs	r3, r0
 8007b92:	61bb      	str	r3, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007b94:	e016      	b.n	8007bc4 <HAL_RTC_SetAlarm_IT+0x24c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007b96:	f7fd f88f 	bl	8004cb8 <HAL_GetTick>
 8007b9a:	0002      	movs	r2, r0
 8007b9c:	69bb      	ldr	r3, [r7, #24]
 8007b9e:	1ad2      	subs	r2, r2, r3
 8007ba0:	23fa      	movs	r3, #250	; 0xfa
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d90d      	bls.n	8007bc4 <HAL_RTC_SetAlarm_IT+0x24c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	22ff      	movs	r2, #255	; 0xff
 8007bae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2221      	movs	r2, #33	; 0x21
 8007bb4:	2103      	movs	r1, #3
 8007bb6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2220      	movs	r2, #32
 8007bbc:	2100      	movs	r1, #0
 8007bbe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e03a      	b.n	8007c3a <HAL_RTC_SetAlarm_IT+0x2c2>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	2202      	movs	r2, #2
 8007bcc:	4013      	ands	r3, r2
 8007bce:	d0e2      	beq.n	8007b96 <HAL_RTC_SetAlarm_IT+0x21e>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	69fa      	ldr	r2, [r7, #28]
 8007bd6:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	697a      	ldr	r2, [r7, #20]
 8007bde:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	6812      	ldr	r2, [r2, #0]
 8007be8:	6892      	ldr	r2, [r2, #8]
 8007bea:	2180      	movs	r1, #128	; 0x80
 8007bec:	0089      	lsls	r1, r1, #2
 8007bee:	430a      	orrs	r2, r1
 8007bf0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	6812      	ldr	r2, [r2, #0]
 8007bfa:	6892      	ldr	r2, [r2, #8]
 8007bfc:	2180      	movs	r1, #128	; 0x80
 8007bfe:	0189      	lsls	r1, r1, #6
 8007c00:	430a      	orrs	r2, r1
 8007c02:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007c04:	4b13      	ldr	r3, [pc, #76]	; (8007c54 <HAL_RTC_SetAlarm_IT+0x2dc>)
 8007c06:	4a13      	ldr	r2, [pc, #76]	; (8007c54 <HAL_RTC_SetAlarm_IT+0x2dc>)
 8007c08:	6812      	ldr	r2, [r2, #0]
 8007c0a:	2180      	movs	r1, #128	; 0x80
 8007c0c:	0289      	lsls	r1, r1, #10
 8007c0e:	430a      	orrs	r2, r1
 8007c10:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8007c12:	4b10      	ldr	r3, [pc, #64]	; (8007c54 <HAL_RTC_SetAlarm_IT+0x2dc>)
 8007c14:	4a0f      	ldr	r2, [pc, #60]	; (8007c54 <HAL_RTC_SetAlarm_IT+0x2dc>)
 8007c16:	6892      	ldr	r2, [r2, #8]
 8007c18:	2180      	movs	r1, #128	; 0x80
 8007c1a:	0289      	lsls	r1, r1, #10
 8007c1c:	430a      	orrs	r2, r1
 8007c1e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	22ff      	movs	r2, #255	; 0xff
 8007c26:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY; 
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2221      	movs	r2, #33	; 0x21
 8007c2c:	2101      	movs	r1, #1
 8007c2e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2220      	movs	r2, #32
 8007c34:	2100      	movs	r1, #0
 8007c36:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	0018      	movs	r0, r3
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	b009      	add	sp, #36	; 0x24
 8007c40:	bd90      	pop	{r4, r7, pc}
 8007c42:	46c0      	nop			; (mov r8, r8)
 8007c44:	fffffeff 	.word	0xfffffeff
 8007c48:	fffffe7f 	.word	0xfffffe7f
 8007c4c:	fffffdff 	.word	0xfffffdff
 8007c50:	fffffd7f 	.word	0xfffffd7f
 8007c54:	40010400 	.word	0x40010400

08007c58 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007c62:	2300      	movs	r3, #0
 8007c64:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2220      	movs	r2, #32
 8007c6a:	5c9b      	ldrb	r3, [r3, r2]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d101      	bne.n	8007c74 <HAL_RTC_DeactivateAlarm+0x1c>
 8007c70:	2302      	movs	r3, #2
 8007c72:	e086      	b.n	8007d82 <HAL_RTC_DeactivateAlarm+0x12a>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2220      	movs	r2, #32
 8007c78:	2101      	movs	r1, #1
 8007c7a:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2221      	movs	r2, #33	; 0x21
 8007c80:	2102      	movs	r1, #2
 8007c82:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	22ca      	movs	r2, #202	; 0xca
 8007c8a:	625a      	str	r2, [r3, #36]	; 0x24
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2253      	movs	r2, #83	; 0x53
 8007c92:	625a      	str	r2, [r3, #36]	; 0x24

  if(Alarm == RTC_ALARM_A)
 8007c94:	683a      	ldr	r2, [r7, #0]
 8007c96:	2380      	movs	r3, #128	; 0x80
 8007c98:	005b      	lsls	r3, r3, #1
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d132      	bne.n	8007d04 <HAL_RTC_DeactivateAlarm+0xac>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	6812      	ldr	r2, [r2, #0]
 8007ca6:	6892      	ldr	r2, [r2, #8]
 8007ca8:	4938      	ldr	r1, [pc, #224]	; (8007d8c <HAL_RTC_DeactivateAlarm+0x134>)
 8007caa:	400a      	ands	r2, r1
 8007cac:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	6812      	ldr	r2, [r2, #0]
 8007cb6:	6892      	ldr	r2, [r2, #8]
 8007cb8:	4935      	ldr	r1, [pc, #212]	; (8007d90 <HAL_RTC_DeactivateAlarm+0x138>)
 8007cba:	400a      	ands	r2, r1
 8007cbc:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8007cbe:	f7fc fffb 	bl	8004cb8 <HAL_GetTick>
 8007cc2:	0003      	movs	r3, r0
 8007cc4:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007cc6:	e016      	b.n	8007cf6 <HAL_RTC_DeactivateAlarm+0x9e>
    {
      if( (HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8007cc8:	f7fc fff6 	bl	8004cb8 <HAL_GetTick>
 8007ccc:	0002      	movs	r2, r0
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	1ad2      	subs	r2, r2, r3
 8007cd2:	23fa      	movs	r3, #250	; 0xfa
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d90d      	bls.n	8007cf6 <HAL_RTC_DeactivateAlarm+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	22ff      	movs	r2, #255	; 0xff
 8007ce0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2221      	movs	r2, #33	; 0x21
 8007ce6:	2103      	movs	r1, #3
 8007ce8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2220      	movs	r2, #32
 8007cee:	2100      	movs	r1, #0
 8007cf0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	e045      	b.n	8007d82 <HAL_RTC_DeactivateAlarm+0x12a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	4013      	ands	r3, r2
 8007d00:	d0e2      	beq.n	8007cc8 <HAL_RTC_DeactivateAlarm+0x70>
 8007d02:	e031      	b.n	8007d68 <HAL_RTC_DeactivateAlarm+0x110>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	6812      	ldr	r2, [r2, #0]
 8007d0c:	6892      	ldr	r2, [r2, #8]
 8007d0e:	4921      	ldr	r1, [pc, #132]	; (8007d94 <HAL_RTC_DeactivateAlarm+0x13c>)
 8007d10:	400a      	ands	r2, r1
 8007d12:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	6812      	ldr	r2, [r2, #0]
 8007d1c:	6892      	ldr	r2, [r2, #8]
 8007d1e:	491e      	ldr	r1, [pc, #120]	; (8007d98 <HAL_RTC_DeactivateAlarm+0x140>)
 8007d20:	400a      	ands	r2, r1
 8007d22:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8007d24:	f7fc ffc8 	bl	8004cb8 <HAL_GetTick>
 8007d28:	0003      	movs	r3, r0
 8007d2a:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007d2c:	e016      	b.n	8007d5c <HAL_RTC_DeactivateAlarm+0x104>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007d2e:	f7fc ffc3 	bl	8004cb8 <HAL_GetTick>
 8007d32:	0002      	movs	r2, r0
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	1ad2      	subs	r2, r2, r3
 8007d38:	23fa      	movs	r3, #250	; 0xfa
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d90d      	bls.n	8007d5c <HAL_RTC_DeactivateAlarm+0x104>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	22ff      	movs	r2, #255	; 0xff
 8007d46:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2221      	movs	r2, #33	; 0x21
 8007d4c:	2103      	movs	r1, #3
 8007d4e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2220      	movs	r2, #32
 8007d54:	2100      	movs	r1, #0
 8007d56:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007d58:	2303      	movs	r3, #3
 8007d5a:	e012      	b.n	8007d82 <HAL_RTC_DeactivateAlarm+0x12a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	2202      	movs	r2, #2
 8007d64:	4013      	ands	r3, r2
 8007d66:	d0e2      	beq.n	8007d2e <HAL_RTC_DeactivateAlarm+0xd6>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	22ff      	movs	r2, #255	; 0xff
 8007d6e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2221      	movs	r2, #33	; 0x21
 8007d74:	2101      	movs	r1, #1
 8007d76:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2220      	movs	r2, #32
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	5499      	strb	r1, [r3, r2]

  return HAL_OK; 
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	0018      	movs	r0, r3
 8007d84:	46bd      	mov	sp, r7
 8007d86:	b004      	add	sp, #16
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	46c0      	nop			; (mov r8, r8)
 8007d8c:	fffffeff 	.word	0xfffffeff
 8007d90:	ffffefff 	.word	0xffffefff
 8007d94:	fffffdff 	.word	0xfffffdff
 8007d98:	ffffdfff 	.word	0xffffdfff

08007d9c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	689a      	ldr	r2, [r3, #8]
 8007daa:	2380      	movs	r3, #128	; 0x80
 8007dac:	015b      	lsls	r3, r3, #5
 8007dae:	4013      	ands	r3, r2
 8007db0:	d014      	beq.n	8007ddc <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68da      	ldr	r2, [r3, #12]
 8007db8:	2380      	movs	r3, #128	; 0x80
 8007dba:	005b      	lsls	r3, r3, #1
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	d00d      	beq.n	8007ddc <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	0018      	movs	r0, r3
 8007dc4:	f002 fcb4 	bl	800a730 <HAL_RTC_AlarmAEventCallback>

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	6812      	ldr	r2, [r2, #0]
 8007dd0:	68d2      	ldr	r2, [r2, #12]
 8007dd2:	21ff      	movs	r1, #255	; 0xff
 8007dd4:	400a      	ands	r2, r1
 8007dd6:	4915      	ldr	r1, [pc, #84]	; (8007e2c <HAL_RTC_AlarmIRQHandler+0x90>)
 8007dd8:	430a      	orrs	r2, r1
 8007dda:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != RESET)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	689a      	ldr	r2, [r3, #8]
 8007de2:	2380      	movs	r3, #128	; 0x80
 8007de4:	019b      	lsls	r3, r3, #6
 8007de6:	4013      	ands	r3, r2
 8007de8:	d014      	beq.n	8007e14 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68da      	ldr	r2, [r3, #12]
 8007df0:	2380      	movs	r3, #128	; 0x80
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	4013      	ands	r3, r2
 8007df6:	d00d      	beq.n	8007e14 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	0018      	movs	r0, r3
 8007dfc:	f000 f8e5 	bl	8007fca <HAL_RTCEx_AlarmBEventCallback>

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	6812      	ldr	r2, [r2, #0]
 8007e08:	68d2      	ldr	r2, [r2, #12]
 8007e0a:	21ff      	movs	r1, #255	; 0xff
 8007e0c:	400a      	ands	r2, r1
 8007e0e:	4908      	ldr	r1, [pc, #32]	; (8007e30 <HAL_RTC_AlarmIRQHandler+0x94>)
 8007e10:	430a      	orrs	r2, r1
 8007e12:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007e14:	4b07      	ldr	r3, [pc, #28]	; (8007e34 <HAL_RTC_AlarmIRQHandler+0x98>)
 8007e16:	2280      	movs	r2, #128	; 0x80
 8007e18:	0292      	lsls	r2, r2, #10
 8007e1a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2221      	movs	r2, #33	; 0x21
 8007e20:	2101      	movs	r1, #1
 8007e22:	5499      	strb	r1, [r3, r2]
}
 8007e24:	46c0      	nop			; (mov r8, r8)
 8007e26:	46bd      	mov	sp, r7
 8007e28:	b002      	add	sp, #8
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	fffffe7f 	.word	0xfffffe7f
 8007e30:	fffffd7f 	.word	0xfffffd7f
 8007e34:	40010400 	.word	0x40010400

08007e38 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007e40:	2300      	movs	r3, #0
 8007e42:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	6812      	ldr	r2, [r2, #0]
 8007e4c:	68d2      	ldr	r2, [r2, #12]
 8007e4e:	21a0      	movs	r1, #160	; 0xa0
 8007e50:	438a      	bics	r2, r1
 8007e52:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007e54:	f7fc ff30 	bl	8004cb8 <HAL_GetTick>
 8007e58:	0003      	movs	r3, r0
 8007e5a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007e5c:	e00a      	b.n	8007e74 <HAL_RTC_WaitForSynchro+0x3c>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007e5e:	f7fc ff2b 	bl	8004cb8 <HAL_GetTick>
 8007e62:	0002      	movs	r2, r0
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	1ad2      	subs	r2, r2, r3
 8007e68:	23fa      	movs	r3, #250	; 0xfa
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d901      	bls.n	8007e74 <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	e006      	b.n	8007e82 <HAL_RTC_WaitForSynchro+0x4a>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	2220      	movs	r2, #32
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	d0ee      	beq.n	8007e5e <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	0018      	movs	r0, r3
 8007e84:	46bd      	mov	sp, r7
 8007e86:	b004      	add	sp, #16
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b084      	sub	sp, #16
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007e92:	2300      	movs	r3, #0
 8007e94:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	2240      	movs	r2, #64	; 0x40
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	d11a      	bne.n	8007ed8 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	4252      	negs	r2, r2
 8007eaa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007eac:	f7fc ff04 	bl	8004cb8 <HAL_GetTick>
 8007eb0:	0003      	movs	r3, r0
 8007eb2:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007eb4:	e00a      	b.n	8007ecc <RTC_EnterInitMode+0x42>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8007eb6:	f7fc feff 	bl	8004cb8 <HAL_GetTick>
 8007eba:	0002      	movs	r2, r0
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	1ad2      	subs	r2, r2, r3
 8007ec0:	23fa      	movs	r3, #250	; 0xfa
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d901      	bls.n	8007ecc <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 8007ec8:	2303      	movs	r3, #3
 8007eca:	e006      	b.n	8007eda <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	2240      	movs	r2, #64	; 0x40
 8007ed4:	4013      	ands	r3, r2
 8007ed6:	d0ee      	beq.n	8007eb6 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	0018      	movs	r0, r3
 8007edc:	46bd      	mov	sp, r7
 8007ede:	b004      	add	sp, #16
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b084      	sub	sp, #16
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	0002      	movs	r2, r0
 8007eea:	1dfb      	adds	r3, r7, #7
 8007eec:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8007ef2:	e007      	b.n	8007f04 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8007efa:	1dfb      	adds	r3, r7, #7
 8007efc:	1dfa      	adds	r2, r7, #7
 8007efe:	7812      	ldrb	r2, [r2, #0]
 8007f00:	3a0a      	subs	r2, #10
 8007f02:	701a      	strb	r2, [r3, #0]
  while(Value >= 10U)
 8007f04:	1dfb      	adds	r3, r7, #7
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	2b09      	cmp	r3, #9
 8007f0a:	d8f3      	bhi.n	8007ef4 <RTC_ByteToBcd2+0x12>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	011b      	lsls	r3, r3, #4
 8007f12:	b2da      	uxtb	r2, r3
 8007f14:	1dfb      	adds	r3, r7, #7
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	b2db      	uxtb	r3, r3
}
 8007f1c:	0018      	movs	r0, r3
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	b004      	add	sp, #16
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	0002      	movs	r2, r0
 8007f2c:	1dfb      	adds	r3, r7, #7
 8007f2e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0U;
 8007f30:	2300      	movs	r3, #0
 8007f32:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8007f34:	1dfb      	adds	r3, r7, #7
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	091b      	lsrs	r3, r3, #4
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	001a      	movs	r2, r3
 8007f3e:	0013      	movs	r3, r2
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	189b      	adds	r3, r3, r2
 8007f44:	005b      	lsls	r3, r3, #1
 8007f46:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8007f48:	1dfb      	adds	r3, r7, #7
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	220f      	movs	r2, #15
 8007f4e:	4013      	ands	r3, r2
 8007f50:	b2da      	uxtb	r2, r3
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	18d3      	adds	r3, r2, r3
 8007f58:	b2db      	uxtb	r3, r3
}
 8007f5a:	0018      	movs	r0, r3
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	b004      	add	sp, #16
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b082      	sub	sp, #8
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2220      	movs	r2, #32
 8007f6e:	5c9b      	ldrb	r3, [r3, r2]
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d101      	bne.n	8007f78 <HAL_RTCEx_EnableBypassShadow+0x16>
 8007f74:	2302      	movs	r3, #2
 8007f76:	e024      	b.n	8007fc2 <HAL_RTCEx_EnableBypassShadow+0x60>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2220      	movs	r2, #32
 8007f7c:	2101      	movs	r1, #1
 8007f7e:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2221      	movs	r2, #33	; 0x21
 8007f84:	2102      	movs	r1, #2
 8007f86:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	22ca      	movs	r2, #202	; 0xca
 8007f8e:	625a      	str	r2, [r3, #36]	; 0x24
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2253      	movs	r2, #83	; 0x53
 8007f96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	6812      	ldr	r2, [r2, #0]
 8007fa0:	6892      	ldr	r2, [r2, #8]
 8007fa2:	2120      	movs	r1, #32
 8007fa4:	430a      	orrs	r2, r1
 8007fa6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	22ff      	movs	r2, #255	; 0xff
 8007fae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2221      	movs	r2, #33	; 0x21
 8007fb4:	2101      	movs	r1, #1
 8007fb6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2220      	movs	r2, #32
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	0018      	movs	r0, r3
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	b002      	add	sp, #8
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc: RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b082      	sub	sp, #8
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007fd2:	46c0      	nop			; (mov r8, r8)
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	b002      	add	sp, #8
 8007fd8:	bd80      	pop	{r7, pc}
	...

08007fdc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d101      	bne.n	8007fee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e059      	b.n	80080a2 <HAL_SPI_Init+0xc6>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));

  if(hspi->State == HAL_SPI_STATE_RESET)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2251      	movs	r2, #81	; 0x51
 8007ff2:	5c9b      	ldrb	r3, [r3, r2]
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d107      	bne.n	800800a <HAL_SPI_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2250      	movs	r2, #80	; 0x50
 8007ffe:	2100      	movs	r1, #0
 8008000:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	0018      	movs	r0, r3
 8008006:	f000 f853 	bl	80080b0 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2251      	movs	r2, #81	; 0x51
 800800e:	2102      	movs	r1, #2
 8008010:	5499      	strb	r1, [r3, r2]

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	6812      	ldr	r2, [r2, #0]
 800801a:	6812      	ldr	r2, [r2, #0]
 800801c:	2140      	movs	r1, #64	; 0x40
 800801e:	438a      	bics	r2, r1
 8008020:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	6851      	ldr	r1, [r2, #4]
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	6892      	ldr	r2, [r2, #8]
 800802e:	4311      	orrs	r1, r2
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	68d2      	ldr	r2, [r2, #12]
 8008034:	4311      	orrs	r1, r2
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	6912      	ldr	r2, [r2, #16]
 800803a:	4311      	orrs	r1, r2
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	6952      	ldr	r2, [r2, #20]
 8008040:	4311      	orrs	r1, r2
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	6990      	ldr	r0, [r2, #24]
 8008046:	2280      	movs	r2, #128	; 0x80
 8008048:	0092      	lsls	r2, r2, #2
 800804a:	4002      	ands	r2, r0
 800804c:	4311      	orrs	r1, r2
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	69d2      	ldr	r2, [r2, #28]
 8008052:	4311      	orrs	r1, r2
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	6a12      	ldr	r2, [r2, #32]
 8008058:	4311      	orrs	r1, r2
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800805e:	430a      	orrs	r2, r1
 8008060:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	6992      	ldr	r2, [r2, #24]
 800806a:	0c12      	lsrs	r2, r2, #16
 800806c:	2104      	movs	r1, #4
 800806e:	4011      	ands	r1, r2
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008074:	430a      	orrs	r2, r1
 8008076:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008080:	611a      	str	r2, [r3, #16]
  
#if !defined(STM32L011xx) && !defined(STM32L021xx) && !defined(STM32L031xx) && !defined(STM32L041xx)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	6812      	ldr	r2, [r2, #0]
 800808a:	69d2      	ldr	r2, [r2, #28]
 800808c:	4907      	ldr	r1, [pc, #28]	; (80080ac <HAL_SPI_Init+0xd0>)
 800808e:	400a      	ands	r2, r1
 8008090:	61da      	str	r2, [r3, #28]
#endif
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2251      	movs	r2, #81	; 0x51
 800809c:	2101      	movs	r1, #1
 800809e:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	0018      	movs	r0, r3
 80080a4:	46bd      	mov	sp, r7
 80080a6:	b002      	add	sp, #8
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	46c0      	nop			; (mov r8, r8)
 80080ac:	fffff7ff 	.word	0xfffff7ff

080080b0 <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
 __weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
 {
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function Should not be modified, when the callback is needed,
             the HAL_SPI_MspInit could be implenetd in the user file
  */
}
 80080b8:	46c0      	nop			; (mov r8, r8)
 80080ba:	46bd      	mov	sp, r7
 80080bc:	b002      	add	sp, #8
 80080be:	bd80      	pop	{r7, pc}

080080c0 <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b086      	sub	sp, #24
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	607a      	str	r2, [r7, #4]
 80080cc:	001a      	movs	r2, r3
 80080ce:	1cbb      	adds	r3, r7, #2
 80080d0:	801a      	strh	r2, [r3, #0]
  __IO uint16_t tmpreg = 0U;
 80080d2:	2316      	movs	r3, #22
 80080d4:	18fb      	adds	r3, r7, r3
 80080d6:	2200      	movs	r2, #0
 80080d8:	801a      	strh	r2, [r3, #0]

  if((hspi->State == HAL_SPI_STATE_READY) || (hspi->State == HAL_SPI_STATE_BUSY_RX))
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2251      	movs	r2, #81	; 0x51
 80080de:	5c9b      	ldrb	r3, [r3, r2]
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d006      	beq.n	80080f4 <HAL_SPI_TransmitReceive+0x34>
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2251      	movs	r2, #81	; 0x51
 80080ea:	5c9b      	ldrb	r3, [r3, r2]
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	2b22      	cmp	r3, #34	; 0x22
 80080f0:	d000      	beq.n	80080f4 <HAL_SPI_TransmitReceive+0x34>
 80080f2:	e256      	b.n	80085a2 <HAL_SPI_TransmitReceive+0x4e2>
  {
    if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0U))
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d006      	beq.n	8008108 <HAL_SPI_TransmitReceive+0x48>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d003      	beq.n	8008108 <HAL_SPI_TransmitReceive+0x48>
 8008100:	1cbb      	adds	r3, r7, #2
 8008102:	881b      	ldrh	r3, [r3, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d101      	bne.n	800810c <HAL_SPI_TransmitReceive+0x4c>
    {
      return  HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e24b      	b.n	80085a4 <HAL_SPI_TransmitReceive+0x4e4>

    /* Check the parameters */
    assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

    /* Process Locked */
    __HAL_LOCK(hspi);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2250      	movs	r2, #80	; 0x50
 8008110:	5c9b      	ldrb	r3, [r3, r2]
 8008112:	2b01      	cmp	r3, #1
 8008114:	d101      	bne.n	800811a <HAL_SPI_TransmitReceive+0x5a>
 8008116:	2302      	movs	r3, #2
 8008118:	e244      	b.n	80085a4 <HAL_SPI_TransmitReceive+0x4e4>
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2250      	movs	r2, #80	; 0x50
 800811e:	2101      	movs	r1, #1
 8008120:	5499      	strb	r1, [r3, r2]
 
    /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
    if(hspi->State == HAL_SPI_STATE_READY)
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2251      	movs	r2, #81	; 0x51
 8008126:	5c9b      	ldrb	r3, [r3, r2]
 8008128:	b2db      	uxtb	r3, r3
 800812a:	2b01      	cmp	r3, #1
 800812c:	d103      	bne.n	8008136 <HAL_SPI_TransmitReceive+0x76>
    {
      hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2251      	movs	r2, #81	; 0x51
 8008132:	2132      	movs	r1, #50	; 0x32
 8008134:	5499      	strb	r1, [r3, r2]
    }

     /* Configure communication */   
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2200      	movs	r2, #0
 800813a:	655a      	str	r2, [r3, #84]	; 0x54

    hspi->pRxBuffPtr  = pRxData;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->RxXferSize  = Size;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	1cba      	adds	r2, r7, #2
 8008146:	8812      	ldrh	r2, [r2, #0]
 8008148:	879a      	strh	r2, [r3, #60]	; 0x3c
    hspi->RxXferCount = Size;  
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	1cba      	adds	r2, r7, #2
 800814e:	8812      	ldrh	r2, [r2, #0]
 8008150:	87da      	strh	r2, [r3, #62]	; 0x3e
    
    hspi->pTxBuffPtr  = pTxData;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	68ba      	ldr	r2, [r7, #8]
 8008156:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->TxXferSize  = Size; 
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	1cba      	adds	r2, r7, #2
 800815c:	8812      	ldrh	r2, [r2, #0]
 800815e:	869a      	strh	r2, [r3, #52]	; 0x34
    hspi->TxXferCount = Size;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	1cba      	adds	r2, r7, #2
 8008164:	8812      	ldrh	r2, [r2, #0]
 8008166:	86da      	strh	r2, [r3, #54]	; 0x36

    /*Init field not used in handle to zero */
    hspi->RxISR = 0U;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2200      	movs	r2, #0
 800816c:	649a      	str	r2, [r3, #72]	; 0x48
    hspi->TxISR = 0U;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2200      	movs	r2, #0
 8008172:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Reset CRC Calculation */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008178:	2380      	movs	r3, #128	; 0x80
 800817a:	019b      	lsls	r3, r3, #6
 800817c:	429a      	cmp	r2, r3
 800817e:	d110      	bne.n	80081a2 <HAL_SPI_TransmitReceive+0xe2>
    {
      SPI_RESET_CRC(hspi);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	68fa      	ldr	r2, [r7, #12]
 8008186:	6812      	ldr	r2, [r2, #0]
 8008188:	6812      	ldr	r2, [r2, #0]
 800818a:	49ca      	ldr	r1, [pc, #808]	; (80084b4 <HAL_SPI_TransmitReceive+0x3f4>)
 800818c:	400a      	ands	r2, r1
 800818e:	601a      	str	r2, [r3, #0]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	6812      	ldr	r2, [r2, #0]
 8008198:	6812      	ldr	r2, [r2, #0]
 800819a:	2180      	movs	r1, #128	; 0x80
 800819c:	0189      	lsls	r1, r1, #6
 800819e:	430a      	orrs	r2, r1
 80081a0:	601a      	str	r2, [r3, #0]
    }

    /* Check if the SPI is already enabled */ 
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2240      	movs	r2, #64	; 0x40
 80081aa:	4013      	ands	r3, r2
 80081ac:	2b40      	cmp	r3, #64	; 0x40
 80081ae:	d007      	beq.n	80081c0 <HAL_SPI_TransmitReceive+0x100>
    {
      /* Enable SPI peripheral */
      __HAL_SPI_ENABLE(hspi);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	6812      	ldr	r2, [r2, #0]
 80081b8:	6812      	ldr	r2, [r2, #0]
 80081ba:	2140      	movs	r1, #64	; 0x40
 80081bc:	430a      	orrs	r2, r1
 80081be:	601a      	str	r2, [r3, #0]
    }

    /* Transmit and Receive data in 16 Bit mode */
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	68da      	ldr	r2, [r3, #12]
 80081c4:	2380      	movs	r3, #128	; 0x80
 80081c6:	011b      	lsls	r3, r3, #4
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d000      	beq.n	80081ce <HAL_SPI_TransmitReceive+0x10e>
 80081cc:	e0c8      	b.n	8008360 <HAL_SPI_TransmitReceive+0x2a0>
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01U)))
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00a      	beq.n	80081ec <HAL_SPI_TransmitReceive+0x12c>
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	685a      	ldr	r2, [r3, #4]
 80081da:	2382      	movs	r3, #130	; 0x82
 80081dc:	005b      	lsls	r3, r3, #1
 80081de:	429a      	cmp	r2, r3
 80081e0:	d116      	bne.n	8008210 <HAL_SPI_TransmitReceive+0x150>
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d111      	bne.n	8008210 <HAL_SPI_TransmitReceive+0x150>
      {
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	68fa      	ldr	r2, [r7, #12]
 80081f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80081f4:	8812      	ldrh	r2, [r2, #0]
 80081f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr+=2U;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081fc:	1c9a      	adds	r2, r3, #2
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008206:	b29b      	uxth	r3, r3
 8008208:	3b01      	subs	r3, #1
 800820a:	b29a      	uxth	r2, r3
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	86da      	strh	r2, [r3, #54]	; 0x36
      }
      if(hspi->TxXferCount == 0U)
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008214:	b29b      	uxth	r3, r3
 8008216:	2b00      	cmp	r3, #0
 8008218:	d000      	beq.n	800821c <HAL_SPI_TransmitReceive+0x15c>
 800821a:	e079      	b.n	8008310 <HAL_SPI_TransmitReceive+0x250>
      {
        /* Enable CRC Transmission */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008220:	2380      	movs	r3, #128	; 0x80
 8008222:	019b      	lsls	r3, r3, #6
 8008224:	429a      	cmp	r2, r3
 8008226:	d108      	bne.n	800823a <HAL_SPI_TransmitReceive+0x17a>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68fa      	ldr	r2, [r7, #12]
 800822e:	6812      	ldr	r2, [r2, #0]
 8008230:	6812      	ldr	r2, [r2, #0]
 8008232:	2180      	movs	r1, #128	; 0x80
 8008234:	0149      	lsls	r1, r1, #5
 8008236:	430a      	orrs	r2, r1
 8008238:	601a      	str	r2, [r3, #0]
        }

        /* Wait until RXNE flag is set */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800823a:	6a3b      	ldr	r3, [r7, #32]
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	2200      	movs	r2, #0
 8008240:	2101      	movs	r1, #1
 8008242:	f000 f9b5 	bl	80085b0 <SPI_WaitOnFlagUntilTimeout>
 8008246:	1e03      	subs	r3, r0, #0
 8008248:	d001      	beq.n	800824e <HAL_SPI_TransmitReceive+0x18e>
        { 
          return HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	e1aa      	b.n	80085a4 <HAL_SPI_TransmitReceive+0x4e4>
        }

        *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	b29b      	uxth	r3, r3
 800825a:	8013      	strh	r3, [r2, #0]
        hspi->pRxBuffPtr+=2U;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008260:	1c9a      	adds	r2, r3, #2
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800826a:	b29b      	uxth	r3, r3
 800826c:	3b01      	subs	r3, #1
 800826e:	b29a      	uxth	r2, r3
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008274:	e131      	b.n	80084da <HAL_SPI_TransmitReceive+0x41a>
      else
      {
        while(hspi->TxXferCount > 0U)
        {
          /* Wait until TXE flag is set to send data */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8008276:	6a3b      	ldr	r3, [r7, #32]
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	2102      	movs	r1, #2
 800827e:	f000 f997 	bl	80085b0 <SPI_WaitOnFlagUntilTimeout>
 8008282:	1e03      	subs	r3, r0, #0
 8008284:	d001      	beq.n	800828a <HAL_SPI_TransmitReceive+0x1ca>
          { 
            return HAL_TIMEOUT;
 8008286:	2303      	movs	r3, #3
 8008288:	e18c      	b.n	80085a4 <HAL_SPI_TransmitReceive+0x4e4>
          }

          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008292:	8812      	ldrh	r2, [r2, #0]
 8008294:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr+=2U;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800829a:	1c9a      	adds	r2, r3, #2
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	631a      	str	r2, [r3, #48]	; 0x30
          hspi->TxXferCount--;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	3b01      	subs	r3, #1
 80082a8:	b29a      	uxth	r2, r3
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	86da      	strh	r2, [r3, #54]	; 0x36

          /* Enable CRC Transmission */
          if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10e      	bne.n	80082d6 <HAL_SPI_TransmitReceive+0x216>
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082bc:	2380      	movs	r3, #128	; 0x80
 80082be:	019b      	lsls	r3, r3, #6
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d108      	bne.n	80082d6 <HAL_SPI_TransmitReceive+0x216>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	6812      	ldr	r2, [r2, #0]
 80082cc:	6812      	ldr	r2, [r2, #0]
 80082ce:	2180      	movs	r1, #128	; 0x80
 80082d0:	0149      	lsls	r1, r1, #5
 80082d2:	430a      	orrs	r2, r1
 80082d4:	601a      	str	r2, [r3, #0]
          }

          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80082d6:	6a3b      	ldr	r3, [r7, #32]
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	2200      	movs	r2, #0
 80082dc:	2101      	movs	r1, #1
 80082de:	f000 f967 	bl	80085b0 <SPI_WaitOnFlagUntilTimeout>
 80082e2:	1e03      	subs	r3, r0, #0
 80082e4:	d001      	beq.n	80082ea <HAL_SPI_TransmitReceive+0x22a>
          { 
            return HAL_TIMEOUT;
 80082e6:	2303      	movs	r3, #3
 80082e8:	e15c      	b.n	80085a4 <HAL_SPI_TransmitReceive+0x4e4>
          }

          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	8013      	strh	r3, [r2, #0]
          hspi->pRxBuffPtr+=2U;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082fc:	1c9a      	adds	r2, r3, #2
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->RxXferCount--;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008306:	b29b      	uxth	r3, r3
 8008308:	3b01      	subs	r3, #1
 800830a:	b29a      	uxth	r2, r3
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	87da      	strh	r2, [r3, #62]	; 0x3e
        while(hspi->TxXferCount > 0U)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008314:	b29b      	uxth	r3, r3
 8008316:	2b00      	cmp	r3, #0
 8008318:	d1ad      	bne.n	8008276 <HAL_SPI_TransmitReceive+0x1b6>
        }
        /* Receive the last byte */
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d000      	beq.n	8008324 <HAL_SPI_TransmitReceive+0x264>
 8008322:	e0da      	b.n	80084da <HAL_SPI_TransmitReceive+0x41a>
        {
          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8008324:	6a3b      	ldr	r3, [r7, #32]
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	2200      	movs	r2, #0
 800832a:	2101      	movs	r1, #1
 800832c:	f000 f940 	bl	80085b0 <SPI_WaitOnFlagUntilTimeout>
 8008330:	1e03      	subs	r3, r0, #0
 8008332:	d001      	beq.n	8008338 <HAL_SPI_TransmitReceive+0x278>
          {
            return HAL_TIMEOUT;
 8008334:	2303      	movs	r3, #3
 8008336:	e135      	b.n	80085a4 <HAL_SPI_TransmitReceive+0x4e4>
          }
          
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	b29b      	uxth	r3, r3
 8008344:	8013      	strh	r3, [r2, #0]
          hspi->pRxBuffPtr+=2U;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800834a:	1c9a      	adds	r2, r3, #2
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->RxXferCount--;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008354:	b29b      	uxth	r3, r3
 8008356:	3b01      	subs	r3, #1
 8008358:	b29a      	uxth	r2, r3
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800835e:	e0bc      	b.n	80084da <HAL_SPI_TransmitReceive+0x41a>
      }
    }
    /* Transmit and Receive data in 8 Bit mode */
    else
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01U)))
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00a      	beq.n	800837e <HAL_SPI_TransmitReceive+0x2be>
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	685a      	ldr	r2, [r3, #4]
 800836c:	2382      	movs	r3, #130	; 0x82
 800836e:	005b      	lsls	r3, r3, #1
 8008370:	429a      	cmp	r2, r3
 8008372:	d114      	bne.n	800839e <HAL_SPI_TransmitReceive+0x2de>
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008378:	b29b      	uxth	r3, r3
 800837a:	2b01      	cmp	r3, #1
 800837c:	d10f      	bne.n	800839e <HAL_SPI_TransmitReceive+0x2de>
      {
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008386:	1c50      	adds	r0, r2, #1
 8008388:	68f9      	ldr	r1, [r7, #12]
 800838a:	6308      	str	r0, [r1, #48]	; 0x30
 800838c:	7812      	ldrb	r2, [r2, #0]
 800838e:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008394:	b29b      	uxth	r3, r3
 8008396:	3b01      	subs	r3, #1
 8008398:	b29a      	uxth	r2, r3
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	86da      	strh	r2, [r3, #54]	; 0x36
      }
      if(hspi->TxXferCount == 0U)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d000      	beq.n	80083aa <HAL_SPI_TransmitReceive+0x2ea>
 80083a8:	e070      	b.n	800848c <HAL_SPI_TransmitReceive+0x3cc>
      {
        /* Enable CRC Transmission */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80083ae:	2380      	movs	r3, #128	; 0x80
 80083b0:	019b      	lsls	r3, r3, #6
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d108      	bne.n	80083c8 <HAL_SPI_TransmitReceive+0x308>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	68fa      	ldr	r2, [r7, #12]
 80083bc:	6812      	ldr	r2, [r2, #0]
 80083be:	6812      	ldr	r2, [r2, #0]
 80083c0:	2180      	movs	r1, #128	; 0x80
 80083c2:	0149      	lsls	r1, r1, #5
 80083c4:	430a      	orrs	r2, r1
 80083c6:	601a      	str	r2, [r3, #0]
        }

        /* Wait until RXNE flag is set */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80083c8:	6a3b      	ldr	r3, [r7, #32]
 80083ca:	68f8      	ldr	r0, [r7, #12]
 80083cc:	2200      	movs	r2, #0
 80083ce:	2101      	movs	r1, #1
 80083d0:	f000 f8ee 	bl	80085b0 <SPI_WaitOnFlagUntilTimeout>
 80083d4:	1e03      	subs	r3, r0, #0
 80083d6:	d001      	beq.n	80083dc <HAL_SPI_TransmitReceive+0x31c>
        {
          return HAL_TIMEOUT;
 80083d8:	2303      	movs	r3, #3
 80083da:	e0e3      	b.n	80085a4 <HAL_SPI_TransmitReceive+0x4e4>
        }

        (*hspi->pRxBuffPtr) = hspi->Instance->DR;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68db      	ldr	r3, [r3, #12]
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	3b01      	subs	r3, #1
 80083f2:	b29a      	uxth	r2, r3
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80083f8:	e06f      	b.n	80084da <HAL_SPI_TransmitReceive+0x41a>
      else
      {
        while(hspi->TxXferCount > 0U)
        {
          /* Wait until TXE flag is set to send data */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80083fa:	6a3b      	ldr	r3, [r7, #32]
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	2200      	movs	r2, #0
 8008400:	2102      	movs	r1, #2
 8008402:	f000 f8d5 	bl	80085b0 <SPI_WaitOnFlagUntilTimeout>
 8008406:	1e03      	subs	r3, r0, #0
 8008408:	d001      	beq.n	800840e <HAL_SPI_TransmitReceive+0x34e>
          {
            return HAL_TIMEOUT;
 800840a:	2303      	movs	r3, #3
 800840c:	e0ca      	b.n	80085a4 <HAL_SPI_TransmitReceive+0x4e4>
          }

          hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008416:	1c50      	adds	r0, r2, #1
 8008418:	68f9      	ldr	r1, [r7, #12]
 800841a:	6308      	str	r0, [r1, #48]	; 0x30
 800841c:	7812      	ldrb	r2, [r2, #0]
 800841e:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008424:	b29b      	uxth	r3, r3
 8008426:	3b01      	subs	r3, #1
 8008428:	b29a      	uxth	r2, r3
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	86da      	strh	r2, [r3, #54]	; 0x36

          /* Enable CRC Transmission */
          if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008432:	b29b      	uxth	r3, r3
 8008434:	2b00      	cmp	r3, #0
 8008436:	d10e      	bne.n	8008456 <HAL_SPI_TransmitReceive+0x396>
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800843c:	2380      	movs	r3, #128	; 0x80
 800843e:	019b      	lsls	r3, r3, #6
 8008440:	429a      	cmp	r2, r3
 8008442:	d108      	bne.n	8008456 <HAL_SPI_TransmitReceive+0x396>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	6812      	ldr	r2, [r2, #0]
 800844c:	6812      	ldr	r2, [r2, #0]
 800844e:	2180      	movs	r1, #128	; 0x80
 8008450:	0149      	lsls	r1, r1, #5
 8008452:	430a      	orrs	r2, r1
 8008454:	601a      	str	r2, [r3, #0]
          }

          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8008456:	6a3b      	ldr	r3, [r7, #32]
 8008458:	68f8      	ldr	r0, [r7, #12]
 800845a:	2200      	movs	r2, #0
 800845c:	2101      	movs	r1, #1
 800845e:	f000 f8a7 	bl	80085b0 <SPI_WaitOnFlagUntilTimeout>
 8008462:	1e03      	subs	r3, r0, #0
 8008464:	d001      	beq.n	800846a <HAL_SPI_TransmitReceive+0x3aa>
          {
            return HAL_TIMEOUT;
 8008466:	2303      	movs	r3, #3
 8008468:	e09c      	b.n	80085a4 <HAL_SPI_TransmitReceive+0x4e4>
          }

          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800846e:	1c59      	adds	r1, r3, #1
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	6391      	str	r1, [r2, #56]	; 0x38
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	6812      	ldr	r2, [r2, #0]
 8008478:	68d2      	ldr	r2, [r2, #12]
 800847a:	b2d2      	uxtb	r2, r2
 800847c:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008482:	b29b      	uxth	r3, r3
 8008484:	3b01      	subs	r3, #1
 8008486:	b29a      	uxth	r2, r3
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	87da      	strh	r2, [r3, #62]	; 0x3e
        while(hspi->TxXferCount > 0U)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008490:	b29b      	uxth	r3, r3
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1b1      	bne.n	80083fa <HAL_SPI_TransmitReceive+0x33a>
        }
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d11d      	bne.n	80084da <HAL_SPI_TransmitReceive+0x41a>
        {
          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800849e:	6a3b      	ldr	r3, [r7, #32]
 80084a0:	68f8      	ldr	r0, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	2101      	movs	r1, #1
 80084a6:	f000 f883 	bl	80085b0 <SPI_WaitOnFlagUntilTimeout>
 80084aa:	1e03      	subs	r3, r0, #0
 80084ac:	d004      	beq.n	80084b8 <HAL_SPI_TransmitReceive+0x3f8>
          {
            return HAL_TIMEOUT;
 80084ae:	2303      	movs	r3, #3
 80084b0:	e078      	b.n	80085a4 <HAL_SPI_TransmitReceive+0x4e4>
 80084b2:	46c0      	nop			; (mov r8, r8)
 80084b4:	ffffdfff 	.word	0xffffdfff
          }
          
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084bc:	1c59      	adds	r1, r3, #1
 80084be:	68fa      	ldr	r2, [r7, #12]
 80084c0:	6391      	str	r1, [r2, #56]	; 0x38
 80084c2:	68fa      	ldr	r2, [r7, #12]
 80084c4:	6812      	ldr	r2, [r2, #0]
 80084c6:	68d2      	ldr	r2, [r2, #12]
 80084c8:	b2d2      	uxtb	r2, r2
 80084ca:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	3b01      	subs	r3, #1
 80084d4:	b29a      	uxth	r2, r3
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
      }
    }

    /* Read CRC from DR to close CRC calculation process */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80084de:	2380      	movs	r3, #128	; 0x80
 80084e0:	019b      	lsls	r3, r3, #6
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d119      	bne.n	800851a <HAL_SPI_TransmitReceive+0x45a>
    {
      /* Wait until RXNE flag is set */
      if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80084e6:	6a3b      	ldr	r3, [r7, #32]
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	2200      	movs	r2, #0
 80084ec:	2101      	movs	r1, #1
 80084ee:	f000 f85f 	bl	80085b0 <SPI_WaitOnFlagUntilTimeout>
 80084f2:	1e03      	subs	r3, r0, #0
 80084f4:	d007      	beq.n	8008506 <HAL_SPI_TransmitReceive+0x446>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084fa:	2202      	movs	r2, #2
 80084fc:	431a      	orrs	r2, r3
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008502:	2303      	movs	r3, #3
 8008504:	e04e      	b.n	80085a4 <HAL_SPI_TransmitReceive+0x4e4>
      }
      /* Read CRC */
      tmpreg = hspi->Instance->DR;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	b29a      	uxth	r2, r3
 800850e:	2316      	movs	r3, #22
 8008510:	18fb      	adds	r3, r7, r3
 8008512:	801a      	strh	r2, [r3, #0]
      UNUSED(tmpreg);		/* avoid warning on tmpreg affectation with stupid compiler */
 8008514:	2316      	movs	r3, #22
 8008516:	18fb      	adds	r3, r7, r3
 8008518:	881b      	ldrh	r3, [r3, #0]
    }

    /* Wait until Busy flag is reset before disabling SPI */
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 800851a:	6a3b      	ldr	r3, [r7, #32]
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	2201      	movs	r2, #1
 8008520:	2180      	movs	r1, #128	; 0x80
 8008522:	f000 f845 	bl	80085b0 <SPI_WaitOnFlagUntilTimeout>
 8008526:	1e03      	subs	r3, r0, #0
 8008528:	d007      	beq.n	800853a <HAL_SPI_TransmitReceive+0x47a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800852e:	2220      	movs	r2, #32
 8008530:	431a      	orrs	r2, r3
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008536:	2303      	movs	r3, #3
 8008538:	e034      	b.n	80085a4 <HAL_SPI_TransmitReceive+0x4e4>
    }
    
    hspi->State = HAL_SPI_STATE_READY;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2251      	movs	r2, #81	; 0x51
 800853e:	2101      	movs	r1, #1
 8008540:	5499      	strb	r1, [r3, r2]

    /* Check if CRC error occurred */
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008546:	2380      	movs	r3, #128	; 0x80
 8008548:	019b      	lsls	r3, r3, #6
 800854a:	429a      	cmp	r2, r3
 800854c:	d123      	bne.n	8008596 <HAL_SPI_TransmitReceive+0x4d6>
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	2210      	movs	r2, #16
 8008556:	4013      	ands	r3, r2
 8008558:	2b10      	cmp	r3, #16
 800855a:	d11c      	bne.n	8008596 <HAL_SPI_TransmitReceive+0x4d6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008560:	2202      	movs	r2, #2
 8008562:	431a      	orrs	r2, r3
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	655a      	str	r2, [r3, #84]	; 0x54

      SPI_RESET_CRC(hspi);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	6812      	ldr	r2, [r2, #0]
 8008570:	6812      	ldr	r2, [r2, #0]
 8008572:	490e      	ldr	r1, [pc, #56]	; (80085ac <HAL_SPI_TransmitReceive+0x4ec>)
 8008574:	400a      	ands	r2, r1
 8008576:	601a      	str	r2, [r3, #0]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	6812      	ldr	r2, [r2, #0]
 8008580:	6812      	ldr	r2, [r2, #0]
 8008582:	2180      	movs	r1, #128	; 0x80
 8008584:	0189      	lsls	r1, r1, #6
 8008586:	430a      	orrs	r2, r1
 8008588:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hspi);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2250      	movs	r2, #80	; 0x50
 800858e:	2100      	movs	r1, #0
 8008590:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR; 
 8008592:	2301      	movs	r3, #1
 8008594:	e006      	b.n	80085a4 <HAL_SPI_TransmitReceive+0x4e4>
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2250      	movs	r2, #80	; 0x50
 800859a:	2100      	movs	r1, #0
 800859c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800859e:	2300      	movs	r3, #0
 80085a0:	e000      	b.n	80085a4 <HAL_SPI_TransmitReceive+0x4e4>
  }
  else
  {
    return HAL_BUSY;
 80085a2:	2302      	movs	r3, #2
  }
}
 80085a4:	0018      	movs	r0, r3
 80085a6:	46bd      	mov	sp, r7
 80085a8:	b006      	add	sp, #24
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	ffffdfff 	.word	0xffffdfff

080085b0 <SPI_WaitOnFlagUntilTimeout>:
  * @param  Status: Flag status to check: RESET or set
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b086      	sub	sp, #24
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	603b      	str	r3, [r7, #0]
 80085bc:	1dfb      	adds	r3, r7, #7
 80085be:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80085c0:	2300      	movs	r3, #0
 80085c2:	617b      	str	r3, [r7, #20]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80085c4:	f7fc fb78 	bl	8004cb8 <HAL_GetTick>
 80085c8:	0003      	movs	r3, r0
 80085ca:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set */
  if(Status == RESET)
 80085cc:	1dfb      	adds	r3, r7, #7
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d000      	beq.n	80085d6 <SPI_WaitOnFlagUntilTimeout+0x26>
 80085d4:	e087      	b.n	80086e6 <SPI_WaitOnFlagUntilTimeout+0x136>
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 80085d6:	e03e      	b.n	8008656 <SPI_WaitOnFlagUntilTimeout+0xa6>
    {
      if(Timeout != HAL_MAX_DELAY)
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	3301      	adds	r3, #1
 80085dc:	d03b      	beq.n	8008656 <SPI_WaitOnFlagUntilTimeout+0xa6>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d007      	beq.n	80085f4 <SPI_WaitOnFlagUntilTimeout+0x44>
 80085e4:	f7fc fb68 	bl	8004cb8 <HAL_GetTick>
 80085e8:	0002      	movs	r2, r0
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	1ad2      	subs	r2, r2, r3
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d930      	bls.n	8008656 <SPI_WaitOnFlagUntilTimeout+0xa6>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (uint32_t)(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	68fa      	ldr	r2, [r7, #12]
 80085fa:	6812      	ldr	r2, [r2, #0]
 80085fc:	6852      	ldr	r2, [r2, #4]
 80085fe:	21e0      	movs	r1, #224	; 0xe0
 8008600:	438a      	bics	r2, r1
 8008602:	605a      	str	r2, [r3, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	68fa      	ldr	r2, [r7, #12]
 800860a:	6812      	ldr	r2, [r2, #0]
 800860c:	6812      	ldr	r2, [r2, #0]
 800860e:	2140      	movs	r1, #64	; 0x40
 8008610:	438a      	bics	r2, r1
 8008612:	601a      	str	r2, [r3, #0]

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008618:	2380      	movs	r3, #128	; 0x80
 800861a:	019b      	lsls	r3, r3, #6
 800861c:	429a      	cmp	r2, r3
 800861e:	d110      	bne.n	8008642 <SPI_WaitOnFlagUntilTimeout+0x92>
          {
            SPI_RESET_CRC(hspi);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68fa      	ldr	r2, [r7, #12]
 8008626:	6812      	ldr	r2, [r2, #0]
 8008628:	6812      	ldr	r2, [r2, #0]
 800862a:	4935      	ldr	r1, [pc, #212]	; (8008700 <SPI_WaitOnFlagUntilTimeout+0x150>)
 800862c:	400a      	ands	r2, r1
 800862e:	601a      	str	r2, [r3, #0]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	68fa      	ldr	r2, [r7, #12]
 8008636:	6812      	ldr	r2, [r2, #0]
 8008638:	6812      	ldr	r2, [r2, #0]
 800863a:	2180      	movs	r1, #128	; 0x80
 800863c:	0189      	lsls	r1, r1, #6
 800863e:	430a      	orrs	r2, r1
 8008640:	601a      	str	r2, [r3, #0]
          }

          hspi->State= HAL_SPI_STATE_READY;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2251      	movs	r2, #81	; 0x51
 8008646:	2101      	movs	r1, #1
 8008648:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2250      	movs	r2, #80	; 0x50
 800864e:	2100      	movs	r1, #0
 8008650:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008652:	2303      	movs	r3, #3
 8008654:	e050      	b.n	80086f8 <SPI_WaitOnFlagUntilTimeout+0x148>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	401a      	ands	r2, r3
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	429a      	cmp	r2, r3
 8008664:	d1b8      	bne.n	80085d8 <SPI_WaitOnFlagUntilTimeout+0x28>
 8008666:	e046      	b.n	80086f6 <SPI_WaitOnFlagUntilTimeout+0x146>
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
    {
      if(Timeout != HAL_MAX_DELAY)
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	3301      	adds	r3, #1
 800866c:	d03b      	beq.n	80086e6 <SPI_WaitOnFlagUntilTimeout+0x136>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d007      	beq.n	8008684 <SPI_WaitOnFlagUntilTimeout+0xd4>
 8008674:	f7fc fb20 	bl	8004cb8 <HAL_GetTick>
 8008678:	0002      	movs	r2, r0
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	1ad2      	subs	r2, r2, r3
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	429a      	cmp	r2, r3
 8008682:	d930      	bls.n	80086e6 <SPI_WaitOnFlagUntilTimeout+0x136>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (uint32_t)(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	6812      	ldr	r2, [r2, #0]
 800868c:	6852      	ldr	r2, [r2, #4]
 800868e:	21e0      	movs	r1, #224	; 0xe0
 8008690:	438a      	bics	r2, r1
 8008692:	605a      	str	r2, [r3, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	6812      	ldr	r2, [r2, #0]
 800869c:	6812      	ldr	r2, [r2, #0]
 800869e:	2140      	movs	r1, #64	; 0x40
 80086a0:	438a      	bics	r2, r1
 80086a2:	601a      	str	r2, [r3, #0]

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086a8:	2380      	movs	r3, #128	; 0x80
 80086aa:	019b      	lsls	r3, r3, #6
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d110      	bne.n	80086d2 <SPI_WaitOnFlagUntilTimeout+0x122>
          {
            SPI_RESET_CRC(hspi);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	6812      	ldr	r2, [r2, #0]
 80086b8:	6812      	ldr	r2, [r2, #0]
 80086ba:	4911      	ldr	r1, [pc, #68]	; (8008700 <SPI_WaitOnFlagUntilTimeout+0x150>)
 80086bc:	400a      	ands	r2, r1
 80086be:	601a      	str	r2, [r3, #0]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	68fa      	ldr	r2, [r7, #12]
 80086c6:	6812      	ldr	r2, [r2, #0]
 80086c8:	6812      	ldr	r2, [r2, #0]
 80086ca:	2180      	movs	r1, #128	; 0x80
 80086cc:	0189      	lsls	r1, r1, #6
 80086ce:	430a      	orrs	r2, r1
 80086d0:	601a      	str	r2, [r3, #0]
          }

          hspi->State= HAL_SPI_STATE_READY;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2251      	movs	r2, #81	; 0x51
 80086d6:	2101      	movs	r1, #1
 80086d8:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2250      	movs	r2, #80	; 0x50
 80086de:	2100      	movs	r1, #0
 80086e0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80086e2:	2303      	movs	r3, #3
 80086e4:	e008      	b.n	80086f8 <SPI_WaitOnFlagUntilTimeout+0x148>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	401a      	ands	r2, r3
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d0b8      	beq.n	8008668 <SPI_WaitOnFlagUntilTimeout+0xb8>
        }
      }
    }
  }
  return HAL_OK;
 80086f6:	2300      	movs	r3, #0
}
 80086f8:	0018      	movs	r0, r3
 80086fa:	46bd      	mov	sp, r7
 80086fc:	b006      	add	sp, #24
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	ffffdfff 	.word	0xffffdfff

08008704 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d101      	bne.n	8008716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	e047      	b.n	80087a6 <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2269      	movs	r2, #105	; 0x69
 800871a:	5c9b      	ldrb	r3, [r3, r2]
 800871c:	b2db      	uxtb	r3, r3
 800871e:	2b00      	cmp	r3, #0
 8008720:	d107      	bne.n	8008732 <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2268      	movs	r2, #104	; 0x68
 8008726:	2100      	movs	r1, #0
 8008728:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	0018      	movs	r0, r3
 800872e:	f002 fce1 	bl	800b0f4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2269      	movs	r2, #105	; 0x69
 8008736:	2124      	movs	r1, #36	; 0x24
 8008738:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	6812      	ldr	r2, [r2, #0]
 8008742:	6812      	ldr	r2, [r2, #0]
 8008744:	2101      	movs	r1, #1
 8008746:	438a      	bics	r2, r1
 8008748:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874e:	2b00      	cmp	r3, #0
 8008750:	d003      	beq.n	800875a <HAL_UART_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	0018      	movs	r0, r3
 8008756:	f000 fc1d 	bl	8008f94 <UART_AdvFeatureConfig>
  }

  if (UART_SetConfig(huart) == HAL_ERROR)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	0018      	movs	r0, r3
 800875e:	f000 f8cb 	bl	80088f8 <UART_SetConfig>
 8008762:	0003      	movs	r3, r0
 8008764:	2b01      	cmp	r3, #1
 8008766:	d101      	bne.n	800876c <HAL_UART_Init+0x68>
  {
    return HAL_ERROR;
 8008768:	2301      	movs	r3, #1
 800876a:	e01c      	b.n	80087a6 <HAL_UART_Init+0xa2>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	6812      	ldr	r2, [r2, #0]
 8008774:	6852      	ldr	r2, [r2, #4]
 8008776:	490e      	ldr	r1, [pc, #56]	; (80087b0 <HAL_UART_Init+0xac>)
 8008778:	400a      	ands	r2, r1
 800877a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	6812      	ldr	r2, [r2, #0]
 8008784:	6892      	ldr	r2, [r2, #8]
 8008786:	212a      	movs	r1, #42	; 0x2a
 8008788:	438a      	bics	r2, r1
 800878a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	6812      	ldr	r2, [r2, #0]
 8008794:	6812      	ldr	r2, [r2, #0]
 8008796:	2101      	movs	r1, #1
 8008798:	430a      	orrs	r2, r1
 800879a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	0018      	movs	r0, r3
 80087a0:	f000 fca4 	bl	80090ec <UART_CheckIdleState>
 80087a4:	0003      	movs	r3, r0
}
 80087a6:	0018      	movs	r0, r3
 80087a8:	46bd      	mov	sp, r7
 80087aa:	b002      	add	sp, #8
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	46c0      	nop			; (mov r8, r8)
 80087b0:	ffffb7ff 	.word	0xffffb7ff

080087b4 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b088      	sub	sp, #32
 80087b8:	af02      	add	r7, sp, #8
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	603b      	str	r3, [r7, #0]
 80087c0:	1dbb      	adds	r3, r7, #6
 80087c2:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint32_t tickstart = 0;
 80087c4:	2300      	movs	r3, #0
 80087c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2269      	movs	r2, #105	; 0x69
 80087cc:	5c9b      	ldrb	r3, [r3, r2]
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	2b20      	cmp	r3, #32
 80087d2:	d000      	beq.n	80087d6 <HAL_UART_Transmit+0x22>
 80087d4:	e08a      	b.n	80088ec <HAL_UART_Transmit+0x138>
  {
    if((pData == NULL ) || (Size == 0U))
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d003      	beq.n	80087e4 <HAL_UART_Transmit+0x30>
 80087dc:	1dbb      	adds	r3, r7, #6
 80087de:	881b      	ldrh	r3, [r3, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d101      	bne.n	80087e8 <HAL_UART_Transmit+0x34>
    {
      return  HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	e082      	b.n	80088ee <HAL_UART_Transmit+0x13a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	689a      	ldr	r2, [r3, #8]
 80087ec:	2380      	movs	r3, #128	; 0x80
 80087ee:	015b      	lsls	r3, r3, #5
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d109      	bne.n	8008808 <HAL_UART_Transmit+0x54>
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	691b      	ldr	r3, [r3, #16]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d105      	bne.n	8008808 <HAL_UART_Transmit+0x54>
    {
      if((((uint32_t)pData)&1) != 0)
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	2201      	movs	r2, #1
 8008800:	4013      	ands	r3, r2
 8008802:	d001      	beq.n	8008808 <HAL_UART_Transmit+0x54>
      {
        return  HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	e072      	b.n	80088ee <HAL_UART_Transmit+0x13a>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2268      	movs	r2, #104	; 0x68
 800880c:	5c9b      	ldrb	r3, [r3, r2]
 800880e:	2b01      	cmp	r3, #1
 8008810:	d101      	bne.n	8008816 <HAL_UART_Transmit+0x62>
 8008812:	2302      	movs	r3, #2
 8008814:	e06b      	b.n	80088ee <HAL_UART_Transmit+0x13a>
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2268      	movs	r2, #104	; 0x68
 800881a:	2101      	movs	r1, #1
 800881c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2200      	movs	r2, #0
 8008822:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2269      	movs	r2, #105	; 0x69
 8008828:	2121      	movs	r1, #33	; 0x21
 800882a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800882c:	f7fc fa44 	bl	8004cb8 <HAL_GetTick>
 8008830:	0003      	movs	r3, r0
 8008832:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	1dba      	adds	r2, r7, #6
 8008838:	2150      	movs	r1, #80	; 0x50
 800883a:	8812      	ldrh	r2, [r2, #0]
 800883c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	1dba      	adds	r2, r7, #6
 8008842:	2152      	movs	r1, #82	; 0x52
 8008844:	8812      	ldrh	r2, [r2, #0]
 8008846:	525a      	strh	r2, [r3, r1]
    while(huart->TxXferCount > 0U)
 8008848:	e033      	b.n	80088b2 <HAL_UART_Transmit+0xfe>
    {
      huart->TxXferCount--;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2252      	movs	r2, #82	; 0x52
 800884e:	5a9b      	ldrh	r3, [r3, r2]
 8008850:	b29b      	uxth	r3, r3
 8008852:	3b01      	subs	r3, #1
 8008854:	b299      	uxth	r1, r3
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2252      	movs	r2, #82	; 0x52
 800885a:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800885c:	697a      	ldr	r2, [r7, #20]
 800885e:	68f8      	ldr	r0, [r7, #12]
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	9300      	str	r3, [sp, #0]
 8008864:	0013      	movs	r3, r2
 8008866:	2200      	movs	r2, #0
 8008868:	2180      	movs	r1, #128	; 0x80
 800886a:	f000 fc89 	bl	8009180 <UART_WaitOnFlagUntilTimeout>
 800886e:	1e03      	subs	r3, r0, #0
 8008870:	d001      	beq.n	8008876 <HAL_UART_Transmit+0xc2>
      {
        return HAL_TIMEOUT;
 8008872:	2303      	movs	r3, #3
 8008874:	e03b      	b.n	80088ee <HAL_UART_Transmit+0x13a>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	689a      	ldr	r2, [r3, #8]
 800887a:	2380      	movs	r3, #128	; 0x80
 800887c:	015b      	lsls	r3, r3, #5
 800887e:	429a      	cmp	r2, r3
 8008880:	d110      	bne.n	80088a4 <HAL_UART_Transmit+0xf0>
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d10c      	bne.n	80088a4 <HAL_UART_Transmit+0xf0>
      {
        tmp = (uint16_t*) pData;
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	693a      	ldr	r2, [r7, #16]
 8008894:	8812      	ldrh	r2, [r2, #0]
 8008896:	05d2      	lsls	r2, r2, #23
 8008898:	0dd2      	lsrs	r2, r2, #23
 800889a:	629a      	str	r2, [r3, #40]	; 0x28
        pData += 2U;
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	3302      	adds	r3, #2
 80088a0:	60bb      	str	r3, [r7, #8]
 80088a2:	e006      	b.n	80088b2 <HAL_UART_Transmit+0xfe>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	68ba      	ldr	r2, [r7, #8]
 80088aa:	1c51      	adds	r1, r2, #1
 80088ac:	60b9      	str	r1, [r7, #8]
 80088ae:	7812      	ldrb	r2, [r2, #0]
 80088b0:	629a      	str	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2252      	movs	r2, #82	; 0x52
 80088b6:	5a9b      	ldrh	r3, [r3, r2]
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1c5      	bne.n	800884a <HAL_UART_Transmit+0x96>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80088be:	697a      	ldr	r2, [r7, #20]
 80088c0:	68f8      	ldr	r0, [r7, #12]
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	9300      	str	r3, [sp, #0]
 80088c6:	0013      	movs	r3, r2
 80088c8:	2200      	movs	r2, #0
 80088ca:	2140      	movs	r1, #64	; 0x40
 80088cc:	f000 fc58 	bl	8009180 <UART_WaitOnFlagUntilTimeout>
 80088d0:	1e03      	subs	r3, r0, #0
 80088d2:	d001      	beq.n	80088d8 <HAL_UART_Transmit+0x124>
    {
      return HAL_TIMEOUT;
 80088d4:	2303      	movs	r3, #3
 80088d6:	e00a      	b.n	80088ee <HAL_UART_Transmit+0x13a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2269      	movs	r2, #105	; 0x69
 80088dc:	2120      	movs	r1, #32
 80088de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2268      	movs	r2, #104	; 0x68
 80088e4:	2100      	movs	r1, #0
 80088e6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80088e8:	2300      	movs	r3, #0
 80088ea:	e000      	b.n	80088ee <HAL_UART_Transmit+0x13a>
  }
  else
  {
    return HAL_BUSY;
 80088ec:	2302      	movs	r3, #2
  }
}
 80088ee:	0018      	movs	r0, r3
 80088f0:	46bd      	mov	sp, r7
 80088f2:	b006      	add	sp, #24
 80088f4:	bd80      	pop	{r7, pc}
	...

080088f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088f8:	b5b0      	push	{r4, r5, r7, lr}
 80088fa:	b08c      	sub	sp, #48	; 0x30
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg                     = 0x00000000U;
 8008900:	2300      	movs	r3, #0
 8008902:	62fb      	str	r3, [r7, #44]	; 0x2c
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8008904:	2313      	movs	r3, #19
 8008906:	2218      	movs	r2, #24
 8008908:	4694      	mov	ip, r2
 800890a:	44bc      	add	ip, r7
 800890c:	4463      	add	r3, ip
 800890e:	2210      	movs	r2, #16
 8008910:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8008912:	230c      	movs	r3, #12
 8008914:	2218      	movs	r2, #24
 8008916:	4694      	mov	ip, r2
 8008918:	44bc      	add	ip, r7
 800891a:	4463      	add	r3, ip
 800891c:	2200      	movs	r2, #0
 800891e:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8008920:	2310      	movs	r3, #16
 8008922:	2218      	movs	r2, #24
 8008924:	4694      	mov	ip, r2
 8008926:	44bc      	add	ip, r7
 8008928:	4463      	add	r3, ip
 800892a:	2200      	movs	r2, #0
 800892c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 800892e:	230f      	movs	r3, #15
 8008930:	2218      	movs	r2, #24
 8008932:	4694      	mov	ip, r2
 8008934:	44bc      	add	ip, r7
 8008936:	4463      	add	r3, ip
 8008938:	2200      	movs	r2, #0
 800893a:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	689a      	ldr	r2, [r3, #8]
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	691b      	ldr	r3, [r3, #16]
 8008944:	431a      	orrs	r2, r3
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	695b      	ldr	r3, [r3, #20]
 800894a:	431a      	orrs	r2, r3
 800894c:	69fb      	ldr	r3, [r7, #28]
 800894e:	69db      	ldr	r3, [r3, #28]
 8008950:	4313      	orrs	r3, r2
 8008952:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8008954:	69fb      	ldr	r3, [r7, #28]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	69fa      	ldr	r2, [r7, #28]
 800895a:	6812      	ldr	r2, [r2, #0]
 800895c:	6812      	ldr	r2, [r2, #0]
 800895e:	49c7      	ldr	r1, [pc, #796]	; (8008c7c <UART_SetConfig+0x384>)
 8008960:	4011      	ands	r1, r2
 8008962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008964:	430a      	orrs	r2, r1
 8008966:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	69fa      	ldr	r2, [r7, #28]
 800896e:	6812      	ldr	r2, [r2, #0]
 8008970:	6852      	ldr	r2, [r2, #4]
 8008972:	49c3      	ldr	r1, [pc, #780]	; (8008c80 <UART_SetConfig+0x388>)
 8008974:	4011      	ands	r1, r2
 8008976:	69fa      	ldr	r2, [r7, #28]
 8008978:	68d2      	ldr	r2, [r2, #12]
 800897a:	430a      	orrs	r2, r1
 800897c:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	699b      	ldr	r3, [r3, #24]
 8008982:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008984:	69fb      	ldr	r3, [r7, #28]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4abe      	ldr	r2, [pc, #760]	; (8008c84 <UART_SetConfig+0x38c>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d004      	beq.n	8008998 <UART_SetConfig+0xa0>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800898e:	69fb      	ldr	r3, [r7, #28]
 8008990:	6a1b      	ldr	r3, [r3, #32]
 8008992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008994:	4313      	orrs	r3, r2
 8008996:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	69fa      	ldr	r2, [r7, #28]
 800899e:	6812      	ldr	r2, [r2, #0]
 80089a0:	6892      	ldr	r2, [r2, #8]
 80089a2:	49b9      	ldr	r1, [pc, #740]	; (8008c88 <UART_SetConfig+0x390>)
 80089a4:	4011      	ands	r1, r2
 80089a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089a8:	430a      	orrs	r2, r1
 80089aa:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089ac:	69fb      	ldr	r3, [r7, #28]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4ab6      	ldr	r2, [pc, #728]	; (8008c8c <UART_SetConfig+0x394>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d134      	bne.n	8008a20 <UART_SetConfig+0x128>
 80089b6:	4bb6      	ldr	r3, [pc, #728]	; (8008c90 <UART_SetConfig+0x398>)
 80089b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089ba:	2203      	movs	r2, #3
 80089bc:	4013      	ands	r3, r2
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d015      	beq.n	80089ee <UART_SetConfig+0xf6>
 80089c2:	d304      	bcc.n	80089ce <UART_SetConfig+0xd6>
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	d00a      	beq.n	80089de <UART_SetConfig+0xe6>
 80089c8:	2b03      	cmp	r3, #3
 80089ca:	d018      	beq.n	80089fe <UART_SetConfig+0x106>
 80089cc:	e01f      	b.n	8008a0e <UART_SetConfig+0x116>
 80089ce:	2313      	movs	r3, #19
 80089d0:	2218      	movs	r2, #24
 80089d2:	4694      	mov	ip, r2
 80089d4:	44bc      	add	ip, r7
 80089d6:	4463      	add	r3, ip
 80089d8:	2201      	movs	r2, #1
 80089da:	701a      	strb	r2, [r3, #0]
 80089dc:	e0bc      	b.n	8008b58 <UART_SetConfig+0x260>
 80089de:	2313      	movs	r3, #19
 80089e0:	2218      	movs	r2, #24
 80089e2:	4694      	mov	ip, r2
 80089e4:	44bc      	add	ip, r7
 80089e6:	4463      	add	r3, ip
 80089e8:	2202      	movs	r2, #2
 80089ea:	701a      	strb	r2, [r3, #0]
 80089ec:	e0b4      	b.n	8008b58 <UART_SetConfig+0x260>
 80089ee:	2313      	movs	r3, #19
 80089f0:	2218      	movs	r2, #24
 80089f2:	4694      	mov	ip, r2
 80089f4:	44bc      	add	ip, r7
 80089f6:	4463      	add	r3, ip
 80089f8:	2204      	movs	r2, #4
 80089fa:	701a      	strb	r2, [r3, #0]
 80089fc:	e0ac      	b.n	8008b58 <UART_SetConfig+0x260>
 80089fe:	2313      	movs	r3, #19
 8008a00:	2218      	movs	r2, #24
 8008a02:	4694      	mov	ip, r2
 8008a04:	44bc      	add	ip, r7
 8008a06:	4463      	add	r3, ip
 8008a08:	2208      	movs	r2, #8
 8008a0a:	701a      	strb	r2, [r3, #0]
 8008a0c:	e0a4      	b.n	8008b58 <UART_SetConfig+0x260>
 8008a0e:	2313      	movs	r3, #19
 8008a10:	2218      	movs	r2, #24
 8008a12:	4694      	mov	ip, r2
 8008a14:	44bc      	add	ip, r7
 8008a16:	4463      	add	r3, ip
 8008a18:	2210      	movs	r2, #16
 8008a1a:	701a      	strb	r2, [r3, #0]
 8008a1c:	46c0      	nop			; (mov r8, r8)
 8008a1e:	e09b      	b.n	8008b58 <UART_SetConfig+0x260>
 8008a20:	69fb      	ldr	r3, [r7, #28]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a9b      	ldr	r2, [pc, #620]	; (8008c94 <UART_SetConfig+0x39c>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d137      	bne.n	8008a9a <UART_SetConfig+0x1a2>
 8008a2a:	4b99      	ldr	r3, [pc, #612]	; (8008c90 <UART_SetConfig+0x398>)
 8008a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a2e:	220c      	movs	r2, #12
 8008a30:	4013      	ands	r3, r2
 8008a32:	2b04      	cmp	r3, #4
 8008a34:	d018      	beq.n	8008a68 <UART_SetConfig+0x170>
 8008a36:	d802      	bhi.n	8008a3e <UART_SetConfig+0x146>
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d005      	beq.n	8008a48 <UART_SetConfig+0x150>
 8008a3c:	e024      	b.n	8008a88 <UART_SetConfig+0x190>
 8008a3e:	2b08      	cmp	r3, #8
 8008a40:	d00a      	beq.n	8008a58 <UART_SetConfig+0x160>
 8008a42:	2b0c      	cmp	r3, #12
 8008a44:	d018      	beq.n	8008a78 <UART_SetConfig+0x180>
 8008a46:	e01f      	b.n	8008a88 <UART_SetConfig+0x190>
 8008a48:	2313      	movs	r3, #19
 8008a4a:	2218      	movs	r2, #24
 8008a4c:	4694      	mov	ip, r2
 8008a4e:	44bc      	add	ip, r7
 8008a50:	4463      	add	r3, ip
 8008a52:	2200      	movs	r2, #0
 8008a54:	701a      	strb	r2, [r3, #0]
 8008a56:	e07f      	b.n	8008b58 <UART_SetConfig+0x260>
 8008a58:	2313      	movs	r3, #19
 8008a5a:	2218      	movs	r2, #24
 8008a5c:	4694      	mov	ip, r2
 8008a5e:	44bc      	add	ip, r7
 8008a60:	4463      	add	r3, ip
 8008a62:	2202      	movs	r2, #2
 8008a64:	701a      	strb	r2, [r3, #0]
 8008a66:	e077      	b.n	8008b58 <UART_SetConfig+0x260>
 8008a68:	2313      	movs	r3, #19
 8008a6a:	2218      	movs	r2, #24
 8008a6c:	4694      	mov	ip, r2
 8008a6e:	44bc      	add	ip, r7
 8008a70:	4463      	add	r3, ip
 8008a72:	2204      	movs	r2, #4
 8008a74:	701a      	strb	r2, [r3, #0]
 8008a76:	e06f      	b.n	8008b58 <UART_SetConfig+0x260>
 8008a78:	2313      	movs	r3, #19
 8008a7a:	2218      	movs	r2, #24
 8008a7c:	4694      	mov	ip, r2
 8008a7e:	44bc      	add	ip, r7
 8008a80:	4463      	add	r3, ip
 8008a82:	2208      	movs	r2, #8
 8008a84:	701a      	strb	r2, [r3, #0]
 8008a86:	e067      	b.n	8008b58 <UART_SetConfig+0x260>
 8008a88:	2313      	movs	r3, #19
 8008a8a:	2218      	movs	r2, #24
 8008a8c:	4694      	mov	ip, r2
 8008a8e:	44bc      	add	ip, r7
 8008a90:	4463      	add	r3, ip
 8008a92:	2210      	movs	r2, #16
 8008a94:	701a      	strb	r2, [r3, #0]
 8008a96:	46c0      	nop			; (mov r8, r8)
 8008a98:	e05e      	b.n	8008b58 <UART_SetConfig+0x260>
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a7e      	ldr	r2, [pc, #504]	; (8008c98 <UART_SetConfig+0x3a0>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d107      	bne.n	8008ab4 <UART_SetConfig+0x1bc>
 8008aa4:	2313      	movs	r3, #19
 8008aa6:	2218      	movs	r2, #24
 8008aa8:	4694      	mov	ip, r2
 8008aaa:	44bc      	add	ip, r7
 8008aac:	4463      	add	r3, ip
 8008aae:	2200      	movs	r2, #0
 8008ab0:	701a      	strb	r2, [r3, #0]
 8008ab2:	e052      	b.n	8008b5a <UART_SetConfig+0x262>
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a78      	ldr	r2, [pc, #480]	; (8008c9c <UART_SetConfig+0x3a4>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d107      	bne.n	8008ace <UART_SetConfig+0x1d6>
 8008abe:	2313      	movs	r3, #19
 8008ac0:	2218      	movs	r2, #24
 8008ac2:	4694      	mov	ip, r2
 8008ac4:	44bc      	add	ip, r7
 8008ac6:	4463      	add	r3, ip
 8008ac8:	2200      	movs	r2, #0
 8008aca:	701a      	strb	r2, [r3, #0]
 8008acc:	e045      	b.n	8008b5a <UART_SetConfig+0x262>
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a6c      	ldr	r2, [pc, #432]	; (8008c84 <UART_SetConfig+0x38c>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d140      	bne.n	8008b5a <UART_SetConfig+0x262>
 8008ad8:	4b6d      	ldr	r3, [pc, #436]	; (8008c90 <UART_SetConfig+0x398>)
 8008ada:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008adc:	23c0      	movs	r3, #192	; 0xc0
 8008ade:	011b      	lsls	r3, r3, #4
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	2280      	movs	r2, #128	; 0x80
 8008ae4:	00d2      	lsls	r2, r2, #3
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d01f      	beq.n	8008b2a <UART_SetConfig+0x232>
 8008aea:	2280      	movs	r2, #128	; 0x80
 8008aec:	00d2      	lsls	r2, r2, #3
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d802      	bhi.n	8008af8 <UART_SetConfig+0x200>
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d009      	beq.n	8008b0a <UART_SetConfig+0x212>
 8008af6:	e028      	b.n	8008b4a <UART_SetConfig+0x252>
 8008af8:	2280      	movs	r2, #128	; 0x80
 8008afa:	0112      	lsls	r2, r2, #4
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d00c      	beq.n	8008b1a <UART_SetConfig+0x222>
 8008b00:	22c0      	movs	r2, #192	; 0xc0
 8008b02:	0112      	lsls	r2, r2, #4
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d018      	beq.n	8008b3a <UART_SetConfig+0x242>
 8008b08:	e01f      	b.n	8008b4a <UART_SetConfig+0x252>
 8008b0a:	2313      	movs	r3, #19
 8008b0c:	2218      	movs	r2, #24
 8008b0e:	4694      	mov	ip, r2
 8008b10:	44bc      	add	ip, r7
 8008b12:	4463      	add	r3, ip
 8008b14:	2200      	movs	r2, #0
 8008b16:	701a      	strb	r2, [r3, #0]
 8008b18:	e01e      	b.n	8008b58 <UART_SetConfig+0x260>
 8008b1a:	2313      	movs	r3, #19
 8008b1c:	2218      	movs	r2, #24
 8008b1e:	4694      	mov	ip, r2
 8008b20:	44bc      	add	ip, r7
 8008b22:	4463      	add	r3, ip
 8008b24:	2202      	movs	r2, #2
 8008b26:	701a      	strb	r2, [r3, #0]
 8008b28:	e016      	b.n	8008b58 <UART_SetConfig+0x260>
 8008b2a:	2313      	movs	r3, #19
 8008b2c:	2218      	movs	r2, #24
 8008b2e:	4694      	mov	ip, r2
 8008b30:	44bc      	add	ip, r7
 8008b32:	4463      	add	r3, ip
 8008b34:	2204      	movs	r2, #4
 8008b36:	701a      	strb	r2, [r3, #0]
 8008b38:	e00e      	b.n	8008b58 <UART_SetConfig+0x260>
 8008b3a:	2313      	movs	r3, #19
 8008b3c:	2218      	movs	r2, #24
 8008b3e:	4694      	mov	ip, r2
 8008b40:	44bc      	add	ip, r7
 8008b42:	4463      	add	r3, ip
 8008b44:	2208      	movs	r2, #8
 8008b46:	701a      	strb	r2, [r3, #0]
 8008b48:	e006      	b.n	8008b58 <UART_SetConfig+0x260>
 8008b4a:	2313      	movs	r3, #19
 8008b4c:	2218      	movs	r2, #24
 8008b4e:	4694      	mov	ip, r2
 8008b50:	44bc      	add	ip, r7
 8008b52:	4463      	add	r3, ip
 8008b54:	2210      	movs	r2, #16
 8008b56:	701a      	strb	r2, [r3, #0]
 8008b58:	46c0      	nop			; (mov r8, r8)
  uint32_t frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_USART2);
 8008b5a:	2002      	movs	r0, #2
 8008b5c:	f7fe fa5e 	bl	800701c <HAL_RCCEx_GetPeriphCLKFreq>
 8008b60:	0003      	movs	r3, r0
 8008b62:	623b      	str	r3, [r7, #32]

  /* Check LPUART instance */
  if(UART_INSTANCE_LOWPOWER(huart))
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a46      	ldr	r2, [pc, #280]	; (8008c84 <UART_SetConfig+0x38c>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d000      	beq.n	8008b70 <UART_SetConfig+0x278>
 8008b6e:	e09f      	b.n	8008cb0 <UART_SetConfig+0x3b8>
  {
    /* Retrieve frequency clock */
    tmpreg = 0;
 8008b70:	2300      	movs	r3, #0
 8008b72:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (clocksource)
 8008b74:	2313      	movs	r3, #19
 8008b76:	2218      	movs	r2, #24
 8008b78:	4694      	mov	ip, r2
 8008b7a:	44bc      	add	ip, r7
 8008b7c:	4463      	add	r3, ip
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	d00d      	beq.n	8008ba0 <UART_SetConfig+0x2a8>
 8008b84:	dc02      	bgt.n	8008b8c <UART_SetConfig+0x294>
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d005      	beq.n	8008b96 <UART_SetConfig+0x29e>
 8008b8a:	e01d      	b.n	8008bc8 <UART_SetConfig+0x2d0>
 8008b8c:	2b04      	cmp	r3, #4
 8008b8e:	d012      	beq.n	8008bb6 <UART_SetConfig+0x2be>
 8008b90:	2b08      	cmp	r3, #8
 8008b92:	d015      	beq.n	8008bc0 <UART_SetConfig+0x2c8>
 8008b94:	e018      	b.n	8008bc8 <UART_SetConfig+0x2d0>
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
 8008b96:	f7fe f86b 	bl	8006c70 <HAL_RCC_GetPCLK1Freq>
 8008b9a:	0003      	movs	r3, r0
 8008b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8008b9e:	e01b      	b.n	8008bd8 <UART_SetConfig+0x2e0>
    case UART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ba0:	4b3b      	ldr	r3, [pc, #236]	; (8008c90 <UART_SetConfig+0x398>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2210      	movs	r2, #16
 8008ba6:	4013      	ands	r3, r2
 8008ba8:	d002      	beq.n	8008bb0 <UART_SetConfig+0x2b8>
      {
        tmpreg = (uint32_t) (HSI_VALUE >> 2U);
 8008baa:	4b3d      	ldr	r3, [pc, #244]	; (8008ca0 <UART_SetConfig+0x3a8>)
 8008bac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      else
      {
        tmpreg = (uint32_t) HSI_VALUE;
      }
      break;
 8008bae:	e013      	b.n	8008bd8 <UART_SetConfig+0x2e0>
        tmpreg = (uint32_t) HSI_VALUE;
 8008bb0:	4b3c      	ldr	r3, [pc, #240]	; (8008ca4 <UART_SetConfig+0x3ac>)
 8008bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8008bb4:	e010      	b.n	8008bd8 <UART_SetConfig+0x2e0>
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
 8008bb6:	f7fd ffd3 	bl	8006b60 <HAL_RCC_GetSysClockFreq>
 8008bba:	0003      	movs	r3, r0
 8008bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8008bbe:	e00b      	b.n	8008bd8 <UART_SetConfig+0x2e0>
    case UART_CLOCKSOURCE_LSE:
      tmpreg = (uint32_t) LSE_VALUE;
 8008bc0:	2380      	movs	r3, #128	; 0x80
 8008bc2:	021b      	lsls	r3, r3, #8
 8008bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8008bc6:	e007      	b.n	8008bd8 <UART_SetConfig+0x2e0>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8008bc8:	230f      	movs	r3, #15
 8008bca:	2218      	movs	r2, #24
 8008bcc:	4694      	mov	ip, r2
 8008bce:	44bc      	add	ip, r7
 8008bd0:	4463      	add	r3, ip
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	701a      	strb	r2, [r3, #0]
      break;
 8008bd6:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (tmpreg != 0)
 8008bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d100      	bne.n	8008be0 <UART_SetConfig+0x2e8>
 8008bde:	e1c0      	b.n	8008f62 <UART_SetConfig+0x66a>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	685a      	ldr	r2, [r3, #4]
 8008be4:	0013      	movs	r3, r2
 8008be6:	005b      	lsls	r3, r3, #1
 8008be8:	189a      	adds	r2, r3, r2
 8008bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d805      	bhi.n	8008bfc <UART_SetConfig+0x304>
           (tmpreg > (4096 * huart->Init.BaudRate) ))
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	031a      	lsls	r2, r3, #12
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8008bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d207      	bcs.n	8008c0c <UART_SetConfig+0x314>
      {
        ret = HAL_ERROR;
 8008bfc:	230f      	movs	r3, #15
 8008bfe:	2218      	movs	r2, #24
 8008c00:	4694      	mov	ip, r2
 8008c02:	44bc      	add	ip, r7
 8008c04:	4463      	add	r3, ip
 8008c06:	2201      	movs	r2, #1
 8008c08:	701a      	strb	r2, [r3, #0]
 8008c0a:	e1aa      	b.n	8008f62 <UART_SetConfig+0x66a>
      }
      else
      {
        tmpreg = (uint32_t)(UART_DIV_LPUART(tmpreg, huart->Init.BaudRate));
 8008c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c0e:	613b      	str	r3, [r7, #16]
 8008c10:	2300      	movs	r3, #0
 8008c12:	617b      	str	r3, [r7, #20]
 8008c14:	6939      	ldr	r1, [r7, #16]
 8008c16:	697a      	ldr	r2, [r7, #20]
 8008c18:	000b      	movs	r3, r1
 8008c1a:	0e1b      	lsrs	r3, r3, #24
 8008c1c:	0010      	movs	r0, r2
 8008c1e:	0205      	lsls	r5, r0, #8
 8008c20:	431d      	orrs	r5, r3
 8008c22:	000b      	movs	r3, r1
 8008c24:	021c      	lsls	r4, r3, #8
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	085b      	lsrs	r3, r3, #1
 8008c2c:	60bb      	str	r3, [r7, #8]
 8008c2e:	2300      	movs	r3, #0
 8008c30:	60fb      	str	r3, [r7, #12]
 8008c32:	68b8      	ldr	r0, [r7, #8]
 8008c34:	68f9      	ldr	r1, [r7, #12]
 8008c36:	1900      	adds	r0, r0, r4
 8008c38:	4169      	adcs	r1, r5
 8008c3a:	69fb      	ldr	r3, [r7, #28]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	603b      	str	r3, [r7, #0]
 8008c40:	2300      	movs	r3, #0
 8008c42:	607b      	str	r3, [r7, #4]
 8008c44:	683a      	ldr	r2, [r7, #0]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f7f7 fc2e 	bl	80004a8 <__aeabi_uldivmod>
 8008c4c:	0003      	movs	r3, r0
 8008c4e:	000c      	movs	r4, r1
 8008c50:	62fb      	str	r3, [r7, #44]	; 0x2c
   
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8008c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c54:	4a14      	ldr	r2, [pc, #80]	; (8008ca8 <UART_SetConfig+0x3b0>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d908      	bls.n	8008c6c <UART_SetConfig+0x374>
 8008c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c5c:	4a13      	ldr	r2, [pc, #76]	; (8008cac <UART_SetConfig+0x3b4>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d804      	bhi.n	8008c6c <UART_SetConfig+0x374>
        {
           huart->Instance->BRR = tmpreg;
 8008c62:	69fb      	ldr	r3, [r7, #28]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c68:	60da      	str	r2, [r3, #12]
 8008c6a:	e17a      	b.n	8008f62 <UART_SetConfig+0x66a>
        }
        else
        {
          ret = HAL_ERROR;
 8008c6c:	230f      	movs	r3, #15
 8008c6e:	2218      	movs	r2, #24
 8008c70:	4694      	mov	ip, r2
 8008c72:	44bc      	add	ip, r7
 8008c74:	4463      	add	r3, ip
 8008c76:	2201      	movs	r2, #1
 8008c78:	701a      	strb	r2, [r3, #0]
 8008c7a:	e172      	b.n	8008f62 <UART_SetConfig+0x66a>
 8008c7c:	efff69f3 	.word	0xefff69f3
 8008c80:	ffffcfff 	.word	0xffffcfff
 8008c84:	40004800 	.word	0x40004800
 8008c88:	fffff4ff 	.word	0xfffff4ff
 8008c8c:	40013800 	.word	0x40013800
 8008c90:	40021000 	.word	0x40021000
 8008c94:	40004400 	.word	0x40004400
 8008c98:	40004c00 	.word	0x40004c00
 8008c9c:	40005000 	.word	0x40005000
 8008ca0:	003d0900 	.word	0x003d0900
 8008ca4:	00f42400 	.word	0x00f42400
 8008ca8:	000002ff 	.word	0x000002ff
 8008cac:	000fffff 	.word	0x000fffff
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	69da      	ldr	r2, [r3, #28]
 8008cb4:	2380      	movs	r3, #128	; 0x80
 8008cb6:	021b      	lsls	r3, r3, #8
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d000      	beq.n	8008cbe <UART_SetConfig+0x3c6>
 8008cbc:	e0ca      	b.n	8008e54 <UART_SetConfig+0x55c>
  {
    switch (clocksource)
 8008cbe:	2313      	movs	r3, #19
 8008cc0:	2218      	movs	r2, #24
 8008cc2:	4694      	mov	ip, r2
 8008cc4:	44bc      	add	ip, r7
 8008cc6:	4463      	add	r3, ip
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	2b08      	cmp	r3, #8
 8008ccc:	d900      	bls.n	8008cd0 <UART_SetConfig+0x3d8>
 8008cce:	e089      	b.n	8008de4 <UART_SetConfig+0x4ec>
 8008cd0:	009a      	lsls	r2, r3, #2
 8008cd2:	4ba9      	ldr	r3, [pc, #676]	; (8008f78 <UART_SetConfig+0x680>)
 8008cd4:	18d3      	adds	r3, r2, r3
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	469f      	mov	pc, r3
    {
    case UART_CLOCKSOURCE_PCLK1:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(frequency, huart->Init.BaudRate));
 8008cda:	6a3b      	ldr	r3, [r7, #32]
 8008cdc:	005a      	lsls	r2, r3, #1
 8008cde:	69fb      	ldr	r3, [r7, #28]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	085b      	lsrs	r3, r3, #1
 8008ce4:	18d2      	adds	r2, r2, r3
 8008ce6:	69fb      	ldr	r3, [r7, #28]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	0019      	movs	r1, r3
 8008cec:	0010      	movs	r0, r2
 8008cee:	f7f7 fa27 	bl	8000140 <__udivsi3>
 8008cf2:	0003      	movs	r3, r0
 8008cf4:	001a      	movs	r2, r3
 8008cf6:	2310      	movs	r3, #16
 8008cf8:	2118      	movs	r1, #24
 8008cfa:	468c      	mov	ip, r1
 8008cfc:	44bc      	add	ip, r7
 8008cfe:	4463      	add	r3, ip
 8008d00:	801a      	strh	r2, [r3, #0]
      break;
 8008d02:	e077      	b.n	8008df4 <UART_SetConfig+0x4fc>
    case UART_CLOCKSOURCE_PCLK2:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8008d04:	f7fd ffca 	bl	8006c9c <HAL_RCC_GetPCLK2Freq>
 8008d08:	0003      	movs	r3, r0
 8008d0a:	005a      	lsls	r2, r3, #1
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	085b      	lsrs	r3, r3, #1
 8008d12:	18d2      	adds	r2, r2, r3
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	0019      	movs	r1, r3
 8008d1a:	0010      	movs	r0, r2
 8008d1c:	f7f7 fa10 	bl	8000140 <__udivsi3>
 8008d20:	0003      	movs	r3, r0
 8008d22:	001a      	movs	r2, r3
 8008d24:	2310      	movs	r3, #16
 8008d26:	2118      	movs	r1, #24
 8008d28:	468c      	mov	ip, r1
 8008d2a:	44bc      	add	ip, r7
 8008d2c:	4463      	add	r3, ip
 8008d2e:	801a      	strh	r2, [r3, #0]
      break;
 8008d30:	e060      	b.n	8008df4 <UART_SetConfig+0x4fc>
    case UART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d32:	4b92      	ldr	r3, [pc, #584]	; (8008f7c <UART_SetConfig+0x684>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2210      	movs	r2, #16
 8008d38:	4013      	ands	r3, r2
 8008d3a:	d013      	beq.n	8008d64 <UART_SetConfig+0x46c>
      {
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	085b      	lsrs	r3, r3, #1
 8008d42:	4a8f      	ldr	r2, [pc, #572]	; (8008f80 <UART_SetConfig+0x688>)
 8008d44:	189a      	adds	r2, r3, r2
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	0019      	movs	r1, r3
 8008d4c:	0010      	movs	r0, r2
 8008d4e:	f7f7 f9f7 	bl	8000140 <__udivsi3>
 8008d52:	0003      	movs	r3, r0
 8008d54:	001a      	movs	r2, r3
 8008d56:	2310      	movs	r3, #16
 8008d58:	2118      	movs	r1, #24
 8008d5a:	468c      	mov	ip, r1
 8008d5c:	44bc      	add	ip, r7
 8008d5e:	4463      	add	r3, ip
 8008d60:	801a      	strh	r2, [r3, #0]
      }
      else
      {
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate)); 
      }
      break;
 8008d62:	e047      	b.n	8008df4 <UART_SetConfig+0x4fc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate)); 
 8008d64:	69fb      	ldr	r3, [r7, #28]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	085b      	lsrs	r3, r3, #1
 8008d6a:	4a86      	ldr	r2, [pc, #536]	; (8008f84 <UART_SetConfig+0x68c>)
 8008d6c:	189a      	adds	r2, r3, r2
 8008d6e:	69fb      	ldr	r3, [r7, #28]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	0019      	movs	r1, r3
 8008d74:	0010      	movs	r0, r2
 8008d76:	f7f7 f9e3 	bl	8000140 <__udivsi3>
 8008d7a:	0003      	movs	r3, r0
 8008d7c:	001a      	movs	r2, r3
 8008d7e:	2310      	movs	r3, #16
 8008d80:	2118      	movs	r1, #24
 8008d82:	468c      	mov	ip, r1
 8008d84:	44bc      	add	ip, r7
 8008d86:	4463      	add	r3, ip
 8008d88:	801a      	strh	r2, [r3, #0]
      break;
 8008d8a:	e033      	b.n	8008df4 <UART_SetConfig+0x4fc>
    case UART_CLOCKSOURCE_SYSCLK:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8008d8c:	f7fd fee8 	bl	8006b60 <HAL_RCC_GetSysClockFreq>
 8008d90:	0003      	movs	r3, r0
 8008d92:	005a      	lsls	r2, r3, #1
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	085b      	lsrs	r3, r3, #1
 8008d9a:	18d2      	adds	r2, r2, r3
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	0019      	movs	r1, r3
 8008da2:	0010      	movs	r0, r2
 8008da4:	f7f7 f9cc 	bl	8000140 <__udivsi3>
 8008da8:	0003      	movs	r3, r0
 8008daa:	001a      	movs	r2, r3
 8008dac:	2310      	movs	r3, #16
 8008dae:	2118      	movs	r1, #24
 8008db0:	468c      	mov	ip, r1
 8008db2:	44bc      	add	ip, r7
 8008db4:	4463      	add	r3, ip
 8008db6:	801a      	strh	r2, [r3, #0]
      break;
 8008db8:	e01c      	b.n	8008df4 <UART_SetConfig+0x4fc>
    case UART_CLOCKSOURCE_LSE:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	085b      	lsrs	r3, r3, #1
 8008dc0:	2280      	movs	r2, #128	; 0x80
 8008dc2:	0252      	lsls	r2, r2, #9
 8008dc4:	189a      	adds	r2, r3, r2
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	0019      	movs	r1, r3
 8008dcc:	0010      	movs	r0, r2
 8008dce:	f7f7 f9b7 	bl	8000140 <__udivsi3>
 8008dd2:	0003      	movs	r3, r0
 8008dd4:	001a      	movs	r2, r3
 8008dd6:	2310      	movs	r3, #16
 8008dd8:	2118      	movs	r1, #24
 8008dda:	468c      	mov	ip, r1
 8008ddc:	44bc      	add	ip, r7
 8008dde:	4463      	add	r3, ip
 8008de0:	801a      	strh	r2, [r3, #0]
      break;
 8008de2:	e007      	b.n	8008df4 <UART_SetConfig+0x4fc>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8008de4:	230f      	movs	r3, #15
 8008de6:	2218      	movs	r2, #24
 8008de8:	4694      	mov	ip, r2
 8008dea:	44bc      	add	ip, r7
 8008dec:	4463      	add	r3, ip
 8008dee:	2201      	movs	r2, #1
 8008df0:	701a      	strb	r2, [r3, #0]
      break;
 8008df2:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8008df4:	230c      	movs	r3, #12
 8008df6:	2218      	movs	r2, #24
 8008df8:	4694      	mov	ip, r2
 8008dfa:	44bc      	add	ip, r7
 8008dfc:	4463      	add	r3, ip
 8008dfe:	2210      	movs	r2, #16
 8008e00:	2118      	movs	r1, #24
 8008e02:	468c      	mov	ip, r1
 8008e04:	44bc      	add	ip, r7
 8008e06:	4462      	add	r2, ip
 8008e08:	8812      	ldrh	r2, [r2, #0]
 8008e0a:	210f      	movs	r1, #15
 8008e0c:	438a      	bics	r2, r1
 8008e0e:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((uint16_t)(usartdiv & (uint16_t)0x000FU) >> (uint16_t)1U);
 8008e10:	2310      	movs	r3, #16
 8008e12:	2218      	movs	r2, #24
 8008e14:	4694      	mov	ip, r2
 8008e16:	44bc      	add	ip, r7
 8008e18:	4463      	add	r3, ip
 8008e1a:	881b      	ldrh	r3, [r3, #0]
 8008e1c:	105b      	asrs	r3, r3, #1
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	2207      	movs	r2, #7
 8008e22:	4013      	ands	r3, r2
 8008e24:	b299      	uxth	r1, r3
 8008e26:	230c      	movs	r3, #12
 8008e28:	2218      	movs	r2, #24
 8008e2a:	4694      	mov	ip, r2
 8008e2c:	44bc      	add	ip, r7
 8008e2e:	4463      	add	r3, ip
 8008e30:	220c      	movs	r2, #12
 8008e32:	2018      	movs	r0, #24
 8008e34:	4684      	mov	ip, r0
 8008e36:	44bc      	add	ip, r7
 8008e38:	4462      	add	r2, ip
 8008e3a:	8812      	ldrh	r2, [r2, #0]
 8008e3c:	430a      	orrs	r2, r1
 8008e3e:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	220c      	movs	r2, #12
 8008e46:	2118      	movs	r1, #24
 8008e48:	468c      	mov	ip, r1
 8008e4a:	44bc      	add	ip, r7
 8008e4c:	4462      	add	r2, ip
 8008e4e:	8812      	ldrh	r2, [r2, #0]
 8008e50:	60da      	str	r2, [r3, #12]
 8008e52:	e086      	b.n	8008f62 <UART_SetConfig+0x66a>
  }
  else
  {
    switch (clocksource)
 8008e54:	2313      	movs	r3, #19
 8008e56:	2218      	movs	r2, #24
 8008e58:	4694      	mov	ip, r2
 8008e5a:	44bc      	add	ip, r7
 8008e5c:	4463      	add	r3, ip
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	2b08      	cmp	r3, #8
 8008e62:	d876      	bhi.n	8008f52 <UART_SetConfig+0x65a>
 8008e64:	009a      	lsls	r2, r3, #2
 8008e66:	4b48      	ldr	r3, [pc, #288]	; (8008f88 <UART_SetConfig+0x690>)
 8008e68:	18d3      	adds	r3, r2, r3
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	469f      	mov	pc, r3
    {
    case UART_CLOCKSOURCE_PCLK1:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	681c      	ldr	r4, [r3, #0]
 8008e72:	f7fd fefd 	bl	8006c70 <HAL_RCC_GetPCLK1Freq>
 8008e76:	0002      	movs	r2, r0
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	085b      	lsrs	r3, r3, #1
 8008e7e:	18d2      	adds	r2, r2, r3
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	0019      	movs	r1, r3
 8008e86:	0010      	movs	r0, r2
 8008e88:	f7f7 f95a 	bl	8000140 <__udivsi3>
 8008e8c:	0003      	movs	r3, r0
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	60e3      	str	r3, [r4, #12]
      break;
 8008e92:	e066      	b.n	8008f62 <UART_SetConfig+0x66a>
    case UART_CLOCKSOURCE_PCLK2:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8008e94:	69fb      	ldr	r3, [r7, #28]
 8008e96:	681c      	ldr	r4, [r3, #0]
 8008e98:	f7fd ff00 	bl	8006c9c <HAL_RCC_GetPCLK2Freq>
 8008e9c:	0002      	movs	r2, r0
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	085b      	lsrs	r3, r3, #1
 8008ea4:	18d2      	adds	r2, r2, r3
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	0019      	movs	r1, r3
 8008eac:	0010      	movs	r0, r2
 8008eae:	f7f7 f947 	bl	8000140 <__udivsi3>
 8008eb2:	0003      	movs	r3, r0
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	60e3      	str	r3, [r4, #12]
      break;
 8008eb8:	e053      	b.n	8008f62 <UART_SetConfig+0x66a>
    case UART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008eba:	4b30      	ldr	r3, [pc, #192]	; (8008f7c <UART_SetConfig+0x684>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	2210      	movs	r2, #16
 8008ec0:	4013      	ands	r3, r2
 8008ec2:	d010      	beq.n	8008ee6 <UART_SetConfig+0x5ee>
      {
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	681c      	ldr	r4, [r3, #0]
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	085b      	lsrs	r3, r3, #1
 8008ece:	4a2f      	ldr	r2, [pc, #188]	; (8008f8c <UART_SetConfig+0x694>)
 8008ed0:	189a      	adds	r2, r3, r2
 8008ed2:	69fb      	ldr	r3, [r7, #28]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	0019      	movs	r1, r3
 8008ed8:	0010      	movs	r0, r2
 8008eda:	f7f7 f931 	bl	8000140 <__udivsi3>
 8008ede:	0003      	movs	r3, r0
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	60e3      	str	r3, [r4, #12]
      }
      else
      {
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
      }
      break;
 8008ee4:	e03d      	b.n	8008f62 <UART_SetConfig+0x66a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008ee6:	69fb      	ldr	r3, [r7, #28]
 8008ee8:	681c      	ldr	r4, [r3, #0]
 8008eea:	69fb      	ldr	r3, [r7, #28]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	085b      	lsrs	r3, r3, #1
 8008ef0:	4a27      	ldr	r2, [pc, #156]	; (8008f90 <UART_SetConfig+0x698>)
 8008ef2:	189a      	adds	r2, r3, r2
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	0019      	movs	r1, r3
 8008efa:	0010      	movs	r0, r2
 8008efc:	f7f7 f920 	bl	8000140 <__udivsi3>
 8008f00:	0003      	movs	r3, r0
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	60e3      	str	r3, [r4, #12]
      break;
 8008f06:	e02c      	b.n	8008f62 <UART_SetConfig+0x66a>
    case UART_CLOCKSOURCE_SYSCLK:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8008f08:	69fb      	ldr	r3, [r7, #28]
 8008f0a:	681c      	ldr	r4, [r3, #0]
 8008f0c:	f7fd fe28 	bl	8006b60 <HAL_RCC_GetSysClockFreq>
 8008f10:	0002      	movs	r2, r0
 8008f12:	69fb      	ldr	r3, [r7, #28]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	085b      	lsrs	r3, r3, #1
 8008f18:	18d2      	adds	r2, r2, r3
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	0019      	movs	r1, r3
 8008f20:	0010      	movs	r0, r2
 8008f22:	f7f7 f90d 	bl	8000140 <__udivsi3>
 8008f26:	0003      	movs	r3, r0
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	60e3      	str	r3, [r4, #12]
      break;
 8008f2c:	e019      	b.n	8008f62 <UART_SetConfig+0x66a>
    case UART_CLOCKSOURCE_LSE:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	681c      	ldr	r4, [r3, #0]
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	085b      	lsrs	r3, r3, #1
 8008f38:	2280      	movs	r2, #128	; 0x80
 8008f3a:	0212      	lsls	r2, r2, #8
 8008f3c:	189a      	adds	r2, r3, r2
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	0019      	movs	r1, r3
 8008f44:	0010      	movs	r0, r2
 8008f46:	f7f7 f8fb 	bl	8000140 <__udivsi3>
 8008f4a:	0003      	movs	r3, r0
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	60e3      	str	r3, [r4, #12]
      break;
 8008f50:	e007      	b.n	8008f62 <UART_SetConfig+0x66a>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8008f52:	230f      	movs	r3, #15
 8008f54:	2218      	movs	r2, #24
 8008f56:	4694      	mov	ip, r2
 8008f58:	44bc      	add	ip, r7
 8008f5a:	4463      	add	r3, ip
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	701a      	strb	r2, [r3, #0]
      break;
 8008f60:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8008f62:	230f      	movs	r3, #15
 8008f64:	2218      	movs	r2, #24
 8008f66:	4694      	mov	ip, r2
 8008f68:	44bc      	add	ip, r7
 8008f6a:	4463      	add	r3, ip
 8008f6c:	781b      	ldrb	r3, [r3, #0]

}
 8008f6e:	0018      	movs	r0, r3
 8008f70:	46bd      	mov	sp, r7
 8008f72:	b00c      	add	sp, #48	; 0x30
 8008f74:	bdb0      	pop	{r4, r5, r7, pc}
 8008f76:	46c0      	nop			; (mov r8, r8)
 8008f78:	0800e5f0 	.word	0x0800e5f0
 8008f7c:	40021000 	.word	0x40021000
 8008f80:	007a1200 	.word	0x007a1200
 8008f84:	01e84800 	.word	0x01e84800
 8008f88:	0800e614 	.word	0x0800e614
 8008f8c:	003d0900 	.word	0x003d0900
 8008f90:	00f42400 	.word	0x00f42400

08008f94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	4013      	ands	r3, r2
 8008fa4:	d00a      	beq.n	8008fbc <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	6812      	ldr	r2, [r2, #0]
 8008fae:	6852      	ldr	r2, [r2, #4]
 8008fb0:	4945      	ldr	r1, [pc, #276]	; (80090c8 <UART_AdvFeatureConfig+0x134>)
 8008fb2:	4011      	ands	r1, r2
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008fb8:	430a      	orrs	r2, r1
 8008fba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc0:	2202      	movs	r2, #2
 8008fc2:	4013      	ands	r3, r2
 8008fc4:	d00a      	beq.n	8008fdc <UART_AdvFeatureConfig+0x48>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	6812      	ldr	r2, [r2, #0]
 8008fce:	6852      	ldr	r2, [r2, #4]
 8008fd0:	493e      	ldr	r1, [pc, #248]	; (80090cc <UART_AdvFeatureConfig+0x138>)
 8008fd2:	4011      	ands	r1, r2
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008fd8:	430a      	orrs	r2, r1
 8008fda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe0:	2204      	movs	r2, #4
 8008fe2:	4013      	ands	r3, r2
 8008fe4:	d00a      	beq.n	8008ffc <UART_AdvFeatureConfig+0x68>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	6812      	ldr	r2, [r2, #0]
 8008fee:	6852      	ldr	r2, [r2, #4]
 8008ff0:	4937      	ldr	r1, [pc, #220]	; (80090d0 <UART_AdvFeatureConfig+0x13c>)
 8008ff2:	4011      	ands	r1, r2
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008ff8:	430a      	orrs	r2, r1
 8008ffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009000:	2208      	movs	r2, #8
 8009002:	4013      	ands	r3, r2
 8009004:	d00a      	beq.n	800901c <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	6812      	ldr	r2, [r2, #0]
 800900e:	6852      	ldr	r2, [r2, #4]
 8009010:	4930      	ldr	r1, [pc, #192]	; (80090d4 <UART_AdvFeatureConfig+0x140>)
 8009012:	4011      	ands	r1, r2
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009018:	430a      	orrs	r2, r1
 800901a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009020:	2210      	movs	r2, #16
 8009022:	4013      	ands	r3, r2
 8009024:	d00a      	beq.n	800903c <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	6812      	ldr	r2, [r2, #0]
 800902e:	6892      	ldr	r2, [r2, #8]
 8009030:	4929      	ldr	r1, [pc, #164]	; (80090d8 <UART_AdvFeatureConfig+0x144>)
 8009032:	4011      	ands	r1, r2
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009038:	430a      	orrs	r2, r1
 800903a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009040:	2220      	movs	r2, #32
 8009042:	4013      	ands	r3, r2
 8009044:	d00a      	beq.n	800905c <UART_AdvFeatureConfig+0xc8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	6812      	ldr	r2, [r2, #0]
 800904e:	6892      	ldr	r2, [r2, #8]
 8009050:	4922      	ldr	r1, [pc, #136]	; (80090dc <UART_AdvFeatureConfig+0x148>)
 8009052:	4011      	ands	r1, r2
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009058:	430a      	orrs	r2, r1
 800905a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009060:	2240      	movs	r2, #64	; 0x40
 8009062:	4013      	ands	r3, r2
 8009064:	d01b      	beq.n	800909e <UART_AdvFeatureConfig+0x10a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	6812      	ldr	r2, [r2, #0]
 800906e:	6852      	ldr	r2, [r2, #4]
 8009070:	491b      	ldr	r1, [pc, #108]	; (80090e0 <UART_AdvFeatureConfig+0x14c>)
 8009072:	4011      	ands	r1, r2
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009078:	430a      	orrs	r2, r1
 800907a:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009080:	2380      	movs	r3, #128	; 0x80
 8009082:	035b      	lsls	r3, r3, #13
 8009084:	429a      	cmp	r2, r3
 8009086:	d10a      	bne.n	800909e <UART_AdvFeatureConfig+0x10a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	6812      	ldr	r2, [r2, #0]
 8009090:	6852      	ldr	r2, [r2, #4]
 8009092:	4914      	ldr	r1, [pc, #80]	; (80090e4 <UART_AdvFeatureConfig+0x150>)
 8009094:	4011      	ands	r1, r2
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800909a:	430a      	orrs	r2, r1
 800909c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a2:	2280      	movs	r2, #128	; 0x80
 80090a4:	4013      	ands	r3, r2
 80090a6:	d00a      	beq.n	80090be <UART_AdvFeatureConfig+0x12a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	6812      	ldr	r2, [r2, #0]
 80090b0:	6852      	ldr	r2, [r2, #4]
 80090b2:	490d      	ldr	r1, [pc, #52]	; (80090e8 <UART_AdvFeatureConfig+0x154>)
 80090b4:	4011      	ands	r1, r2
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80090ba:	430a      	orrs	r2, r1
 80090bc:	605a      	str	r2, [r3, #4]
  }
}
 80090be:	46c0      	nop			; (mov r8, r8)
 80090c0:	46bd      	mov	sp, r7
 80090c2:	b002      	add	sp, #8
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	46c0      	nop			; (mov r8, r8)
 80090c8:	fffdffff 	.word	0xfffdffff
 80090cc:	fffeffff 	.word	0xfffeffff
 80090d0:	fffbffff 	.word	0xfffbffff
 80090d4:	ffff7fff 	.word	0xffff7fff
 80090d8:	ffffefff 	.word	0xffffefff
 80090dc:	ffffdfff 	.word	0xffffdfff
 80090e0:	ffefffff 	.word	0xffefffff
 80090e4:	ff9fffff 	.word	0xff9fffff
 80090e8:	fff7ffff 	.word	0xfff7ffff

080090ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b086      	sub	sp, #24
 80090f0:	af02      	add	r7, sp, #8
 80090f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80090f4:	2300      	movs	r3, #0
 80090f6:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80090fe:	f7fb fddb 	bl	8004cb8 <HAL_GetTick>
 8009102:	0003      	movs	r3, r0
 8009104:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2208      	movs	r2, #8
 800910e:	4013      	ands	r3, r2
 8009110:	2b08      	cmp	r3, #8
 8009112:	d10d      	bne.n	8009130 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	2380      	movs	r3, #128	; 0x80
 8009118:	0399      	lsls	r1, r3, #14
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	4b17      	ldr	r3, [pc, #92]	; (800917c <UART_CheckIdleState+0x90>)
 800911e:	9300      	str	r3, [sp, #0]
 8009120:	0013      	movs	r3, r2
 8009122:	2200      	movs	r2, #0
 8009124:	f000 f82c 	bl	8009180 <UART_WaitOnFlagUntilTimeout>
 8009128:	1e03      	subs	r3, r0, #0
 800912a:	d001      	beq.n	8009130 <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800912c:	2303      	movs	r3, #3
 800912e:	e021      	b.n	8009174 <UART_CheckIdleState+0x88>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	2204      	movs	r2, #4
 8009138:	4013      	ands	r3, r2
 800913a:	2b04      	cmp	r3, #4
 800913c:	d10d      	bne.n	800915a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800913e:	68fa      	ldr	r2, [r7, #12]
 8009140:	2380      	movs	r3, #128	; 0x80
 8009142:	03d9      	lsls	r1, r3, #15
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	4b0d      	ldr	r3, [pc, #52]	; (800917c <UART_CheckIdleState+0x90>)
 8009148:	9300      	str	r3, [sp, #0]
 800914a:	0013      	movs	r3, r2
 800914c:	2200      	movs	r2, #0
 800914e:	f000 f817 	bl	8009180 <UART_WaitOnFlagUntilTimeout>
 8009152:	1e03      	subs	r3, r0, #0
 8009154:	d001      	beq.n	800915a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009156:	2303      	movs	r3, #3
 8009158:	e00c      	b.n	8009174 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2269      	movs	r2, #105	; 0x69
 800915e:	2120      	movs	r1, #32
 8009160:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	226a      	movs	r2, #106	; 0x6a
 8009166:	2120      	movs	r1, #32
 8009168:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2268      	movs	r2, #104	; 0x68
 800916e:	2100      	movs	r1, #0
 8009170:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009172:	2300      	movs	r3, #0
}
 8009174:	0018      	movs	r0, r3
 8009176:	46bd      	mov	sp, r7
 8009178:	b004      	add	sp, #16
 800917a:	bd80      	pop	{r7, pc}
 800917c:	01ffffff 	.word	0x01ffffff

08009180 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	603b      	str	r3, [r7, #0]
 800918c:	1dfb      	adds	r3, r7, #7
 800918e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009190:	e02b      	b.n	80091ea <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8009192:	69bb      	ldr	r3, [r7, #24]
 8009194:	3301      	adds	r3, #1
 8009196:	d028      	beq.n	80091ea <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d007      	beq.n	80091ae <UART_WaitOnFlagUntilTimeout+0x2e>
 800919e:	f7fb fd8b 	bl	8004cb8 <HAL_GetTick>
 80091a2:	0002      	movs	r2, r0
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	1ad2      	subs	r2, r2, r3
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d91d      	bls.n	80091ea <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	68fa      	ldr	r2, [r7, #12]
 80091b4:	6812      	ldr	r2, [r2, #0]
 80091b6:	6812      	ldr	r2, [r2, #0]
 80091b8:	4916      	ldr	r1, [pc, #88]	; (8009214 <UART_WaitOnFlagUntilTimeout+0x94>)
 80091ba:	400a      	ands	r2, r1
 80091bc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68fa      	ldr	r2, [r7, #12]
 80091c4:	6812      	ldr	r2, [r2, #0]
 80091c6:	6892      	ldr	r2, [r2, #8]
 80091c8:	2101      	movs	r1, #1
 80091ca:	438a      	bics	r2, r1
 80091cc:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2269      	movs	r2, #105	; 0x69
 80091d2:	2120      	movs	r1, #32
 80091d4:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	226a      	movs	r2, #106	; 0x6a
 80091da:	2120      	movs	r1, #32
 80091dc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2268      	movs	r2, #104	; 0x68
 80091e2:	2100      	movs	r1, #0
 80091e4:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 80091e6:	2303      	movs	r3, #3
 80091e8:	e00f      	b.n	800920a <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	69db      	ldr	r3, [r3, #28]
 80091f0:	68ba      	ldr	r2, [r7, #8]
 80091f2:	401a      	ands	r2, r3
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	1ad3      	subs	r3, r2, r3
 80091f8:	425a      	negs	r2, r3
 80091fa:	4153      	adcs	r3, r2
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	001a      	movs	r2, r3
 8009200:	1dfb      	adds	r3, r7, #7
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	429a      	cmp	r2, r3
 8009206:	d0c4      	beq.n	8009192 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009208:	2300      	movs	r3, #0
}
 800920a:	0018      	movs	r0, r3
 800920c:	46bd      	mov	sp, r7
 800920e:	b004      	add	sp, #16
 8009210:	bd80      	pop	{r7, pc}
 8009212:	46c0      	nop			; (mov r8, r8)
 8009214:	fffffe5f 	.word	0xfffffe5f

08009218 <DelayMs>:
/* Includes ------------------------------------------------------------------*/
#include "hw.h"
#include "timeServer.h"

void DelayMs( uint32_t ms )
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  HW_RTC_DelayMs( ms );
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	0018      	movs	r0, r3
 8009224:	f000 fcd6 	bl	8009bd4 <HW_RTC_DelayMs>

}
 8009228:	46c0      	nop			; (mov r8, r8)
 800922a:	46bd      	mov	sp, r7
 800922c:	b002      	add	sp, #8
 800922e:	bd80      	pop	{r7, pc}

08009230 <LowPower_Disable>:
 * \brief API to set flag allowing power mode
 *
 * \param [IN] enum e_LOW_POWER_State_Id_t  
 */
void LowPower_Disable( e_LOW_POWER_State_Id_t state )
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b086      	sub	sp, #24
 8009234:	af00      	add	r7, sp, #0
 8009236:	0002      	movs	r2, r0
 8009238:	1dfb      	adds	r3, r7, #7
 800923a:	701a      	strb	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800923c:	f3ef 8310 	mrs	r3, PRIMASK
 8009240:	60fb      	str	r3, [r7, #12]
  return(result);
 8009242:	68fb      	ldr	r3, [r7, #12]
  BACKUP_PRIMASK();
 8009244:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009246:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  
  LowPower_State |= state;
 8009248:	1dfb      	adds	r3, r7, #7
 800924a:	781a      	ldrb	r2, [r3, #0]
 800924c:	4b06      	ldr	r3, [pc, #24]	; (8009268 <LowPower_Disable+0x38>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	431a      	orrs	r2, r3
 8009252:	4b05      	ldr	r3, [pc, #20]	; (8009268 <LowPower_Disable+0x38>)
 8009254:	601a      	str	r2, [r3, #0]
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	f383 8810 	msr	PRIMASK, r3

  RESTORE_PRIMASK( );
}
 8009260:	46c0      	nop			; (mov r8, r8)
 8009262:	46bd      	mov	sp, r7
 8009264:	b006      	add	sp, #24
 8009266:	bd80      	pop	{r7, pc}
 8009268:	200007d8 	.word	0x200007d8

0800926c <LowPower_Enable>:
 * \brief API to reset flag allowing power mode
 *
 * \param [IN] enum e_LOW_POWER_State_Id_t 
 */
void LowPower_Enable( e_LOW_POWER_State_Id_t state )
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b086      	sub	sp, #24
 8009270:	af00      	add	r7, sp, #0
 8009272:	0002      	movs	r2, r0
 8009274:	1dfb      	adds	r3, r7, #7
 8009276:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009278:	f3ef 8310 	mrs	r3, PRIMASK
 800927c:	60fb      	str	r3, [r7, #12]
  return(result);
 800927e:	68fb      	ldr	r3, [r7, #12]
  BACKUP_PRIMASK();
 8009280:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009282:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  
  LowPower_State &= ~state;
 8009284:	1dfb      	adds	r3, r7, #7
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	43db      	mvns	r3, r3
 800928a:	001a      	movs	r2, r3
 800928c:	4b06      	ldr	r3, [pc, #24]	; (80092a8 <LowPower_Enable+0x3c>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	401a      	ands	r2, r3
 8009292:	4b05      	ldr	r3, [pc, #20]	; (80092a8 <LowPower_Enable+0x3c>)
 8009294:	601a      	str	r2, [r3, #0]
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	f383 8810 	msr	PRIMASK, r3
  
  RESTORE_PRIMASK( );
}
 80092a0:	46c0      	nop			; (mov r8, r8)
 80092a2:	46bd      	mov	sp, r7
 80092a4:	b006      	add	sp, #24
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	200007d8 	.word	0x200007d8

080092ac <LowPower_GetState>:
 * \note When flag is 0, low power mode is allowed
 * \param [IN] state
 * \retval flag state 
 */
uint32_t LowPower_GetState( void )
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	af00      	add	r7, sp, #0
  return LowPower_State;
 80092b0:	4b02      	ldr	r3, [pc, #8]	; (80092bc <LowPower_GetState+0x10>)
 80092b2:	681b      	ldr	r3, [r3, #0]
}
 80092b4:	0018      	movs	r0, r3
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	46c0      	nop			; (mov r8, r8)
 80092bc:	200007d8 	.word	0x200007d8

080092c0 <TimerInit>:
static bool TimerExists( TimerEvent_t *obj );



void TimerInit( TimerEvent_t *obj, void ( *callback )( void ) )
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  obj->Timestamp = 0;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	601a      	str	r2, [r3, #0]
  obj->ReloadValue = 0;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	605a      	str	r2, [r3, #4]
  obj->IsRunning = false;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	721a      	strb	r2, [r3, #8]
  obj->Callback = callback;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	683a      	ldr	r2, [r7, #0]
 80092e0:	60da      	str	r2, [r3, #12]
  obj->Next = NULL;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	611a      	str	r2, [r3, #16]
}
 80092e8:	46c0      	nop			; (mov r8, r8)
 80092ea:	46bd      	mov	sp, r7
 80092ec:	b002      	add	sp, #8
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <TimerStart>:

void TimerStart( TimerEvent_t *obj )
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b088      	sub	sp, #32
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  uint32_t elapsedTime = 0;
 80092f8:	2300      	movs	r3, #0
 80092fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80092fc:	f3ef 8310 	mrs	r3, PRIMASK
 8009300:	617b      	str	r3, [r7, #20]
  return(result);
 8009302:	697b      	ldr	r3, [r7, #20]
  
  BACKUP_PRIMASK();
 8009304:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8009306:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  

  if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d005      	beq.n	800931a <TimerStart+0x2a>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	0018      	movs	r0, r3
 8009312:	f000 f97b 	bl	800960c <TimerExists>
 8009316:	1e03      	subs	r3, r0, #0
 8009318:	d005      	beq.n	8009326 <TimerStart+0x36>
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK( );
    return;
 8009324:	e030      	b.n	8009388 <TimerStart+0x98>
  }
  obj->Timestamp = obj->ReloadValue;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	685a      	ldr	r2, [r3, #4]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	601a      	str	r2, [r3, #0]
  obj->IsRunning = false;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	721a      	strb	r2, [r3, #8]

  if( TimerListHead == NULL )
 8009334:	4b16      	ldr	r3, [pc, #88]	; (8009390 <TimerStart+0xa0>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d106      	bne.n	800934a <TimerStart+0x5a>
  {
    HW_RTC_SetTimerContext( );
 800933c:	f000 fc6a 	bl	8009c14 <HW_RTC_SetTimerContext>
    TimerInsertNewHeadTimer( obj ); // insert a timeout at now+obj->Timestamp
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	0018      	movs	r0, r3
 8009344:	f000 f854 	bl	80093f0 <TimerInsertNewHeadTimer>
 8009348:	e019      	b.n	800937e <TimerStart+0x8e>
  }
  else 
  {
    elapsedTime = HW_RTC_GetTimerElapsedTime( );
 800934a:	f000 fbf3 	bl	8009b34 <HW_RTC_GetTimerElapsedTime>
 800934e:	0003      	movs	r3, r0
 8009350:	61fb      	str	r3, [r7, #28]
    obj->Timestamp += elapsedTime;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	18d2      	adds	r2, r2, r3
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	601a      	str	r2, [r3, #0]
  
    if( obj->Timestamp < TimerListHead->Timestamp )
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	4b0b      	ldr	r3, [pc, #44]	; (8009390 <TimerStart+0xa0>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	429a      	cmp	r2, r3
 800936a:	d204      	bcs.n	8009376 <TimerStart+0x86>
    {
      TimerInsertNewHeadTimer( obj);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	0018      	movs	r0, r3
 8009370:	f000 f83e 	bl	80093f0 <TimerInsertNewHeadTimer>
 8009374:	e003      	b.n	800937e <TimerStart+0x8e>
    }
    else
    {
      TimerInsertTimer( obj);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	0018      	movs	r0, r3
 800937a:	f000 f80b 	bl	8009394 <TimerInsertTimer>
 800937e:	69bb      	ldr	r3, [r7, #24]
 8009380:	60fb      	str	r3, [r7, #12]
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f383 8810 	msr	PRIMASK, r3
    }
  }
  RESTORE_PRIMASK( );
}
 8009388:	46bd      	mov	sp, r7
 800938a:	b008      	add	sp, #32
 800938c:	bd80      	pop	{r7, pc}
 800938e:	46c0      	nop			; (mov r8, r8)
 8009390:	200007dc 	.word	0x200007dc

08009394 <TimerInsertTimer>:

static void TimerInsertTimer( TimerEvent_t *obj)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 800939c:	4b13      	ldr	r3, [pc, #76]	; (80093ec <TimerInsertTimer+0x58>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	60fb      	str	r3, [r7, #12]
  TimerEvent_t* next = TimerListHead->Next;
 80093a2:	4b12      	ldr	r3, [pc, #72]	; (80093ec <TimerInsertTimer+0x58>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	691b      	ldr	r3, [r3, #16]
 80093a8:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 80093aa:	e012      	b.n	80093d2 <TimerInsertTimer+0x3e>
  {  
    if( obj->Timestamp  > next->Timestamp )
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d905      	bls.n	80093c4 <TimerInsertTimer+0x30>
    {
        cur = next;
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	691b      	ldr	r3, [r3, #16]
 80093c0:	60bb      	str	r3, [r7, #8]
 80093c2:	e006      	b.n	80093d2 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = obj;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	687a      	ldr	r2, [r7, #4]
 80093c8:	611a      	str	r2, [r3, #16]
        obj->Next = next;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	68ba      	ldr	r2, [r7, #8]
 80093ce:	611a      	str	r2, [r3, #16]
        return;
 80093d0:	e009      	b.n	80093e6 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	691b      	ldr	r3, [r3, #16]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d1e8      	bne.n	80093ac <TimerInsertTimer+0x18>

    }
  }
  cur->Next = obj;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	611a      	str	r2, [r3, #16]
  obj->Next = NULL;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	611a      	str	r2, [r3, #16]
}
 80093e6:	46bd      	mov	sp, r7
 80093e8:	b004      	add	sp, #16
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	200007dc 	.word	0x200007dc

080093f0 <TimerInsertNewHeadTimer>:

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 80093f8:	4b0b      	ldr	r3, [pc, #44]	; (8009428 <TimerInsertNewHeadTimer+0x38>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d002      	beq.n	800940a <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsRunning = false;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2200      	movs	r2, #0
 8009408:	721a      	strb	r2, [r3, #8]
  }

  obj->Next = cur;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	68fa      	ldr	r2, [r7, #12]
 800940e:	611a      	str	r2, [r3, #16]
  TimerListHead = obj;
 8009410:	4b05      	ldr	r3, [pc, #20]	; (8009428 <TimerInsertNewHeadTimer+0x38>)
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	601a      	str	r2, [r3, #0]
  TimerSetTimeout( TimerListHead );
 8009416:	4b04      	ldr	r3, [pc, #16]	; (8009428 <TimerInsertNewHeadTimer+0x38>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	0018      	movs	r0, r3
 800941c:	f000 f937 	bl	800968e <TimerSetTimeout>
}
 8009420:	46c0      	nop			; (mov r8, r8)
 8009422:	46bd      	mov	sp, r7
 8009424:	b004      	add	sp, #16
 8009426:	bd80      	pop	{r7, pc}
 8009428:	200007dc 	.word	0x200007dc

0800942c <TimerIrqHandler>:

void TimerIrqHandler( void )
{
 800942c:	b590      	push	{r4, r7, lr}
 800942e:	b087      	sub	sp, #28
 8009430:	af00      	add	r7, sp, #0
  TimerEvent_t* cur;
  TimerEvent_t* next;
  

  
  uint32_t old =  HW_RTC_GetTimerContext( );
 8009432:	f000 fc05 	bl	8009c40 <HW_RTC_GetTimerContext>
 8009436:	0003      	movs	r3, r0
 8009438:	613b      	str	r3, [r7, #16]
  uint32_t now =  HW_RTC_SetTimerContext( );
 800943a:	f000 fbeb 	bl	8009c14 <HW_RTC_SetTimerContext>
 800943e:	0003      	movs	r3, r0
 8009440:	60fb      	str	r3, [r7, #12]
  uint32_t DeltaContext = now - old; //intentionnal wrap around
 8009442:	68fa      	ldr	r2, [r7, #12]
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	1ad3      	subs	r3, r2, r3
 8009448:	60bb      	str	r3, [r7, #8]
  
  /* update timeStamp based upon new Time Reference*/
  /* beacuse delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 800944a:	4b33      	ldr	r3, [pc, #204]	; (8009518 <TimerIrqHandler+0xec>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d01c      	beq.n	800948c <TimerIrqHandler+0x60>
  {
    for (cur=TimerListHead; cur->Next != NULL; cur= cur->Next)
 8009452:	4b31      	ldr	r3, [pc, #196]	; (8009518 <TimerIrqHandler+0xec>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	617b      	str	r3, [r7, #20]
 8009458:	e014      	b.n	8009484 <TimerIrqHandler+0x58>
    {
      next =cur->Next;
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	607b      	str	r3, [r7, #4]
      if (next->Timestamp > DeltaContext)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	429a      	cmp	r2, r3
 8009468:	d906      	bls.n	8009478 <TimerIrqHandler+0x4c>
      {
        next->Timestamp -= DeltaContext;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	1ad2      	subs	r2, r2, r3
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	601a      	str	r2, [r3, #0]
 8009476:	e002      	b.n	800947e <TimerIrqHandler+0x52>
      }
      else
      {
        next->Timestamp = 0 ;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	601a      	str	r2, [r3, #0]
    for (cur=TimerListHead; cur->Next != NULL; cur= cur->Next)
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	617b      	str	r3, [r7, #20]
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	691b      	ldr	r3, [r3, #16]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d1e6      	bne.n	800945a <TimerIrqHandler+0x2e>
      }
    }
  }
  
  /* execute imediately the alarm callback */
  if ( TimerListHead != NULL )
 800948c:	4b22      	ldr	r3, [pc, #136]	; (8009518 <TimerIrqHandler+0xec>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d020      	beq.n	80094d6 <TimerIrqHandler+0xaa>
  {
    cur = TimerListHead;
 8009494:	4b20      	ldr	r3, [pc, #128]	; (8009518 <TimerIrqHandler+0xec>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	617b      	str	r3, [r7, #20]
    TimerListHead = TimerListHead->Next;
 800949a:	4b1f      	ldr	r3, [pc, #124]	; (8009518 <TimerIrqHandler+0xec>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	691a      	ldr	r2, [r3, #16]
 80094a0:	4b1d      	ldr	r3, [pc, #116]	; (8009518 <TimerIrqHandler+0xec>)
 80094a2:	601a      	str	r2, [r3, #0]
    exec_cb( cur->Callback );
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d100      	bne.n	80094ae <TimerIrqHandler+0x82>
 80094ac:	e7fe      	b.n	80094ac <TimerIrqHandler+0x80>
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	4798      	blx	r3
  }


  // remove all the expired object from the list
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 80094b4:	e00f      	b.n	80094d6 <TimerIrqHandler+0xaa>
  {
   cur = TimerListHead;
 80094b6:	4b18      	ldr	r3, [pc, #96]	; (8009518 <TimerIrqHandler+0xec>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	617b      	str	r3, [r7, #20]
   TimerListHead = TimerListHead->Next;
 80094bc:	4b16      	ldr	r3, [pc, #88]	; (8009518 <TimerIrqHandler+0xec>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	691a      	ldr	r2, [r3, #16]
 80094c2:	4b15      	ldr	r3, [pc, #84]	; (8009518 <TimerIrqHandler+0xec>)
 80094c4:	601a      	str	r2, [r3, #0]
   exec_cb( cur->Callback );
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	68db      	ldr	r3, [r3, #12]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d100      	bne.n	80094d0 <TimerIrqHandler+0xa4>
 80094ce:	e7fe      	b.n	80094ce <TimerIrqHandler+0xa2>
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	4798      	blx	r3
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 80094d6:	4b10      	ldr	r3, [pc, #64]	; (8009518 <TimerIrqHandler+0xec>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d007      	beq.n	80094ee <TimerIrqHandler+0xc2>
 80094de:	4b0e      	ldr	r3, [pc, #56]	; (8009518 <TimerIrqHandler+0xec>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	681c      	ldr	r4, [r3, #0]
 80094e4:	f000 fb26 	bl	8009b34 <HW_RTC_GetTimerElapsedTime>
 80094e8:	0003      	movs	r3, r0
 80094ea:	429c      	cmp	r4, r3
 80094ec:	d3e3      	bcc.n	80094b6 <TimerIrqHandler+0x8a>
  }

  /* start the next TimerListHead if it exists AND NOT running */
  if(( TimerListHead != NULL ) && (TimerListHead->IsRunning == false))
 80094ee:	4b0a      	ldr	r3, [pc, #40]	; (8009518 <TimerIrqHandler+0xec>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d00c      	beq.n	8009510 <TimerIrqHandler+0xe4>
 80094f6:	4b08      	ldr	r3, [pc, #32]	; (8009518 <TimerIrqHandler+0xec>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	7a1b      	ldrb	r3, [r3, #8]
 80094fc:	2201      	movs	r2, #1
 80094fe:	4053      	eors	r3, r2
 8009500:	b2db      	uxtb	r3, r3
 8009502:	2b00      	cmp	r3, #0
 8009504:	d004      	beq.n	8009510 <TimerIrqHandler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 8009506:	4b04      	ldr	r3, [pc, #16]	; (8009518 <TimerIrqHandler+0xec>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	0018      	movs	r0, r3
 800950c:	f000 f8bf 	bl	800968e <TimerSetTimeout>
  }
}
 8009510:	46c0      	nop			; (mov r8, r8)
 8009512:	46bd      	mov	sp, r7
 8009514:	b007      	add	sp, #28
 8009516:	bd90      	pop	{r4, r7, pc}
 8009518:	200007dc 	.word	0x200007dc

0800951c <TimerStop>:

void TimerStop( TimerEvent_t *obj ) 
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b088      	sub	sp, #32
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009524:	f3ef 8310 	mrs	r3, PRIMASK
 8009528:	613b      	str	r3, [r7, #16]
  return(result);
 800952a:	693b      	ldr	r3, [r7, #16]
  BACKUP_PRIMASK();
 800952c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800952e:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  
  TimerEvent_t* prev = TimerListHead;
 8009530:	4b35      	ldr	r3, [pc, #212]	; (8009608 <TimerStop+0xec>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	61fb      	str	r3, [r7, #28]
  TimerEvent_t* cur = TimerListHead;
 8009536:	4b34      	ldr	r3, [pc, #208]	; (8009608 <TimerStop+0xec>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	61bb      	str	r3, [r7, #24]

  // List is empty or the Obj to stop does not exist 
  if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 800953c:	4b32      	ldr	r3, [pc, #200]	; (8009608 <TimerStop+0xec>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d002      	beq.n	800954a <TimerStop+0x2e>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d105      	bne.n	8009556 <TimerStop+0x3a>
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK( );
    return;
 8009554:	e054      	b.n	8009600 <TimerStop+0xe4>
  }

  if( TimerListHead == obj ) // Stop the Head                  
 8009556:	4b2c      	ldr	r3, [pc, #176]	; (8009608 <TimerStop+0xec>)
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	429a      	cmp	r2, r3
 800955e:	d147      	bne.n	80095f0 <TimerStop+0xd4>
  {
    if( TimerListHead->IsRunning == true ) // The head is already running 
 8009560:	4b29      	ldr	r3, [pc, #164]	; (8009608 <TimerStop+0xec>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	7a1b      	ldrb	r3, [r3, #8]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d019      	beq.n	800959e <TimerStop+0x82>
    {    
      if( TimerListHead->Next != NULL )
 800956a:	4b27      	ldr	r3, [pc, #156]	; (8009608 <TimerStop+0xec>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	691b      	ldr	r3, [r3, #16]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d00e      	beq.n	8009592 <TimerStop+0x76>
      {
        TimerListHead->IsRunning = false;
 8009574:	4b24      	ldr	r3, [pc, #144]	; (8009608 <TimerStop+0xec>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	2200      	movs	r2, #0
 800957a:	721a      	strb	r2, [r3, #8]
        TimerListHead = TimerListHead->Next;
 800957c:	4b22      	ldr	r3, [pc, #136]	; (8009608 <TimerStop+0xec>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	691a      	ldr	r2, [r3, #16]
 8009582:	4b21      	ldr	r3, [pc, #132]	; (8009608 <TimerStop+0xec>)
 8009584:	601a      	str	r2, [r3, #0]
        TimerSetTimeout( TimerListHead );
 8009586:	4b20      	ldr	r3, [pc, #128]	; (8009608 <TimerStop+0xec>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	0018      	movs	r0, r3
 800958c:	f000 f87f 	bl	800968e <TimerSetTimeout>
 8009590:	e031      	b.n	80095f6 <TimerStop+0xda>
      }
      else
      {
        HW_RTC_StopAlarm( );
 8009592:	f000 faf7 	bl	8009b84 <HW_RTC_StopAlarm>
        TimerListHead = NULL;
 8009596:	4b1c      	ldr	r3, [pc, #112]	; (8009608 <TimerStop+0xec>)
 8009598:	2200      	movs	r2, #0
 800959a:	601a      	str	r2, [r3, #0]
 800959c:	e02b      	b.n	80095f6 <TimerStop+0xda>
      }
    }
    else // Stop the head before it is started
    {   
      if( TimerListHead->Next != NULL )   
 800959e:	4b1a      	ldr	r3, [pc, #104]	; (8009608 <TimerStop+0xec>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	691b      	ldr	r3, [r3, #16]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d005      	beq.n	80095b4 <TimerStop+0x98>
      {
        TimerListHead = TimerListHead->Next;
 80095a8:	4b17      	ldr	r3, [pc, #92]	; (8009608 <TimerStop+0xec>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	691a      	ldr	r2, [r3, #16]
 80095ae:	4b16      	ldr	r3, [pc, #88]	; (8009608 <TimerStop+0xec>)
 80095b0:	601a      	str	r2, [r3, #0]
 80095b2:	e020      	b.n	80095f6 <TimerStop+0xda>
      }
      else
      {
        TimerListHead = NULL;
 80095b4:	4b14      	ldr	r3, [pc, #80]	; (8009608 <TimerStop+0xec>)
 80095b6:	2200      	movs	r2, #0
 80095b8:	601a      	str	r2, [r3, #0]
 80095ba:	e01c      	b.n	80095f6 <TimerStop+0xda>
  }
  else // Stop an object within the list
  {      
    while( cur != NULL )
    {
      if( cur == obj )
 80095bc:	69ba      	ldr	r2, [r7, #24]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d110      	bne.n	80095e6 <TimerStop+0xca>
      {
        if( cur->Next != NULL )
 80095c4:	69bb      	ldr	r3, [r7, #24]
 80095c6:	691b      	ldr	r3, [r3, #16]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d006      	beq.n	80095da <TimerStop+0xbe>
        {
          cur = cur->Next;
 80095cc:	69bb      	ldr	r3, [r7, #24]
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	61bb      	str	r3, [r7, #24]
          prev->Next = cur;
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	69ba      	ldr	r2, [r7, #24]
 80095d6:	611a      	str	r2, [r3, #16]
        else
        {
          cur = NULL;
          prev->Next = cur;
        }
        break;
 80095d8:	e00d      	b.n	80095f6 <TimerStop+0xda>
          cur = NULL;
 80095da:	2300      	movs	r3, #0
 80095dc:	61bb      	str	r3, [r7, #24]
          prev->Next = cur;
 80095de:	69fb      	ldr	r3, [r7, #28]
 80095e0:	69ba      	ldr	r2, [r7, #24]
 80095e2:	611a      	str	r2, [r3, #16]
        break;
 80095e4:	e007      	b.n	80095f6 <TimerStop+0xda>
      }
      else
      {
        prev = cur;
 80095e6:	69bb      	ldr	r3, [r7, #24]
 80095e8:	61fb      	str	r3, [r7, #28]
        cur = cur->Next;
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	691b      	ldr	r3, [r3, #16]
 80095ee:	61bb      	str	r3, [r7, #24]
    while( cur != NULL )
 80095f0:	69bb      	ldr	r3, [r7, #24]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d1e2      	bne.n	80095bc <TimerStop+0xa0>
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	60bb      	str	r3, [r7, #8]
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	f383 8810 	msr	PRIMASK, r3
      }
    }   
  }
  
  RESTORE_PRIMASK( );
}  
 8009600:	46bd      	mov	sp, r7
 8009602:	b008      	add	sp, #32
 8009604:	bd80      	pop	{r7, pc}
 8009606:	46c0      	nop			; (mov r8, r8)
 8009608:	200007dc 	.word	0x200007dc

0800960c <TimerExists>:
  
static bool TimerExists( TimerEvent_t *obj )
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 8009614:	4b0a      	ldr	r3, [pc, #40]	; (8009640 <TimerExists+0x34>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800961a:	e008      	b.n	800962e <TimerExists+0x22>
  {
    if( cur == obj )
 800961c:	68fa      	ldr	r2, [r7, #12]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	429a      	cmp	r2, r3
 8009622:	d101      	bne.n	8009628 <TimerExists+0x1c>
    {
      return true;
 8009624:	2301      	movs	r3, #1
 8009626:	e006      	b.n	8009636 <TimerExists+0x2a>
    }
    cur = cur->Next;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	691b      	ldr	r3, [r3, #16]
 800962c:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d1f3      	bne.n	800961c <TimerExists+0x10>
  }
  return false;
 8009634:	2300      	movs	r3, #0
}
 8009636:	0018      	movs	r0, r3
 8009638:	46bd      	mov	sp, r7
 800963a:	b004      	add	sp, #16
 800963c:	bd80      	pop	{r7, pc}
 800963e:	46c0      	nop			; (mov r8, r8)
 8009640:	200007dc 	.word	0x200007dc

08009644 <TimerSetValue>:
  TimerStop( obj );
  TimerStart( obj );
}

void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
  uint32_t minValue = 0;
 800964e:	2300      	movs	r3, #0
 8009650:	60bb      	str	r3, [r7, #8]
  uint32_t ticks = HW_RTC_ms2Tick( value );
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	0018      	movs	r0, r3
 8009656:	f000 fa25 	bl	8009aa4 <HW_RTC_ms2Tick>
 800965a:	0003      	movs	r3, r0
 800965c:	60fb      	str	r3, [r7, #12]

  TimerStop( obj );
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	0018      	movs	r0, r3
 8009662:	f7ff ff5b 	bl	800951c <TimerStop>

  minValue = HW_RTC_GetMinimumTimeout( );
 8009666:	f000 fa17 	bl	8009a98 <HW_RTC_GetMinimumTimeout>
 800966a:	0003      	movs	r3, r0
 800966c:	60bb      	str	r3, [r7, #8]
  
  if( ticks < minValue )
 800966e:	68fa      	ldr	r2, [r7, #12]
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	429a      	cmp	r2, r3
 8009674:	d201      	bcs.n	800967a <TimerSetValue+0x36>
  {
    ticks = minValue;
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	60fb      	str	r3, [r7, #12]
  }

  obj->Timestamp = ticks;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	601a      	str	r2, [r3, #0]
  obj->ReloadValue = ticks;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	68fa      	ldr	r2, [r7, #12]
 8009684:	605a      	str	r2, [r3, #4]
}
 8009686:	46c0      	nop			; (mov r8, r8)
 8009688:	46bd      	mov	sp, r7
 800968a:	b004      	add	sp, #16
 800968c:	bd80      	pop	{r7, pc}

0800968e <TimerSetTimeout>:
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 800968e:	b590      	push	{r4, r7, lr}
 8009690:	b085      	sub	sp, #20
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 8009696:	f000 f9ff 	bl	8009a98 <HW_RTC_GetMinimumTimeout>
 800969a:	0003      	movs	r3, r0
 800969c:	60fb      	str	r3, [r7, #12]
  obj->IsRunning = true; 
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2201      	movs	r2, #1
 80096a2:	721a      	strb	r2, [r3, #8]

  //in case deadline too soon
  if(obj->Timestamp  < (HW_RTC_GetTimerElapsedTime(  ) + minTicks) )
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681c      	ldr	r4, [r3, #0]
 80096a8:	f000 fa44 	bl	8009b34 <HW_RTC_GetTimerElapsedTime>
 80096ac:	0002      	movs	r2, r0
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	18d3      	adds	r3, r2, r3
 80096b2:	429c      	cmp	r4, r3
 80096b4:	d206      	bcs.n	80096c4 <TimerSetTimeout+0x36>
  {
    obj->Timestamp = HW_RTC_GetTimerElapsedTime(  ) + minTicks;
 80096b6:	f000 fa3d 	bl	8009b34 <HW_RTC_GetTimerElapsedTime>
 80096ba:	0002      	movs	r2, r0
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	18d2      	adds	r2, r2, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	601a      	str	r2, [r3, #0]
  }
  HW_RTC_SetAlarm( obj->Timestamp );
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	0018      	movs	r0, r3
 80096ca:	f000 fa03 	bl	8009ad4 <HW_RTC_SetAlarm>
}
 80096ce:	46c0      	nop			; (mov r8, r8)
 80096d0:	46bd      	mov	sp, r7
 80096d2:	b005      	add	sp, #20
 80096d4:	bd90      	pop	{r4, r7, pc}

080096d6 <memcpy1>:
{
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80096d6:	b580      	push	{r7, lr}
 80096d8:	b084      	sub	sp, #16
 80096da:	af00      	add	r7, sp, #0
 80096dc:	60f8      	str	r0, [r7, #12]
 80096de:	60b9      	str	r1, [r7, #8]
 80096e0:	1dbb      	adds	r3, r7, #6
 80096e2:	801a      	strh	r2, [r3, #0]
    while( size-- )
 80096e4:	e007      	b.n	80096f6 <memcpy1+0x20>
    {
        *dst++ = *src++;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	1c5a      	adds	r2, r3, #1
 80096ea:	60fa      	str	r2, [r7, #12]
 80096ec:	68ba      	ldr	r2, [r7, #8]
 80096ee:	1c51      	adds	r1, r2, #1
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	7812      	ldrb	r2, [r2, #0]
 80096f4:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80096f6:	1dbb      	adds	r3, r7, #6
 80096f8:	881b      	ldrh	r3, [r3, #0]
 80096fa:	1dba      	adds	r2, r7, #6
 80096fc:	1e59      	subs	r1, r3, #1
 80096fe:	8011      	strh	r1, [r2, #0]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d1f0      	bne.n	80096e6 <memcpy1+0x10>
    }
}
 8009704:	46c0      	nop			; (mov r8, r8)
 8009706:	46bd      	mov	sp, r7
 8009708:	b004      	add	sp, #16
 800970a:	bd80      	pop	{r7, pc}

0800970c <HAL_IncTick>:
//extern HAL_TickFreqTypeDef uwTickFreq;
uint8_t systick_missing_ms;

// Hal function
void HAL_IncTick(void)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	af00      	add	r7, sp, #0
	// Increase milliseconds
	uwTick += uwTickFreq;
 8009710:	2301      	movs	r3, #1
 8009712:	001a      	movs	r2, r3
 8009714:	4b04      	ldr	r3, [pc, #16]	; (8009728 <HAL_IncTick+0x1c>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	18d2      	adds	r2, r2, r3
 800971a:	4b03      	ldr	r3, [pc, #12]	; (8009728 <HAL_IncTick+0x1c>)
 800971c:	601a      	str	r2, [r3, #0]
//	// Millis increased, so reset the missing_ms to 0
//	systick_missing_ms = 0;

	// Reset COUNTFLAG by reading SysTick->CTRL register
	// TODO: This line might get ignored if compiler optimizer is on
	SysTick->CTRL;
 800971e:	4b03      	ldr	r3, [pc, #12]	; (800972c <HAL_IncTick+0x20>)
 8009720:	681b      	ldr	r3, [r3, #0]
}
 8009722:	46c0      	nop			; (mov r8, r8)
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}
 8009728:	20000f4c 	.word	0x20000f4c
 800972c:	e000e010 	.word	0xe000e010

08009730 <at_hal_init>:

void at_hal_init ()
{
 8009730:	b580      	push	{r7, lr}
 8009732:	af00      	add	r7, sp, #0
	// set load value for 1ms overflow
	SysTick->LOAD = CPU_FREQUENCY_MHZ * 1000 - 1; // (168000 - 1) = 0x2903F,
 8009734:	4b05      	ldr	r3, [pc, #20]	; (800974c <at_hal_init+0x1c>)
 8009736:	4a06      	ldr	r2, [pc, #24]	; (8009750 <at_hal_init+0x20>)
 8009738:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_TICKINT_Msk;
 800973a:	4b04      	ldr	r3, [pc, #16]	; (800974c <at_hal_init+0x1c>)
 800973c:	2207      	movs	r2, #7
 800973e:	601a      	str	r2, [r3, #0]
	SysTick->VAL = 0;
 8009740:	4b02      	ldr	r3, [pc, #8]	; (800974c <at_hal_init+0x1c>)
 8009742:	2200      	movs	r2, #0
 8009744:	609a      	str	r2, [r3, #8]
}
 8009746:	46c0      	nop			; (mov r8, r8)
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}
 800974c:	e000e010 	.word	0xe000e010
 8009750:	00007cff 	.word	0x00007cff

08009754 <Error_Handler>:
  * @brief Error_Handler
  * @param None
  * @retval None
  */
void Error_Handler(void)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	af00      	add	r7, sp, #0
  DBG_PRINTF("Error_Handler\n");
  while(1);
 8009758:	e7fe      	b.n	8009758 <Error_Handler+0x4>
	...

0800975c <HW_GPIO_Init>:
 *                   All port bits are not necessarily available on all GPIOs.
 * @param [IN] initStruct  GPIO_InitTypeDef intit structure
 * @retval none
 */
void HW_GPIO_Init( GPIO_TypeDef* port, uint16_t GPIO_Pin, GPIO_InitTypeDef* initStruct)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b08a      	sub	sp, #40	; 0x28
 8009760:	af00      	add	r7, sp, #0
 8009762:	60f8      	str	r0, [r7, #12]
 8009764:	607a      	str	r2, [r7, #4]
 8009766:	230a      	movs	r3, #10
 8009768:	18fb      	adds	r3, r7, r3
 800976a:	1c0a      	adds	r2, r1, #0
 800976c:	801a      	strh	r2, [r3, #0]

  RCC_GPIO_CLK_ENABLE(  (uint32_t) port);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	4a30      	ldr	r2, [pc, #192]	; (8009834 <HW_GPIO_Init+0xd8>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d01b      	beq.n	80097ae <HW_GPIO_Init+0x52>
 8009776:	4a2f      	ldr	r2, [pc, #188]	; (8009834 <HW_GPIO_Init+0xd8>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d804      	bhi.n	8009786 <HW_GPIO_Init+0x2a>
 800977c:	22a0      	movs	r2, #160	; 0xa0
 800977e:	05d2      	lsls	r2, r2, #23
 8009780:	4293      	cmp	r3, r2
 8009782:	d007      	beq.n	8009794 <HW_GPIO_Init+0x38>
 8009784:	e03a      	b.n	80097fc <HW_GPIO_Init+0xa0>
 8009786:	4a2c      	ldr	r2, [pc, #176]	; (8009838 <HW_GPIO_Init+0xdc>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d01d      	beq.n	80097c8 <HW_GPIO_Init+0x6c>
 800978c:	4a2b      	ldr	r2, [pc, #172]	; (800983c <HW_GPIO_Init+0xe0>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d027      	beq.n	80097e2 <HW_GPIO_Init+0x86>
 8009792:	e033      	b.n	80097fc <HW_GPIO_Init+0xa0>
 8009794:	4b2a      	ldr	r3, [pc, #168]	; (8009840 <HW_GPIO_Init+0xe4>)
 8009796:	4a2a      	ldr	r2, [pc, #168]	; (8009840 <HW_GPIO_Init+0xe4>)
 8009798:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800979a:	2101      	movs	r1, #1
 800979c:	430a      	orrs	r2, r1
 800979e:	62da      	str	r2, [r3, #44]	; 0x2c
 80097a0:	4b27      	ldr	r3, [pc, #156]	; (8009840 <HW_GPIO_Init+0xe4>)
 80097a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a4:	2201      	movs	r2, #1
 80097a6:	4013      	ands	r3, r2
 80097a8:	627b      	str	r3, [r7, #36]	; 0x24
 80097aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ac:	e032      	b.n	8009814 <HW_GPIO_Init+0xb8>
 80097ae:	4b24      	ldr	r3, [pc, #144]	; (8009840 <HW_GPIO_Init+0xe4>)
 80097b0:	4a23      	ldr	r2, [pc, #140]	; (8009840 <HW_GPIO_Init+0xe4>)
 80097b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80097b4:	2102      	movs	r1, #2
 80097b6:	430a      	orrs	r2, r1
 80097b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80097ba:	4b21      	ldr	r3, [pc, #132]	; (8009840 <HW_GPIO_Init+0xe4>)
 80097bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097be:	2202      	movs	r2, #2
 80097c0:	4013      	ands	r3, r2
 80097c2:	623b      	str	r3, [r7, #32]
 80097c4:	6a3b      	ldr	r3, [r7, #32]
 80097c6:	e025      	b.n	8009814 <HW_GPIO_Init+0xb8>
 80097c8:	4b1d      	ldr	r3, [pc, #116]	; (8009840 <HW_GPIO_Init+0xe4>)
 80097ca:	4a1d      	ldr	r2, [pc, #116]	; (8009840 <HW_GPIO_Init+0xe4>)
 80097cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80097ce:	2104      	movs	r1, #4
 80097d0:	430a      	orrs	r2, r1
 80097d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80097d4:	4b1a      	ldr	r3, [pc, #104]	; (8009840 <HW_GPIO_Init+0xe4>)
 80097d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d8:	2204      	movs	r2, #4
 80097da:	4013      	ands	r3, r2
 80097dc:	61fb      	str	r3, [r7, #28]
 80097de:	69fb      	ldr	r3, [r7, #28]
 80097e0:	e018      	b.n	8009814 <HW_GPIO_Init+0xb8>
 80097e2:	4b17      	ldr	r3, [pc, #92]	; (8009840 <HW_GPIO_Init+0xe4>)
 80097e4:	4a16      	ldr	r2, [pc, #88]	; (8009840 <HW_GPIO_Init+0xe4>)
 80097e6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80097e8:	2108      	movs	r1, #8
 80097ea:	430a      	orrs	r2, r1
 80097ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80097ee:	4b14      	ldr	r3, [pc, #80]	; (8009840 <HW_GPIO_Init+0xe4>)
 80097f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f2:	2208      	movs	r2, #8
 80097f4:	4013      	ands	r3, r2
 80097f6:	61bb      	str	r3, [r7, #24]
 80097f8:	69bb      	ldr	r3, [r7, #24]
 80097fa:	e00b      	b.n	8009814 <HW_GPIO_Init+0xb8>
 80097fc:	4b10      	ldr	r3, [pc, #64]	; (8009840 <HW_GPIO_Init+0xe4>)
 80097fe:	4a10      	ldr	r2, [pc, #64]	; (8009840 <HW_GPIO_Init+0xe4>)
 8009800:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009802:	2180      	movs	r1, #128	; 0x80
 8009804:	430a      	orrs	r2, r1
 8009806:	62da      	str	r2, [r3, #44]	; 0x2c
 8009808:	4b0d      	ldr	r3, [pc, #52]	; (8009840 <HW_GPIO_Init+0xe4>)
 800980a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800980c:	2280      	movs	r2, #128	; 0x80
 800980e:	4013      	ands	r3, r2
 8009810:	617b      	str	r3, [r7, #20]
 8009812:	697b      	ldr	r3, [r7, #20]

  initStruct->Pin = GPIO_Pin ;
 8009814:	230a      	movs	r3, #10
 8009816:	18fb      	adds	r3, r7, r3
 8009818:	881a      	ldrh	r2, [r3, #0]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	601a      	str	r2, [r3, #0]

  HAL_GPIO_Init( port, initStruct );
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	0011      	movs	r1, r2
 8009824:	0018      	movs	r0, r3
 8009826:	f7fb ff4b 	bl	80056c0 <HAL_GPIO_Init>
}
 800982a:	46c0      	nop			; (mov r8, r8)
 800982c:	46bd      	mov	sp, r7
 800982e:	b00a      	add	sp, #40	; 0x28
 8009830:	bd80      	pop	{r7, pc}
 8009832:	46c0      	nop			; (mov r8, r8)
 8009834:	50000400 	.word	0x50000400
 8009838:	50000800 	.word	0x50000800
 800983c:	50000c00 	.word	0x50000c00
 8009840:	40021000 	.word	0x40021000

08009844 <HW_GPIO_SetIrq>:
 * @param [IN] prio       NVIC priority (0 is highest)
 * @param [IN] irqHandler  points to the  function to execute
 * @retval none
 */
void HW_GPIO_SetIrq( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint32_t prio,  GpioIrqHandler *irqHandler )
{
 8009844:	b590      	push	{r4, r7, lr}
 8009846:	b087      	sub	sp, #28
 8009848:	af00      	add	r7, sp, #0
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	607a      	str	r2, [r7, #4]
 800984e:	603b      	str	r3, [r7, #0]
 8009850:	230a      	movs	r3, #10
 8009852:	18fb      	adds	r3, r7, r3
 8009854:	1c0a      	adds	r2, r1, #0
 8009856:	801a      	strh	r2, [r3, #0]
  IRQn_Type IRQnb;
  
  uint32_t BitPos = HW_GPIO_GetBitPos( GPIO_Pin ) ;
 8009858:	230a      	movs	r3, #10
 800985a:	18fb      	adds	r3, r7, r3
 800985c:	881b      	ldrh	r3, [r3, #0]
 800985e:	0018      	movs	r0, r3
 8009860:	f000 f85e 	bl	8009920 <HW_GPIO_GetBitPos>
 8009864:	0003      	movs	r3, r0
 8009866:	617b      	str	r3, [r7, #20]
  
  if ( irqHandler != NULL)
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d01e      	beq.n	80098ac <HW_GPIO_SetIrq+0x68>
  {
    GpioIrq[ BitPos ] = irqHandler;
 800986e:	4b11      	ldr	r3, [pc, #68]	; (80098b4 <HW_GPIO_SetIrq+0x70>)
 8009870:	697a      	ldr	r2, [r7, #20]
 8009872:	0092      	lsls	r2, r2, #2
 8009874:	6839      	ldr	r1, [r7, #0]
 8009876:	50d1      	str	r1, [r2, r3]

    IRQnb = MSP_GetIRQn( GPIO_Pin );
 8009878:	2313      	movs	r3, #19
 800987a:	18fc      	adds	r4, r7, r3
 800987c:	230a      	movs	r3, #10
 800987e:	18fb      	adds	r3, r7, r3
 8009880:	881b      	ldrh	r3, [r3, #0]
 8009882:	0018      	movs	r0, r3
 8009884:	f000 ff6d 	bl	800a762 <MSP_GetIRQn>
 8009888:	0003      	movs	r3, r0
 800988a:	7023      	strb	r3, [r4, #0]

    HAL_NVIC_SetPriority( IRQnb , prio, 0);
 800988c:	6879      	ldr	r1, [r7, #4]
 800988e:	2313      	movs	r3, #19
 8009890:	18fb      	adds	r3, r7, r3
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	b25b      	sxtb	r3, r3
 8009896:	2200      	movs	r2, #0
 8009898:	0018      	movs	r0, r3
 800989a:	f7fb fecb 	bl	8005634 <HAL_NVIC_SetPriority>
    
    HAL_NVIC_EnableIRQ( IRQnb );
 800989e:	2313      	movs	r3, #19
 80098a0:	18fb      	adds	r3, r7, r3
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	b25b      	sxtb	r3, r3
 80098a6:	0018      	movs	r0, r3
 80098a8:	f7fb feda 	bl	8005660 <HAL_NVIC_EnableIRQ>
  }
}
 80098ac:	46c0      	nop			; (mov r8, r8)
 80098ae:	46bd      	mov	sp, r7
 80098b0:	b007      	add	sp, #28
 80098b2:	bd90      	pop	{r4, r7, pc}
 80098b4:	200007e0 	.word	0x200007e0

080098b8 <HW_GPIO_IrqHandler>:
 *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
 *                   All port bits are not necessarily available on all GPIOs.
 * @retval none
 */
void HW_GPIO_IrqHandler( uint16_t GPIO_Pin )
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	0002      	movs	r2, r0
 80098c0:	1dbb      	adds	r3, r7, #6
 80098c2:	801a      	strh	r2, [r3, #0]
  uint32_t BitPos = HW_GPIO_GetBitPos( GPIO_Pin );
 80098c4:	1dbb      	adds	r3, r7, #6
 80098c6:	881b      	ldrh	r3, [r3, #0]
 80098c8:	0018      	movs	r0, r3
 80098ca:	f000 f829 	bl	8009920 <HW_GPIO_GetBitPos>
 80098ce:	0003      	movs	r3, r0
 80098d0:	60fb      	str	r3, [r7, #12]
  
  if ( GpioIrq[ BitPos ]  != NULL)
 80098d2:	4b07      	ldr	r3, [pc, #28]	; (80098f0 <HW_GPIO_IrqHandler+0x38>)
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	0092      	lsls	r2, r2, #2
 80098d8:	58d3      	ldr	r3, [r2, r3]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d004      	beq.n	80098e8 <HW_GPIO_IrqHandler+0x30>
  {
    GpioIrq[ BitPos ] ( );
 80098de:	4b04      	ldr	r3, [pc, #16]	; (80098f0 <HW_GPIO_IrqHandler+0x38>)
 80098e0:	68fa      	ldr	r2, [r7, #12]
 80098e2:	0092      	lsls	r2, r2, #2
 80098e4:	58d3      	ldr	r3, [r2, r3]
 80098e6:	4798      	blx	r3
  }
}
 80098e8:	46c0      	nop			; (mov r8, r8)
 80098ea:	46bd      	mov	sp, r7
 80098ec:	b004      	add	sp, #16
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	200007e0 	.word	0x200007e0

080098f4 <HW_GPIO_Write>:
 *                   All port bits are not necessarily available on all GPIOs.
 * @param [IN] value New GPIO output value
 * @retval none
 */
void HW_GPIO_Write( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,  uint32_t value )
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	607a      	str	r2, [r7, #4]
 80098fe:	230a      	movs	r3, #10
 8009900:	18fb      	adds	r3, r7, r3
 8009902:	1c0a      	adds	r2, r1, #0
 8009904:	801a      	strh	r2, [r3, #0]
  HAL_GPIO_WritePin( GPIOx, GPIO_Pin , (GPIO_PinState) value );
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	b2da      	uxtb	r2, r3
 800990a:	230a      	movs	r3, #10
 800990c:	18fb      	adds	r3, r7, r3
 800990e:	8819      	ldrh	r1, [r3, #0]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	0018      	movs	r0, r3
 8009914:	f7fc f852 	bl	80059bc <HAL_GPIO_WritePin>
}
 8009918:	46c0      	nop			; (mov r8, r8)
 800991a:	46bd      	mov	sp, r7
 800991c:	b004      	add	sp, #16
 800991e:	bd80      	pop	{r7, pc}

08009920 <HW_GPIO_GetBitPos>:
 *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
 *                   All port bits are not necessarily available on all GPIOs.
 * @retval the position of the bit
 */
static uint8_t HW_GPIO_GetBitPos(uint16_t GPIO_Pin)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	0002      	movs	r2, r0
 8009928:	1dbb      	adds	r3, r7, #6
 800992a:	801a      	strh	r2, [r3, #0]
  uint8_t PinPos=0;
 800992c:	230f      	movs	r3, #15
 800992e:	18fb      	adds	r3, r7, r3
 8009930:	2200      	movs	r2, #0
 8009932:	701a      	strb	r2, [r3, #0]
  
  if ( ( GPIO_Pin & 0xFF00 ) != 0) { PinPos |= 0x8; }
 8009934:	1dbb      	adds	r3, r7, #6
 8009936:	881a      	ldrh	r2, [r3, #0]
 8009938:	23ff      	movs	r3, #255	; 0xff
 800993a:	021b      	lsls	r3, r3, #8
 800993c:	4013      	ands	r3, r2
 800993e:	d007      	beq.n	8009950 <HW_GPIO_GetBitPos+0x30>
 8009940:	230f      	movs	r3, #15
 8009942:	18fb      	adds	r3, r7, r3
 8009944:	220f      	movs	r2, #15
 8009946:	18ba      	adds	r2, r7, r2
 8009948:	7812      	ldrb	r2, [r2, #0]
 800994a:	2108      	movs	r1, #8
 800994c:	430a      	orrs	r2, r1
 800994e:	701a      	strb	r2, [r3, #0]
  if ( ( GPIO_Pin & 0xF0F0 ) != 0) { PinPos |= 0x4; }
 8009950:	1dbb      	adds	r3, r7, #6
 8009952:	881b      	ldrh	r3, [r3, #0]
 8009954:	4a15      	ldr	r2, [pc, #84]	; (80099ac <HW_GPIO_GetBitPos+0x8c>)
 8009956:	4013      	ands	r3, r2
 8009958:	d007      	beq.n	800996a <HW_GPIO_GetBitPos+0x4a>
 800995a:	230f      	movs	r3, #15
 800995c:	18fb      	adds	r3, r7, r3
 800995e:	220f      	movs	r2, #15
 8009960:	18ba      	adds	r2, r7, r2
 8009962:	7812      	ldrb	r2, [r2, #0]
 8009964:	2104      	movs	r1, #4
 8009966:	430a      	orrs	r2, r1
 8009968:	701a      	strb	r2, [r3, #0]
  if ( ( GPIO_Pin & 0xCCCC ) != 0) { PinPos |= 0x2; }
 800996a:	1dbb      	adds	r3, r7, #6
 800996c:	881b      	ldrh	r3, [r3, #0]
 800996e:	4a10      	ldr	r2, [pc, #64]	; (80099b0 <HW_GPIO_GetBitPos+0x90>)
 8009970:	4013      	ands	r3, r2
 8009972:	d007      	beq.n	8009984 <HW_GPIO_GetBitPos+0x64>
 8009974:	230f      	movs	r3, #15
 8009976:	18fb      	adds	r3, r7, r3
 8009978:	220f      	movs	r2, #15
 800997a:	18ba      	adds	r2, r7, r2
 800997c:	7812      	ldrb	r2, [r2, #0]
 800997e:	2102      	movs	r1, #2
 8009980:	430a      	orrs	r2, r1
 8009982:	701a      	strb	r2, [r3, #0]
  if ( ( GPIO_Pin & 0xAAAA ) != 0) { PinPos |= 0x1; }
 8009984:	1dbb      	adds	r3, r7, #6
 8009986:	881b      	ldrh	r3, [r3, #0]
 8009988:	4a0a      	ldr	r2, [pc, #40]	; (80099b4 <HW_GPIO_GetBitPos+0x94>)
 800998a:	4013      	ands	r3, r2
 800998c:	d007      	beq.n	800999e <HW_GPIO_GetBitPos+0x7e>
 800998e:	230f      	movs	r3, #15
 8009990:	18fb      	adds	r3, r7, r3
 8009992:	220f      	movs	r2, #15
 8009994:	18ba      	adds	r2, r7, r2
 8009996:	7812      	ldrb	r2, [r2, #0]
 8009998:	2101      	movs	r1, #1
 800999a:	430a      	orrs	r2, r1
 800999c:	701a      	strb	r2, [r3, #0]
  
  return PinPos;
 800999e:	230f      	movs	r3, #15
 80099a0:	18fb      	adds	r3, r7, r3
 80099a2:	781b      	ldrb	r3, [r3, #0]
}
 80099a4:	0018      	movs	r0, r3
 80099a6:	46bd      	mov	sp, r7
 80099a8:	b004      	add	sp, #16
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	0000f0f0 	.word	0x0000f0f0
 80099b0:	0000cccc 	.word	0x0000cccc
 80099b4:	0000aaaa 	.word	0x0000aaaa

080099b8 <HW_RTC_Init>:
 * @note The timer is based on the RTC
 * @param none
 * @retval none
 */
void HW_RTC_Init( void )
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	af00      	add	r7, sp, #0
  if( HW_RTC_Initalized == false )
 80099bc:	4b09      	ldr	r3, [pc, #36]	; (80099e4 <HW_RTC_Init+0x2c>)
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	2201      	movs	r2, #1
 80099c2:	4053      	eors	r3, r2
 80099c4:	b2db      	uxtb	r3, r3
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d008      	beq.n	80099dc <HW_RTC_Init+0x24>
  {
    HW_RTC_SetConfig( );
 80099ca:	f000 f80d 	bl	80099e8 <HW_RTC_SetConfig>
    HW_RTC_SetAlarmConfig( );
 80099ce:	f000 f941 	bl	8009c54 <HW_RTC_SetAlarmConfig>
    HW_RTC_SetTimerContext( );
 80099d2:	f000 f91f 	bl	8009c14 <HW_RTC_SetTimerContext>
    HW_RTC_Initalized = true;
 80099d6:	4b03      	ldr	r3, [pc, #12]	; (80099e4 <HW_RTC_Init+0x2c>)
 80099d8:	2201      	movs	r2, #1
 80099da:	701a      	strb	r2, [r3, #0]
  }
}
 80099dc:	46c0      	nop			; (mov r8, r8)
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	46c0      	nop			; (mov r8, r8)
 80099e4:	20000820 	.word	0x20000820

080099e8 <HW_RTC_SetConfig>:
 * @note The timer is based on the RTC
 * @param none
 * @retval none
 */
static void HW_RTC_SetConfig( void )
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b086      	sub	sp, #24
 80099ec:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  RtcHandle.Instance = RTC;
 80099ee:	4b27      	ldr	r3, [pc, #156]	; (8009a8c <HW_RTC_SetConfig+0xa4>)
 80099f0:	4a27      	ldr	r2, [pc, #156]	; (8009a90 <HW_RTC_SetConfig+0xa8>)
 80099f2:	601a      	str	r2, [r3, #0]

  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 80099f4:	4b25      	ldr	r3, [pc, #148]	; (8009a8c <HW_RTC_SetConfig+0xa4>)
 80099f6:	2200      	movs	r2, #0
 80099f8:	605a      	str	r2, [r3, #4]
  RtcHandle.Init.AsynchPrediv = PREDIV_A; /* RTC_ASYNCH_PREDIV; */
 80099fa:	4b24      	ldr	r3, [pc, #144]	; (8009a8c <HW_RTC_SetConfig+0xa4>)
 80099fc:	221f      	movs	r2, #31
 80099fe:	609a      	str	r2, [r3, #8]
  RtcHandle.Init.SynchPrediv = PREDIV_S; /* RTC_SYNCH_PREDIV; */
 8009a00:	4b22      	ldr	r3, [pc, #136]	; (8009a8c <HW_RTC_SetConfig+0xa4>)
 8009a02:	4a24      	ldr	r2, [pc, #144]	; (8009a94 <HW_RTC_SetConfig+0xac>)
 8009a04:	60da      	str	r2, [r3, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT;
 8009a06:	4b21      	ldr	r3, [pc, #132]	; (8009a8c <HW_RTC_SetConfig+0xa4>)
 8009a08:	2200      	movs	r2, #0
 8009a0a:	611a      	str	r2, [r3, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8009a0c:	4b1f      	ldr	r3, [pc, #124]	; (8009a8c <HW_RTC_SetConfig+0xa4>)
 8009a0e:	2200      	movs	r2, #0
 8009a10:	619a      	str	r2, [r3, #24]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009a12:	4b1e      	ldr	r3, [pc, #120]	; (8009a8c <HW_RTC_SetConfig+0xa4>)
 8009a14:	2200      	movs	r2, #0
 8009a16:	61da      	str	r2, [r3, #28]

  HAL_RTC_Init( &RtcHandle );
 8009a18:	4b1c      	ldr	r3, [pc, #112]	; (8009a8c <HW_RTC_SetConfig+0xa4>)
 8009a1a:	0018      	movs	r0, r3
 8009a1c:	f7fd fcee 	bl	80073fc <HAL_RTC_Init>
  
  /*Monday 1st January 2016*/
  RTC_DateStruct.Year = 16;
 8009a20:	003b      	movs	r3, r7
 8009a22:	2210      	movs	r2, #16
 8009a24:	70da      	strb	r2, [r3, #3]
  RTC_DateStruct.Month = RTC_MONTH_JANUARY;
 8009a26:	003b      	movs	r3, r7
 8009a28:	2201      	movs	r2, #1
 8009a2a:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct.Date = 1;
 8009a2c:	003b      	movs	r3, r7
 8009a2e:	2201      	movs	r2, #1
 8009a30:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct.WeekDay = RTC_WEEKDAY_MONDAY;
 8009a32:	003b      	movs	r3, r7
 8009a34:	2201      	movs	r2, #1
 8009a36:	701a      	strb	r2, [r3, #0]
  HAL_RTC_SetDate(&RtcHandle , &RTC_DateStruct, RTC_FORMAT_BIN);
 8009a38:	0039      	movs	r1, r7
 8009a3a:	4b14      	ldr	r3, [pc, #80]	; (8009a8c <HW_RTC_SetConfig+0xa4>)
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	0018      	movs	r0, r3
 8009a40:	f7fd fe8c 	bl	800775c <HAL_RTC_SetDate>
  
  /*at 0:0:0*/
  RTC_TimeStruct.Hours = 0;
 8009a44:	1d3b      	adds	r3, r7, #4
 8009a46:	2200      	movs	r2, #0
 8009a48:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct.Minutes = 0;
 8009a4a:	1d3b      	adds	r3, r7, #4
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	705a      	strb	r2, [r3, #1]

  RTC_TimeStruct.Seconds = 0;
 8009a50:	1d3b      	adds	r3, r7, #4
 8009a52:	2200      	movs	r2, #0
 8009a54:	709a      	strb	r2, [r3, #2]
  RTC_TimeStruct.TimeFormat = 0;
 8009a56:	1d3b      	adds	r3, r7, #4
 8009a58:	2200      	movs	r2, #0
 8009a5a:	70da      	strb	r2, [r3, #3]
  RTC_TimeStruct.SubSeconds = 0;
 8009a5c:	1d3b      	adds	r3, r7, #4
 8009a5e:	2200      	movs	r2, #0
 8009a60:	605a      	str	r2, [r3, #4]
  RTC_TimeStruct.StoreOperation = RTC_DAYLIGHTSAVING_NONE;
 8009a62:	1d3b      	adds	r3, r7, #4
 8009a64:	2200      	movs	r2, #0
 8009a66:	611a      	str	r2, [r3, #16]
  RTC_TimeStruct.DayLightSaving = RTC_STOREOPERATION_RESET;
 8009a68:	1d3b      	adds	r3, r7, #4
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	60da      	str	r2, [r3, #12]
  
  HAL_RTC_SetTime(&RtcHandle , &RTC_TimeStruct, RTC_FORMAT_BIN);
 8009a6e:	1d39      	adds	r1, r7, #4
 8009a70:	4b06      	ldr	r3, [pc, #24]	; (8009a8c <HW_RTC_SetConfig+0xa4>)
 8009a72:	2200      	movs	r2, #0
 8009a74:	0018      	movs	r0, r3
 8009a76:	f7fd fd45 	bl	8007504 <HAL_RTC_SetTime>
  
 /*Enable Direct Read of the calendar registers (not through Shadow) */
  HAL_RTCEx_EnableBypassShadow(&RtcHandle);
 8009a7a:	4b04      	ldr	r3, [pc, #16]	; (8009a8c <HW_RTC_SetConfig+0xa4>)
 8009a7c:	0018      	movs	r0, r3
 8009a7e:	f7fe fa70 	bl	8007f62 <HAL_RTCEx_EnableBypassShadow>
}
 8009a82:	46c0      	nop			; (mov r8, r8)
 8009a84:	46bd      	mov	sp, r7
 8009a86:	b006      	add	sp, #24
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	46c0      	nop			; (mov r8, r8)
 8009a8c:	20000824 	.word	0x20000824
 8009a90:	40002800 	.word	0x40002800
 8009a94:	000003ff 	.word	0x000003ff

08009a98 <HW_RTC_GetMinimumTimeout>:
 * @brief returns the wake up time in ticks
 * @param none
 * @retval wake up time in ticks
 */
uint32_t HW_RTC_GetMinimumTimeout( void )
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	af00      	add	r7, sp, #0
  return( MIN_ALARM_DELAY );
 8009a9c:	2303      	movs	r3, #3
}
 8009a9e:	0018      	movs	r0, r3
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <HW_RTC_ms2Tick>:
 * @brief converts time in ms to time in ticks
 * @param [IN] time in milliseconds
 * @retval returns time in timer ticks
 */
uint32_t HW_RTC_ms2Tick( TimerTime_t timeMicroSec )
{
 8009aa4:	b5b0      	push	{r4, r5, r7, lr}
 8009aa6:	b082      	sub	sp, #8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
/*return( ( timeMicroSec / RTC_ALARM_TIME_BASE ) ); */
  return ( uint32_t) ( ( ((uint64_t)timeMicroSec) * CONV_DENOM ) / CONV_NUMER );
 8009aac:	6879      	ldr	r1, [r7, #4]
 8009aae:	000a      	movs	r2, r1
 8009ab0:	2100      	movs	r1, #0
 8009ab2:	000b      	movs	r3, r1
 8009ab4:	0e51      	lsrs	r1, r2, #25
 8009ab6:	01dd      	lsls	r5, r3, #7
 8009ab8:	430d      	orrs	r5, r1
 8009aba:	01d4      	lsls	r4, r2, #7
 8009abc:	227d      	movs	r2, #125	; 0x7d
 8009abe:	2300      	movs	r3, #0
 8009ac0:	0020      	movs	r0, r4
 8009ac2:	0029      	movs	r1, r5
 8009ac4:	f7f6 fcf0 	bl	80004a8 <__aeabi_uldivmod>
 8009ac8:	0003      	movs	r3, r0
 8009aca:	000c      	movs	r4, r1
}
 8009acc:	0018      	movs	r0, r3
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	b002      	add	sp, #8
 8009ad2:	bdb0      	pop	{r4, r5, r7, pc}

08009ad4 <HW_RTC_SetAlarm>:
 * @brief Set the alarm
 * @note The alarm is set at now (read in this funtion) + timeout
 * @param timeout Duration of the Timer ticks
 */
void HW_RTC_SetAlarm( uint32_t timeout )
{
 8009ad4:	b590      	push	{r4, r7, lr}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  /* we don't go in Low Power mode for timeout below MIN_ALARM_DELAY */
  if ( (MIN_ALARM_DELAY + McuWakeUpTimeCal ) < ((timeout - HW_RTC_GetTimerElapsedTime( ) )) )
 8009adc:	4b14      	ldr	r3, [pc, #80]	; (8009b30 <HW_RTC_SetAlarm+0x5c>)
 8009ade:	2200      	movs	r2, #0
 8009ae0:	5e9b      	ldrsh	r3, [r3, r2]
 8009ae2:	3303      	adds	r3, #3
 8009ae4:	001c      	movs	r4, r3
 8009ae6:	f000 f825 	bl	8009b34 <HW_RTC_GetTimerElapsedTime>
 8009aea:	0002      	movs	r2, r0
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	1a9b      	subs	r3, r3, r2
 8009af0:	429c      	cmp	r4, r3
 8009af2:	d203      	bcs.n	8009afc <HW_RTC_SetAlarm+0x28>
  {
    LowPower_Enable( e_LOW_POWER_RTC );
 8009af4:	2001      	movs	r0, #1
 8009af6:	f7ff fbb9 	bl	800926c <LowPower_Enable>
 8009afa:	e002      	b.n	8009b02 <HW_RTC_SetAlarm+0x2e>
  }
  else
  {
    LowPower_Disable( e_LOW_POWER_RTC );
 8009afc:	2001      	movs	r0, #1
 8009afe:	f7ff fb97 	bl	8009230 <LowPower_Disable>
  }

  if( LowPower_GetState() == 0 )
 8009b02:	f7ff fbd3 	bl	80092ac <LowPower_GetState>
 8009b06:	1e03      	subs	r3, r0, #0
 8009b08:	d109      	bne.n	8009b1e <HW_RTC_SetAlarm+0x4a>
  {
    LowPower_Enable( e_LOW_POWER_RTC );
 8009b0a:	2001      	movs	r0, #1
 8009b0c:	f7ff fbae 	bl	800926c <LowPower_Enable>
    timeout = timeout -  McuWakeUpTimeCal;
 8009b10:	4b07      	ldr	r3, [pc, #28]	; (8009b30 <HW_RTC_SetAlarm+0x5c>)
 8009b12:	2200      	movs	r2, #0
 8009b14:	5e9b      	ldrsh	r3, [r3, r2]
 8009b16:	001a      	movs	r2, r3
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	1a9b      	subs	r3, r3, r2
 8009b1c:	607b      	str	r3, [r7, #4]
  }

  HW_RTC_StartWakeUpAlarm( timeout );
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	0018      	movs	r0, r3
 8009b22:	f000 f8a5 	bl	8009c70 <HW_RTC_StartWakeUpAlarm>
}
 8009b26:	46c0      	nop			; (mov r8, r8)
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	b003      	add	sp, #12
 8009b2c:	bd90      	pop	{r4, r7, pc}
 8009b2e:	46c0      	nop			; (mov r8, r8)
 8009b30:	20000822 	.word	0x20000822

08009b34 <HW_RTC_GetTimerElapsedTime>:
 * @brief Get the RTC timer elapsed time since the last Alarm was set
 * @param none
 * @retval RTC Elapsed time in ticks
 */
uint32_t HW_RTC_GetTimerElapsedTime( void )
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b088      	sub	sp, #32
 8009b38:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;
  
  TimerTime_t CalendarValue = HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct );
 8009b3a:	2308      	movs	r3, #8
 8009b3c:	18fa      	adds	r2, r7, r3
 8009b3e:	1d3b      	adds	r3, r7, #4
 8009b40:	0011      	movs	r1, r2
 8009b42:	0018      	movs	r0, r3
 8009b44:	f000 fa26 	bl	8009f94 <HW_RTC_GetCalendarValue>
 8009b48:	0003      	movs	r3, r0
 8009b4a:	61fb      	str	r3, [r7, #28]

  return( ( uint32_t )( CalendarValue - RtcTimerContext.Rtc_Time ));
 8009b4c:	4b03      	ldr	r3, [pc, #12]	; (8009b5c <HW_RTC_GetTimerElapsedTime+0x28>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	69fa      	ldr	r2, [r7, #28]
 8009b52:	1ad3      	subs	r3, r2, r3
}
 8009b54:	0018      	movs	r0, r3
 8009b56:	46bd      	mov	sp, r7
 8009b58:	b008      	add	sp, #32
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	20000870 	.word	0x20000870

08009b60 <HW_RTC_GetTimerValue>:
 * @brief Get the RTC timer value
 * @param none
 * @retval RTC Timer value in ticks
 */
uint32_t HW_RTC_GetTimerValue( void )
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b088      	sub	sp, #32
 8009b64:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct );
 8009b66:	2308      	movs	r3, #8
 8009b68:	18fa      	adds	r2, r7, r3
 8009b6a:	1d3b      	adds	r3, r7, #4
 8009b6c:	0011      	movs	r1, r2
 8009b6e:	0018      	movs	r0, r3
 8009b70:	f000 fa10 	bl	8009f94 <HW_RTC_GetCalendarValue>
 8009b74:	0003      	movs	r3, r0
 8009b76:	61fb      	str	r3, [r7, #28]
  /**
   *
   * Find a way to pass RTC_TimeStruct to return.
   */

  return (CalendarValue);
 8009b78:	69fb      	ldr	r3, [r7, #28]

}
 8009b7a:	0018      	movs	r0, r3
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	b008      	add	sp, #32
 8009b80:	bd80      	pop	{r7, pc}
	...

08009b84 <HW_RTC_StopAlarm>:
 * @brief Stop the Alarm
 * @param none
 * @retval none
 */
void HW_RTC_StopAlarm( void )
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	af00      	add	r7, sp, #0

  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG( &RtcHandle, RTC_FLAG_ALRAF);
 8009b88:	4b09      	ldr	r3, [pc, #36]	; (8009bb0 <HW_RTC_StopAlarm+0x2c>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a08      	ldr	r2, [pc, #32]	; (8009bb0 <HW_RTC_StopAlarm+0x2c>)
 8009b8e:	6812      	ldr	r2, [r2, #0]
 8009b90:	68d2      	ldr	r2, [r2, #12]
 8009b92:	21ff      	movs	r1, #255	; 0xff
 8009b94:	400a      	ands	r2, r1
 8009b96:	4907      	ldr	r1, [pc, #28]	; (8009bb4 <HW_RTC_StopAlarm+0x30>)
 8009b98:	430a      	orrs	r2, r1
 8009b9a:	60da      	str	r2, [r3, #12]

  /* Disable the Alarm A interrupt */

  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A );
 8009b9c:	2380      	movs	r3, #128	; 0x80
 8009b9e:	005a      	lsls	r2, r3, #1
 8009ba0:	4b03      	ldr	r3, [pc, #12]	; (8009bb0 <HW_RTC_StopAlarm+0x2c>)
 8009ba2:	0011      	movs	r1, r2
 8009ba4:	0018      	movs	r0, r3
 8009ba6:	f7fe f857 	bl	8007c58 <HAL_RTC_DeactivateAlarm>
}
 8009baa:	46c0      	nop			; (mov r8, r8)
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	20000824 	.word	0x20000824
 8009bb4:	fffffe7f 	.word	0xfffffe7f

08009bb8 <HW_RTC_IrqHandler>:
 * @brief RTC IRQ Handler on the RTC Alarm
 * @param none
 * @retval none
 */
void HW_RTC_IrqHandler ( void )
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	af00      	add	r7, sp, #0
  /* enable low power at irq*/
  LowPower_Enable( e_LOW_POWER_RTC );
 8009bbc:	2001      	movs	r0, #1
 8009bbe:	f7ff fb55 	bl	800926c <LowPower_Enable>
  
  HAL_RTC_AlarmIRQHandler( &RtcHandle);
 8009bc2:	4b03      	ldr	r3, [pc, #12]	; (8009bd0 <HW_RTC_IrqHandler+0x18>)
 8009bc4:	0018      	movs	r0, r3
 8009bc6:	f7fe f8e9 	bl	8007d9c <HAL_RTC_AlarmIRQHandler>
}
 8009bca:	46c0      	nop			; (mov r8, r8)
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}
 8009bd0:	20000824 	.word	0x20000824

08009bd4 <HW_RTC_DelayMs>:
 * @brief a delay of delay ms by polling RTC
 * @param delay in ms
 * @retval none
 */
void HW_RTC_DelayMs( uint32_t delay )
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  TimerTime_t delayValue = 0;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	60fb      	str	r3, [r7, #12]
  TimerTime_t timeout = 0;
 8009be0:	2300      	movs	r3, #0
 8009be2:	60bb      	str	r3, [r7, #8]

  delayValue = HW_RTC_ms2Tick( delay );
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	0018      	movs	r0, r3
 8009be8:	f7ff ff5c 	bl	8009aa4 <HW_RTC_ms2Tick>
 8009bec:	0003      	movs	r3, r0
 8009bee:	60fb      	str	r3, [r7, #12]

  /* Wait delay ms */
  timeout = HW_RTC_GetTimerValue( );
 8009bf0:	f7ff ffb6 	bl	8009b60 <HW_RTC_GetTimerValue>
 8009bf4:	0003      	movs	r3, r0
 8009bf6:	60bb      	str	r3, [r7, #8]
  while( ( ( HW_RTC_GetTimerValue( ) - timeout ) ) < delayValue )
 8009bf8:	e000      	b.n	8009bfc <HW_RTC_DelayMs+0x28>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8009bfa:	46c0      	nop			; (mov r8, r8)
 8009bfc:	f7ff ffb0 	bl	8009b60 <HW_RTC_GetTimerValue>
 8009c00:	0002      	movs	r2, r0
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	1ad2      	subs	r2, r2, r3
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d3f6      	bcc.n	8009bfa <HW_RTC_DelayMs+0x26>
  {
    __NOP( );
  }
}
 8009c0c:	46c0      	nop			; (mov r8, r8)
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	b004      	add	sp, #16
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <HW_RTC_SetTimerContext>:
 * @brief set Time Reference set also the RTC_DateStruct and RTC_TimeStruct
 * @param none
 * @retval Timer Value
 */
uint32_t HW_RTC_SetTimerContext( void )
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	af00      	add	r7, sp, #0
  RtcTimerContext.Rtc_Time = HW_RTC_GetCalendarValue( &RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time );
 8009c18:	4a06      	ldr	r2, [pc, #24]	; (8009c34 <HW_RTC_SetTimerContext+0x20>)
 8009c1a:	4b07      	ldr	r3, [pc, #28]	; (8009c38 <HW_RTC_SetTimerContext+0x24>)
 8009c1c:	0011      	movs	r1, r2
 8009c1e:	0018      	movs	r0, r3
 8009c20:	f000 f9b8 	bl	8009f94 <HW_RTC_GetCalendarValue>
 8009c24:	0002      	movs	r2, r0
 8009c26:	4b05      	ldr	r3, [pc, #20]	; (8009c3c <HW_RTC_SetTimerContext+0x28>)
 8009c28:	601a      	str	r2, [r3, #0]
  return ( uint32_t ) RtcTimerContext.Rtc_Time;
 8009c2a:	4b04      	ldr	r3, [pc, #16]	; (8009c3c <HW_RTC_SetTimerContext+0x28>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
}
 8009c2e:	0018      	movs	r0, r3
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	20000874 	.word	0x20000874
 8009c38:	20000888 	.word	0x20000888
 8009c3c:	20000870 	.word	0x20000870

08009c40 <HW_RTC_GetTimerContext>:
 * @brief Get the RTC timer Reference
 * @param none
 * @retval Timer Value in  Ticks
 */
uint32_t HW_RTC_GetTimerContext( void )
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	af00      	add	r7, sp, #0
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8009c44:	4b02      	ldr	r3, [pc, #8]	; (8009c50 <HW_RTC_GetTimerContext+0x10>)
 8009c46:	681b      	ldr	r3, [r3, #0]
}
 8009c48:	0018      	movs	r0, r3
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	46c0      	nop			; (mov r8, r8)
 8009c50:	20000870 	.word	0x20000870

08009c54 <HW_RTC_SetAlarmConfig>:
 * @brief configure alarm at init
 * @param none
 * @retval none
 */
static void HW_RTC_SetAlarmConfig( void )
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	af00      	add	r7, sp, #0
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 8009c58:	2380      	movs	r3, #128	; 0x80
 8009c5a:	005a      	lsls	r2, r3, #1
 8009c5c:	4b03      	ldr	r3, [pc, #12]	; (8009c6c <HW_RTC_SetAlarmConfig+0x18>)
 8009c5e:	0011      	movs	r1, r2
 8009c60:	0018      	movs	r0, r3
 8009c62:	f7fd fff9 	bl	8007c58 <HAL_RTC_DeactivateAlarm>
}
 8009c66:	46c0      	nop			; (mov r8, r8)
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	20000824 	.word	0x20000824

08009c70 <HW_RTC_StartWakeUpAlarm>:
 * @note  alarm in RtcTimerContext.Rtc_Time + timeoutValue
 * @param timeoutValue in ticks
 * @retval none
 */
static void HW_RTC_StartWakeUpAlarm( uint32_t timeoutValue )
{
 8009c70:	b590      	push	{r4, r7, lr}
 8009c72:	b08d      	sub	sp, #52	; 0x34
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  uint16_t rtcAlarmSubSeconds = 0;
 8009c78:	232e      	movs	r3, #46	; 0x2e
 8009c7a:	18fb      	adds	r3, r7, r3
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmSeconds = 0;
 8009c80:	232c      	movs	r3, #44	; 0x2c
 8009c82:	18fb      	adds	r3, r7, r3
 8009c84:	2200      	movs	r2, #0
 8009c86:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmMinutes = 0;
 8009c88:	232a      	movs	r3, #42	; 0x2a
 8009c8a:	18fb      	adds	r3, r7, r3
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmHours = 0;
 8009c90:	2328      	movs	r3, #40	; 0x28
 8009c92:	18fb      	adds	r3, r7, r3
 8009c94:	2200      	movs	r2, #0
 8009c96:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmDays = 0;
 8009c98:	2326      	movs	r3, #38	; 0x26
 8009c9a:	18fb      	adds	r3, r7, r3
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	801a      	strh	r2, [r3, #0]
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8009ca0:	2310      	movs	r3, #16
 8009ca2:	18fa      	adds	r2, r7, r3
 8009ca4:	4bb2      	ldr	r3, [pc, #712]	; (8009f70 <HW_RTC_StartWakeUpAlarm+0x300>)
 8009ca6:	3304      	adds	r3, #4
 8009ca8:	cb13      	ldmia	r3!, {r0, r1, r4}
 8009caa:	c213      	stmia	r2!, {r0, r1, r4}
 8009cac:	cb03      	ldmia	r3!, {r0, r1}
 8009cae:	c203      	stmia	r2!, {r0, r1}
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8009cb0:	230c      	movs	r3, #12
 8009cb2:	18fb      	adds	r3, r7, r3
 8009cb4:	4aae      	ldr	r2, [pc, #696]	; (8009f70 <HW_RTC_StartWakeUpAlarm+0x300>)
 8009cb6:	6992      	ldr	r2, [r2, #24]
 8009cb8:	601a      	str	r2, [r3, #0]

  HW_RTC_StopAlarm( );
 8009cba:	f7ff ff63 	bl	8009b84 <HW_RTC_StopAlarm>
  DBG_GPIO_SET(GPIOB, GPIO_PIN_13);
 8009cbe:	4bad      	ldr	r3, [pc, #692]	; (8009f74 <HW_RTC_StartWakeUpAlarm+0x304>)
 8009cc0:	2280      	movs	r2, #128	; 0x80
 8009cc2:	0192      	lsls	r2, r2, #6
 8009cc4:	619a      	str	r2, [r3, #24]
  
  /*reverse counter */
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 8009cc6:	2310      	movs	r3, #16
 8009cc8:	18fb      	adds	r3, r7, r3
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	b29a      	uxth	r2, r3
 8009cce:	232e      	movs	r3, #46	; 0x2e
 8009cd0:	18fb      	adds	r3, r7, r3
 8009cd2:	49a9      	ldr	r1, [pc, #676]	; (8009f78 <HW_RTC_StartWakeUpAlarm+0x308>)
 8009cd4:	1a8a      	subs	r2, r1, r2
 8009cd6:	801a      	strh	r2, [r3, #0]
  rtcAlarmSubSeconds += ( timeoutValue & PREDIV_S);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	059b      	lsls	r3, r3, #22
 8009cde:	0d9b      	lsrs	r3, r3, #22
 8009ce0:	b299      	uxth	r1, r3
 8009ce2:	232e      	movs	r3, #46	; 0x2e
 8009ce4:	18fb      	adds	r3, r7, r3
 8009ce6:	222e      	movs	r2, #46	; 0x2e
 8009ce8:	18ba      	adds	r2, r7, r2
 8009cea:	8812      	ldrh	r2, [r2, #0]
 8009cec:	188a      	adds	r2, r1, r2
 8009cee:	801a      	strh	r2, [r3, #0]
  /* convert timeout  to seconds */
  timeoutValue >>= N_PREDIV_S;  /* convert timeout  in seconds */
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	0a9b      	lsrs	r3, r3, #10
 8009cf4:	607b      	str	r3, [r7, #4]
  
  /*convert microsecs to RTC format and add to 'Now' */
  rtcAlarmDays =  RTC_DateStruct.Date;
 8009cf6:	230c      	movs	r3, #12
 8009cf8:	18fb      	adds	r3, r7, r3
 8009cfa:	789a      	ldrb	r2, [r3, #2]
 8009cfc:	2326      	movs	r3, #38	; 0x26
 8009cfe:	18fb      	adds	r3, r7, r3
 8009d00:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SecondsInDay)
 8009d02:	e00a      	b.n	8009d1a <HW_RTC_StartWakeUpAlarm+0xaa>
  {
    timeoutValue -= SecondsInDay;
 8009d04:	4a9d      	ldr	r2, [pc, #628]	; (8009f7c <HW_RTC_StartWakeUpAlarm+0x30c>)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	1a9b      	subs	r3, r3, r2
 8009d0a:	607b      	str	r3, [r7, #4]
    rtcAlarmDays++;
 8009d0c:	2326      	movs	r3, #38	; 0x26
 8009d0e:	18fb      	adds	r3, r7, r3
 8009d10:	881a      	ldrh	r2, [r3, #0]
 8009d12:	2326      	movs	r3, #38	; 0x26
 8009d14:	18fb      	adds	r3, r7, r3
 8009d16:	3201      	adds	r2, #1
 8009d18:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SecondsInDay)
 8009d1a:	4a98      	ldr	r2, [pc, #608]	; (8009f7c <HW_RTC_StartWakeUpAlarm+0x30c>)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d2f0      	bcs.n	8009d04 <HW_RTC_StartWakeUpAlarm+0x94>
  }
  
  /* calc hours */
  rtcAlarmHours = RTC_TimeStruct.Hours;
 8009d22:	2310      	movs	r3, #16
 8009d24:	18fb      	adds	r3, r7, r3
 8009d26:	781a      	ldrb	r2, [r3, #0]
 8009d28:	2328      	movs	r3, #40	; 0x28
 8009d2a:	18fb      	adds	r3, r7, r3
 8009d2c:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SecondsInHour)
 8009d2e:	e00c      	b.n	8009d4a <HW_RTC_StartWakeUpAlarm+0xda>
  {
    timeoutValue -= SecondsInHour;
 8009d30:	23e1      	movs	r3, #225	; 0xe1
 8009d32:	011b      	lsls	r3, r3, #4
 8009d34:	001a      	movs	r2, r3
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	1a9b      	subs	r3, r3, r2
 8009d3a:	607b      	str	r3, [r7, #4]
    rtcAlarmHours++;
 8009d3c:	2328      	movs	r3, #40	; 0x28
 8009d3e:	18fb      	adds	r3, r7, r3
 8009d40:	881a      	ldrh	r2, [r3, #0]
 8009d42:	2328      	movs	r3, #40	; 0x28
 8009d44:	18fb      	adds	r3, r7, r3
 8009d46:	3201      	adds	r2, #1
 8009d48:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SecondsInHour)
 8009d4a:	23e1      	movs	r3, #225	; 0xe1
 8009d4c:	011b      	lsls	r3, r3, #4
 8009d4e:	001a      	movs	r2, r3
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d9ec      	bls.n	8009d30 <HW_RTC_StartWakeUpAlarm+0xc0>
  }
  
  /* calc minutes */
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 8009d56:	2310      	movs	r3, #16
 8009d58:	18fb      	adds	r3, r7, r3
 8009d5a:	785a      	ldrb	r2, [r3, #1]
 8009d5c:	232a      	movs	r3, #42	; 0x2a
 8009d5e:	18fb      	adds	r3, r7, r3
 8009d60:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SecondsInMinute)
 8009d62:	e00b      	b.n	8009d7c <HW_RTC_StartWakeUpAlarm+0x10c>
  {
    timeoutValue -= SecondsInMinute;
 8009d64:	233c      	movs	r3, #60	; 0x3c
 8009d66:	001a      	movs	r2, r3
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	1a9b      	subs	r3, r3, r2
 8009d6c:	607b      	str	r3, [r7, #4]
    rtcAlarmMinutes++;
 8009d6e:	232a      	movs	r3, #42	; 0x2a
 8009d70:	18fb      	adds	r3, r7, r3
 8009d72:	881a      	ldrh	r2, [r3, #0]
 8009d74:	232a      	movs	r3, #42	; 0x2a
 8009d76:	18fb      	adds	r3, r7, r3
 8009d78:	3201      	adds	r2, #1
 8009d7a:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SecondsInMinute)
 8009d7c:	233c      	movs	r3, #60	; 0x3c
 8009d7e:	001a      	movs	r2, r3
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d9ee      	bls.n	8009d64 <HW_RTC_StartWakeUpAlarm+0xf4>
  }
   
  /* calc seconds */
  rtcAlarmSeconds =  RTC_TimeStruct.Seconds + timeoutValue;
 8009d86:	2310      	movs	r3, #16
 8009d88:	18fb      	adds	r3, r7, r3
 8009d8a:	789b      	ldrb	r3, [r3, #2]
 8009d8c:	b299      	uxth	r1, r3
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	b29a      	uxth	r2, r3
 8009d92:	232c      	movs	r3, #44	; 0x2c
 8009d94:	18fb      	adds	r3, r7, r3
 8009d96:	188a      	adds	r2, r1, r2
 8009d98:	801a      	strh	r2, [r3, #0]

  /***** correct for modulo********/
  while (rtcAlarmSubSeconds >= (PREDIV_S+1))
 8009d9a:	e00f      	b.n	8009dbc <HW_RTC_StartWakeUpAlarm+0x14c>
  {
    rtcAlarmSubSeconds -= (PREDIV_S+1);
 8009d9c:	232e      	movs	r3, #46	; 0x2e
 8009d9e:	18fb      	adds	r3, r7, r3
 8009da0:	222e      	movs	r2, #46	; 0x2e
 8009da2:	18ba      	adds	r2, r7, r2
 8009da4:	8812      	ldrh	r2, [r2, #0]
 8009da6:	4976      	ldr	r1, [pc, #472]	; (8009f80 <HW_RTC_StartWakeUpAlarm+0x310>)
 8009da8:	468c      	mov	ip, r1
 8009daa:	4462      	add	r2, ip
 8009dac:	801a      	strh	r2, [r3, #0]
    rtcAlarmSeconds++;
 8009dae:	232c      	movs	r3, #44	; 0x2c
 8009db0:	18fb      	adds	r3, r7, r3
 8009db2:	881a      	ldrh	r2, [r3, #0]
 8009db4:	232c      	movs	r3, #44	; 0x2c
 8009db6:	18fb      	adds	r3, r7, r3
 8009db8:	3201      	adds	r2, #1
 8009dba:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSubSeconds >= (PREDIV_S+1))
 8009dbc:	232e      	movs	r3, #46	; 0x2e
 8009dbe:	18fb      	adds	r3, r7, r3
 8009dc0:	881b      	ldrh	r3, [r3, #0]
 8009dc2:	4a6d      	ldr	r2, [pc, #436]	; (8009f78 <HW_RTC_StartWakeUpAlarm+0x308>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d8e9      	bhi.n	8009d9c <HW_RTC_StartWakeUpAlarm+0x12c>
  }
  
  while (rtcAlarmSeconds >= 60)
 8009dc8:	e00d      	b.n	8009de6 <HW_RTC_StartWakeUpAlarm+0x176>
  { 
    rtcAlarmSeconds -= 60;
 8009dca:	232c      	movs	r3, #44	; 0x2c
 8009dcc:	18fb      	adds	r3, r7, r3
 8009dce:	222c      	movs	r2, #44	; 0x2c
 8009dd0:	18ba      	adds	r2, r7, r2
 8009dd2:	8812      	ldrh	r2, [r2, #0]
 8009dd4:	3a3c      	subs	r2, #60	; 0x3c
 8009dd6:	801a      	strh	r2, [r3, #0]
    rtcAlarmMinutes++;
 8009dd8:	232a      	movs	r3, #42	; 0x2a
 8009dda:	18fb      	adds	r3, r7, r3
 8009ddc:	881a      	ldrh	r2, [r3, #0]
 8009dde:	232a      	movs	r3, #42	; 0x2a
 8009de0:	18fb      	adds	r3, r7, r3
 8009de2:	3201      	adds	r2, #1
 8009de4:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSeconds >= 60)
 8009de6:	232c      	movs	r3, #44	; 0x2c
 8009de8:	18fb      	adds	r3, r7, r3
 8009dea:	881b      	ldrh	r3, [r3, #0]
 8009dec:	2b3b      	cmp	r3, #59	; 0x3b
 8009dee:	d8ec      	bhi.n	8009dca <HW_RTC_StartWakeUpAlarm+0x15a>
  }

  while (rtcAlarmMinutes >= 60)
 8009df0:	e00d      	b.n	8009e0e <HW_RTC_StartWakeUpAlarm+0x19e>
  {
    rtcAlarmMinutes -= 60;
 8009df2:	232a      	movs	r3, #42	; 0x2a
 8009df4:	18fb      	adds	r3, r7, r3
 8009df6:	222a      	movs	r2, #42	; 0x2a
 8009df8:	18ba      	adds	r2, r7, r2
 8009dfa:	8812      	ldrh	r2, [r2, #0]
 8009dfc:	3a3c      	subs	r2, #60	; 0x3c
 8009dfe:	801a      	strh	r2, [r3, #0]
    rtcAlarmHours++;
 8009e00:	2328      	movs	r3, #40	; 0x28
 8009e02:	18fb      	adds	r3, r7, r3
 8009e04:	881a      	ldrh	r2, [r3, #0]
 8009e06:	2328      	movs	r3, #40	; 0x28
 8009e08:	18fb      	adds	r3, r7, r3
 8009e0a:	3201      	adds	r2, #1
 8009e0c:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmMinutes >= 60)
 8009e0e:	232a      	movs	r3, #42	; 0x2a
 8009e10:	18fb      	adds	r3, r7, r3
 8009e12:	881b      	ldrh	r3, [r3, #0]
 8009e14:	2b3b      	cmp	r3, #59	; 0x3b
 8009e16:	d8ec      	bhi.n	8009df2 <HW_RTC_StartWakeUpAlarm+0x182>
  }
  
  while (rtcAlarmHours >= HoursInDay)
 8009e18:	e00f      	b.n	8009e3a <HW_RTC_StartWakeUpAlarm+0x1ca>
  {
    rtcAlarmHours -= HoursInDay;
 8009e1a:	2318      	movs	r3, #24
 8009e1c:	b29a      	uxth	r2, r3
 8009e1e:	2328      	movs	r3, #40	; 0x28
 8009e20:	18fb      	adds	r3, r7, r3
 8009e22:	2128      	movs	r1, #40	; 0x28
 8009e24:	1879      	adds	r1, r7, r1
 8009e26:	8809      	ldrh	r1, [r1, #0]
 8009e28:	1a8a      	subs	r2, r1, r2
 8009e2a:	801a      	strh	r2, [r3, #0]
    rtcAlarmDays++;
 8009e2c:	2326      	movs	r3, #38	; 0x26
 8009e2e:	18fb      	adds	r3, r7, r3
 8009e30:	881a      	ldrh	r2, [r3, #0]
 8009e32:	2326      	movs	r3, #38	; 0x26
 8009e34:	18fb      	adds	r3, r7, r3
 8009e36:	3201      	adds	r2, #1
 8009e38:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmHours >= HoursInDay)
 8009e3a:	2318      	movs	r3, #24
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	2228      	movs	r2, #40	; 0x28
 8009e40:	18ba      	adds	r2, r7, r2
 8009e42:	8812      	ldrh	r2, [r2, #0]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d2e8      	bcs.n	8009e1a <HW_RTC_StartWakeUpAlarm+0x1aa>
  }

  if( RTC_DateStruct.Year % 4 == 0 ) 
 8009e48:	230c      	movs	r3, #12
 8009e4a:	18fb      	adds	r3, r7, r3
 8009e4c:	78db      	ldrb	r3, [r3, #3]
 8009e4e:	2203      	movs	r2, #3
 8009e50:	4013      	ands	r3, r2
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d11d      	bne.n	8009e94 <HW_RTC_StartWakeUpAlarm+0x224>
  {
    if( rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ] )    
 8009e58:	230c      	movs	r3, #12
 8009e5a:	18fb      	adds	r3, r7, r3
 8009e5c:	785b      	ldrb	r3, [r3, #1]
 8009e5e:	3b01      	subs	r3, #1
 8009e60:	4a48      	ldr	r2, [pc, #288]	; (8009f84 <HW_RTC_StartWakeUpAlarm+0x314>)
 8009e62:	5cd3      	ldrb	r3, [r2, r3]
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	2226      	movs	r2, #38	; 0x26
 8009e68:	18ba      	adds	r2, r7, r2
 8009e6a:	8812      	ldrh	r2, [r2, #0]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d92e      	bls.n	8009ece <HW_RTC_StartWakeUpAlarm+0x25e>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ];
 8009e70:	2326      	movs	r3, #38	; 0x26
 8009e72:	18fb      	adds	r3, r7, r3
 8009e74:	8818      	ldrh	r0, [r3, #0]
 8009e76:	230c      	movs	r3, #12
 8009e78:	18fb      	adds	r3, r7, r3
 8009e7a:	785b      	ldrb	r3, [r3, #1]
 8009e7c:	3b01      	subs	r3, #1
 8009e7e:	4a41      	ldr	r2, [pc, #260]	; (8009f84 <HW_RTC_StartWakeUpAlarm+0x314>)
 8009e80:	5cd3      	ldrb	r3, [r2, r3]
 8009e82:	0019      	movs	r1, r3
 8009e84:	f7f6 facc 	bl	8000420 <__aeabi_idivmod>
 8009e88:	000b      	movs	r3, r1
 8009e8a:	001a      	movs	r2, r3
 8009e8c:	2326      	movs	r3, #38	; 0x26
 8009e8e:	18fb      	adds	r3, r7, r3
 8009e90:	801a      	strh	r2, [r3, #0]
 8009e92:	e01c      	b.n	8009ece <HW_RTC_StartWakeUpAlarm+0x25e>
    }
  }
  else
  {
    if( rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ] )    
 8009e94:	230c      	movs	r3, #12
 8009e96:	18fb      	adds	r3, r7, r3
 8009e98:	785b      	ldrb	r3, [r3, #1]
 8009e9a:	3b01      	subs	r3, #1
 8009e9c:	4a3a      	ldr	r2, [pc, #232]	; (8009f88 <HW_RTC_StartWakeUpAlarm+0x318>)
 8009e9e:	5cd3      	ldrb	r3, [r2, r3]
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	2226      	movs	r2, #38	; 0x26
 8009ea4:	18ba      	adds	r2, r7, r2
 8009ea6:	8812      	ldrh	r2, [r2, #0]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d910      	bls.n	8009ece <HW_RTC_StartWakeUpAlarm+0x25e>
    {   
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 8009eac:	2326      	movs	r3, #38	; 0x26
 8009eae:	18fb      	adds	r3, r7, r3
 8009eb0:	8818      	ldrh	r0, [r3, #0]
 8009eb2:	230c      	movs	r3, #12
 8009eb4:	18fb      	adds	r3, r7, r3
 8009eb6:	785b      	ldrb	r3, [r3, #1]
 8009eb8:	3b01      	subs	r3, #1
 8009eba:	4a33      	ldr	r2, [pc, #204]	; (8009f88 <HW_RTC_StartWakeUpAlarm+0x318>)
 8009ebc:	5cd3      	ldrb	r3, [r2, r3]
 8009ebe:	0019      	movs	r1, r3
 8009ec0:	f7f6 faae 	bl	8000420 <__aeabi_idivmod>
 8009ec4:	000b      	movs	r3, r1
 8009ec6:	001a      	movs	r2, r3
 8009ec8:	2326      	movs	r3, #38	; 0x26
 8009eca:	18fb      	adds	r3, r7, r3
 8009ecc:	801a      	strh	r2, [r3, #0]
    }
  }

  /* Set RTC_AlarmStructure with calculated values*/
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S-rtcAlarmSubSeconds;
 8009ece:	232e      	movs	r3, #46	; 0x2e
 8009ed0:	18fb      	adds	r3, r7, r3
 8009ed2:	881b      	ldrh	r3, [r3, #0]
 8009ed4:	4a28      	ldr	r2, [pc, #160]	; (8009f78 <HW_RTC_StartWakeUpAlarm+0x308>)
 8009ed6:	1ad3      	subs	r3, r2, r3
 8009ed8:	001a      	movs	r2, r3
 8009eda:	4b2c      	ldr	r3, [pc, #176]	; (8009f8c <HW_RTC_StartWakeUpAlarm+0x31c>)
 8009edc:	605a      	str	r2, [r3, #4]
  RTC_AlarmStructure.AlarmSubSecondMask  = HW_RTC_ALARMSUBSECONDMASK; 
 8009ede:	4b2b      	ldr	r3, [pc, #172]	; (8009f8c <HW_RTC_StartWakeUpAlarm+0x31c>)
 8009ee0:	22a0      	movs	r2, #160	; 0xa0
 8009ee2:	0512      	lsls	r2, r2, #20
 8009ee4:	619a      	str	r2, [r3, #24]
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 8009ee6:	232c      	movs	r3, #44	; 0x2c
 8009ee8:	18fb      	adds	r3, r7, r3
 8009eea:	881b      	ldrh	r3, [r3, #0]
 8009eec:	b2da      	uxtb	r2, r3
 8009eee:	4b27      	ldr	r3, [pc, #156]	; (8009f8c <HW_RTC_StartWakeUpAlarm+0x31c>)
 8009ef0:	709a      	strb	r2, [r3, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 8009ef2:	232a      	movs	r3, #42	; 0x2a
 8009ef4:	18fb      	adds	r3, r7, r3
 8009ef6:	881b      	ldrh	r3, [r3, #0]
 8009ef8:	b2da      	uxtb	r2, r3
 8009efa:	4b24      	ldr	r3, [pc, #144]	; (8009f8c <HW_RTC_StartWakeUpAlarm+0x31c>)
 8009efc:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 8009efe:	2328      	movs	r3, #40	; 0x28
 8009f00:	18fb      	adds	r3, r7, r3
 8009f02:	881b      	ldrh	r3, [r3, #0]
 8009f04:	b2da      	uxtb	r2, r3
 8009f06:	4b21      	ldr	r3, [pc, #132]	; (8009f8c <HW_RTC_StartWakeUpAlarm+0x31c>)
 8009f08:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStructure.AlarmDateWeekDay    = ( uint8_t )rtcAlarmDays;
 8009f0a:	2326      	movs	r3, #38	; 0x26
 8009f0c:	18fb      	adds	r3, r7, r3
 8009f0e:	881b      	ldrh	r3, [r3, #0]
 8009f10:	b2d9      	uxtb	r1, r3
 8009f12:	4b1e      	ldr	r3, [pc, #120]	; (8009f8c <HW_RTC_StartWakeUpAlarm+0x31c>)
 8009f14:	2220      	movs	r2, #32
 8009f16:	5499      	strb	r1, [r3, r2]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 8009f18:	2310      	movs	r3, #16
 8009f1a:	18fb      	adds	r3, r7, r3
 8009f1c:	78da      	ldrb	r2, [r3, #3]
 8009f1e:	4b1b      	ldr	r3, [pc, #108]	; (8009f8c <HW_RTC_StartWakeUpAlarm+0x31c>)
 8009f20:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE; 
 8009f22:	4b1a      	ldr	r3, [pc, #104]	; (8009f8c <HW_RTC_StartWakeUpAlarm+0x31c>)
 8009f24:	2200      	movs	r2, #0
 8009f26:	61da      	str	r2, [r3, #28]
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 8009f28:	4b18      	ldr	r3, [pc, #96]	; (8009f8c <HW_RTC_StartWakeUpAlarm+0x31c>)
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	615a      	str	r2, [r3, #20]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8009f2e:	4b17      	ldr	r3, [pc, #92]	; (8009f8c <HW_RTC_StartWakeUpAlarm+0x31c>)
 8009f30:	2280      	movs	r2, #128	; 0x80
 8009f32:	0052      	lsls	r2, r2, #1
 8009f34:	625a      	str	r2, [r3, #36]	; 0x24
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009f36:	4b15      	ldr	r3, [pc, #84]	; (8009f8c <HW_RTC_StartWakeUpAlarm+0x31c>)
 8009f38:	2200      	movs	r2, #0
 8009f3a:	60da      	str	r2, [r3, #12]
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009f3c:	4b13      	ldr	r3, [pc, #76]	; (8009f8c <HW_RTC_StartWakeUpAlarm+0x31c>)
 8009f3e:	2200      	movs	r2, #0
 8009f40:	611a      	str	r2, [r3, #16]
  
  /* Set RTC_Alarm */
  HAL_RTC_SetAlarm_IT( &RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN );
 8009f42:	4912      	ldr	r1, [pc, #72]	; (8009f8c <HW_RTC_StartWakeUpAlarm+0x31c>)
 8009f44:	4b12      	ldr	r3, [pc, #72]	; (8009f90 <HW_RTC_StartWakeUpAlarm+0x320>)
 8009f46:	2200      	movs	r2, #0
 8009f48:	0018      	movs	r0, r3
 8009f4a:	f7fd fd15 	bl	8007978 <HAL_RTC_SetAlarm_IT>
  
  /* Debug Printf*/
  DBG( HW_RTC_GetCalendarValue( &RTC_DateStruct, &RTC_TimeStruct ); );
 8009f4e:	2310      	movs	r3, #16
 8009f50:	18fa      	adds	r2, r7, r3
 8009f52:	230c      	movs	r3, #12
 8009f54:	18fb      	adds	r3, r7, r3
 8009f56:	0011      	movs	r1, r2
 8009f58:	0018      	movs	r0, r3
 8009f5a:	f000 f81b 	bl	8009f94 <HW_RTC_GetCalendarValue>
  DBG_PRINTF("it's %d:%d:%d:%d ", RTC_TimeStruct.Hours, RTC_TimeStruct.Minutes, RTC_TimeStruct.Seconds, ((PREDIV_S - RTC_TimeStruct.SubSeconds)*1000)>>N_PREDIV_S);
  DBG_PRINTF("WU@ %d:%d:%d:%d\n", rtcAlarmHours, rtcAlarmMinutes, rtcAlarmSeconds, (rtcAlarmSubSeconds*1000)>>N_PREDIV_S );
  
  DBG_GPIO_RST(GPIOB, GPIO_PIN_13);
 8009f5e:	4b05      	ldr	r3, [pc, #20]	; (8009f74 <HW_RTC_StartWakeUpAlarm+0x304>)
 8009f60:	2280      	movs	r2, #128	; 0x80
 8009f62:	0192      	lsls	r2, r2, #6
 8009f64:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009f66:	46c0      	nop			; (mov r8, r8)
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	b00d      	add	sp, #52	; 0x34
 8009f6c:	bd90      	pop	{r4, r7, pc}
 8009f6e:	46c0      	nop			; (mov r8, r8)
 8009f70:	20000870 	.word	0x20000870
 8009f74:	50000400 	.word	0x50000400
 8009f78:	000003ff 	.word	0x000003ff
 8009f7c:	00015180 	.word	0x00015180
 8009f80:	fffffc00 	.word	0xfffffc00
 8009f84:	0800e654 	.word	0x0800e654
 8009f88:	0800e648 	.word	0x0800e648
 8009f8c:	20000848 	.word	0x20000848
 8009f90:	20000824 	.word	0x20000824

08009f94 <HW_RTC_GetCalendarValue>:
 * @param pointer to RTC_DateStruct
 * @param pointer to RTC_TimeStruct
 * @retval time in ticks
 */
 TimerTime_t HW_RTC_GetCalendarValue( RTC_DateTypeDef* RTC_DateStruct, RTC_TimeTypeDef* RTC_TimeStruct )
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b086      	sub	sp, #24
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
  TimerTime_t calendarValue = 0;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	617b      	str	r3, [r7, #20]
  uint32_t i = 0;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	613b      	str	r3, [r7, #16]
  uint32_t first_read;
  
  /* Get Time and Date*/
  HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
 8009fa6:	6839      	ldr	r1, [r7, #0]
 8009fa8:	4b4a      	ldr	r3, [pc, #296]	; (800a0d4 <HW_RTC_GetCalendarValue+0x140>)
 8009faa:	2200      	movs	r2, #0
 8009fac:	0018      	movs	r0, r3
 8009fae:	f7fd fb77 	bl	80076a0 <HAL_RTC_GetTime>
 
   /* make sure it is correct due to asynchronus nature of RTC*/
  do {
//    first_read = RTC_TimeStruct->SubSeconds;
	  first_read =  RTC->SSR;
 8009fb2:	4b49      	ldr	r3, [pc, #292]	; (800a0d8 <HW_RTC_GetCalendarValue+0x144>)
 8009fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fb6:	60fb      	str	r3, [r7, #12]
    HAL_RTC_GetDate( &RtcHandle, RTC_DateStruct, RTC_FORMAT_BIN );
 8009fb8:	6879      	ldr	r1, [r7, #4]
 8009fba:	4b46      	ldr	r3, [pc, #280]	; (800a0d4 <HW_RTC_GetCalendarValue+0x140>)
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	0018      	movs	r0, r3
 8009fc0:	f7fd fc8a 	bl	80078d8 <HAL_RTC_GetDate>
    HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
 8009fc4:	6839      	ldr	r1, [r7, #0]
 8009fc6:	4b43      	ldr	r3, [pc, #268]	; (800a0d4 <HW_RTC_GetCalendarValue+0x140>)
 8009fc8:	2200      	movs	r2, #0
 8009fca:	0018      	movs	r0, r3
 8009fcc:	f7fd fb68 	bl	80076a0 <HAL_RTC_GetTime>
  }while( first_read != RTC->SSR );
 8009fd0:	4b41      	ldr	r3, [pc, #260]	; (800a0d8 <HW_RTC_GetCalendarValue+0x144>)
 8009fd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d1eb      	bne.n	8009fb2 <HW_RTC_GetCalendarValue+0x1e>
//  } while (first_read != RTC_TimeStruct->SubSeconds);
 
  /* years (calc valid up to year 2099)*/
  for( i = 0; i < RTC_DateStruct->Year; i++ )
 8009fda:	2300      	movs	r3, #0
 8009fdc:	613b      	str	r3, [r7, #16]
 8009fde:	e017      	b.n	800a010 <HW_RTC_GetCalendarValue+0x7c>
  {
    if( (i % 4) == 0 )
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	2203      	movs	r2, #3
 8009fe4:	4013      	ands	r3, r2
 8009fe6:	d108      	bne.n	8009ffa <HW_RTC_GetCalendarValue+0x66>
    {
      calendarValue += DaysInLeapYear * SecondsInDay;
 8009fe8:	23b7      	movs	r3, #183	; 0xb7
 8009fea:	005b      	lsls	r3, r3, #1
 8009fec:	001a      	movs	r2, r3
 8009fee:	4b3b      	ldr	r3, [pc, #236]	; (800a0dc <HW_RTC_GetCalendarValue+0x148>)
 8009ff0:	4353      	muls	r3, r2
 8009ff2:	697a      	ldr	r2, [r7, #20]
 8009ff4:	18d3      	adds	r3, r2, r3
 8009ff6:	617b      	str	r3, [r7, #20]
 8009ff8:	e007      	b.n	800a00a <HW_RTC_GetCalendarValue+0x76>
    }
    else
    {
      calendarValue += DaysInYear * SecondsInDay;
 8009ffa:	236e      	movs	r3, #110	; 0x6e
 8009ffc:	33ff      	adds	r3, #255	; 0xff
 8009ffe:	001a      	movs	r2, r3
 800a000:	4b36      	ldr	r3, [pc, #216]	; (800a0dc <HW_RTC_GetCalendarValue+0x148>)
 800a002:	4353      	muls	r3, r2
 800a004:	697a      	ldr	r2, [r7, #20]
 800a006:	18d3      	adds	r3, r2, r3
 800a008:	617b      	str	r3, [r7, #20]
  for( i = 0; i < RTC_DateStruct->Year; i++ )
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	3301      	adds	r3, #1
 800a00e:	613b      	str	r3, [r7, #16]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	78db      	ldrb	r3, [r3, #3]
 800a014:	001a      	movs	r2, r3
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d8e1      	bhi.n	8009fe0 <HW_RTC_GetCalendarValue+0x4c>
    }
  }

  /* months (calc valid up to year 2099)*/
  if(( (RTC_DateStruct->Year % 4) == 0 ) )
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	78db      	ldrb	r3, [r3, #3]
 800a020:	2203      	movs	r2, #3
 800a022:	4013      	ands	r3, r2
 800a024:	b2db      	uxtb	r3, r3
 800a026:	2b00      	cmp	r3, #0
 800a028:	d117      	bne.n	800a05a <HW_RTC_GetCalendarValue+0xc6>
  {
    for( i = 0; i < ( RTC_DateStruct->Month - 1 ); i++ )
 800a02a:	2300      	movs	r3, #0
 800a02c:	613b      	str	r3, [r7, #16]
 800a02e:	e00c      	b.n	800a04a <HW_RTC_GetCalendarValue+0xb6>
    {
      calendarValue += DaysInMonthLeapYear[i] * SecondsInDay;
 800a030:	4a2b      	ldr	r2, [pc, #172]	; (800a0e0 <HW_RTC_GetCalendarValue+0x14c>)
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	18d3      	adds	r3, r2, r3
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	001a      	movs	r2, r3
 800a03a:	4b28      	ldr	r3, [pc, #160]	; (800a0dc <HW_RTC_GetCalendarValue+0x148>)
 800a03c:	4353      	muls	r3, r2
 800a03e:	697a      	ldr	r2, [r7, #20]
 800a040:	18d3      	adds	r3, r2, r3
 800a042:	617b      	str	r3, [r7, #20]
    for( i = 0; i < ( RTC_DateStruct->Month - 1 ); i++ )
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	3301      	adds	r3, #1
 800a048:	613b      	str	r3, [r7, #16]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	785b      	ldrb	r3, [r3, #1]
 800a04e:	3b01      	subs	r3, #1
 800a050:	001a      	movs	r2, r3
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	429a      	cmp	r2, r3
 800a056:	d8eb      	bhi.n	800a030 <HW_RTC_GetCalendarValue+0x9c>
 800a058:	e016      	b.n	800a088 <HW_RTC_GetCalendarValue+0xf4>
    }
  }
  else
  {
    for( i = 0;  i < ( RTC_DateStruct->Month - 1 ); i++ )
 800a05a:	2300      	movs	r3, #0
 800a05c:	613b      	str	r3, [r7, #16]
 800a05e:	e00c      	b.n	800a07a <HW_RTC_GetCalendarValue+0xe6>
    {
      calendarValue += DaysInMonth[i] * SecondsInDay;
 800a060:	4a20      	ldr	r2, [pc, #128]	; (800a0e4 <HW_RTC_GetCalendarValue+0x150>)
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	18d3      	adds	r3, r2, r3
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	001a      	movs	r2, r3
 800a06a:	4b1c      	ldr	r3, [pc, #112]	; (800a0dc <HW_RTC_GetCalendarValue+0x148>)
 800a06c:	4353      	muls	r3, r2
 800a06e:	697a      	ldr	r2, [r7, #20]
 800a070:	18d3      	adds	r3, r2, r3
 800a072:	617b      	str	r3, [r7, #20]
    for( i = 0;  i < ( RTC_DateStruct->Month - 1 ); i++ )
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	3301      	adds	r3, #1
 800a078:	613b      	str	r3, [r7, #16]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	785b      	ldrb	r3, [r3, #1]
 800a07e:	3b01      	subs	r3, #1
 800a080:	001a      	movs	r2, r3
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	429a      	cmp	r2, r3
 800a086:	d8eb      	bhi.n	800a060 <HW_RTC_GetCalendarValue+0xcc>
    }
  }

  /* days */
  calendarValue += ( ( uint32_t )RTC_TimeStruct->Seconds + 
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	789b      	ldrb	r3, [r3, #2]
 800a08c:	0019      	movs	r1, r3
                     ( ( uint32_t )RTC_TimeStruct->Minutes * SecondsInMinute ) +
                     ( ( uint32_t )RTC_TimeStruct->Hours * SecondsInHour ) + 
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	001a      	movs	r2, r3
 800a094:	23e1      	movs	r3, #225	; 0xe1
 800a096:	011b      	lsls	r3, r3, #4
 800a098:	435a      	muls	r2, r3
                     ( ( uint32_t )RTC_TimeStruct->Minutes * SecondsInMinute ) +
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	785b      	ldrb	r3, [r3, #1]
 800a09e:	203c      	movs	r0, #60	; 0x3c
 800a0a0:	4343      	muls	r3, r0
 800a0a2:	18d3      	adds	r3, r2, r3
 800a0a4:	18ca      	adds	r2, r1, r3
                     ( ( uint32_t )( RTC_DateStruct->Date * SecondsInDay ) ) );
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	789b      	ldrb	r3, [r3, #2]
 800a0aa:	0019      	movs	r1, r3
 800a0ac:	4b0b      	ldr	r3, [pc, #44]	; (800a0dc <HW_RTC_GetCalendarValue+0x148>)
 800a0ae:	434b      	muls	r3, r1
                     ( ( uint32_t )RTC_TimeStruct->Hours * SecondsInHour ) + 
 800a0b0:	18d3      	adds	r3, r2, r3
  calendarValue += ( ( uint32_t )RTC_TimeStruct->Seconds + 
 800a0b2:	697a      	ldr	r2, [r7, #20]
 800a0b4:	18d3      	adds	r3, r2, r3
 800a0b6:	617b      	str	r3, [r7, #20]
  
  calendarValue = (calendarValue<<N_PREDIV_S) + ( PREDIV_S - RTC_TimeStruct->SubSeconds);
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	029a      	lsls	r2, r3, #10
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	1ad3      	subs	r3, r2, r3
 800a0c2:	4a09      	ldr	r2, [pc, #36]	; (800a0e8 <HW_RTC_GetCalendarValue+0x154>)
 800a0c4:	4694      	mov	ip, r2
 800a0c6:	4463      	add	r3, ip
 800a0c8:	617b      	str	r3, [r7, #20]

  return( calendarValue );
 800a0ca:	697b      	ldr	r3, [r7, #20]
}
 800a0cc:	0018      	movs	r0, r3
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	b006      	add	sp, #24
 800a0d2:	bd80      	pop	{r7, pc}
 800a0d4:	20000824 	.word	0x20000824
 800a0d8:	40002800 	.word	0x40002800
 800a0dc:	00015180 	.word	0x00015180
 800a0e0:	0800e654 	.word	0x0800e654
 800a0e4:	0800e648 	.word	0x0800e648
 800a0e8:	000003ff 	.word	0x000003ff

0800a0ec <HW_SPI_Init>:
 * @brief Initializes the SPI object and MCU peripheral
 *
 * @param [IN] none
 */
void HW_SPI_Init( void )
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b086      	sub	sp, #24
 800a0f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 800a0f2:	1d3b      	adds	r3, r7, #4
 800a0f4:	0018      	movs	r0, r3
 800a0f6:	2314      	movs	r3, #20
 800a0f8:	001a      	movs	r2, r3
 800a0fa:	2100      	movs	r1, #0
 800a0fc:	f001 f8c1 	bl	800b282 <memset>
  /*##-1- Configure the SPI peripheral */
  /* Set the SPI parameters */

  hspi.Instance = SPI1;
 800a100:	4b37      	ldr	r3, [pc, #220]	; (800a1e0 <HW_SPI_Init+0xf4>)
 800a102:	4a38      	ldr	r2, [pc, #224]	; (800a1e4 <HW_SPI_Init+0xf8>)
 800a104:	601a      	str	r2, [r3, #0]

  hspi.Init.BaudRatePrescaler = SpiFrequency( 10000000 );
 800a106:	4b38      	ldr	r3, [pc, #224]	; (800a1e8 <HW_SPI_Init+0xfc>)
 800a108:	0018      	movs	r0, r3
 800a10a:	f000 f88d 	bl	800a228 <SpiFrequency>
 800a10e:	0002      	movs	r2, r0
 800a110:	4b33      	ldr	r3, [pc, #204]	; (800a1e0 <HW_SPI_Init+0xf4>)
 800a112:	61da      	str	r2, [r3, #28]
  hspi.Init.Direction      = SPI_DIRECTION_2LINES;
 800a114:	4b32      	ldr	r3, [pc, #200]	; (800a1e0 <HW_SPI_Init+0xf4>)
 800a116:	2200      	movs	r2, #0
 800a118:	609a      	str	r2, [r3, #8]
  hspi.Init.Mode           = SPI_MODE_MASTER;
 800a11a:	4b31      	ldr	r3, [pc, #196]	; (800a1e0 <HW_SPI_Init+0xf4>)
 800a11c:	2282      	movs	r2, #130	; 0x82
 800a11e:	0052      	lsls	r2, r2, #1
 800a120:	605a      	str	r2, [r3, #4]
  hspi.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800a122:	4b2f      	ldr	r3, [pc, #188]	; (800a1e0 <HW_SPI_Init+0xf4>)
 800a124:	2200      	movs	r2, #0
 800a126:	611a      	str	r2, [r3, #16]
  hspi.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800a128:	4b2d      	ldr	r3, [pc, #180]	; (800a1e0 <HW_SPI_Init+0xf4>)
 800a12a:	2200      	movs	r2, #0
 800a12c:	615a      	str	r2, [r3, #20]
  hspi.Init.DataSize       = SPI_DATASIZE_8BIT;
 800a12e:	4b2c      	ldr	r3, [pc, #176]	; (800a1e0 <HW_SPI_Init+0xf4>)
 800a130:	2200      	movs	r2, #0
 800a132:	60da      	str	r2, [r3, #12]
  hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;  
 800a134:	4b2a      	ldr	r3, [pc, #168]	; (800a1e0 <HW_SPI_Init+0xf4>)
 800a136:	2200      	movs	r2, #0
 800a138:	629a      	str	r2, [r3, #40]	; 0x28
  hspi.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800a13a:	4b29      	ldr	r3, [pc, #164]	; (800a1e0 <HW_SPI_Init+0xf4>)
 800a13c:	2200      	movs	r2, #0
 800a13e:	621a      	str	r2, [r3, #32]
  hspi.Init.NSS            = SPI_NSS_SOFT;
 800a140:	4b27      	ldr	r3, [pc, #156]	; (800a1e0 <HW_SPI_Init+0xf4>)
 800a142:	2280      	movs	r2, #128	; 0x80
 800a144:	0092      	lsls	r2, r2, #2
 800a146:	619a      	str	r2, [r3, #24]
  hspi.Init.TIMode         = SPI_TIMODE_DISABLE;
 800a148:	4b25      	ldr	r3, [pc, #148]	; (800a1e0 <HW_SPI_Init+0xf4>)
 800a14a:	2200      	movs	r2, #0
 800a14c:	625a      	str	r2, [r3, #36]	; 0x24


  SPI_CLK_ENABLE(); 
 800a14e:	4b27      	ldr	r3, [pc, #156]	; (800a1ec <HW_SPI_Init+0x100>)
 800a150:	4a26      	ldr	r2, [pc, #152]	; (800a1ec <HW_SPI_Init+0x100>)
 800a152:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a154:	2180      	movs	r1, #128	; 0x80
 800a156:	0149      	lsls	r1, r1, #5
 800a158:	430a      	orrs	r2, r1
 800a15a:	635a      	str	r2, [r3, #52]	; 0x34


  if(HAL_SPI_Init( &hspi) != HAL_OK)
 800a15c:	4b20      	ldr	r3, [pc, #128]	; (800a1e0 <HW_SPI_Init+0xf4>)
 800a15e:	0018      	movs	r0, r3
 800a160:	f7fd ff3c 	bl	8007fdc <HAL_SPI_Init>
 800a164:	1e03      	subs	r3, r0, #0
 800a166:	d001      	beq.n	800a16c <HW_SPI_Init+0x80>
  {
    /* Initialization Error */
     Error_Handler();
 800a168:	f7ff faf4 	bl	8009754 <Error_Handler>
  }

  /*##-2- Configure the SPI GPIOs */
  initStruct.Mode =GPIO_MODE_AF_PP;
 800a16c:	1d3b      	adds	r3, r7, #4
 800a16e:	2202      	movs	r2, #2
 800a170:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_PULLDOWN;
 800a172:	1d3b      	adds	r3, r7, #4
 800a174:	2202      	movs	r2, #2
 800a176:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 800a178:	1d3b      	adds	r3, r7, #4
 800a17a:	2203      	movs	r2, #3
 800a17c:	60da      	str	r2, [r3, #12]
  initStruct.Alternate= SPI1_AF ;
 800a17e:	1d3b      	adds	r3, r7, #4
 800a180:	2200      	movs	r2, #0
 800a182:	611a      	str	r2, [r3, #16]

  HW_GPIO_Init( RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct); 
 800a184:	1d3b      	adds	r3, r7, #4
 800a186:	481a      	ldr	r0, [pc, #104]	; (800a1f0 <HW_SPI_Init+0x104>)
 800a188:	001a      	movs	r2, r3
 800a18a:	2108      	movs	r1, #8
 800a18c:	f7ff fae6 	bl	800975c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct); 
 800a190:	1d3a      	adds	r2, r7, #4
 800a192:	23a0      	movs	r3, #160	; 0xa0
 800a194:	05db      	lsls	r3, r3, #23
 800a196:	2140      	movs	r1, #64	; 0x40
 800a198:	0018      	movs	r0, r3
 800a19a:	f7ff fadf 	bl	800975c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct); 
 800a19e:	1d3a      	adds	r2, r7, #4
 800a1a0:	23a0      	movs	r3, #160	; 0xa0
 800a1a2:	05db      	lsls	r3, r3, #23
 800a1a4:	2180      	movs	r1, #128	; 0x80
 800a1a6:	0018      	movs	r0, r3
 800a1a8:	f7ff fad8 	bl	800975c <HW_GPIO_Init>

  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 800a1ac:	1d3b      	adds	r3, r7, #4
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_PULLUP;
 800a1b2:	1d3b      	adds	r3, r7, #4
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	609a      	str	r2, [r3, #8]

  HW_GPIO_Init(  RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct );
 800a1b8:	1d3a      	adds	r2, r7, #4
 800a1ba:	2380      	movs	r3, #128	; 0x80
 800a1bc:	0219      	lsls	r1, r3, #8
 800a1be:	23a0      	movs	r3, #160	; 0xa0
 800a1c0:	05db      	lsls	r3, r3, #23
 800a1c2:	0018      	movs	r0, r3
 800a1c4:	f7ff faca 	bl	800975c <HW_GPIO_Init>

  HW_GPIO_Write ( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 800a1c8:	2380      	movs	r3, #128	; 0x80
 800a1ca:	0219      	lsls	r1, r3, #8
 800a1cc:	23a0      	movs	r3, #160	; 0xa0
 800a1ce:	05db      	lsls	r3, r3, #23
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	0018      	movs	r0, r3
 800a1d4:	f7ff fb8e 	bl	80098f4 <HW_GPIO_Write>
}
 800a1d8:	46c0      	nop			; (mov r8, r8)
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	b006      	add	sp, #24
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	2000088c 	.word	0x2000088c
 800a1e4:	40013000 	.word	0x40013000
 800a1e8:	00989680 	.word	0x00989680
 800a1ec:	40021000 	.word	0x40021000
 800a1f0:	50000400 	.word	0x50000400

0800a1f4 <HW_SPI_InOut>:
 *
 * @param [IN] outData Byte to be sent
 * @retval inData      Received byte.
 */
uint16_t HW_SPI_InOut( uint16_t txData )
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b086      	sub	sp, #24
 800a1f8:	af02      	add	r7, sp, #8
 800a1fa:	0002      	movs	r2, r0
 800a1fc:	1dbb      	adds	r3, r7, #6
 800a1fe:	801a      	strh	r2, [r3, #0]
  uint16_t rxData ;

  HAL_SPI_TransmitReceive( &hspi, ( uint8_t * ) &txData, ( uint8_t* ) &rxData, 1, HAL_MAX_DELAY);	
 800a200:	230e      	movs	r3, #14
 800a202:	18fa      	adds	r2, r7, r3
 800a204:	1db9      	adds	r1, r7, #6
 800a206:	4807      	ldr	r0, [pc, #28]	; (800a224 <HW_SPI_InOut+0x30>)
 800a208:	2301      	movs	r3, #1
 800a20a:	425b      	negs	r3, r3
 800a20c:	9300      	str	r3, [sp, #0]
 800a20e:	2301      	movs	r3, #1
 800a210:	f7fd ff56 	bl	80080c0 <HAL_SPI_TransmitReceive>

  return rxData;
 800a214:	230e      	movs	r3, #14
 800a216:	18fb      	adds	r3, r7, r3
 800a218:	881b      	ldrh	r3, [r3, #0]
}
 800a21a:	0018      	movs	r0, r3
 800a21c:	46bd      	mov	sp, r7
 800a21e:	b004      	add	sp, #16
 800a220:	bd80      	pop	{r7, pc}
 800a222:	46c0      	nop			; (mov r8, r8)
 800a224:	2000088c 	.word	0x2000088c

0800a228 <SpiFrequency>:

/* Private functions ---------------------------------------------------------*/

static uint32_t SpiFrequency( uint32_t hz )
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b086      	sub	sp, #24
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  uint32_t divisor = 0;
 800a230:	2300      	movs	r3, #0
 800a232:	617b      	str	r3, [r7, #20]
  uint32_t SysClkTmp = SystemCoreClock;
 800a234:	4b17      	ldr	r3, [pc, #92]	; (800a294 <SpiFrequency+0x6c>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	613b      	str	r3, [r7, #16]
  uint32_t baudRate;
  
  while( SysClkTmp > hz)
 800a23a:	e008      	b.n	800a24e <SpiFrequency+0x26>
  {
    divisor++;
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	3301      	adds	r3, #1
 800a240:	617b      	str	r3, [r7, #20]
    SysClkTmp= ( SysClkTmp >> 1);
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	085b      	lsrs	r3, r3, #1
 800a246:	613b      	str	r3, [r7, #16]
    
    if (divisor >= 7)
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	2b06      	cmp	r3, #6
 800a24c:	d804      	bhi.n	800a258 <SpiFrequency+0x30>
  while( SysClkTmp > hz)
 800a24e:	693a      	ldr	r2, [r7, #16]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	429a      	cmp	r2, r3
 800a254:	d8f2      	bhi.n	800a23c <SpiFrequency+0x14>
 800a256:	e000      	b.n	800a25a <SpiFrequency+0x32>
      break;
 800a258:	46c0      	nop			; (mov r8, r8)
  }
  
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )| 
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	2204      	movs	r2, #4
 800a25e:	4013      	ands	r3, r2
 800a260:	d101      	bne.n	800a266 <SpiFrequency+0x3e>
 800a262:	2200      	movs	r2, #0
 800a264:	e000      	b.n	800a268 <SpiFrequency+0x40>
 800a266:	2220      	movs	r2, #32
            ((( divisor & 0x2 ) == 0 )? 0x0 : SPI_CR1_BR_1  )| 
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	2102      	movs	r1, #2
 800a26c:	400b      	ands	r3, r1
 800a26e:	d101      	bne.n	800a274 <SpiFrequency+0x4c>
 800a270:	2300      	movs	r3, #0
 800a272:	e000      	b.n	800a276 <SpiFrequency+0x4e>
 800a274:	2310      	movs	r3, #16
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )| 
 800a276:	431a      	orrs	r2, r3
            ((( divisor & 0x1 ) == 0 )? 0x0 : SPI_CR1_BR_0  );
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	2101      	movs	r1, #1
 800a27c:	400b      	ands	r3, r1
 800a27e:	d101      	bne.n	800a284 <SpiFrequency+0x5c>
 800a280:	2300      	movs	r3, #0
 800a282:	e000      	b.n	800a286 <SpiFrequency+0x5e>
 800a284:	2308      	movs	r3, #8
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )| 
 800a286:	4313      	orrs	r3, r2
 800a288:	60fb      	str	r3, [r7, #12]
  
  return baudRate;
 800a28a:	68fb      	ldr	r3, [r7, #12]
}
 800a28c:	0018      	movs	r0, r3
 800a28e:	46bd      	mov	sp, r7
 800a290:	b006      	add	sp, #24
 800a292:	bd80      	pop	{r7, pc}
 800a294:	2000002c 	.word	0x2000002c

0800a298 <ledTimerCallback>:
    	}

}

static void ledTimerCallback()
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	af00      	add	r7, sp, #0
	//BSP_LED_Off(LED2);
}
 800a29c:	46c0      	nop			; (mov r8, r8)
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <txDoneEventCallback>:

void txDoneEventCallback()
{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	46c0      	nop			; (mov r8, r8)
//	BSP_LED_Off(LED3);
//    Radio.Rx(0);
	__NOP();
}
 800a2a8:	46c0      	nop			; (mov r8, r8)
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
	...

0800a2b0 <rxDoneEventCallback>:


void rxDoneEventCallback(uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr)
{
 800a2b0:	b590      	push	{r4, r7, lr}
 800a2b2:	b091      	sub	sp, #68	; 0x44
 800a2b4:	af02      	add	r7, sp, #8
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	000c      	movs	r4, r1
 800a2ba:	0010      	movs	r0, r2
 800a2bc:	0019      	movs	r1, r3
 800a2be:	230a      	movs	r3, #10
 800a2c0:	18fb      	adds	r3, r7, r3
 800a2c2:	1c22      	adds	r2, r4, #0
 800a2c4:	801a      	strh	r2, [r3, #0]
 800a2c6:	2308      	movs	r3, #8
 800a2c8:	18fb      	adds	r3, r7, r3
 800a2ca:	1c02      	adds	r2, r0, #0
 800a2cc:	801a      	strh	r2, [r3, #0]
 800a2ce:	1dfb      	adds	r3, r7, #7
 800a2d0:	1c0a      	adds	r2, r1, #0
 800a2d2:	701a      	strb	r2, [r3, #0]
	  //BSP_LED_On(LED2);
	  TimerStart(&ledTimer);
 800a2d4:	4b67      	ldr	r3, [pc, #412]	; (800a474 <rxDoneEventCallback+0x1c4>)
 800a2d6:	0018      	movs	r0, r3
 800a2d8:	f7ff f80a 	bl	80092f0 <TimerStart>
	  RTC_TimeTypeDef time ;
	  RTC_DateTypeDef date ;
	  HW_RTC_GetCalendarValue( &date , &time );
 800a2dc:	2318      	movs	r3, #24
 800a2de:	18fa      	adds	r2, r7, r3
 800a2e0:	2314      	movs	r3, #20
 800a2e2:	18fb      	adds	r3, r7, r3
 800a2e4:	0011      	movs	r1, r2
 800a2e6:	0018      	movs	r0, r3
 800a2e8:	f7ff fe54 	bl	8009f94 <HW_RTC_GetCalendarValue>
	  memcpy(Buffer,payload, (BUFFER_SIZE));
 800a2ec:	4a62      	ldr	r2, [pc, #392]	; (800a478 <rxDoneEventCallback+0x1c8>)
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	0010      	movs	r0, r2
 800a2f2:	0019      	movs	r1, r3
 800a2f4:	2340      	movs	r3, #64	; 0x40
 800a2f6:	001a      	movs	r2, r3
 800a2f8:	f000 ffba 	bl	800b270 <memcpy>
	  databuffer = HW_AdcReadChannel(ADC_CHANNEL_0);
 800a2fc:	2001      	movs	r0, #1
 800a2fe:	f000 fbb1 	bl	800aa64 <HW_AdcReadChannel>
 800a302:	0003      	movs	r3, r0
 800a304:	001a      	movs	r2, r3
 800a306:	4b5d      	ldr	r3, [pc, #372]	; (800a47c <rxDoneEventCallback+0x1cc>)
 800a308:	801a      	strh	r2, [r3, #0]
//															 dat.frame.hour, dat.frame.sensor);
	  	  	/**
	  	  	 * Compare receiver and transmiter time,adc values
	  	  	 */

	  	  	uint32_t subs_r = 1000 - (int)(time.SubSeconds * 1000 / (time.SecondFraction + 1));
 800a30a:	2318      	movs	r3, #24
 800a30c:	18fb      	adds	r3, r7, r3
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	22fa      	movs	r2, #250	; 0xfa
 800a312:	0092      	lsls	r2, r2, #2
 800a314:	435a      	muls	r2, r3
 800a316:	2318      	movs	r3, #24
 800a318:	18fb      	adds	r3, r7, r3
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	3301      	adds	r3, #1
 800a31e:	0019      	movs	r1, r3
 800a320:	0010      	movs	r0, r2
 800a322:	f7f5 ff0d 	bl	8000140 <__udivsi3>
 800a326:	0003      	movs	r3, r0
 800a328:	001a      	movs	r2, r3
 800a32a:	23fa      	movs	r3, #250	; 0xfa
 800a32c:	009b      	lsls	r3, r3, #2
 800a32e:	1a9b      	subs	r3, r3, r2
 800a330:	637b      	str	r3, [r7, #52]	; 0x34
	  	  	uint32_t ms_s_r = time.Hours * 3600000 + time.Minutes * 60000 + time.Seconds * 1000 + subs_r;
 800a332:	2318      	movs	r3, #24
 800a334:	18fb      	adds	r3, r7, r3
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	001a      	movs	r2, r3
 800a33a:	4b51      	ldr	r3, [pc, #324]	; (800a480 <rxDoneEventCallback+0x1d0>)
 800a33c:	435a      	muls	r2, r3
 800a33e:	2318      	movs	r3, #24
 800a340:	18fb      	adds	r3, r7, r3
 800a342:	785b      	ldrb	r3, [r3, #1]
 800a344:	0019      	movs	r1, r3
 800a346:	4b4f      	ldr	r3, [pc, #316]	; (800a484 <rxDoneEventCallback+0x1d4>)
 800a348:	434b      	muls	r3, r1
 800a34a:	18d2      	adds	r2, r2, r3
 800a34c:	2318      	movs	r3, #24
 800a34e:	18fb      	adds	r3, r7, r3
 800a350:	789b      	ldrb	r3, [r3, #2]
 800a352:	0019      	movs	r1, r3
 800a354:	23fa      	movs	r3, #250	; 0xfa
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	434b      	muls	r3, r1
 800a35a:	18d3      	adds	r3, r2, r3
 800a35c:	001a      	movs	r2, r3
 800a35e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a360:	18d3      	adds	r3, r2, r3
 800a362:	633b      	str	r3, [r7, #48]	; 0x30

			data_s.ms_s = Buffer[0] | (Buffer[1] << 8) | (Buffer[2] << 16) | (Buffer[3] << 24);
 800a364:	4b44      	ldr	r3, [pc, #272]	; (800a478 <rxDoneEventCallback+0x1c8>)
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	001a      	movs	r2, r3
 800a36a:	4b43      	ldr	r3, [pc, #268]	; (800a478 <rxDoneEventCallback+0x1c8>)
 800a36c:	785b      	ldrb	r3, [r3, #1]
 800a36e:	021b      	lsls	r3, r3, #8
 800a370:	431a      	orrs	r2, r3
 800a372:	4b41      	ldr	r3, [pc, #260]	; (800a478 <rxDoneEventCallback+0x1c8>)
 800a374:	789b      	ldrb	r3, [r3, #2]
 800a376:	041b      	lsls	r3, r3, #16
 800a378:	431a      	orrs	r2, r3
 800a37a:	4b3f      	ldr	r3, [pc, #252]	; (800a478 <rxDoneEventCallback+0x1c8>)
 800a37c:	78db      	ldrb	r3, [r3, #3]
 800a37e:	061b      	lsls	r3, r3, #24
 800a380:	4313      	orrs	r3, r2
 800a382:	001a      	movs	r2, r3
 800a384:	4b40      	ldr	r3, [pc, #256]	; (800a488 <rxDoneEventCallback+0x1d8>)
 800a386:	21ff      	movs	r1, #255	; 0xff
 800a388:	4011      	ands	r1, r2
 800a38a:	000c      	movs	r4, r1
 800a38c:	7819      	ldrb	r1, [r3, #0]
 800a38e:	2000      	movs	r0, #0
 800a390:	4001      	ands	r1, r0
 800a392:	1c08      	adds	r0, r1, #0
 800a394:	1c21      	adds	r1, r4, #0
 800a396:	4301      	orrs	r1, r0
 800a398:	7019      	strb	r1, [r3, #0]
 800a39a:	0a11      	lsrs	r1, r2, #8
 800a39c:	20ff      	movs	r0, #255	; 0xff
 800a39e:	4001      	ands	r1, r0
 800a3a0:	000c      	movs	r4, r1
 800a3a2:	7859      	ldrb	r1, [r3, #1]
 800a3a4:	2000      	movs	r0, #0
 800a3a6:	4001      	ands	r1, r0
 800a3a8:	1c08      	adds	r0, r1, #0
 800a3aa:	1c21      	adds	r1, r4, #0
 800a3ac:	4301      	orrs	r1, r0
 800a3ae:	7059      	strb	r1, [r3, #1]
 800a3b0:	0c11      	lsrs	r1, r2, #16
 800a3b2:	20ff      	movs	r0, #255	; 0xff
 800a3b4:	4001      	ands	r1, r0
 800a3b6:	000c      	movs	r4, r1
 800a3b8:	7899      	ldrb	r1, [r3, #2]
 800a3ba:	2000      	movs	r0, #0
 800a3bc:	4001      	ands	r1, r0
 800a3be:	1c08      	adds	r0, r1, #0
 800a3c0:	1c21      	adds	r1, r4, #0
 800a3c2:	4301      	orrs	r1, r0
 800a3c4:	7099      	strb	r1, [r3, #2]
 800a3c6:	0e10      	lsrs	r0, r2, #24
 800a3c8:	78da      	ldrb	r2, [r3, #3]
 800a3ca:	2100      	movs	r1, #0
 800a3cc:	400a      	ands	r2, r1
 800a3ce:	1c11      	adds	r1, r2, #0
 800a3d0:	1c02      	adds	r2, r0, #0
 800a3d2:	430a      	orrs	r2, r1
 800a3d4:	70da      	strb	r2, [r3, #3]
			data_s.sensor_s = Buffer[4] + (Buffer[5] << 8);
 800a3d6:	4b28      	ldr	r3, [pc, #160]	; (800a478 <rxDoneEventCallback+0x1c8>)
 800a3d8:	791b      	ldrb	r3, [r3, #4]
 800a3da:	b29a      	uxth	r2, r3
 800a3dc:	4b26      	ldr	r3, [pc, #152]	; (800a478 <rxDoneEventCallback+0x1c8>)
 800a3de:	795b      	ldrb	r3, [r3, #5]
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	021b      	lsls	r3, r3, #8
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	18d3      	adds	r3, r2, r3
 800a3e8:	b29a      	uxth	r2, r3
 800a3ea:	4b27      	ldr	r3, [pc, #156]	; (800a488 <rxDoneEventCallback+0x1d8>)
 800a3ec:	21ff      	movs	r1, #255	; 0xff
 800a3ee:	4011      	ands	r1, r2
 800a3f0:	000c      	movs	r4, r1
 800a3f2:	7919      	ldrb	r1, [r3, #4]
 800a3f4:	2000      	movs	r0, #0
 800a3f6:	4001      	ands	r1, r0
 800a3f8:	1c08      	adds	r0, r1, #0
 800a3fa:	1c21      	adds	r1, r4, #0
 800a3fc:	4301      	orrs	r1, r0
 800a3fe:	7119      	strb	r1, [r3, #4]
 800a400:	0a12      	lsrs	r2, r2, #8
 800a402:	b290      	uxth	r0, r2
 800a404:	795a      	ldrb	r2, [r3, #5]
 800a406:	2100      	movs	r1, #0
 800a408:	400a      	ands	r2, r1
 800a40a:	1c11      	adds	r1, r2, #0
 800a40c:	1c02      	adds	r2, r0, #0
 800a40e:	430a      	orrs	r2, r1
 800a410:	715a      	strb	r2, [r3, #5]
	  	  	uint16_t packetCounter = Buffer[6] + (Buffer[7] << 8);
 800a412:	4b19      	ldr	r3, [pc, #100]	; (800a478 <rxDoneEventCallback+0x1c8>)
 800a414:	799b      	ldrb	r3, [r3, #6]
 800a416:	b299      	uxth	r1, r3
 800a418:	4b17      	ldr	r3, [pc, #92]	; (800a478 <rxDoneEventCallback+0x1c8>)
 800a41a:	79db      	ldrb	r3, [r3, #7]
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	021b      	lsls	r3, r3, #8
 800a420:	b29a      	uxth	r2, r3
 800a422:	232e      	movs	r3, #46	; 0x2e
 800a424:	18fb      	adds	r3, r7, r3
 800a426:	188a      	adds	r2, r1, r2
 800a428:	801a      	strh	r2, [r3, #0]

			vcom_Send("[%d]Transmitter : %d,%d Receiver : %d,%d\n",packetCounter, data_s.ms_s, data_s.sensor_s , ms_s_r,databuffer);
 800a42a:	232e      	movs	r3, #46	; 0x2e
 800a42c:	18fb      	adds	r3, r7, r3
 800a42e:	881c      	ldrh	r4, [r3, #0]
 800a430:	4b15      	ldr	r3, [pc, #84]	; (800a488 <rxDoneEventCallback+0x1d8>)
 800a432:	781a      	ldrb	r2, [r3, #0]
 800a434:	7859      	ldrb	r1, [r3, #1]
 800a436:	0209      	lsls	r1, r1, #8
 800a438:	430a      	orrs	r2, r1
 800a43a:	7899      	ldrb	r1, [r3, #2]
 800a43c:	0409      	lsls	r1, r1, #16
 800a43e:	430a      	orrs	r2, r1
 800a440:	78db      	ldrb	r3, [r3, #3]
 800a442:	061b      	lsls	r3, r3, #24
 800a444:	4313      	orrs	r3, r2
 800a446:	0019      	movs	r1, r3
 800a448:	4b0f      	ldr	r3, [pc, #60]	; (800a488 <rxDoneEventCallback+0x1d8>)
 800a44a:	791a      	ldrb	r2, [r3, #4]
 800a44c:	795b      	ldrb	r3, [r3, #5]
 800a44e:	021b      	lsls	r3, r3, #8
 800a450:	4313      	orrs	r3, r2
 800a452:	b29b      	uxth	r3, r3
 800a454:	001a      	movs	r2, r3
 800a456:	4b09      	ldr	r3, [pc, #36]	; (800a47c <rxDoneEventCallback+0x1cc>)
 800a458:	881b      	ldrh	r3, [r3, #0]
 800a45a:	480c      	ldr	r0, [pc, #48]	; (800a48c <rxDoneEventCallback+0x1dc>)
 800a45c:	9301      	str	r3, [sp, #4]
 800a45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a460:	9300      	str	r3, [sp, #0]
 800a462:	0013      	movs	r3, r2
 800a464:	000a      	movs	r2, r1
 800a466:	0021      	movs	r1, r4
 800a468:	f000 fd66 	bl	800af38 <vcom_Send>
}
 800a46c:	46c0      	nop			; (mov r8, r8)
 800a46e:	46bd      	mov	sp, r7
 800a470:	b00f      	add	sp, #60	; 0x3c
 800a472:	bd90      	pop	{r4, r7, pc}
 800a474:	200008e4 	.word	0x200008e4
 800a478:	20000fb4 	.word	0x20000fb4
 800a47c:	200008f8 	.word	0x200008f8
 800a480:	0036ee80 	.word	0x0036ee80
 800a484:	0000ea60 	.word	0x0000ea60
 800a488:	20000fac 	.word	0x20000fac
 800a48c:	0800e670 	.word	0x0800e670

0800a490 <main>:



int main(void)
{
 800a490:	b590      	push	{r4, r7, lr}
 800a492:	b099      	sub	sp, #100	; 0x64
 800a494:	af0a      	add	r7, sp, #40	; 0x28
	HAL_Init();
 800a496:	f7fa fbf5 	bl	8004c84 <HAL_Init>
	SystemClock_Config();
 800a49a:	f000 fa0d 	bl	800a8b8 <SystemClock_Config>
	HW_Init();
 800a49e:	f000 f9e1 	bl	800a864 <HW_Init>
	at_hal_init();
 800a4a2:	f7ff f945 	bl	8009730 <at_hal_init>

    /* GPIO init for PA11*/
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a4a6:	4b5d      	ldr	r3, [pc, #372]	; (800a61c <main+0x18c>)
 800a4a8:	4a5c      	ldr	r2, [pc, #368]	; (800a61c <main+0x18c>)
 800a4aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a4ac:	2101      	movs	r1, #1
 800a4ae:	430a      	orrs	r2, r1
 800a4b0:	62da      	str	r2, [r3, #44]	; 0x2c
 800a4b2:	4b5a      	ldr	r3, [pc, #360]	; (800a61c <main+0x18c>)
 800a4b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	4013      	ands	r3, r2
 800a4ba:	607b      	str	r3, [r7, #4]
 800a4bc:	687b      	ldr	r3, [r7, #4]
    GPIO_InitTypeDef  GPIO_InitStruct;
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800a4be:	2324      	movs	r3, #36	; 0x24
 800a4c0:	18fb      	adds	r3, r7, r3
 800a4c2:	2280      	movs	r2, #128	; 0x80
 800a4c4:	0112      	lsls	r2, r2, #4
 800a4c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a4c8:	2324      	movs	r3, #36	; 0x24
 800a4ca:	18fb      	adds	r3, r7, r3
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4d0:	2324      	movs	r3, #36	; 0x24
 800a4d2:	18fb      	adds	r3, r7, r3
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a4d8:	2324      	movs	r3, #36	; 0x24
 800a4da:	18fb      	adds	r3, r7, r3
 800a4dc:	2203      	movs	r2, #3
 800a4de:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a4e0:	2324      	movs	r3, #36	; 0x24
 800a4e2:	18fa      	adds	r2, r7, r3
 800a4e4:	23a0      	movs	r3, #160	; 0xa0
 800a4e6:	05db      	lsls	r3, r3, #23
 800a4e8:	0011      	movs	r1, r2
 800a4ea:	0018      	movs	r0, r3
 800a4ec:	f7fb f8e8 	bl	80056c0 <HAL_GPIO_Init>

    hi2c1.Instance = I2C1;
 800a4f0:	4b4b      	ldr	r3, [pc, #300]	; (800a620 <main+0x190>)
 800a4f2:	4a4c      	ldr	r2, [pc, #304]	; (800a624 <main+0x194>)
 800a4f4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00300F38;
 800a4f6:	4b4a      	ldr	r3, [pc, #296]	; (800a620 <main+0x190>)
 800a4f8:	4a4b      	ldr	r2, [pc, #300]	; (800a628 <main+0x198>)
 800a4fa:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 800a4fc:	4b48      	ldr	r3, [pc, #288]	; (800a620 <main+0x190>)
 800a4fe:	2200      	movs	r2, #0
 800a500:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a502:	4b47      	ldr	r3, [pc, #284]	; (800a620 <main+0x190>)
 800a504:	2201      	movs	r2, #1
 800a506:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a508:	4b45      	ldr	r3, [pc, #276]	; (800a620 <main+0x190>)
 800a50a:	2200      	movs	r2, #0
 800a50c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800a50e:	4b44      	ldr	r3, [pc, #272]	; (800a620 <main+0x190>)
 800a510:	2200      	movs	r2, #0
 800a512:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a514:	4b42      	ldr	r3, [pc, #264]	; (800a620 <main+0x190>)
 800a516:	2200      	movs	r2, #0
 800a518:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a51a:	4b41      	ldr	r3, [pc, #260]	; (800a620 <main+0x190>)
 800a51c:	2200      	movs	r2, #0
 800a51e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a520:	4b3f      	ldr	r3, [pc, #252]	; (800a620 <main+0x190>)
 800a522:	2200      	movs	r2, #0
 800a524:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a526:	4b3e      	ldr	r3, [pc, #248]	; (800a620 <main+0x190>)
 800a528:	0018      	movs	r0, r3
 800a52a:	f7fb fa81 	bl	8005a30 <HAL_I2C_Init>
 800a52e:	1e03      	subs	r3, r0, #0
 800a530:	d000      	beq.n	800a534 <main+0xa4>
	  {
	    while(1);
 800a532:	e7fe      	b.n	800a532 <main+0xa2>
	  };


	ssd1306_Init();
 800a534:	f000 fb9e 	bl	800ac74 <ssd1306_Init>
	HAL_Delay(10);
 800a538:	200a      	movs	r0, #10
 800a53a:	f000 f890 	bl	800a65e <HAL_Delay>
	ssd1306_Fill(White);
 800a53e:	2001      	movs	r0, #1
 800a540:	f000 fc06 	bl	800ad50 <ssd1306_Fill>
	HAL_Delay(10);
 800a544:	200a      	movs	r0, #10
 800a546:	f000 f88a 	bl	800a65e <HAL_Delay>
	ssd1306_UpdateScreen();
 800a54a:	f000 fc25 	bl	800ad98 <ssd1306_UpdateScreen>
	HAL_Delay(10);
 800a54e:	200a      	movs	r0, #10
 800a550:	f000 f885 	bl	800a65e <HAL_Delay>

	RadioEvents_t radioEvents;
    radioEvents.TxDone = txDoneEventCallback;
 800a554:	2308      	movs	r3, #8
 800a556:	18fb      	adds	r3, r7, r3
 800a558:	4a34      	ldr	r2, [pc, #208]	; (800a62c <main+0x19c>)
 800a55a:	601a      	str	r2, [r3, #0]
    radioEvents.RxDone = rxDoneEventCallback;
 800a55c:	2308      	movs	r3, #8
 800a55e:	18fb      	adds	r3, r7, r3
 800a560:	4a33      	ldr	r2, [pc, #204]	; (800a630 <main+0x1a0>)
 800a562:	609a      	str	r2, [r3, #8]
    Radio.Init(&radioEvents);
 800a564:	4b33      	ldr	r3, [pc, #204]	; (800a634 <main+0x1a4>)
 800a566:	689b      	ldr	r3, [r3, #8]
 800a568:	2208      	movs	r2, #8
 800a56a:	18ba      	adds	r2, r7, r2
 800a56c:	0010      	movs	r0, r2
 800a56e:	4798      	blx	r3

    Radio.SetChannel(LORA_FREQUENCY);
 800a570:	4b30      	ldr	r3, [pc, #192]	; (800a634 <main+0x1a4>)
 800a572:	695b      	ldr	r3, [r3, #20]
 800a574:	4a30      	ldr	r2, [pc, #192]	; (800a638 <main+0x1a8>)
 800a576:	0010      	movs	r0, r2
 800a578:	4798      	blx	r3
    Radio.SetTxConfig(MODEM_LORA, LORA_TX_POWER, 0, LORA_BANDWIDTH, LORA_DATARATE, LORA_CODERATE, LORA_PREAMBLE_LEN,
 800a57a:	4b2e      	ldr	r3, [pc, #184]	; (800a634 <main+0x1a4>)
 800a57c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a57e:	4b2f      	ldr	r3, [pc, #188]	; (800a63c <main+0x1ac>)
 800a580:	9308      	str	r3, [sp, #32]
 800a582:	2300      	movs	r3, #0
 800a584:	9307      	str	r3, [sp, #28]
 800a586:	2300      	movs	r3, #0
 800a588:	9306      	str	r3, [sp, #24]
 800a58a:	2300      	movs	r3, #0
 800a58c:	9305      	str	r3, [sp, #20]
 800a58e:	2301      	movs	r3, #1
 800a590:	9304      	str	r3, [sp, #16]
 800a592:	2300      	movs	r3, #0
 800a594:	9303      	str	r3, [sp, #12]
 800a596:	2308      	movs	r3, #8
 800a598:	9302      	str	r3, [sp, #8]
 800a59a:	2301      	movs	r3, #1
 800a59c:	9301      	str	r3, [sp, #4]
 800a59e:	2307      	movs	r3, #7
 800a5a0:	9300      	str	r3, [sp, #0]
 800a5a2:	2302      	movs	r3, #2
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	210e      	movs	r1, #14
 800a5a8:	2001      	movs	r0, #1
 800a5aa:	47a0      	blx	r4
                      false, true, false, 0, 0, 3000000);  // timeout

    Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_DATARATE, LORA_CODERATE, 0, LORA_PREAMBLE_LEN,
 800a5ac:	4b21      	ldr	r3, [pc, #132]	; (800a634 <main+0x1a4>)
 800a5ae:	6a1c      	ldr	r4, [r3, #32]
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	9309      	str	r3, [sp, #36]	; 0x24
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	9308      	str	r3, [sp, #32]
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	9307      	str	r3, [sp, #28]
 800a5bc:	2300      	movs	r3, #0
 800a5be:	9306      	str	r3, [sp, #24]
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	9305      	str	r3, [sp, #20]
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	9304      	str	r3, [sp, #16]
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	9303      	str	r3, [sp, #12]
 800a5cc:	23fa      	movs	r3, #250	; 0xfa
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	9302      	str	r3, [sp, #8]
 800a5d2:	2308      	movs	r3, #8
 800a5d4:	9301      	str	r3, [sp, #4]
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	9300      	str	r3, [sp, #0]
 800a5da:	2301      	movs	r3, #1
 800a5dc:	2207      	movs	r2, #7
 800a5de:	2102      	movs	r1, #2
 800a5e0:	2001      	movs	r0, #1
 800a5e2:	47a0      	blx	r4
                      1000, false, 0, true, false, 0, false, true);

    Radio.Rx(0);
 800a5e4:	4b13      	ldr	r3, [pc, #76]	; (800a634 <main+0x1a4>)
 800a5e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5e8:	2000      	movs	r0, #0
 800a5ea:	4798      	blx	r3

    TimerInit(&ledTimer, ledTimerCallback);
 800a5ec:	4a14      	ldr	r2, [pc, #80]	; (800a640 <main+0x1b0>)
 800a5ee:	4b15      	ldr	r3, [pc, #84]	; (800a644 <main+0x1b4>)
 800a5f0:	0011      	movs	r1, r2
 800a5f2:	0018      	movs	r0, r3
 800a5f4:	f7fe fe64 	bl	80092c0 <TimerInit>
    TimerSetValue(&ledTimer, 500);
 800a5f8:	23fa      	movs	r3, #250	; 0xfa
 800a5fa:	005a      	lsls	r2, r3, #1
 800a5fc:	4b11      	ldr	r3, [pc, #68]	; (800a644 <main+0x1b4>)
 800a5fe:	0011      	movs	r1, r2
 800a600:	0018      	movs	r0, r3
 800a602:	f7ff f81f 	bl	8009644 <TimerSetValue>
    data_s.packetCount = 0;
 800a606:	4b10      	ldr	r3, [pc, #64]	; (800a648 <main+0x1b8>)
 800a608:	799a      	ldrb	r2, [r3, #6]
 800a60a:	2100      	movs	r1, #0
 800a60c:	400a      	ands	r2, r1
 800a60e:	719a      	strb	r2, [r3, #6]
 800a610:	79da      	ldrb	r2, [r3, #7]
 800a612:	2100      	movs	r1, #0
 800a614:	400a      	ands	r2, r1
 800a616:	71da      	strb	r2, [r3, #7]
		   gpioCallback();  // for transmitter
	   	   }
#endif

#ifdef RX
		for(;;); // for receiver
 800a618:	e7fe      	b.n	800a618 <main+0x188>
 800a61a:	46c0      	nop			; (mov r8, r8)
 800a61c:	40021000 	.word	0x40021000
 800a620:	20000f5c 	.word	0x20000f5c
 800a624:	40005400 	.word	0x40005400
 800a628:	00300f38 	.word	0x00300f38
 800a62c:	0800a2a3 	.word	0x0800a2a3
 800a630:	0800a2b1 	.word	0x0800a2b1
 800a634:	0800e58c 	.word	0x0800e58c
 800a638:	33bca100 	.word	0x33bca100
 800a63c:	002dc6c0 	.word	0x002dc6c0
 800a640:	0800a299 	.word	0x0800a299
 800a644:	200008e4 	.word	0x200008e4
 800a648:	20000fac 	.word	0x20000fac

0800a64c <HAL_InitTick>:
  * @brief  don't enable systick
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
   /* Return function status */
  return HAL_OK;
 800a654:	2300      	movs	r3, #0
}
 800a656:	0018      	movs	r0, r3
 800a658:	46bd      	mov	sp, r7
 800a65a:	b002      	add	sp, #8
 800a65c:	bd80      	pop	{r7, pc}

0800a65e <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 800a65e:	b580      	push	{r7, lr}
 800a660:	b082      	sub	sp, #8
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
  DelayMs( Delay ); /* based on RTC */
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	0018      	movs	r0, r3
 800a66a:	f7fe fdd5 	bl	8009218 <DelayMs>
}
 800a66e:	46c0      	nop			; (mov r8, r8)
 800a670:	46bd      	mov	sp, r7
 800a672:	b002      	add	sp, #8
 800a674:	bd80      	pop	{r7, pc}
	...

0800a678 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	af00      	add	r7, sp, #0
  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD( ); 
 800a67c:	f7fb fd8a 	bl	8006194 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower( );
 800a680:	f7fb fda4 	bl	80061cc <HAL_PWREx_EnableUltraLowPower>
  
  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 800a684:	4b08      	ldr	r3, [pc, #32]	; (800a6a8 <HAL_MspInit+0x30>)
 800a686:	4a08      	ldr	r2, [pc, #32]	; (800a6a8 <HAL_MspInit+0x30>)
 800a688:	6812      	ldr	r2, [r2, #0]
 800a68a:	2108      	movs	r1, #8
 800a68c:	430a      	orrs	r2, r1
 800a68e:	601a      	str	r2, [r3, #0]
  
  /*In debug mode, e.g. when DBGMCU is activated, Arm core has always clocks
   * And will not wait that the FLACH is ready to be read. It can miss in this 
   * case the first instruction. To overcome this issue, the flash remain clcoked during sleep mode
   */
  DBG( __HAL_FLASH_SLEEP_POWERDOWN_DISABLE(); );
 800a690:	4b05      	ldr	r3, [pc, #20]	; (800a6a8 <HAL_MspInit+0x30>)
 800a692:	4a05      	ldr	r2, [pc, #20]	; (800a6a8 <HAL_MspInit+0x30>)
 800a694:	6812      	ldr	r2, [r2, #0]
 800a696:	2108      	movs	r1, #8
 800a698:	438a      	bics	r2, r1
 800a69a:	601a      	str	r2, [r3, #0]
  
#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/  
  HAL_PWREx_EnableFastWakeUp( );
 800a69c:	f7fb fd88 	bl	80061b0 <HAL_PWREx_EnableFastWakeUp>
#else  
  HAL_PWREx_DisableFastWakeUp( );
#endif
}
 800a6a0:	46c0      	nop			; (mov r8, r8)
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	46c0      	nop			; (mov r8, r8)
 800a6a8:	40022000 	.word	0x40022000

0800a6ac <HAL_RTC_MspInit>:
  *        order to modify the RTC Clock source, as consequence RTC registers (including 
  *        the backup registers) and RCC_CSR register are set to their reset values.  
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b09a      	sub	sp, #104	; 0x68
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

  /*##-1- Configue the RTC clock soucre ######################################*/
  /* -a- Enable LSE Oscillator */
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSE;
 800a6b4:	2330      	movs	r3, #48	; 0x30
 800a6b6:	18fb      	adds	r3, r7, r3
 800a6b8:	2204      	movs	r2, #4
 800a6ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800a6bc:	2330      	movs	r3, #48	; 0x30
 800a6be:	18fb      	adds	r3, r7, r3
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800a6c4:	2330      	movs	r3, #48	; 0x30
 800a6c6:	18fb      	adds	r3, r7, r3
 800a6c8:	2280      	movs	r2, #128	; 0x80
 800a6ca:	0052      	lsls	r2, r2, #1
 800a6cc:	609a      	str	r2, [r3, #8]
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a6ce:	2330      	movs	r3, #48	; 0x30
 800a6d0:	18fb      	adds	r3, r7, r3
 800a6d2:	0018      	movs	r0, r3
 800a6d4:	f7fb fd88 	bl	80061e8 <HAL_RCC_OscConfig>
 800a6d8:	1e03      	subs	r3, r0, #0
 800a6da:	d001      	beq.n	800a6e0 <HAL_RTC_MspInit+0x34>
  {
    Error_Handler();
 800a6dc:	f7ff f83a 	bl	8009754 <Error_Handler>
  }

  /* -b- Select LSI as RTC clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a6e0:	230c      	movs	r3, #12
 800a6e2:	18fb      	adds	r3, r7, r3
 800a6e4:	2220      	movs	r2, #32
 800a6e6:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800a6e8:	230c      	movs	r3, #12
 800a6ea:	18fb      	adds	r3, r7, r3
 800a6ec:	2280      	movs	r2, #128	; 0x80
 800a6ee:	0252      	lsls	r2, r2, #9
 800a6f0:	605a      	str	r2, [r3, #4]
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a6f2:	230c      	movs	r3, #12
 800a6f4:	18fb      	adds	r3, r7, r3
 800a6f6:	0018      	movs	r0, r3
 800a6f8:	f7fc fb3e 	bl	8006d78 <HAL_RCCEx_PeriphCLKConfig>
 800a6fc:	1e03      	subs	r3, r0, #0
 800a6fe:	d001      	beq.n	800a704 <HAL_RTC_MspInit+0x58>
  { 
    Error_Handler();
 800a700:	f7ff f828 	bl	8009754 <Error_Handler>
  }

  /*##-2- Enable the RTC peripheral Clock ####################################*/
  /* Enable RTC Clock */
  __HAL_RCC_RTC_ENABLE();
 800a704:	4b09      	ldr	r3, [pc, #36]	; (800a72c <HAL_RTC_MspInit+0x80>)
 800a706:	4a09      	ldr	r2, [pc, #36]	; (800a72c <HAL_RTC_MspInit+0x80>)
 800a708:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a70a:	2180      	movs	r1, #128	; 0x80
 800a70c:	02c9      	lsls	r1, r1, #11
 800a70e:	430a      	orrs	r2, r1
 800a710:	651a      	str	r2, [r3, #80]	; 0x50
  
  /*##-3- Configure the NVIC for RTC Alarm ###################################*/
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0, 0);
 800a712:	2200      	movs	r2, #0
 800a714:	2100      	movs	r1, #0
 800a716:	2002      	movs	r0, #2
 800a718:	f7fa ff8c 	bl	8005634 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800a71c:	2002      	movs	r0, #2
 800a71e:	f7fa ff9f 	bl	8005660 <HAL_NVIC_EnableIRQ>
}
 800a722:	46c0      	nop			; (mov r8, r8)
 800a724:	46bd      	mov	sp, r7
 800a726:	b01a      	add	sp, #104	; 0x68
 800a728:	bd80      	pop	{r7, pc}
 800a72a:	46c0      	nop			; (mov r8, r8)
 800a72c:	40021000 	.word	0x40021000

0800a730 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b082      	sub	sp, #8
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  TimerIrqHandler( );
 800a738:	f7fe fe78 	bl	800942c <TimerIrqHandler>
}
 800a73c:	46c0      	nop			; (mov r8, r8)
 800a73e:	46bd      	mov	sp, r7
 800a740:	b002      	add	sp, #8
 800a742:	bd80      	pop	{r7, pc}

0800a744 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
 800a74a:	0002      	movs	r2, r0
 800a74c:	1dbb      	adds	r3, r7, #6
 800a74e:	801a      	strh	r2, [r3, #0]
  HW_GPIO_IrqHandler( GPIO_Pin );
 800a750:	1dbb      	adds	r3, r7, #6
 800a752:	881b      	ldrh	r3, [r3, #0]
 800a754:	0018      	movs	r0, r3
 800a756:	f7ff f8af 	bl	80098b8 <HW_GPIO_IrqHandler>
}
 800a75a:	46c0      	nop			; (mov r8, r8)
 800a75c:	46bd      	mov	sp, r7
 800a75e:	b002      	add	sp, #8
 800a760:	bd80      	pop	{r7, pc}

0800a762 <MSP_GetIRQn>:
  * @brief  Gets IRQ number as a finction of the GPIO_Pin.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval IRQ number
  */
IRQn_Type MSP_GetIRQn( uint16_t GPIO_Pin)
{
 800a762:	b580      	push	{r7, lr}
 800a764:	b082      	sub	sp, #8
 800a766:	af00      	add	r7, sp, #0
 800a768:	0002      	movs	r2, r0
 800a76a:	1dbb      	adds	r3, r7, #6
 800a76c:	801a      	strh	r2, [r3, #0]
  switch( GPIO_Pin )
 800a76e:	1dbb      	adds	r3, r7, #6
 800a770:	881b      	ldrh	r3, [r3, #0]
 800a772:	2b04      	cmp	r3, #4
 800a774:	d009      	beq.n	800a78a <MSP_GetIRQn+0x28>
 800a776:	dc03      	bgt.n	800a780 <MSP_GetIRQn+0x1e>
 800a778:	3b01      	subs	r3, #1
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d807      	bhi.n	800a78e <MSP_GetIRQn+0x2c>
 800a77e:	e002      	b.n	800a786 <MSP_GetIRQn+0x24>
 800a780:	2b08      	cmp	r3, #8
 800a782:	d002      	beq.n	800a78a <MSP_GetIRQn+0x28>
 800a784:	e003      	b.n	800a78e <MSP_GetIRQn+0x2c>
  {
    case GPIO_PIN_0:  
    case GPIO_PIN_1:  return EXTI0_1_IRQn;
 800a786:	2305      	movs	r3, #5
 800a788:	e002      	b.n	800a790 <MSP_GetIRQn+0x2e>
    case GPIO_PIN_2: 
    case GPIO_PIN_3:  return EXTI2_3_IRQn;
 800a78a:	2306      	movs	r3, #6
 800a78c:	e000      	b.n	800a790 <MSP_GetIRQn+0x2e>
    case GPIO_PIN_11:
    case GPIO_PIN_12:
    case GPIO_PIN_13:
    case GPIO_PIN_14:
    case GPIO_PIN_15: 
    default: return EXTI4_15_IRQn;
 800a78e:	2307      	movs	r3, #7
  }
}
 800a790:	0018      	movs	r0, r3
 800a792:	46bd      	mov	sp, r7
 800a794:	b002      	add	sp, #8
 800a796:	bd80      	pop	{r7, pc}

0800a798 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b088      	sub	sp, #32
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a7a0:	230c      	movs	r3, #12
 800a7a2:	18fb      	adds	r3, r7, r3
 800a7a4:	0018      	movs	r0, r3
 800a7a6:	2314      	movs	r3, #20
 800a7a8:	001a      	movs	r2, r3
 800a7aa:	2100      	movs	r1, #0
 800a7ac:	f000 fd69 	bl	800b282 <memset>
  if(hi2c->Instance==I2C1)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a28      	ldr	r2, [pc, #160]	; (800a858 <HAL_I2C_MspInit+0xc0>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d149      	bne.n	800a84e <HAL_I2C_MspInit+0xb6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a7ba:	4b28      	ldr	r3, [pc, #160]	; (800a85c <HAL_I2C_MspInit+0xc4>)
 800a7bc:	4a27      	ldr	r2, [pc, #156]	; (800a85c <HAL_I2C_MspInit+0xc4>)
 800a7be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a7c0:	2102      	movs	r1, #2
 800a7c2:	430a      	orrs	r2, r1
 800a7c4:	62da      	str	r2, [r3, #44]	; 0x2c
 800a7c6:	4b25      	ldr	r3, [pc, #148]	; (800a85c <HAL_I2C_MspInit+0xc4>)
 800a7c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ca:	2202      	movs	r2, #2
 800a7cc:	4013      	ands	r3, r2
 800a7ce:	60bb      	str	r3, [r7, #8]
 800a7d0:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a7d2:	230c      	movs	r3, #12
 800a7d4:	18fb      	adds	r3, r7, r3
 800a7d6:	2280      	movs	r2, #128	; 0x80
 800a7d8:	0092      	lsls	r2, r2, #2
 800a7da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a7dc:	230c      	movs	r3, #12
 800a7de:	18fb      	adds	r3, r7, r3
 800a7e0:	2212      	movs	r2, #18
 800a7e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a7e4:	230c      	movs	r3, #12
 800a7e6:	18fb      	adds	r3, r7, r3
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7ec:	230c      	movs	r3, #12
 800a7ee:	18fb      	adds	r3, r7, r3
 800a7f0:	2203      	movs	r2, #3
 800a7f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800a7f4:	230c      	movs	r3, #12
 800a7f6:	18fb      	adds	r3, r7, r3
 800a7f8:	2204      	movs	r2, #4
 800a7fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a7fc:	230c      	movs	r3, #12
 800a7fe:	18fb      	adds	r3, r7, r3
 800a800:	4a17      	ldr	r2, [pc, #92]	; (800a860 <HAL_I2C_MspInit+0xc8>)
 800a802:	0019      	movs	r1, r3
 800a804:	0010      	movs	r0, r2
 800a806:	f7fa ff5b 	bl	80056c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800a80a:	230c      	movs	r3, #12
 800a80c:	18fb      	adds	r3, r7, r3
 800a80e:	2240      	movs	r2, #64	; 0x40
 800a810:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a812:	230c      	movs	r3, #12
 800a814:	18fb      	adds	r3, r7, r3
 800a816:	2212      	movs	r2, #18
 800a818:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a81a:	230c      	movs	r3, #12
 800a81c:	18fb      	adds	r3, r7, r3
 800a81e:	2201      	movs	r2, #1
 800a820:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a822:	230c      	movs	r3, #12
 800a824:	18fb      	adds	r3, r7, r3
 800a826:	2203      	movs	r2, #3
 800a828:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800a82a:	230c      	movs	r3, #12
 800a82c:	18fb      	adds	r3, r7, r3
 800a82e:	2201      	movs	r2, #1
 800a830:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a832:	230c      	movs	r3, #12
 800a834:	18fb      	adds	r3, r7, r3
 800a836:	4a0a      	ldr	r2, [pc, #40]	; (800a860 <HAL_I2C_MspInit+0xc8>)
 800a838:	0019      	movs	r1, r3
 800a83a:	0010      	movs	r0, r2
 800a83c:	f7fa ff40 	bl	80056c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a840:	4b06      	ldr	r3, [pc, #24]	; (800a85c <HAL_I2C_MspInit+0xc4>)
 800a842:	4a06      	ldr	r2, [pc, #24]	; (800a85c <HAL_I2C_MspInit+0xc4>)
 800a844:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a846:	2180      	movs	r1, #128	; 0x80
 800a848:	0389      	lsls	r1, r1, #14
 800a84a:	430a      	orrs	r2, r1
 800a84c:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800a84e:	46c0      	nop			; (mov r8, r8)
 800a850:	46bd      	mov	sp, r7
 800a852:	b008      	add	sp, #32
 800a854:	bd80      	pop	{r7, pc}
 800a856:	46c0      	nop			; (mov r8, r8)
 800a858:	40005400 	.word	0x40005400
 800a85c:	40021000 	.word	0x40021000
 800a860:	50000400 	.word	0x50000400

0800a864 <HW_Init>:
  * @brief This function initializes the hardware
  * @param None
  * @retval None
  */
void HW_Init( void )
{
 800a864:	b580      	push	{r7, lr}
 800a866:	af00      	add	r7, sp, #0
  if( McuInitialized == false )
 800a868:	4b11      	ldr	r3, [pc, #68]	; (800a8b0 <HW_Init+0x4c>)
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	2201      	movs	r2, #1
 800a86e:	4053      	eors	r3, r2
 800a870:	b2db      	uxtb	r3, r3
 800a872:	2b00      	cmp	r3, #0
 800a874:	d019      	beq.n	800a8aa <HW_Init+0x46>
#if defined( USE_BOOTLOADER )
    /* Set the Vector Table base location at 0x3000 */
    NVIC_SetVectorTable( NVIC_VectTab_FLASH, 0x3000 );
#endif

    HW_AdcInit( );
 800a876:	f000 f893 	bl	800a9a0 <HW_AdcInit>

    Radio.IoInit( );
 800a87a:	4b0e      	ldr	r3, [pc, #56]	; (800a8b4 <HW_Init+0x50>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4798      	blx	r3
    
    HW_SPI_Init( );
 800a880:	f7ff fc34 	bl	800a0ec <HW_SPI_Init>

    HW_RTC_Init( );
 800a884:	f7ff f898 	bl	80099b8 <HW_RTC_Init>
    
    vcom_Init( );
 800a888:	f000 fb26 	bl	800aed8 <vcom_Init>

    
    BSP_LED_Init( LED1 );
 800a88c:	2000      	movs	r0, #0
 800a88e:	f7f7 fcdb 	bl	8002248 <BSP_LED_Init>
    
    BSP_LED_Init( LED2 );
 800a892:	2001      	movs	r0, #1
 800a894:	f7f7 fcd8 	bl	8002248 <BSP_LED_Init>
    
    BSP_LED_Init( LED3 );
 800a898:	2002      	movs	r0, #2
 800a89a:	f7f7 fcd5 	bl	8002248 <BSP_LED_Init>
    
    BSP_LED_Init( LED4 );
 800a89e:	2003      	movs	r0, #3
 800a8a0:	f7f7 fcd2 	bl	8002248 <BSP_LED_Init>

    McuInitialized = true;
 800a8a4:	4b02      	ldr	r3, [pc, #8]	; (800a8b0 <HW_Init+0x4c>)
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	701a      	strb	r2, [r3, #0]
  }
}
 800a8aa:	46c0      	nop			; (mov r8, r8)
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}
 800a8b0:	20000965 	.word	0x20000965
 800a8b4:	0800e58c 	.word	0x0800e58c

0800a8b8 <SystemClock_Config>:
  *            Flash Latency(WS)              = 1
  * @retval None
  */

void SystemClock_Config( void )
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b094      	sub	sp, #80	; 0x50
 800a8bc:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a8be:	233c      	movs	r3, #60	; 0x3c
 800a8c0:	18fb      	adds	r3, r7, r3
 800a8c2:	0018      	movs	r0, r3
 800a8c4:	2314      	movs	r3, #20
 800a8c6:	001a      	movs	r2, r3
 800a8c8:	2100      	movs	r1, #0
 800a8ca:	f000 fcda 	bl	800b282 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a8ce:	1d3b      	adds	r3, r7, #4
 800a8d0:	0018      	movs	r0, r3
 800a8d2:	2338      	movs	r3, #56	; 0x38
 800a8d4:	001a      	movs	r2, r3
 800a8d6:	2100      	movs	r1, #0
 800a8d8:	f000 fcd3 	bl	800b282 <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 800a8dc:	1d3b      	adds	r3, r7, #4
 800a8de:	2202      	movs	r2, #2
 800a8e0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
 800a8e2:	1d3b      	adds	r3, r7, #4
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 800a8e8:	1d3b      	adds	r3, r7, #4
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a8ee:	1d3b      	adds	r3, r7, #4
 800a8f0:	2210      	movs	r2, #16
 800a8f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 800a8f4:	1d3b      	adds	r3, r7, #4
 800a8f6:	2202      	movs	r2, #2
 800a8f8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 800a8fa:	1d3b      	adds	r3, r7, #4
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 800a900:	1d3b      	adds	r3, r7, #4
 800a902:	2280      	movs	r2, #128	; 0x80
 800a904:	0312      	lsls	r2, r2, #12
 800a906:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 800a908:	1d3b      	adds	r3, r7, #4
 800a90a:	2280      	movs	r2, #128	; 0x80
 800a90c:	0412      	lsls	r2, r2, #16
 800a90e:	635a      	str	r2, [r3, #52]	; 0x34

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a910:	1d3b      	adds	r3, r7, #4
 800a912:	0018      	movs	r0, r3
 800a914:	f7fb fc68 	bl	80061e8 <HAL_RCC_OscConfig>
 800a918:	1e03      	subs	r3, r0, #0
 800a91a:	d001      	beq.n	800a920 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800a91c:	f7fe ff1a 	bl	8009754 <Error_Handler>
  }

  /* Set Voltage scale1 as MCU will run at 32MHz */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a920:	4b1c      	ldr	r3, [pc, #112]	; (800a994 <SystemClock_Config+0xdc>)
 800a922:	4a1c      	ldr	r2, [pc, #112]	; (800a994 <SystemClock_Config+0xdc>)
 800a924:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a926:	2180      	movs	r1, #128	; 0x80
 800a928:	0549      	lsls	r1, r1, #21
 800a92a:	430a      	orrs	r2, r1
 800a92c:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a92e:	4b1a      	ldr	r3, [pc, #104]	; (800a998 <SystemClock_Config+0xe0>)
 800a930:	4a19      	ldr	r2, [pc, #100]	; (800a998 <SystemClock_Config+0xe0>)
 800a932:	6812      	ldr	r2, [r2, #0]
 800a934:	4919      	ldr	r1, [pc, #100]	; (800a99c <SystemClock_Config+0xe4>)
 800a936:	400a      	ands	r2, r1
 800a938:	2180      	movs	r1, #128	; 0x80
 800a93a:	0109      	lsls	r1, r1, #4
 800a93c:	430a      	orrs	r2, r1
 800a93e:	601a      	str	r2, [r3, #0]
  
  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 800a940:	46c0      	nop			; (mov r8, r8)
 800a942:	4b15      	ldr	r3, [pc, #84]	; (800a998 <SystemClock_Config+0xe0>)
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	2210      	movs	r2, #16
 800a948:	4013      	ands	r3, r2
 800a94a:	2b10      	cmp	r3, #16
 800a94c:	d0f9      	beq.n	800a942 <SystemClock_Config+0x8a>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800a94e:	233c      	movs	r3, #60	; 0x3c
 800a950:	18fb      	adds	r3, r7, r3
 800a952:	220f      	movs	r2, #15
 800a954:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a956:	233c      	movs	r3, #60	; 0x3c
 800a958:	18fb      	adds	r3, r7, r3
 800a95a:	2203      	movs	r2, #3
 800a95c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a95e:	233c      	movs	r3, #60	; 0x3c
 800a960:	18fb      	adds	r3, r7, r3
 800a962:	2200      	movs	r2, #0
 800a964:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a966:	233c      	movs	r3, #60	; 0x3c
 800a968:	18fb      	adds	r3, r7, r3
 800a96a:	2200      	movs	r2, #0
 800a96c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a96e:	233c      	movs	r3, #60	; 0x3c
 800a970:	18fb      	adds	r3, r7, r3
 800a972:	2200      	movs	r2, #0
 800a974:	611a      	str	r2, [r3, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800a976:	233c      	movs	r3, #60	; 0x3c
 800a978:	18fb      	adds	r3, r7, r3
 800a97a:	2101      	movs	r1, #1
 800a97c:	0018      	movs	r0, r3
 800a97e:	f7fb ffd5 	bl	800692c <HAL_RCC_ClockConfig>
 800a982:	1e03      	subs	r3, r0, #0
 800a984:	d001      	beq.n	800a98a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800a986:	f7fe fee5 	bl	8009754 <Error_Handler>
  }
}
 800a98a:	46c0      	nop			; (mov r8, r8)
 800a98c:	46bd      	mov	sp, r7
 800a98e:	b014      	add	sp, #80	; 0x50
 800a990:	bd80      	pop	{r7, pc}
 800a992:	46c0      	nop			; (mov r8, r8)
 800a994:	40021000 	.word	0x40021000
 800a998:	40007000 	.word	0x40007000
 800a99c:	ffffe7ff 	.word	0xffffe7ff

0800a9a0 <HW_AdcInit>:
  * @brief This function initializes the ADC
  * @param none
  * @retval none
  */
void HW_AdcInit( void )
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b086      	sub	sp, #24
 800a9a4:	af00      	add	r7, sp, #0
  if( AdcInitialized == false )
 800a9a6:	4b2b      	ldr	r3, [pc, #172]	; (800aa54 <HW_AdcInit+0xb4>)
 800a9a8:	781b      	ldrb	r3, [r3, #0]
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	4053      	eors	r3, r2
 800a9ae:	b2db      	uxtb	r3, r3
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d04b      	beq.n	800aa4c <HW_AdcInit+0xac>
  {
    AdcInitialized = true;
 800a9b4:	4b27      	ldr	r3, [pc, #156]	; (800aa54 <HW_AdcInit+0xb4>)
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	701a      	strb	r2, [r3, #0]
    GPIO_InitTypeDef initStruct;
    
    hadc.Instance  = ADC1;
 800a9ba:	4b27      	ldr	r3, [pc, #156]	; (800aa58 <HW_AdcInit+0xb8>)
 800a9bc:	4a27      	ldr	r2, [pc, #156]	; (800aa5c <HW_AdcInit+0xbc>)
 800a9be:	601a      	str	r2, [r3, #0]
    
    hadc.Init.OversamplingMode      = DISABLE;
 800a9c0:	4b25      	ldr	r3, [pc, #148]	; (800aa58 <HW_AdcInit+0xb8>)
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	641a      	str	r2, [r3, #64]	; 0x40
  
    hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV1;
 800a9c6:	4b24      	ldr	r3, [pc, #144]	; (800aa58 <HW_AdcInit+0xb8>)
 800a9c8:	22c0      	movs	r2, #192	; 0xc0
 800a9ca:	0612      	lsls	r2, r2, #24
 800a9cc:	605a      	str	r2, [r3, #4]
    hadc.Init.LowPowerAutoPowerOff  = DISABLE;
 800a9ce:	4b22      	ldr	r3, [pc, #136]	; (800aa58 <HW_AdcInit+0xb8>)
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	61da      	str	r2, [r3, #28]
    hadc.Init.LowPowerFrequencyMode = ENABLE;
 800a9d4:	4b20      	ldr	r3, [pc, #128]	; (800aa58 <HW_AdcInit+0xb8>)
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	639a      	str	r2, [r3, #56]	; 0x38
    hadc.Init.LowPowerAutoWait      = DISABLE;
 800a9da:	4b1f      	ldr	r3, [pc, #124]	; (800aa58 <HW_AdcInit+0xb8>)
 800a9dc:	2200      	movs	r2, #0
 800a9de:	619a      	str	r2, [r3, #24]
    
    hadc.Init.Resolution            = ADC_RESOLUTION_12B;
 800a9e0:	4b1d      	ldr	r3, [pc, #116]	; (800aa58 <HW_AdcInit+0xb8>)
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	609a      	str	r2, [r3, #8]
    hadc.Init.SamplingTime          = ADC_SAMPLETIME_7CYCLES_5;
 800a9e6:	4b1c      	ldr	r3, [pc, #112]	; (800aa58 <HW_AdcInit+0xb8>)
 800a9e8:	2202      	movs	r2, #2
 800a9ea:	63da      	str	r2, [r3, #60]	; 0x3c
    hadc.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 800a9ec:	4b1a      	ldr	r3, [pc, #104]	; (800aa58 <HW_AdcInit+0xb8>)
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	611a      	str	r2, [r3, #16]
    hadc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 800a9f2:	4b19      	ldr	r3, [pc, #100]	; (800aa58 <HW_AdcInit+0xb8>)
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	60da      	str	r2, [r3, #12]
    hadc.Init.ContinuousConvMode    = DISABLE;
 800a9f8:	4b17      	ldr	r3, [pc, #92]	; (800aa58 <HW_AdcInit+0xb8>)
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	621a      	str	r2, [r3, #32]
    hadc.Init.DiscontinuousConvMode = DISABLE;
 800a9fe:	4b16      	ldr	r3, [pc, #88]	; (800aa58 <HW_AdcInit+0xb8>)
 800aa00:	2200      	movs	r2, #0
 800aa02:	625a      	str	r2, [r3, #36]	; 0x24
    hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800aa04:	4b14      	ldr	r3, [pc, #80]	; (800aa58 <HW_AdcInit+0xb8>)
 800aa06:	2200      	movs	r2, #0
 800aa08:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 800aa0a:	4b13      	ldr	r3, [pc, #76]	; (800aa58 <HW_AdcInit+0xb8>)
 800aa0c:	2204      	movs	r2, #4
 800aa0e:	615a      	str	r2, [r3, #20]
    hadc.Init.DMAContinuousRequests = DISABLE;
 800aa10:	4b11      	ldr	r3, [pc, #68]	; (800aa58 <HW_AdcInit+0xb8>)
 800aa12:	2200      	movs	r2, #0
 800aa14:	631a      	str	r2, [r3, #48]	; 0x30

    ADCCLK_ENABLE();
 800aa16:	4b12      	ldr	r3, [pc, #72]	; (800aa60 <HW_AdcInit+0xc0>)
 800aa18:	4a11      	ldr	r2, [pc, #68]	; (800aa60 <HW_AdcInit+0xc0>)
 800aa1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800aa1c:	2180      	movs	r1, #128	; 0x80
 800aa1e:	0089      	lsls	r1, r1, #2
 800aa20:	430a      	orrs	r2, r1
 800aa22:	635a      	str	r2, [r3, #52]	; 0x34
    

    HAL_ADC_Init( &hadc );
 800aa24:	4b0c      	ldr	r3, [pc, #48]	; (800aa58 <HW_AdcInit+0xb8>)
 800aa26:	0018      	movs	r0, r3
 800aa28:	f7fa f950 	bl	8004ccc <HAL_ADC_Init>

    initStruct.Mode =GPIO_MODE_ANALOG;
 800aa2c:	1d3b      	adds	r3, r7, #4
 800aa2e:	2203      	movs	r2, #3
 800aa30:	605a      	str	r2, [r3, #4]
    initStruct.Pull = GPIO_NOPULL;
 800aa32:	1d3b      	adds	r3, r7, #4
 800aa34:	2200      	movs	r2, #0
 800aa36:	609a      	str	r2, [r3, #8]
    initStruct.Speed = GPIO_SPEED_HIGH;
 800aa38:	1d3b      	adds	r3, r7, #4
 800aa3a:	2203      	movs	r2, #3
 800aa3c:	60da      	str	r2, [r3, #12]

    HW_GPIO_Init( BAT_LEVEL_PORT, BAT_LEVEL_PIN, &initStruct );
 800aa3e:	1d3a      	adds	r2, r7, #4
 800aa40:	23a0      	movs	r3, #160	; 0xa0
 800aa42:	05db      	lsls	r3, r3, #23
 800aa44:	2110      	movs	r1, #16
 800aa46:	0018      	movs	r0, r3
 800aa48:	f7fe fe88 	bl	800975c <HW_GPIO_Init>
  }
}
 800aa4c:	46c0      	nop			; (mov r8, r8)
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	b006      	add	sp, #24
 800aa52:	bd80      	pop	{r7, pc}
 800aa54:	20000964 	.word	0x20000964
 800aa58:	20000904 	.word	0x20000904
 800aa5c:	40012400 	.word	0x40012400
 800aa60:	40021000 	.word	0x40021000

0800aa64 <HW_AdcReadChannel>:
  * @brief This function De-initializes the ADC
  * @param Channel
  * @retval Value
  */
uint16_t HW_AdcReadChannel( uint32_t Channel )
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b086      	sub	sp, #24
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]

  ADC_ChannelConfTypeDef adcConf;
  uint16_t adcData = 0;
 800aa6c:	2316      	movs	r3, #22
 800aa6e:	18fb      	adds	r3, r7, r3
 800aa70:	2200      	movs	r2, #0
 800aa72:	801a      	strh	r2, [r3, #0]
  
  if( AdcInitialized == true )
 800aa74:	4b30      	ldr	r3, [pc, #192]	; (800ab38 <HW_AdcReadChannel+0xd4>)
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d056      	beq.n	800ab2a <HW_AdcReadChannel+0xc6>
  {
    /* wait the the Vrefint used by adc is set */
    while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 800aa7c:	46c0      	nop			; (mov r8, r8)
 800aa7e:	4b2f      	ldr	r3, [pc, #188]	; (800ab3c <HW_AdcReadChannel+0xd8>)
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	2208      	movs	r2, #8
 800aa84:	4013      	ands	r3, r2
 800aa86:	2b08      	cmp	r3, #8
 800aa88:	d1f9      	bne.n	800aa7e <HW_AdcReadChannel+0x1a>
      
    ADCCLK_ENABLE();
 800aa8a:	4b2d      	ldr	r3, [pc, #180]	; (800ab40 <HW_AdcReadChannel+0xdc>)
 800aa8c:	4a2c      	ldr	r2, [pc, #176]	; (800ab40 <HW_AdcReadChannel+0xdc>)
 800aa8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800aa90:	2180      	movs	r1, #128	; 0x80
 800aa92:	0089      	lsls	r1, r1, #2
 800aa94:	430a      	orrs	r2, r1
 800aa96:	635a      	str	r2, [r3, #52]	; 0x34
    
    /*calibrate ADC if any calibraiton hardware*/
    HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED );
 800aa98:	4b2a      	ldr	r3, [pc, #168]	; (800ab44 <HW_AdcReadChannel+0xe0>)
 800aa9a:	2100      	movs	r1, #0
 800aa9c:	0018      	movs	r0, r3
 800aa9e:	f7fa fc83 	bl	80053a8 <HAL_ADCEx_Calibration_Start>
    
    /* Deselects all channels*/
    adcConf.Channel = ADC_CHANNEL_MASK;
 800aaa2:	230c      	movs	r3, #12
 800aaa4:	18fb      	adds	r3, r7, r3
 800aaa6:	4a28      	ldr	r2, [pc, #160]	; (800ab48 <HW_AdcReadChannel+0xe4>)
 800aaa8:	601a      	str	r2, [r3, #0]
    adcConf.Rank = ADC_RANK_NONE; 
 800aaaa:	230c      	movs	r3, #12
 800aaac:	18fb      	adds	r3, r7, r3
 800aaae:	4a27      	ldr	r2, [pc, #156]	; (800ab4c <HW_AdcReadChannel+0xe8>)
 800aab0:	605a      	str	r2, [r3, #4]
    HAL_ADC_ConfigChannel( &hadc, &adcConf);
 800aab2:	230c      	movs	r3, #12
 800aab4:	18fa      	adds	r2, r7, r3
 800aab6:	4b23      	ldr	r3, [pc, #140]	; (800ab44 <HW_AdcReadChannel+0xe0>)
 800aab8:	0011      	movs	r1, r2
 800aaba:	0018      	movs	r0, r3
 800aabc:	f7fa fb70 	bl	80051a0 <HAL_ADC_ConfigChannel>
      
    /* configure adc channel */
    adcConf.Channel = Channel;
 800aac0:	230c      	movs	r3, #12
 800aac2:	18fb      	adds	r3, r7, r3
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	601a      	str	r2, [r3, #0]
    adcConf.Rank = ADC_RANK_CHANNEL_NUMBER;
 800aac8:	230c      	movs	r3, #12
 800aaca:	18fb      	adds	r3, r7, r3
 800aacc:	2280      	movs	r2, #128	; 0x80
 800aace:	0152      	lsls	r2, r2, #5
 800aad0:	605a      	str	r2, [r3, #4]
    HAL_ADC_ConfigChannel( &hadc, &adcConf);
 800aad2:	230c      	movs	r3, #12
 800aad4:	18fa      	adds	r2, r7, r3
 800aad6:	4b1b      	ldr	r3, [pc, #108]	; (800ab44 <HW_AdcReadChannel+0xe0>)
 800aad8:	0011      	movs	r1, r2
 800aada:	0018      	movs	r0, r3
 800aadc:	f7fa fb60 	bl	80051a0 <HAL_ADC_ConfigChannel>

    /* Start the conversion process */
    HAL_ADC_Start( &hadc);
 800aae0:	4b18      	ldr	r3, [pc, #96]	; (800ab44 <HW_AdcReadChannel+0xe0>)
 800aae2:	0018      	movs	r0, r3
 800aae4:	f7fa fa68 	bl	8004fb8 <HAL_ADC_Start>
      
    /* Wait for the end of conversion */
    HAL_ADC_PollForConversion( &hadc, HAL_MAX_DELAY );
 800aae8:	2301      	movs	r3, #1
 800aaea:	425a      	negs	r2, r3
 800aaec:	4b15      	ldr	r3, [pc, #84]	; (800ab44 <HW_AdcReadChannel+0xe0>)
 800aaee:	0011      	movs	r1, r2
 800aaf0:	0018      	movs	r0, r3
 800aaf2:	f7fa fab5 	bl	8005060 <HAL_ADC_PollForConversion>
      
    /* Get the converted value of regular channel */
    adcData = HAL_ADC_GetValue ( &hadc);
 800aaf6:	4b13      	ldr	r3, [pc, #76]	; (800ab44 <HW_AdcReadChannel+0xe0>)
 800aaf8:	0018      	movs	r0, r3
 800aafa:	f7fa fb45 	bl	8005188 <HAL_ADC_GetValue>
 800aafe:	0002      	movs	r2, r0
 800ab00:	2316      	movs	r3, #22
 800ab02:	18fb      	adds	r3, r7, r3
 800ab04:	801a      	strh	r2, [r3, #0]

    __HAL_ADC_DISABLE( &hadc) ;
 800ab06:	4b0f      	ldr	r3, [pc, #60]	; (800ab44 <HW_AdcReadChannel+0xe0>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4a0e      	ldr	r2, [pc, #56]	; (800ab44 <HW_AdcReadChannel+0xe0>)
 800ab0c:	6812      	ldr	r2, [r2, #0]
 800ab0e:	6892      	ldr	r2, [r2, #8]
 800ab10:	2102      	movs	r1, #2
 800ab12:	430a      	orrs	r2, r1
 800ab14:	609a      	str	r2, [r3, #8]
 800ab16:	4b0b      	ldr	r3, [pc, #44]	; (800ab44 <HW_AdcReadChannel+0xe0>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	2203      	movs	r2, #3
 800ab1c:	601a      	str	r2, [r3, #0]

    ADCCLK_DISABLE();
 800ab1e:	4b08      	ldr	r3, [pc, #32]	; (800ab40 <HW_AdcReadChannel+0xdc>)
 800ab20:	4a07      	ldr	r2, [pc, #28]	; (800ab40 <HW_AdcReadChannel+0xdc>)
 800ab22:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ab24:	490a      	ldr	r1, [pc, #40]	; (800ab50 <HW_AdcReadChannel+0xec>)
 800ab26:	400a      	ands	r2, r1
 800ab28:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return adcData;
 800ab2a:	2316      	movs	r3, #22
 800ab2c:	18fb      	adds	r3, r7, r3
 800ab2e:	881b      	ldrh	r3, [r3, #0]
}
 800ab30:	0018      	movs	r0, r3
 800ab32:	46bd      	mov	sp, r7
 800ab34:	b006      	add	sp, #24
 800ab36:	bd80      	pop	{r7, pc}
 800ab38:	20000964 	.word	0x20000964
 800ab3c:	40007000 	.word	0x40007000
 800ab40:	40021000 	.word	0x40021000
 800ab44:	20000904 	.word	0x20000904
 800ab48:	0007ffff 	.word	0x0007ffff
 800ab4c:	00001001 	.word	0x00001001
 800ab50:	fffffdff 	.word	0xfffffdff

0800ab54 <NMI_Handler>:
  * @param  None
  * @retval None
  */

void NMI_Handler(void)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	af00      	add	r7, sp, #0
}
 800ab58:	46c0      	nop			; (mov r8, r8)
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}

0800ab5e <HardFault_Handler>:
  * @retval None
  */


void HardFault_Handler(void)
{
 800ab5e:	b580      	push	{r7, lr}
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	46c0      	nop			; (mov r8, r8)
  while(1)
  {
    __NOP();
 800ab64:	e7fd      	b.n	800ab62 <HardFault_Handler+0x4>

0800ab66 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800ab66:	b580      	push	{r7, lr}
 800ab68:	af00      	add	r7, sp, #0
}
 800ab6a:	46c0      	nop			; (mov r8, r8)
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	af00      	add	r7, sp, #0
}
 800ab74:	46c0      	nop			; (mov r8, r8)
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800ab7a:	b580      	push	{r7, lr}
 800ab7c:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800ab7e:	f7fe fdc5 	bl	800970c <HAL_IncTick>
}
 800ab82:	46c0      	nop			; (mov r8, r8)
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <USART2_IRQHandler>:
/*void PPP_IRQHandler(void)
{
}*/

void USART2_IRQHandler( void )
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	af00      	add	r7, sp, #0
   vcom_Print( );
 800ab8c:	f000 fa64 	bl	800b058 <vcom_Print>
}
 800ab90:	46c0      	nop			; (mov r8, r8)
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}

0800ab96 <RTC_IRQHandler>:

void RTC_IRQHandler( void )
{
 800ab96:	b580      	push	{r7, lr}
 800ab98:	af00      	add	r7, sp, #0
  HW_RTC_IrqHandler ( );
 800ab9a:	f7ff f80d 	bl	8009bb8 <HW_RTC_IrqHandler>
}
 800ab9e:	46c0      	nop			; (mov r8, r8)
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler( void )
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_0 );
 800aba8:	2001      	movs	r0, #1
 800abaa:	f7fa ff25 	bl	80059f8 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_1 );
 800abae:	2002      	movs	r0, #2
 800abb0:	f7fa ff22 	bl	80059f8 <HAL_GPIO_EXTI_IRQHandler>
}
 800abb4:	46c0      	nop			; (mov r8, r8)
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}

0800abba <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler( void )
{
 800abba:	b580      	push	{r7, lr}
 800abbc:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_2 );
 800abbe:	2004      	movs	r0, #4
 800abc0:	f7fa ff1a 	bl	80059f8 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_3 );
 800abc4:	2008      	movs	r0, #8
 800abc6:	f7fa ff17 	bl	80059f8 <HAL_GPIO_EXTI_IRQHandler>
}
 800abca:	46c0      	nop			; (mov r8, r8)
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <EXTI4_15_IRQHandler>:


void EXTI4_15_IRQHandler( void )
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_4 );
 800abd4:	2010      	movs	r0, #16
 800abd6:	f7fa ff0f 	bl	80059f8 <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_5 );
 800abda:	2020      	movs	r0, #32
 800abdc:	f7fa ff0c 	bl	80059f8 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_6 );
 800abe0:	2040      	movs	r0, #64	; 0x40
 800abe2:	f7fa ff09 	bl	80059f8 <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_7 );
 800abe6:	2080      	movs	r0, #128	; 0x80
 800abe8:	f7fa ff06 	bl	80059f8 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_8 );
 800abec:	2380      	movs	r3, #128	; 0x80
 800abee:	005b      	lsls	r3, r3, #1
 800abf0:	0018      	movs	r0, r3
 800abf2:	f7fa ff01 	bl	80059f8 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_9 );
 800abf6:	2380      	movs	r3, #128	; 0x80
 800abf8:	009b      	lsls	r3, r3, #2
 800abfa:	0018      	movs	r0, r3
 800abfc:	f7fa fefc 	bl	80059f8 <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_10 );
 800ac00:	2380      	movs	r3, #128	; 0x80
 800ac02:	00db      	lsls	r3, r3, #3
 800ac04:	0018      	movs	r0, r3
 800ac06:	f7fa fef7 	bl	80059f8 <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_11 );
 800ac0a:	2380      	movs	r3, #128	; 0x80
 800ac0c:	011b      	lsls	r3, r3, #4
 800ac0e:	0018      	movs	r0, r3
 800ac10:	f7fa fef2 	bl	80059f8 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_12 );
 800ac14:	2380      	movs	r3, #128	; 0x80
 800ac16:	015b      	lsls	r3, r3, #5
 800ac18:	0018      	movs	r0, r3
 800ac1a:	f7fa feed 	bl	80059f8 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_13 );
 800ac1e:	2380      	movs	r3, #128	; 0x80
 800ac20:	019b      	lsls	r3, r3, #6
 800ac22:	0018      	movs	r0, r3
 800ac24:	f7fa fee8 	bl	80059f8 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_14 );
 800ac28:	2380      	movs	r3, #128	; 0x80
 800ac2a:	01db      	lsls	r3, r3, #7
 800ac2c:	0018      	movs	r0, r3
 800ac2e:	f7fa fee3 	bl	80059f8 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_15 );
 800ac32:	2380      	movs	r3, #128	; 0x80
 800ac34:	021b      	lsls	r3, r3, #8
 800ac36:	0018      	movs	r0, r3
 800ac38:	f7fa fede 	bl	80059f8 <HAL_GPIO_EXTI_IRQHandler>
}
 800ac3c:	46c0      	nop			; (mov r8, r8)
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
	...

0800ac44 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b086      	sub	sp, #24
 800ac48:	af04      	add	r7, sp, #16
 800ac4a:	0002      	movs	r2, r0
 800ac4c:	1dfb      	adds	r3, r7, #7
 800ac4e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 800ac50:	4807      	ldr	r0, [pc, #28]	; (800ac70 <ssd1306_WriteCommand+0x2c>)
 800ac52:	230a      	movs	r3, #10
 800ac54:	9302      	str	r3, [sp, #8]
 800ac56:	2301      	movs	r3, #1
 800ac58:	9301      	str	r3, [sp, #4]
 800ac5a:	1dfb      	adds	r3, r7, #7
 800ac5c:	9300      	str	r3, [sp, #0]
 800ac5e:	2301      	movs	r3, #1
 800ac60:	2200      	movs	r2, #0
 800ac62:	2178      	movs	r1, #120	; 0x78
 800ac64:	f7fa ff7a 	bl	8005b5c <HAL_I2C_Mem_Write>
}
 800ac68:	46c0      	nop			; (mov r8, r8)
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	b002      	add	sp, #8
 800ac6e:	bd80      	pop	{r7, pc}
 800ac70:	20000f5c 	.word	0x20000f5c

0800ac74 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{	
 800ac74:	b580      	push	{r7, lr}
 800ac76:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 800ac78:	2064      	movs	r0, #100	; 0x64
 800ac7a:	f7ff fcf0 	bl	800a65e <HAL_Delay>
	
	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 800ac7e:	20ae      	movs	r0, #174	; 0xae
 800ac80:	f7ff ffe0 	bl	800ac44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 800ac84:	2020      	movs	r0, #32
 800ac86:	f7ff ffdd 	bl	800ac44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800ac8a:	2010      	movs	r0, #16
 800ac8c:	f7ff ffda 	bl	800ac44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800ac90:	20b0      	movs	r0, #176	; 0xb0
 800ac92:	f7ff ffd7 	bl	800ac44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800ac96:	20c8      	movs	r0, #200	; 0xc8
 800ac98:	f7ff ffd4 	bl	800ac44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 800ac9c:	2000      	movs	r0, #0
 800ac9e:	f7ff ffd1 	bl	800ac44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 800aca2:	2010      	movs	r0, #16
 800aca4:	f7ff ffce 	bl	800ac44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 800aca8:	2040      	movs	r0, #64	; 0x40
 800acaa:	f7ff ffcb 	bl	800ac44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 800acae:	2081      	movs	r0, #129	; 0x81
 800acb0:	f7ff ffc8 	bl	800ac44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 800acb4:	20ff      	movs	r0, #255	; 0xff
 800acb6:	f7ff ffc5 	bl	800ac44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 800acba:	20a1      	movs	r0, #161	; 0xa1
 800acbc:	f7ff ffc2 	bl	800ac44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 800acc0:	20a6      	movs	r0, #166	; 0xa6
 800acc2:	f7ff ffbf 	bl	800ac44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 800acc6:	20a8      	movs	r0, #168	; 0xa8
 800acc8:	f7ff ffbc 	bl	800ac44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 800accc:	203f      	movs	r0, #63	; 0x3f
 800acce:	f7ff ffb9 	bl	800ac44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800acd2:	20a4      	movs	r0, #164	; 0xa4
 800acd4:	f7ff ffb6 	bl	800ac44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 800acd8:	20d3      	movs	r0, #211	; 0xd3
 800acda:	f7ff ffb3 	bl	800ac44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 800acde:	2000      	movs	r0, #0
 800ace0:	f7ff ffb0 	bl	800ac44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800ace4:	20d5      	movs	r0, #213	; 0xd5
 800ace6:	f7ff ffad 	bl	800ac44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 800acea:	20f0      	movs	r0, #240	; 0xf0
 800acec:	f7ff ffaa 	bl	800ac44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800acf0:	20d9      	movs	r0, #217	; 0xd9
 800acf2:	f7ff ffa7 	bl	800ac44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 800acf6:	2022      	movs	r0, #34	; 0x22
 800acf8:	f7ff ffa4 	bl	800ac44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 800acfc:	20da      	movs	r0, #218	; 0xda
 800acfe:	f7ff ffa1 	bl	800ac44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 800ad02:	2012      	movs	r0, #18
 800ad04:	f7ff ff9e 	bl	800ac44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 800ad08:	20db      	movs	r0, #219	; 0xdb
 800ad0a:	f7ff ff9b 	bl	800ac44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800ad0e:	2020      	movs	r0, #32
 800ad10:	f7ff ff98 	bl	800ac44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800ad14:	208d      	movs	r0, #141	; 0x8d
 800ad16:	f7ff ff95 	bl	800ac44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 800ad1a:	2014      	movs	r0, #20
 800ad1c:	f7ff ff92 	bl	800ac44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 800ad20:	20af      	movs	r0, #175	; 0xaf
 800ad22:	f7ff ff8f 	bl	800ac44 <ssd1306_WriteCommand>
	
	// Clear screen
	ssd1306_Fill(Black);
 800ad26:	2000      	movs	r0, #0
 800ad28:	f000 f812 	bl	800ad50 <ssd1306_Fill>
	
	// Flush buffer to screen
	ssd1306_UpdateScreen();
 800ad2c:	f000 f834 	bl	800ad98 <ssd1306_UpdateScreen>
	
	// Set default values for screen object
	SSD1306.CurrentX = 0;
 800ad30:	4b06      	ldr	r3, [pc, #24]	; (800ad4c <ssd1306_Init+0xd8>)
 800ad32:	2200      	movs	r2, #0
 800ad34:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800ad36:	4b05      	ldr	r3, [pc, #20]	; (800ad4c <ssd1306_Init+0xd8>)
 800ad38:	2200      	movs	r2, #0
 800ad3a:	805a      	strh	r2, [r3, #2]
	
	SSD1306.Initialized = 1;
 800ad3c:	4b03      	ldr	r3, [pc, #12]	; (800ad4c <ssd1306_Init+0xd8>)
 800ad3e:	2201      	movs	r2, #1
 800ad40:	715a      	strb	r2, [r3, #5]
	
	return 1;
 800ad42:	2301      	movs	r3, #1
}
 800ad44:	0018      	movs	r0, r3
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
 800ad4a:	46c0      	nop			; (mov r8, r8)
 800ad4c:	20000d68 	.word	0x20000d68

0800ad50 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color) 
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	0002      	movs	r2, r0
 800ad58:	1dfb      	adds	r3, r7, #7
 800ad5a:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	60fb      	str	r3, [r7, #12]
 800ad60:	e00e      	b.n	800ad80 <ssd1306_Fill+0x30>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800ad62:	1dfb      	adds	r3, r7, #7
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d101      	bne.n	800ad6e <ssd1306_Fill+0x1e>
 800ad6a:	2100      	movs	r1, #0
 800ad6c:	e000      	b.n	800ad70 <ssd1306_Fill+0x20>
 800ad6e:	21ff      	movs	r1, #255	; 0xff
 800ad70:	4a07      	ldr	r2, [pc, #28]	; (800ad90 <ssd1306_Fill+0x40>)
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	18d3      	adds	r3, r2, r3
 800ad76:	1c0a      	adds	r2, r1, #0
 800ad78:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	60fb      	str	r3, [r7, #12]
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	4a04      	ldr	r2, [pc, #16]	; (800ad94 <ssd1306_Fill+0x44>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d9ec      	bls.n	800ad62 <ssd1306_Fill+0x12>
	}
}
 800ad88:	46c0      	nop			; (mov r8, r8)
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	b004      	add	sp, #16
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	20000968 	.word	0x20000968
 800ad94:	000003ff 	.word	0x000003ff

0800ad98 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void) 
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b086      	sub	sp, #24
 800ad9c:	af04      	add	r7, sp, #16
	uint8_t i;
	
	for (i = 0; i < 8; i++) {
 800ad9e:	1dfb      	adds	r3, r7, #7
 800ada0:	2200      	movs	r2, #0
 800ada2:	701a      	strb	r2, [r3, #0]
 800ada4:	e021      	b.n	800adea <ssd1306_UpdateScreen+0x52>
		ssd1306_WriteCommand(0xB0 + i);
 800ada6:	1dfb      	adds	r3, r7, #7
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	3b50      	subs	r3, #80	; 0x50
 800adac:	b2db      	uxtb	r3, r3
 800adae:	0018      	movs	r0, r3
 800adb0:	f7ff ff48 	bl	800ac44 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 800adb4:	2000      	movs	r0, #0
 800adb6:	f7ff ff45 	bl	800ac44 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 800adba:	2010      	movs	r0, #16
 800adbc:	f7ff ff42 	bl	800ac44 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 800adc0:	1dfb      	adds	r3, r7, #7
 800adc2:	781b      	ldrb	r3, [r3, #0]
 800adc4:	01da      	lsls	r2, r3, #7
 800adc6:	4b0d      	ldr	r3, [pc, #52]	; (800adfc <ssd1306_UpdateScreen+0x64>)
 800adc8:	18d3      	adds	r3, r2, r3
 800adca:	480d      	ldr	r0, [pc, #52]	; (800ae00 <ssd1306_UpdateScreen+0x68>)
 800adcc:	2264      	movs	r2, #100	; 0x64
 800adce:	9202      	str	r2, [sp, #8]
 800add0:	2280      	movs	r2, #128	; 0x80
 800add2:	9201      	str	r2, [sp, #4]
 800add4:	9300      	str	r3, [sp, #0]
 800add6:	2301      	movs	r3, #1
 800add8:	2240      	movs	r2, #64	; 0x40
 800adda:	2178      	movs	r1, #120	; 0x78
 800addc:	f7fa febe 	bl	8005b5c <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 800ade0:	1dfb      	adds	r3, r7, #7
 800ade2:	781a      	ldrb	r2, [r3, #0]
 800ade4:	1dfb      	adds	r3, r7, #7
 800ade6:	3201      	adds	r2, #1
 800ade8:	701a      	strb	r2, [r3, #0]
 800adea:	1dfb      	adds	r3, r7, #7
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	2b07      	cmp	r3, #7
 800adf0:	d9d9      	bls.n	800ada6 <ssd1306_UpdateScreen+0xe>
	}
}
 800adf2:	46c0      	nop			; (mov r8, r8)
 800adf4:	46bd      	mov	sp, r7
 800adf6:	b002      	add	sp, #8
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	46c0      	nop			; (mov r8, r8)
 800adfc:	20000968 	.word	0x20000968
 800ae00:	20000f5c 	.word	0x20000f5c

0800ae04 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800ae0c:	4b11      	ldr	r3, [pc, #68]	; (800ae54 <_sbrk+0x50>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d102      	bne.n	800ae1a <_sbrk+0x16>
		heap_end = &end;
 800ae14:	4b0f      	ldr	r3, [pc, #60]	; (800ae54 <_sbrk+0x50>)
 800ae16:	4a10      	ldr	r2, [pc, #64]	; (800ae58 <_sbrk+0x54>)
 800ae18:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800ae1a:	4b0e      	ldr	r3, [pc, #56]	; (800ae54 <_sbrk+0x50>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800ae20:	4b0c      	ldr	r3, [pc, #48]	; (800ae54 <_sbrk+0x50>)
 800ae22:	681a      	ldr	r2, [r3, #0]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	18d3      	adds	r3, r2, r3
 800ae28:	466a      	mov	r2, sp
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d907      	bls.n	800ae3e <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800ae2e:	f000 f9f5 	bl	800b21c <__errno>
 800ae32:	0003      	movs	r3, r0
 800ae34:	220c      	movs	r2, #12
 800ae36:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	425b      	negs	r3, r3
 800ae3c:	e006      	b.n	800ae4c <_sbrk+0x48>
	}

	heap_end += incr;
 800ae3e:	4b05      	ldr	r3, [pc, #20]	; (800ae54 <_sbrk+0x50>)
 800ae40:	681a      	ldr	r2, [r3, #0]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	18d2      	adds	r2, r2, r3
 800ae46:	4b03      	ldr	r3, [pc, #12]	; (800ae54 <_sbrk+0x50>)
 800ae48:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
}
 800ae4c:	0018      	movs	r0, r3
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	b004      	add	sp, #16
 800ae52:	bd80      	pop	{r7, pc}
 800ae54:	20000d74 	.word	0x20000d74
 800ae58:	20001078 	.word	0x20001078

0800ae5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800ae60:	4b17      	ldr	r3, [pc, #92]	; (800aec0 <SystemInit+0x64>)
 800ae62:	4a17      	ldr	r2, [pc, #92]	; (800aec0 <SystemInit+0x64>)
 800ae64:	6812      	ldr	r2, [r2, #0]
 800ae66:	2180      	movs	r1, #128	; 0x80
 800ae68:	0049      	lsls	r1, r1, #1
 800ae6a:	430a      	orrs	r2, r1
 800ae6c:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800ae6e:	4b14      	ldr	r3, [pc, #80]	; (800aec0 <SystemInit+0x64>)
 800ae70:	4a13      	ldr	r2, [pc, #76]	; (800aec0 <SystemInit+0x64>)
 800ae72:	68d2      	ldr	r2, [r2, #12]
 800ae74:	4913      	ldr	r1, [pc, #76]	; (800aec4 <SystemInit+0x68>)
 800ae76:	400a      	ands	r2, r1
 800ae78:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800ae7a:	4b11      	ldr	r3, [pc, #68]	; (800aec0 <SystemInit+0x64>)
 800ae7c:	4a10      	ldr	r2, [pc, #64]	; (800aec0 <SystemInit+0x64>)
 800ae7e:	6812      	ldr	r2, [r2, #0]
 800ae80:	4911      	ldr	r1, [pc, #68]	; (800aec8 <SystemInit+0x6c>)
 800ae82:	400a      	ands	r2, r1
 800ae84:	601a      	str	r2, [r3, #0]
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800ae86:	4b0e      	ldr	r3, [pc, #56]	; (800aec0 <SystemInit+0x64>)
 800ae88:	4a0d      	ldr	r2, [pc, #52]	; (800aec0 <SystemInit+0x64>)
 800ae8a:	6892      	ldr	r2, [r2, #8]
 800ae8c:	2101      	movs	r1, #1
 800ae8e:	438a      	bics	r2, r1
 800ae90:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800ae92:	4b0b      	ldr	r3, [pc, #44]	; (800aec0 <SystemInit+0x64>)
 800ae94:	4a0a      	ldr	r2, [pc, #40]	; (800aec0 <SystemInit+0x64>)
 800ae96:	6812      	ldr	r2, [r2, #0]
 800ae98:	490c      	ldr	r1, [pc, #48]	; (800aecc <SystemInit+0x70>)
 800ae9a:	400a      	ands	r2, r1
 800ae9c:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800ae9e:	4b08      	ldr	r3, [pc, #32]	; (800aec0 <SystemInit+0x64>)
 800aea0:	4a07      	ldr	r2, [pc, #28]	; (800aec0 <SystemInit+0x64>)
 800aea2:	68d2      	ldr	r2, [r2, #12]
 800aea4:	490a      	ldr	r1, [pc, #40]	; (800aed0 <SystemInit+0x74>)
 800aea6:	400a      	ands	r2, r1
 800aea8:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800aeaa:	4b05      	ldr	r3, [pc, #20]	; (800aec0 <SystemInit+0x64>)
 800aeac:	2200      	movs	r2, #0
 800aeae:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800aeb0:	4b08      	ldr	r3, [pc, #32]	; (800aed4 <SystemInit+0x78>)
 800aeb2:	2280      	movs	r2, #128	; 0x80
 800aeb4:	0512      	lsls	r2, r2, #20
 800aeb6:	609a      	str	r2, [r3, #8]
#endif
}
 800aeb8:	46c0      	nop			; (mov r8, r8)
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
 800aebe:	46c0      	nop			; (mov r8, r8)
 800aec0:	40021000 	.word	0x40021000
 800aec4:	88ff400c 	.word	0x88ff400c
 800aec8:	fef6fff6 	.word	0xfef6fff6
 800aecc:	fffbffff 	.word	0xfffbffff
 800aed0:	ff02ffff 	.word	0xff02ffff
 800aed4:	e000ed00 	.word	0xe000ed00

0800aed8 <vcom_Init>:
/* Functions Definition ------------------------------------------------------*/



void vcom_Init(void)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	af00      	add	r7, sp, #0
      - Word Length = 8 Bits
      - Stop Bit = One Stop bit
      - Parity = ODD parity
      - BaudRate = 921600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USARTX;
 800aedc:	4b14      	ldr	r3, [pc, #80]	; (800af30 <vcom_Init+0x58>)
 800aede:	4a15      	ldr	r2, [pc, #84]	; (800af34 <vcom_Init+0x5c>)
 800aee0:	601a      	str	r2, [r3, #0]
  
  UartHandle.Init.BaudRate   = 115200;
 800aee2:	4b13      	ldr	r3, [pc, #76]	; (800af30 <vcom_Init+0x58>)
 800aee4:	22e1      	movs	r2, #225	; 0xe1
 800aee6:	0252      	lsls	r2, r2, #9
 800aee8:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800aeea:	4b11      	ldr	r3, [pc, #68]	; (800af30 <vcom_Init+0x58>)
 800aeec:	2200      	movs	r2, #0
 800aeee:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 800aef0:	4b0f      	ldr	r3, [pc, #60]	; (800af30 <vcom_Init+0x58>)
 800aef2:	2200      	movs	r2, #0
 800aef4:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 800aef6:	4b0e      	ldr	r3, [pc, #56]	; (800af30 <vcom_Init+0x58>)
 800aef8:	2200      	movs	r2, #0
 800aefa:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800aefc:	4b0c      	ldr	r3, [pc, #48]	; (800af30 <vcom_Init+0x58>)
 800aefe:	2200      	movs	r2, #0
 800af00:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 800af02:	4b0b      	ldr	r3, [pc, #44]	; (800af30 <vcom_Init+0x58>)
 800af04:	220c      	movs	r2, #12
 800af06:	615a      	str	r2, [r3, #20]
  
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 800af08:	4b09      	ldr	r3, [pc, #36]	; (800af30 <vcom_Init+0x58>)
 800af0a:	0018      	movs	r0, r3
 800af0c:	f7fd fbfa 	bl	8008704 <HAL_UART_Init>
 800af10:	1e03      	subs	r3, r0, #0
 800af12:	d001      	beq.n	800af18 <vcom_Init+0x40>
  {
    /* Initialization Error */
    Error_Handler(); 
 800af14:	f7fe fc1e 	bl	8009754 <Error_Handler>
  }
  
  HAL_NVIC_SetPriority(USARTX_IRQn, 0x1, 0);
 800af18:	2200      	movs	r2, #0
 800af1a:	2101      	movs	r1, #1
 800af1c:	201c      	movs	r0, #28
 800af1e:	f7fa fb89 	bl	8005634 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTX_IRQn);
 800af22:	201c      	movs	r0, #28
 800af24:	f7fa fb9c 	bl	8005660 <HAL_NVIC_EnableIRQ>
}
 800af28:	46c0      	nop			; (mov r8, r8)
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	46c0      	nop			; (mov r8, r8)
 800af30:	20000ff4 	.word	0x20000ff4
 800af34:	40004400 	.word	0x40004400

0800af38 <vcom_Send>:
  HAL_UART_DeInit(&UartHandle);
#endif
}

void vcom_Send( char *format, ... )
{
 800af38:	b40f      	push	{r0, r1, r2, r3}
 800af3a:	b580      	push	{r7, lr}
 800af3c:	b0a6      	sub	sp, #152	; 0x98
 800af3e:	af00      	add	r7, sp, #0
  va_list args;
  va_start(args, format);
 800af40:	23a4      	movs	r3, #164	; 0xa4
 800af42:	18fb      	adds	r3, r7, r3
 800af44:	2284      	movs	r2, #132	; 0x84
 800af46:	18ba      	adds	r2, r7, r2
 800af48:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800af4a:	f3ef 8310 	mrs	r3, PRIMASK
 800af4e:	228c      	movs	r2, #140	; 0x8c
 800af50:	18ba      	adds	r2, r7, r2
 800af52:	6013      	str	r3, [r2, #0]
  return(result);
 800af54:	238c      	movs	r3, #140	; 0x8c
 800af56:	18fb      	adds	r3, r7, r3
 800af58:	681b      	ldr	r3, [r3, #0]
  uint8_t len;
  uint8_t lenTop;
  char tempBuff[128];
  
  BACKUP_PRIMASK();
 800af5a:	2294      	movs	r2, #148	; 0x94
 800af5c:	18ba      	adds	r2, r7, r2
 800af5e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800af60:	b672      	cpsid	i
  DISABLE_IRQ();
  
  /*convert into string at buff[0] of length iw*/
  len = vsprintf(&tempBuff[0], format, args);
 800af62:	2384      	movs	r3, #132	; 0x84
 800af64:	18fb      	adds	r3, r7, r3
 800af66:	681a      	ldr	r2, [r3, #0]
 800af68:	23a0      	movs	r3, #160	; 0xa0
 800af6a:	18fb      	adds	r3, r7, r3
 800af6c:	6819      	ldr	r1, [r3, #0]
 800af6e:	1d3b      	adds	r3, r7, #4
 800af70:	0018      	movs	r0, r3
 800af72:	f000 f9a7 	bl	800b2c4 <vsprintf>
 800af76:	0002      	movs	r2, r0
 800af78:	2393      	movs	r3, #147	; 0x93
 800af7a:	18fb      	adds	r3, r7, r3
 800af7c:	701a      	strb	r2, [r3, #0]
  
  if (iw+len<BUFSIZE)
 800af7e:	4b34      	ldr	r3, [pc, #208]	; (800b050 <vcom_Send+0x118>)
 800af80:	881b      	ldrh	r3, [r3, #0]
 800af82:	b29b      	uxth	r3, r3
 800af84:	001a      	movs	r2, r3
 800af86:	2393      	movs	r3, #147	; 0x93
 800af88:	18fb      	adds	r3, r7, r3
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	18d3      	adds	r3, r2, r3
 800af8e:	2bff      	cmp	r3, #255	; 0xff
 800af90:	dc18      	bgt.n	800afc4 <vcom_Send+0x8c>
  {
    memcpy( &buff[iw], &tempBuff[0], len);
 800af92:	4b2f      	ldr	r3, [pc, #188]	; (800b050 <vcom_Send+0x118>)
 800af94:	881b      	ldrh	r3, [r3, #0]
 800af96:	b29b      	uxth	r3, r3
 800af98:	001a      	movs	r2, r3
 800af9a:	4b2e      	ldr	r3, [pc, #184]	; (800b054 <vcom_Send+0x11c>)
 800af9c:	18d0      	adds	r0, r2, r3
 800af9e:	2393      	movs	r3, #147	; 0x93
 800afa0:	18fb      	adds	r3, r7, r3
 800afa2:	781a      	ldrb	r2, [r3, #0]
 800afa4:	1d3b      	adds	r3, r7, #4
 800afa6:	0019      	movs	r1, r3
 800afa8:	f000 f962 	bl	800b270 <memcpy>
    iw+=len;
 800afac:	2393      	movs	r3, #147	; 0x93
 800afae:	18fb      	adds	r3, r7, r3
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	b29a      	uxth	r2, r3
 800afb4:	4b26      	ldr	r3, [pc, #152]	; (800b050 <vcom_Send+0x118>)
 800afb6:	881b      	ldrh	r3, [r3, #0]
 800afb8:	b29b      	uxth	r3, r3
 800afba:	18d3      	adds	r3, r2, r3
 800afbc:	b29a      	uxth	r2, r3
 800afbe:	4b24      	ldr	r3, [pc, #144]	; (800b050 <vcom_Send+0x118>)
 800afc0:	801a      	strh	r2, [r3, #0]
 800afc2:	e030      	b.n	800b026 <vcom_Send+0xee>
  }
  else
  {
    lenTop=BUFSIZE-iw;
 800afc4:	4b22      	ldr	r3, [pc, #136]	; (800b050 <vcom_Send+0x118>)
 800afc6:	881b      	ldrh	r3, [r3, #0]
 800afc8:	b29b      	uxth	r3, r3
 800afca:	b2da      	uxtb	r2, r3
 800afcc:	2392      	movs	r3, #146	; 0x92
 800afce:	18fb      	adds	r3, r7, r3
 800afd0:	4252      	negs	r2, r2
 800afd2:	701a      	strb	r2, [r3, #0]
    memcpy( &buff[iw], &tempBuff[0], lenTop);
 800afd4:	4b1e      	ldr	r3, [pc, #120]	; (800b050 <vcom_Send+0x118>)
 800afd6:	881b      	ldrh	r3, [r3, #0]
 800afd8:	b29b      	uxth	r3, r3
 800afda:	001a      	movs	r2, r3
 800afdc:	4b1d      	ldr	r3, [pc, #116]	; (800b054 <vcom_Send+0x11c>)
 800afde:	18d0      	adds	r0, r2, r3
 800afe0:	2392      	movs	r3, #146	; 0x92
 800afe2:	18fb      	adds	r3, r7, r3
 800afe4:	781a      	ldrb	r2, [r3, #0]
 800afe6:	1d3b      	adds	r3, r7, #4
 800afe8:	0019      	movs	r1, r3
 800afea:	f000 f941 	bl	800b270 <memcpy>
    len-=lenTop;
 800afee:	2393      	movs	r3, #147	; 0x93
 800aff0:	18fb      	adds	r3, r7, r3
 800aff2:	2293      	movs	r2, #147	; 0x93
 800aff4:	18b9      	adds	r1, r7, r2
 800aff6:	2292      	movs	r2, #146	; 0x92
 800aff8:	18ba      	adds	r2, r7, r2
 800affa:	7809      	ldrb	r1, [r1, #0]
 800affc:	7812      	ldrb	r2, [r2, #0]
 800affe:	1a8a      	subs	r2, r1, r2
 800b000:	701a      	strb	r2, [r3, #0]
    memcpy( &buff[0], &tempBuff[lenTop], len);
 800b002:	2392      	movs	r3, #146	; 0x92
 800b004:	18fb      	adds	r3, r7, r3
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	1d3a      	adds	r2, r7, #4
 800b00a:	18d1      	adds	r1, r2, r3
 800b00c:	2393      	movs	r3, #147	; 0x93
 800b00e:	18fb      	adds	r3, r7, r3
 800b010:	781a      	ldrb	r2, [r3, #0]
 800b012:	4b10      	ldr	r3, [pc, #64]	; (800b054 <vcom_Send+0x11c>)
 800b014:	0018      	movs	r0, r3
 800b016:	f000 f92b 	bl	800b270 <memcpy>
    iw = len;
 800b01a:	2393      	movs	r3, #147	; 0x93
 800b01c:	18fb      	adds	r3, r7, r3
 800b01e:	781b      	ldrb	r3, [r3, #0]
 800b020:	b29a      	uxth	r2, r3
 800b022:	4b0b      	ldr	r3, [pc, #44]	; (800b050 <vcom_Send+0x118>)
 800b024:	801a      	strh	r2, [r3, #0]
 800b026:	2394      	movs	r3, #148	; 0x94
 800b028:	18fb      	adds	r3, r7, r3
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	2288      	movs	r2, #136	; 0x88
 800b02e:	18ba      	adds	r2, r7, r2
 800b030:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b032:	2388      	movs	r3, #136	; 0x88
 800b034:	18fb      	adds	r3, r7, r3
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f383 8810 	msr	PRIMASK, r3
  }
  RESTORE_PRIMASK();
  
  HAL_NVIC_SetPendingIRQ(USARTX_IRQn);
 800b03c:	201c      	movs	r0, #28
 800b03e:	f7fa fb1f 	bl	8005680 <HAL_NVIC_SetPendingIRQ>
    
  va_end(args);
}
 800b042:	46c0      	nop			; (mov r8, r8)
 800b044:	46bd      	mov	sp, r7
 800b046:	b026      	add	sp, #152	; 0x98
 800b048:	bc80      	pop	{r7}
 800b04a:	bc08      	pop	{r3}
 800b04c:	b004      	add	sp, #16
 800b04e:	4718      	bx	r3
 800b050:	20000e78 	.word	0x20000e78
 800b054:	20000d78 	.word	0x20000d78

0800b058 <vcom_Print>:

/* modifes only ir*/
void vcom_Print( void)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b084      	sub	sp, #16
 800b05c:	af00      	add	r7, sp, #0
  char* CurChar;
  while( ( (iw+BUFSIZE-ir)%BUFSIZE) >0 )
 800b05e:	e024      	b.n	800b0aa <vcom_Print+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b060:	f3ef 8310 	mrs	r3, PRIMASK
 800b064:	603b      	str	r3, [r7, #0]
  return(result);
 800b066:	683b      	ldr	r3, [r7, #0]
  {
    BACKUP_PRIMASK();
 800b068:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800b06a:	b672      	cpsid	i
    DISABLE_IRQ();
    
    CurChar = &buff[ir];
 800b06c:	4b1b      	ldr	r3, [pc, #108]	; (800b0dc <vcom_Print+0x84>)
 800b06e:	881b      	ldrh	r3, [r3, #0]
 800b070:	001a      	movs	r2, r3
 800b072:	4b1b      	ldr	r3, [pc, #108]	; (800b0e0 <vcom_Print+0x88>)
 800b074:	18d3      	adds	r3, r2, r3
 800b076:	60bb      	str	r3, [r7, #8]
    ir= (ir+1) %BUFSIZE;
 800b078:	4b18      	ldr	r3, [pc, #96]	; (800b0dc <vcom_Print+0x84>)
 800b07a:	881b      	ldrh	r3, [r3, #0]
 800b07c:	3301      	adds	r3, #1
 800b07e:	4a19      	ldr	r2, [pc, #100]	; (800b0e4 <vcom_Print+0x8c>)
 800b080:	4013      	ands	r3, r2
 800b082:	d503      	bpl.n	800b08c <vcom_Print+0x34>
 800b084:	3b01      	subs	r3, #1
 800b086:	4a18      	ldr	r2, [pc, #96]	; (800b0e8 <vcom_Print+0x90>)
 800b088:	4313      	orrs	r3, r2
 800b08a:	3301      	adds	r3, #1
 800b08c:	b29a      	uxth	r2, r3
 800b08e:	4b13      	ldr	r3, [pc, #76]	; (800b0dc <vcom_Print+0x84>)
 800b090:	801a      	strh	r2, [r3, #0]
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f383 8810 	msr	PRIMASK, r3
    
    RESTORE_PRIMASK();
    
    HAL_UART_Transmit(&UartHandle,(uint8_t *) CurChar, 1, 300);    
 800b09c:	2396      	movs	r3, #150	; 0x96
 800b09e:	005b      	lsls	r3, r3, #1
 800b0a0:	68b9      	ldr	r1, [r7, #8]
 800b0a2:	4812      	ldr	r0, [pc, #72]	; (800b0ec <vcom_Print+0x94>)
 800b0a4:	2201      	movs	r2, #1
 800b0a6:	f7fd fb85 	bl	80087b4 <HAL_UART_Transmit>
  while( ( (iw+BUFSIZE-ir)%BUFSIZE) >0 )
 800b0aa:	4b11      	ldr	r3, [pc, #68]	; (800b0f0 <vcom_Print+0x98>)
 800b0ac:	881b      	ldrh	r3, [r3, #0]
 800b0ae:	b29b      	uxth	r3, r3
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	33ff      	adds	r3, #255	; 0xff
 800b0b4:	4a09      	ldr	r2, [pc, #36]	; (800b0dc <vcom_Print+0x84>)
 800b0b6:	8812      	ldrh	r2, [r2, #0]
 800b0b8:	1a9b      	subs	r3, r3, r2
 800b0ba:	4a0a      	ldr	r2, [pc, #40]	; (800b0e4 <vcom_Print+0x8c>)
 800b0bc:	4013      	ands	r3, r2
 800b0be:	d503      	bpl.n	800b0c8 <vcom_Print+0x70>
 800b0c0:	3b01      	subs	r3, #1
 800b0c2:	4a09      	ldr	r2, [pc, #36]	; (800b0e8 <vcom_Print+0x90>)
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	dcc9      	bgt.n	800b060 <vcom_Print+0x8>
  }
  HAL_NVIC_ClearPendingIRQ(USARTX_IRQn);
 800b0cc:	201c      	movs	r0, #28
 800b0ce:	f7fa fae7 	bl	80056a0 <HAL_NVIC_ClearPendingIRQ>
}
 800b0d2:	46c0      	nop			; (mov r8, r8)
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	b004      	add	sp, #16
 800b0d8:	bd80      	pop	{r7, pc}
 800b0da:	46c0      	nop			; (mov r8, r8)
 800b0dc:	20000e7a 	.word	0x20000e7a
 800b0e0:	20000d78 	.word	0x20000d78
 800b0e4:	800000ff 	.word	0x800000ff
 800b0e8:	ffffff00 	.word	0xffffff00
 800b0ec:	20000ff4 	.word	0x20000ff4
 800b0f0:	20000e78 	.word	0x20000e78

0800b0f4 <HAL_UART_MspInit>:
  *           - NVIC configuration for UART interrupt request enable
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b082      	sub	sp, #8
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  
  /*##-1- Enable peripherals and GPIO Clocks #################################*/

  /* Enable USART1 clock */
  USARTX_CLK_ENABLE(); 
 800b0fc:	4b06      	ldr	r3, [pc, #24]	; (800b118 <HAL_UART_MspInit+0x24>)
 800b0fe:	4a06      	ldr	r2, [pc, #24]	; (800b118 <HAL_UART_MspInit+0x24>)
 800b100:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b102:	2180      	movs	r1, #128	; 0x80
 800b104:	0289      	lsls	r1, r1, #10
 800b106:	430a      	orrs	r2, r1
 800b108:	639a      	str	r2, [r3, #56]	; 0x38
  
  /*##-2- Configure peripheral GPIO ##########################################*/  
  vcom_IoInit( );
 800b10a:	f000 f807 	bl	800b11c <vcom_IoInit>
}
 800b10e:	46c0      	nop			; (mov r8, r8)
 800b110:	46bd      	mov	sp, r7
 800b112:	b002      	add	sp, #8
 800b114:	bd80      	pop	{r7, pc}
 800b116:	46c0      	nop			; (mov r8, r8)
 800b118:	40021000 	.word	0x40021000

0800b11c <vcom_IoInit>:

void vcom_IoInit(void)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b088      	sub	sp, #32
 800b120:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct={0};
 800b122:	230c      	movs	r3, #12
 800b124:	18fb      	adds	r3, r7, r3
 800b126:	0018      	movs	r0, r3
 800b128:	2314      	movs	r3, #20
 800b12a:	001a      	movs	r2, r3
 800b12c:	2100      	movs	r1, #0
 800b12e:	f000 f8a8 	bl	800b282 <memset>
    /* Enable GPIO TX/RX clock */
  USARTX_TX_GPIO_CLK_ENABLE();
 800b132:	4b24      	ldr	r3, [pc, #144]	; (800b1c4 <vcom_IoInit+0xa8>)
 800b134:	4a23      	ldr	r2, [pc, #140]	; (800b1c4 <vcom_IoInit+0xa8>)
 800b136:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b138:	2101      	movs	r1, #1
 800b13a:	430a      	orrs	r2, r1
 800b13c:	62da      	str	r2, [r3, #44]	; 0x2c
 800b13e:	4b21      	ldr	r3, [pc, #132]	; (800b1c4 <vcom_IoInit+0xa8>)
 800b140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b142:	2201      	movs	r2, #1
 800b144:	4013      	ands	r3, r2
 800b146:	60bb      	str	r3, [r7, #8]
 800b148:	68bb      	ldr	r3, [r7, #8]
  USARTX_RX_GPIO_CLK_ENABLE();
 800b14a:	4b1e      	ldr	r3, [pc, #120]	; (800b1c4 <vcom_IoInit+0xa8>)
 800b14c:	4a1d      	ldr	r2, [pc, #116]	; (800b1c4 <vcom_IoInit+0xa8>)
 800b14e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b150:	2101      	movs	r1, #1
 800b152:	430a      	orrs	r2, r1
 800b154:	62da      	str	r2, [r3, #44]	; 0x2c
 800b156:	4b1b      	ldr	r3, [pc, #108]	; (800b1c4 <vcom_IoInit+0xa8>)
 800b158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b15a:	2201      	movs	r2, #1
 800b15c:	4013      	ands	r3, r2
 800b15e:	607b      	str	r3, [r7, #4]
 800b160:	687b      	ldr	r3, [r7, #4]
    /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTX_TX_PIN;
 800b162:	230c      	movs	r3, #12
 800b164:	18fb      	adds	r3, r7, r3
 800b166:	2204      	movs	r2, #4
 800b168:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800b16a:	230c      	movs	r3, #12
 800b16c:	18fb      	adds	r3, r7, r3
 800b16e:	2202      	movs	r2, #2
 800b170:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800b172:	230c      	movs	r3, #12
 800b174:	18fb      	adds	r3, r7, r3
 800b176:	2201      	movs	r2, #1
 800b178:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 800b17a:	230c      	movs	r3, #12
 800b17c:	18fb      	adds	r3, r7, r3
 800b17e:	2203      	movs	r2, #3
 800b180:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = USARTX_TX_AF;
 800b182:	230c      	movs	r3, #12
 800b184:	18fb      	adds	r3, r7, r3
 800b186:	2204      	movs	r2, #4
 800b188:	611a      	str	r2, [r3, #16]

  HAL_GPIO_Init(USARTX_TX_GPIO_PORT, &GPIO_InitStruct);
 800b18a:	230c      	movs	r3, #12
 800b18c:	18fa      	adds	r2, r7, r3
 800b18e:	23a0      	movs	r3, #160	; 0xa0
 800b190:	05db      	lsls	r3, r3, #23
 800b192:	0011      	movs	r1, r2
 800b194:	0018      	movs	r0, r3
 800b196:	f7fa fa93 	bl	80056c0 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTX_RX_PIN;
 800b19a:	230c      	movs	r3, #12
 800b19c:	18fb      	adds	r3, r7, r3
 800b19e:	2208      	movs	r2, #8
 800b1a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Alternate = USARTX_RX_AF;
 800b1a2:	230c      	movs	r3, #12
 800b1a4:	18fb      	adds	r3, r7, r3
 800b1a6:	2204      	movs	r2, #4
 800b1a8:	611a      	str	r2, [r3, #16]

  HAL_GPIO_Init(USARTX_RX_GPIO_PORT, &GPIO_InitStruct);
 800b1aa:	230c      	movs	r3, #12
 800b1ac:	18fa      	adds	r2, r7, r3
 800b1ae:	23a0      	movs	r3, #160	; 0xa0
 800b1b0:	05db      	lsls	r3, r3, #23
 800b1b2:	0011      	movs	r1, r2
 800b1b4:	0018      	movs	r0, r3
 800b1b6:	f7fa fa83 	bl	80056c0 <HAL_GPIO_Init>
}
 800b1ba:	46c0      	nop			; (mov r8, r8)
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	b008      	add	sp, #32
 800b1c0:	bd80      	pop	{r7, pc}
 800b1c2:	46c0      	nop			; (mov r8, r8)
 800b1c4:	40021000 	.word	0x40021000

0800b1c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800b1c8:	480d      	ldr	r0, [pc, #52]	; (800b200 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800b1ca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800b1cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b1ce:	e003      	b.n	800b1d8 <LoopCopyDataInit>

0800b1d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b1d0:	4b0c      	ldr	r3, [pc, #48]	; (800b204 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800b1d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b1d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b1d6:	3104      	adds	r1, #4

0800b1d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 800b1d8:	480b      	ldr	r0, [pc, #44]	; (800b208 <LoopForever+0xa>)
  ldr  r3, =_edata
 800b1da:	4b0c      	ldr	r3, [pc, #48]	; (800b20c <LoopForever+0xe>)
  adds  r2, r0, r1
 800b1dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b1de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b1e0:	d3f6      	bcc.n	800b1d0 <CopyDataInit>
  ldr  r2, =_sbss
 800b1e2:	4a0b      	ldr	r2, [pc, #44]	; (800b210 <LoopForever+0x12>)
  b  LoopFillZerobss
 800b1e4:	e002      	b.n	800b1ec <LoopFillZerobss>

0800b1e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800b1e6:	2300      	movs	r3, #0
  str  r3, [r2]
 800b1e8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b1ea:	3204      	adds	r2, #4

0800b1ec <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 800b1ec:	4b09      	ldr	r3, [pc, #36]	; (800b214 <LoopForever+0x16>)
  cmp  r2, r3
 800b1ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b1f0:	d3f9      	bcc.n	800b1e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800b1f2:	f7ff fe33 	bl	800ae5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b1f6:	f000 f817 	bl	800b228 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b1fa:	f7ff f949 	bl	800a490 <main>

0800b1fe <LoopForever>:

LoopForever:
    b LoopForever
 800b1fe:	e7fe      	b.n	800b1fe <LoopForever>
   ldr   r0, =_estack
 800b200:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 800b204:	0800e9c0 	.word	0x0800e9c0
  ldr  r0, =_sdata
 800b208:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b20c:	200006a0 	.word	0x200006a0
  ldr  r2, =_sbss
 800b210:	200006a0 	.word	0x200006a0
  ldr  r3, = _ebss
 800b214:	20001074 	.word	0x20001074

0800b218 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b218:	e7fe      	b.n	800b218 <ADC1_COMP_IRQHandler>
	...

0800b21c <__errno>:
 800b21c:	4b01      	ldr	r3, [pc, #4]	; (800b224 <__errno+0x8>)
 800b21e:	6818      	ldr	r0, [r3, #0]
 800b220:	4770      	bx	lr
 800b222:	46c0      	nop			; (mov r8, r8)
 800b224:	20000030 	.word	0x20000030

0800b228 <__libc_init_array>:
 800b228:	b570      	push	{r4, r5, r6, lr}
 800b22a:	2600      	movs	r6, #0
 800b22c:	4d0c      	ldr	r5, [pc, #48]	; (800b260 <__libc_init_array+0x38>)
 800b22e:	4c0d      	ldr	r4, [pc, #52]	; (800b264 <__libc_init_array+0x3c>)
 800b230:	1b64      	subs	r4, r4, r5
 800b232:	10a4      	asrs	r4, r4, #2
 800b234:	42a6      	cmp	r6, r4
 800b236:	d109      	bne.n	800b24c <__libc_init_array+0x24>
 800b238:	2600      	movs	r6, #0
 800b23a:	f003 f905 	bl	800e448 <_init>
 800b23e:	4d0a      	ldr	r5, [pc, #40]	; (800b268 <__libc_init_array+0x40>)
 800b240:	4c0a      	ldr	r4, [pc, #40]	; (800b26c <__libc_init_array+0x44>)
 800b242:	1b64      	subs	r4, r4, r5
 800b244:	10a4      	asrs	r4, r4, #2
 800b246:	42a6      	cmp	r6, r4
 800b248:	d105      	bne.n	800b256 <__libc_init_array+0x2e>
 800b24a:	bd70      	pop	{r4, r5, r6, pc}
 800b24c:	00b3      	lsls	r3, r6, #2
 800b24e:	58eb      	ldr	r3, [r5, r3]
 800b250:	4798      	blx	r3
 800b252:	3601      	adds	r6, #1
 800b254:	e7ee      	b.n	800b234 <__libc_init_array+0xc>
 800b256:	00b3      	lsls	r3, r6, #2
 800b258:	58eb      	ldr	r3, [r5, r3]
 800b25a:	4798      	blx	r3
 800b25c:	3601      	adds	r6, #1
 800b25e:	e7f2      	b.n	800b246 <__libc_init_array+0x1e>
 800b260:	0800e9b8 	.word	0x0800e9b8
 800b264:	0800e9b8 	.word	0x0800e9b8
 800b268:	0800e9b8 	.word	0x0800e9b8
 800b26c:	0800e9bc 	.word	0x0800e9bc

0800b270 <memcpy>:
 800b270:	2300      	movs	r3, #0
 800b272:	b510      	push	{r4, lr}
 800b274:	429a      	cmp	r2, r3
 800b276:	d100      	bne.n	800b27a <memcpy+0xa>
 800b278:	bd10      	pop	{r4, pc}
 800b27a:	5ccc      	ldrb	r4, [r1, r3]
 800b27c:	54c4      	strb	r4, [r0, r3]
 800b27e:	3301      	adds	r3, #1
 800b280:	e7f8      	b.n	800b274 <memcpy+0x4>

0800b282 <memset>:
 800b282:	0003      	movs	r3, r0
 800b284:	1882      	adds	r2, r0, r2
 800b286:	4293      	cmp	r3, r2
 800b288:	d100      	bne.n	800b28c <memset+0xa>
 800b28a:	4770      	bx	lr
 800b28c:	7019      	strb	r1, [r3, #0]
 800b28e:	3301      	adds	r3, #1
 800b290:	e7f9      	b.n	800b286 <memset+0x4>
	...

0800b294 <_vsprintf_r>:
 800b294:	b530      	push	{r4, r5, lr}
 800b296:	b09b      	sub	sp, #108	; 0x6c
 800b298:	9100      	str	r1, [sp, #0]
 800b29a:	9104      	str	r1, [sp, #16]
 800b29c:	4908      	ldr	r1, [pc, #32]	; (800b2c0 <_vsprintf_r+0x2c>)
 800b29e:	466d      	mov	r5, sp
 800b2a0:	9102      	str	r1, [sp, #8]
 800b2a2:	9105      	str	r1, [sp, #20]
 800b2a4:	2101      	movs	r1, #1
 800b2a6:	2482      	movs	r4, #130	; 0x82
 800b2a8:	4249      	negs	r1, r1
 800b2aa:	81e9      	strh	r1, [r5, #14]
 800b2ac:	00a4      	lsls	r4, r4, #2
 800b2ae:	4669      	mov	r1, sp
 800b2b0:	81ac      	strh	r4, [r5, #12]
 800b2b2:	f000 f813 	bl	800b2dc <_svfprintf_r>
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	9a00      	ldr	r2, [sp, #0]
 800b2ba:	7013      	strb	r3, [r2, #0]
 800b2bc:	b01b      	add	sp, #108	; 0x6c
 800b2be:	bd30      	pop	{r4, r5, pc}
 800b2c0:	7fffffff 	.word	0x7fffffff

0800b2c4 <vsprintf>:
 800b2c4:	b510      	push	{r4, lr}
 800b2c6:	0013      	movs	r3, r2
 800b2c8:	000a      	movs	r2, r1
 800b2ca:	0001      	movs	r1, r0
 800b2cc:	4802      	ldr	r0, [pc, #8]	; (800b2d8 <vsprintf+0x14>)
 800b2ce:	6800      	ldr	r0, [r0, #0]
 800b2d0:	f7ff ffe0 	bl	800b294 <_vsprintf_r>
 800b2d4:	bd10      	pop	{r4, pc}
 800b2d6:	46c0      	nop			; (mov r8, r8)
 800b2d8:	20000030 	.word	0x20000030

0800b2dc <_svfprintf_r>:
 800b2dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2de:	b0c5      	sub	sp, #276	; 0x114
 800b2e0:	9109      	str	r1, [sp, #36]	; 0x24
 800b2e2:	0014      	movs	r4, r2
 800b2e4:	001d      	movs	r5, r3
 800b2e6:	900a      	str	r0, [sp, #40]	; 0x28
 800b2e8:	f001 feda 	bl	800d0a0 <_localeconv_r>
 800b2ec:	6803      	ldr	r3, [r0, #0]
 800b2ee:	0018      	movs	r0, r3
 800b2f0:	9318      	str	r3, [sp, #96]	; 0x60
 800b2f2:	f7f4 ff09 	bl	8000108 <strlen>
 800b2f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2f8:	9012      	str	r0, [sp, #72]	; 0x48
 800b2fa:	899b      	ldrh	r3, [r3, #12]
 800b2fc:	061b      	lsls	r3, r3, #24
 800b2fe:	d518      	bpl.n	800b332 <_svfprintf_r+0x56>
 800b300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b302:	691b      	ldr	r3, [r3, #16]
 800b304:	930b      	str	r3, [sp, #44]	; 0x2c
 800b306:	2b00      	cmp	r3, #0
 800b308:	d113      	bne.n	800b332 <_svfprintf_r+0x56>
 800b30a:	2140      	movs	r1, #64	; 0x40
 800b30c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b30e:	f001 fedd 	bl	800d0cc <_malloc_r>
 800b312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b314:	6018      	str	r0, [r3, #0]
 800b316:	6118      	str	r0, [r3, #16]
 800b318:	2800      	cmp	r0, #0
 800b31a:	d107      	bne.n	800b32c <_svfprintf_r+0x50>
 800b31c:	230c      	movs	r3, #12
 800b31e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b320:	6013      	str	r3, [r2, #0]
 800b322:	3b0d      	subs	r3, #13
 800b324:	9313      	str	r3, [sp, #76]	; 0x4c
 800b326:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800b328:	b045      	add	sp, #276	; 0x114
 800b32a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b32c:	2340      	movs	r3, #64	; 0x40
 800b32e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b330:	6153      	str	r3, [r2, #20]
 800b332:	2300      	movs	r3, #0
 800b334:	af34      	add	r7, sp, #208	; 0xd0
 800b336:	9727      	str	r7, [sp, #156]	; 0x9c
 800b338:	9329      	str	r3, [sp, #164]	; 0xa4
 800b33a:	9328      	str	r3, [sp, #160]	; 0xa0
 800b33c:	9411      	str	r4, [sp, #68]	; 0x44
 800b33e:	930e      	str	r3, [sp, #56]	; 0x38
 800b340:	9316      	str	r3, [sp, #88]	; 0x58
 800b342:	9317      	str	r3, [sp, #92]	; 0x5c
 800b344:	931a      	str	r3, [sp, #104]	; 0x68
 800b346:	9319      	str	r3, [sp, #100]	; 0x64
 800b348:	9313      	str	r3, [sp, #76]	; 0x4c
 800b34a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800b34c:	7823      	ldrb	r3, [r4, #0]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d002      	beq.n	800b358 <_svfprintf_r+0x7c>
 800b352:	2b25      	cmp	r3, #37	; 0x25
 800b354:	d000      	beq.n	800b358 <_svfprintf_r+0x7c>
 800b356:	e091      	b.n	800b47c <_svfprintf_r+0x1a0>
 800b358:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b35a:	1ae6      	subs	r6, r4, r3
 800b35c:	d018      	beq.n	800b390 <_svfprintf_r+0xb4>
 800b35e:	603b      	str	r3, [r7, #0]
 800b360:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b362:	607e      	str	r6, [r7, #4]
 800b364:	199b      	adds	r3, r3, r6
 800b366:	9329      	str	r3, [sp, #164]	; 0xa4
 800b368:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b36a:	3708      	adds	r7, #8
 800b36c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b36e:	3301      	adds	r3, #1
 800b370:	9328      	str	r3, [sp, #160]	; 0xa0
 800b372:	2b07      	cmp	r3, #7
 800b374:	dd09      	ble.n	800b38a <_svfprintf_r+0xae>
 800b376:	aa27      	add	r2, sp, #156	; 0x9c
 800b378:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b37a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b37c:	f002 fbba 	bl	800daf4 <__ssprint_r>
 800b380:	2800      	cmp	r0, #0
 800b382:	d001      	beq.n	800b388 <_svfprintf_r+0xac>
 800b384:	f000 ffa8 	bl	800c2d8 <_svfprintf_r+0xffc>
 800b388:	af34      	add	r7, sp, #208	; 0xd0
 800b38a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b38c:	199b      	adds	r3, r3, r6
 800b38e:	9313      	str	r3, [sp, #76]	; 0x4c
 800b390:	7823      	ldrb	r3, [r4, #0]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d101      	bne.n	800b39a <_svfprintf_r+0xbe>
 800b396:	f000 ffbe 	bl	800c316 <_svfprintf_r+0x103a>
 800b39a:	221f      	movs	r2, #31
 800b39c:	2300      	movs	r3, #0
 800b39e:	a918      	add	r1, sp, #96	; 0x60
 800b3a0:	1852      	adds	r2, r2, r1
 800b3a2:	2101      	movs	r1, #1
 800b3a4:	7013      	strb	r3, [r2, #0]
 800b3a6:	001e      	movs	r6, r3
 800b3a8:	001a      	movs	r2, r3
 800b3aa:	4249      	negs	r1, r1
 800b3ac:	3401      	adds	r4, #1
 800b3ae:	910b      	str	r1, [sp, #44]	; 0x2c
 800b3b0:	9314      	str	r3, [sp, #80]	; 0x50
 800b3b2:	1c61      	adds	r1, r4, #1
 800b3b4:	9111      	str	r1, [sp, #68]	; 0x44
 800b3b6:	7821      	ldrb	r1, [r4, #0]
 800b3b8:	910d      	str	r1, [sp, #52]	; 0x34
 800b3ba:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b3bc:	3820      	subs	r0, #32
 800b3be:	2858      	cmp	r0, #88	; 0x58
 800b3c0:	d901      	bls.n	800b3c6 <_svfprintf_r+0xea>
 800b3c2:	f000 fca7 	bl	800bd14 <_svfprintf_r+0xa38>
 800b3c6:	f7f4 feb1 	bl	800012c <__gnu_thumb1_case_uhi>
 800b3ca:	00cc      	.short	0x00cc
 800b3cc:	04a504a5 	.word	0x04a504a5
 800b3d0:	04a500d1 	.word	0x04a500d1
 800b3d4:	04a504a5 	.word	0x04a504a5
 800b3d8:	04a504a5 	.word	0x04a504a5
 800b3dc:	00d404a5 	.word	0x00d404a5
 800b3e0:	04a5005b 	.word	0x04a5005b
 800b3e4:	00de00dc 	.word	0x00de00dc
 800b3e8:	010304a5 	.word	0x010304a5
 800b3ec:	01050105 	.word	0x01050105
 800b3f0:	01050105 	.word	0x01050105
 800b3f4:	01050105 	.word	0x01050105
 800b3f8:	01050105 	.word	0x01050105
 800b3fc:	04a50105 	.word	0x04a50105
 800b400:	04a504a5 	.word	0x04a504a5
 800b404:	04a504a5 	.word	0x04a504a5
 800b408:	04a504a5 	.word	0x04a504a5
 800b40c:	04a504a5 	.word	0x04a504a5
 800b410:	013504a5 	.word	0x013504a5
 800b414:	04a5014d 	.word	0x04a5014d
 800b418:	04a5014d 	.word	0x04a5014d
 800b41c:	04a504a5 	.word	0x04a504a5
 800b420:	011704a5 	.word	0x011704a5
 800b424:	04a504a5 	.word	0x04a504a5
 800b428:	04a503ad 	.word	0x04a503ad
 800b42c:	04a504a5 	.word	0x04a504a5
 800b430:	04a504a5 	.word	0x04a504a5
 800b434:	04a50407 	.word	0x04a50407
 800b438:	00a304a5 	.word	0x00a304a5
 800b43c:	04a504a5 	.word	0x04a504a5
 800b440:	04a504a5 	.word	0x04a504a5
 800b444:	04a504a5 	.word	0x04a504a5
 800b448:	04a504a5 	.word	0x04a504a5
 800b44c:	04a504a5 	.word	0x04a504a5
 800b450:	005f0126 	.word	0x005f0126
 800b454:	014d014d 	.word	0x014d014d
 800b458:	0119014d 	.word	0x0119014d
 800b45c:	04a5005f 	.word	0x04a5005f
 800b460:	011b04a5 	.word	0x011b04a5
 800b464:	038e04a5 	.word	0x038e04a5
 800b468:	03d903af 	.word	0x03d903af
 800b46c:	04a50122 	.word	0x04a50122
 800b470:	04a503ea 	.word	0x04a503ea
 800b474:	04a50409 	.word	0x04a50409
 800b478:	043004a5 	.word	0x043004a5
 800b47c:	3401      	adds	r4, #1
 800b47e:	e765      	b.n	800b34c <_svfprintf_r+0x70>
 800b480:	2301      	movs	r3, #1
 800b482:	222b      	movs	r2, #43	; 0x2b
 800b484:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800b486:	e794      	b.n	800b3b2 <_svfprintf_r+0xd6>
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d003      	beq.n	800b494 <_svfprintf_r+0x1b8>
 800b48c:	231f      	movs	r3, #31
 800b48e:	a918      	add	r1, sp, #96	; 0x60
 800b490:	185b      	adds	r3, r3, r1
 800b492:	701a      	strb	r2, [r3, #0]
 800b494:	06b3      	lsls	r3, r6, #26
 800b496:	d400      	bmi.n	800b49a <_svfprintf_r+0x1be>
 800b498:	e0d5      	b.n	800b646 <_svfprintf_r+0x36a>
 800b49a:	2307      	movs	r3, #7
 800b49c:	3507      	adds	r5, #7
 800b49e:	439d      	bics	r5, r3
 800b4a0:	002b      	movs	r3, r5
 800b4a2:	3308      	adds	r3, #8
 800b4a4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b4a6:	682b      	ldr	r3, [r5, #0]
 800b4a8:	686c      	ldr	r4, [r5, #4]
 800b4aa:	9306      	str	r3, [sp, #24]
 800b4ac:	9407      	str	r4, [sp, #28]
 800b4ae:	9a07      	ldr	r2, [sp, #28]
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	2a00      	cmp	r2, #0
 800b4b4:	da0c      	bge.n	800b4d0 <_svfprintf_r+0x1f4>
 800b4b6:	9906      	ldr	r1, [sp, #24]
 800b4b8:	9a07      	ldr	r2, [sp, #28]
 800b4ba:	2400      	movs	r4, #0
 800b4bc:	424b      	negs	r3, r1
 800b4be:	4194      	sbcs	r4, r2
 800b4c0:	9306      	str	r3, [sp, #24]
 800b4c2:	9407      	str	r4, [sp, #28]
 800b4c4:	231f      	movs	r3, #31
 800b4c6:	222d      	movs	r2, #45	; 0x2d
 800b4c8:	a918      	add	r1, sp, #96	; 0x60
 800b4ca:	185b      	adds	r3, r3, r1
 800b4cc:	701a      	strb	r2, [r3, #0]
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	9907      	ldr	r1, [sp, #28]
 800b4d2:	9a06      	ldr	r2, [sp, #24]
 800b4d4:	430a      	orrs	r2, r1
 800b4d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b4d8:	3101      	adds	r1, #1
 800b4da:	d101      	bne.n	800b4e0 <_svfprintf_r+0x204>
 800b4dc:	f000 ff3f 	bl	800c35e <_svfprintf_r+0x1082>
 800b4e0:	2180      	movs	r1, #128	; 0x80
 800b4e2:	0035      	movs	r5, r6
 800b4e4:	438d      	bics	r5, r1
 800b4e6:	2a00      	cmp	r2, #0
 800b4e8:	d001      	beq.n	800b4ee <_svfprintf_r+0x212>
 800b4ea:	f000 ff3d 	bl	800c368 <_svfprintf_r+0x108c>
 800b4ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b4f0:	2a00      	cmp	r2, #0
 800b4f2:	d101      	bne.n	800b4f8 <_svfprintf_r+0x21c>
 800b4f4:	f000 fc04 	bl	800bd00 <_svfprintf_r+0xa24>
 800b4f8:	2b01      	cmp	r3, #1
 800b4fa:	d100      	bne.n	800b4fe <_svfprintf_r+0x222>
 800b4fc:	e3b7      	b.n	800bc6e <_svfprintf_r+0x992>
 800b4fe:	2b02      	cmp	r3, #2
 800b500:	d100      	bne.n	800b504 <_svfprintf_r+0x228>
 800b502:	e3df      	b.n	800bcc4 <_svfprintf_r+0x9e8>
 800b504:	2300      	movs	r3, #0
 800b506:	2400      	movs	r4, #0
 800b508:	9306      	str	r3, [sp, #24]
 800b50a:	9407      	str	r4, [sp, #28]
 800b50c:	f000 ff32 	bl	800c374 <_svfprintf_r+0x1098>
 800b510:	2b00      	cmp	r3, #0
 800b512:	d003      	beq.n	800b51c <_svfprintf_r+0x240>
 800b514:	231f      	movs	r3, #31
 800b516:	a918      	add	r1, sp, #96	; 0x60
 800b518:	185b      	adds	r3, r3, r1
 800b51a:	701a      	strb	r2, [r3, #0]
 800b51c:	4b8c      	ldr	r3, [pc, #560]	; (800b750 <_svfprintf_r+0x474>)
 800b51e:	931a      	str	r3, [sp, #104]	; 0x68
 800b520:	2320      	movs	r3, #32
 800b522:	4033      	ands	r3, r6
 800b524:	d100      	bne.n	800b528 <_svfprintf_r+0x24c>
 800b526:	e388      	b.n	800bc3a <_svfprintf_r+0x95e>
 800b528:	2307      	movs	r3, #7
 800b52a:	3507      	adds	r5, #7
 800b52c:	439d      	bics	r5, r3
 800b52e:	002b      	movs	r3, r5
 800b530:	3308      	adds	r3, #8
 800b532:	930f      	str	r3, [sp, #60]	; 0x3c
 800b534:	682b      	ldr	r3, [r5, #0]
 800b536:	686c      	ldr	r4, [r5, #4]
 800b538:	9306      	str	r3, [sp, #24]
 800b53a:	9407      	str	r4, [sp, #28]
 800b53c:	2302      	movs	r3, #2
 800b53e:	07f2      	lsls	r2, r6, #31
 800b540:	d400      	bmi.n	800b544 <_svfprintf_r+0x268>
 800b542:	e2ff      	b.n	800bb44 <_svfprintf_r+0x868>
 800b544:	9a06      	ldr	r2, [sp, #24]
 800b546:	9907      	ldr	r1, [sp, #28]
 800b548:	430a      	orrs	r2, r1
 800b54a:	d100      	bne.n	800b54e <_svfprintf_r+0x272>
 800b54c:	e2fa      	b.n	800bb44 <_svfprintf_r+0x868>
 800b54e:	2130      	movs	r1, #48	; 0x30
 800b550:	aa20      	add	r2, sp, #128	; 0x80
 800b552:	7011      	strb	r1, [r2, #0]
 800b554:	2034      	movs	r0, #52	; 0x34
 800b556:	4669      	mov	r1, sp
 800b558:	1809      	adds	r1, r1, r0
 800b55a:	7809      	ldrb	r1, [r1, #0]
 800b55c:	431e      	orrs	r6, r3
 800b55e:	7051      	strb	r1, [r2, #1]
 800b560:	e2f0      	b.n	800bb44 <_svfprintf_r+0x868>
 800b562:	2a00      	cmp	r2, #0
 800b564:	d18e      	bne.n	800b484 <_svfprintf_r+0x1a8>
 800b566:	2301      	movs	r3, #1
 800b568:	2220      	movs	r2, #32
 800b56a:	e78b      	b.n	800b484 <_svfprintf_r+0x1a8>
 800b56c:	2101      	movs	r1, #1
 800b56e:	430e      	orrs	r6, r1
 800b570:	e788      	b.n	800b484 <_svfprintf_r+0x1a8>
 800b572:	6829      	ldr	r1, [r5, #0]
 800b574:	3504      	adds	r5, #4
 800b576:	9114      	str	r1, [sp, #80]	; 0x50
 800b578:	2900      	cmp	r1, #0
 800b57a:	db00      	blt.n	800b57e <_svfprintf_r+0x2a2>
 800b57c:	e782      	b.n	800b484 <_svfprintf_r+0x1a8>
 800b57e:	4249      	negs	r1, r1
 800b580:	9114      	str	r1, [sp, #80]	; 0x50
 800b582:	2104      	movs	r1, #4
 800b584:	e7f3      	b.n	800b56e <_svfprintf_r+0x292>
 800b586:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b588:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b58a:	7800      	ldrb	r0, [r0, #0]
 800b58c:	3101      	adds	r1, #1
 800b58e:	900d      	str	r0, [sp, #52]	; 0x34
 800b590:	282a      	cmp	r0, #42	; 0x2a
 800b592:	d009      	beq.n	800b5a8 <_svfprintf_r+0x2cc>
 800b594:	2000      	movs	r0, #0
 800b596:	900b      	str	r0, [sp, #44]	; 0x2c
 800b598:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800b59a:	0008      	movs	r0, r1
 800b59c:	3c30      	subs	r4, #48	; 0x30
 800b59e:	46a4      	mov	ip, r4
 800b5a0:	2c09      	cmp	r4, #9
 800b5a2:	d90c      	bls.n	800b5be <_svfprintf_r+0x2e2>
 800b5a4:	9011      	str	r0, [sp, #68]	; 0x44
 800b5a6:	e708      	b.n	800b3ba <_svfprintf_r+0xde>
 800b5a8:	682c      	ldr	r4, [r5, #0]
 800b5aa:	1d28      	adds	r0, r5, #4
 800b5ac:	940b      	str	r4, [sp, #44]	; 0x2c
 800b5ae:	2c00      	cmp	r4, #0
 800b5b0:	da02      	bge.n	800b5b8 <_svfprintf_r+0x2dc>
 800b5b2:	2401      	movs	r4, #1
 800b5b4:	4264      	negs	r4, r4
 800b5b6:	940b      	str	r4, [sp, #44]	; 0x2c
 800b5b8:	0005      	movs	r5, r0
 800b5ba:	9111      	str	r1, [sp, #68]	; 0x44
 800b5bc:	e762      	b.n	800b484 <_svfprintf_r+0x1a8>
 800b5be:	240a      	movs	r4, #10
 800b5c0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b5c2:	4360      	muls	r0, r4
 800b5c4:	4460      	add	r0, ip
 800b5c6:	900b      	str	r0, [sp, #44]	; 0x2c
 800b5c8:	7808      	ldrb	r0, [r1, #0]
 800b5ca:	3101      	adds	r1, #1
 800b5cc:	900d      	str	r0, [sp, #52]	; 0x34
 800b5ce:	e7e3      	b.n	800b598 <_svfprintf_r+0x2bc>
 800b5d0:	2180      	movs	r1, #128	; 0x80
 800b5d2:	e7cc      	b.n	800b56e <_svfprintf_r+0x292>
 800b5d4:	2100      	movs	r1, #0
 800b5d6:	9114      	str	r1, [sp, #80]	; 0x50
 800b5d8:	200a      	movs	r0, #10
 800b5da:	9914      	ldr	r1, [sp, #80]	; 0x50
 800b5dc:	4341      	muls	r1, r0
 800b5de:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b5e0:	3830      	subs	r0, #48	; 0x30
 800b5e2:	1841      	adds	r1, r0, r1
 800b5e4:	9114      	str	r1, [sp, #80]	; 0x50
 800b5e6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b5e8:	1c48      	adds	r0, r1, #1
 800b5ea:	7809      	ldrb	r1, [r1, #0]
 800b5ec:	9011      	str	r0, [sp, #68]	; 0x44
 800b5ee:	910d      	str	r1, [sp, #52]	; 0x34
 800b5f0:	3930      	subs	r1, #48	; 0x30
 800b5f2:	2909      	cmp	r1, #9
 800b5f4:	d9f0      	bls.n	800b5d8 <_svfprintf_r+0x2fc>
 800b5f6:	e7d5      	b.n	800b5a4 <_svfprintf_r+0x2c8>
 800b5f8:	2108      	movs	r1, #8
 800b5fa:	e7b8      	b.n	800b56e <_svfprintf_r+0x292>
 800b5fc:	2140      	movs	r1, #64	; 0x40
 800b5fe:	e7b6      	b.n	800b56e <_svfprintf_r+0x292>
 800b600:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b602:	7809      	ldrb	r1, [r1, #0]
 800b604:	296c      	cmp	r1, #108	; 0x6c
 800b606:	d104      	bne.n	800b612 <_svfprintf_r+0x336>
 800b608:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b60a:	3101      	adds	r1, #1
 800b60c:	9111      	str	r1, [sp, #68]	; 0x44
 800b60e:	2120      	movs	r1, #32
 800b610:	e7ad      	b.n	800b56e <_svfprintf_r+0x292>
 800b612:	2110      	movs	r1, #16
 800b614:	e7ab      	b.n	800b56e <_svfprintf_r+0x292>
 800b616:	1d2b      	adds	r3, r5, #4
 800b618:	682a      	ldr	r2, [r5, #0]
 800b61a:	930f      	str	r3, [sp, #60]	; 0x3c
 800b61c:	ab2a      	add	r3, sp, #168	; 0xa8
 800b61e:	701a      	strb	r2, [r3, #0]
 800b620:	221f      	movs	r2, #31
 800b622:	2400      	movs	r4, #0
 800b624:	a918      	add	r1, sp, #96	; 0x60
 800b626:	1852      	adds	r2, r2, r1
 800b628:	7014      	strb	r4, [r2, #0]
 800b62a:	2201      	movs	r2, #1
 800b62c:	9410      	str	r4, [sp, #64]	; 0x40
 800b62e:	920b      	str	r2, [sp, #44]	; 0x2c
 800b630:	930c      	str	r3, [sp, #48]	; 0x30
 800b632:	e134      	b.n	800b89e <_svfprintf_r+0x5c2>
 800b634:	2b00      	cmp	r3, #0
 800b636:	d003      	beq.n	800b640 <_svfprintf_r+0x364>
 800b638:	231f      	movs	r3, #31
 800b63a:	a918      	add	r1, sp, #96	; 0x60
 800b63c:	185b      	adds	r3, r3, r1
 800b63e:	701a      	strb	r2, [r3, #0]
 800b640:	2310      	movs	r3, #16
 800b642:	431e      	orrs	r6, r3
 800b644:	e726      	b.n	800b494 <_svfprintf_r+0x1b8>
 800b646:	1d2a      	adds	r2, r5, #4
 800b648:	06f3      	lsls	r3, r6, #27
 800b64a:	d505      	bpl.n	800b658 <_svfprintf_r+0x37c>
 800b64c:	682b      	ldr	r3, [r5, #0]
 800b64e:	920f      	str	r2, [sp, #60]	; 0x3c
 800b650:	9306      	str	r3, [sp, #24]
 800b652:	17db      	asrs	r3, r3, #31
 800b654:	9307      	str	r3, [sp, #28]
 800b656:	e72a      	b.n	800b4ae <_svfprintf_r+0x1d2>
 800b658:	682b      	ldr	r3, [r5, #0]
 800b65a:	920f      	str	r2, [sp, #60]	; 0x3c
 800b65c:	0671      	lsls	r1, r6, #25
 800b65e:	d5f7      	bpl.n	800b650 <_svfprintf_r+0x374>
 800b660:	b21b      	sxth	r3, r3
 800b662:	e7f5      	b.n	800b650 <_svfprintf_r+0x374>
 800b664:	2b00      	cmp	r3, #0
 800b666:	d003      	beq.n	800b670 <_svfprintf_r+0x394>
 800b668:	231f      	movs	r3, #31
 800b66a:	a918      	add	r1, sp, #96	; 0x60
 800b66c:	185b      	adds	r3, r3, r1
 800b66e:	701a      	strb	r2, [r3, #0]
 800b670:	2307      	movs	r3, #7
 800b672:	3507      	adds	r5, #7
 800b674:	439d      	bics	r5, r3
 800b676:	002b      	movs	r3, r5
 800b678:	2201      	movs	r2, #1
 800b67a:	3308      	adds	r3, #8
 800b67c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b67e:	682b      	ldr	r3, [r5, #0]
 800b680:	4252      	negs	r2, r2
 800b682:	9316      	str	r3, [sp, #88]	; 0x58
 800b684:	686b      	ldr	r3, [r5, #4]
 800b686:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800b688:	9317      	str	r3, [sp, #92]	; 0x5c
 800b68a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b68c:	0028      	movs	r0, r5
 800b68e:	005c      	lsls	r4, r3, #1
 800b690:	0864      	lsrs	r4, r4, #1
 800b692:	4b30      	ldr	r3, [pc, #192]	; (800b754 <_svfprintf_r+0x478>)
 800b694:	0021      	movs	r1, r4
 800b696:	f7f6 fcdf 	bl	8002058 <__aeabi_dcmpun>
 800b69a:	2800      	cmp	r0, #0
 800b69c:	d001      	beq.n	800b6a2 <_svfprintf_r+0x3c6>
 800b69e:	f000 fe44 	bl	800c32a <_svfprintf_r+0x104e>
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	4b2b      	ldr	r3, [pc, #172]	; (800b754 <_svfprintf_r+0x478>)
 800b6a6:	4252      	negs	r2, r2
 800b6a8:	0028      	movs	r0, r5
 800b6aa:	0021      	movs	r1, r4
 800b6ac:	f7f4 fede 	bl	800046c <__aeabi_dcmple>
 800b6b0:	2800      	cmp	r0, #0
 800b6b2:	d001      	beq.n	800b6b8 <_svfprintf_r+0x3dc>
 800b6b4:	f000 fe39 	bl	800c32a <_svfprintf_r+0x104e>
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b6be:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800b6c0:	f7f4 feca 	bl	8000458 <__aeabi_dcmplt>
 800b6c4:	2800      	cmp	r0, #0
 800b6c6:	d004      	beq.n	800b6d2 <_svfprintf_r+0x3f6>
 800b6c8:	231f      	movs	r3, #31
 800b6ca:	222d      	movs	r2, #45	; 0x2d
 800b6cc:	a918      	add	r1, sp, #96	; 0x60
 800b6ce:	185b      	adds	r3, r3, r1
 800b6d0:	701a      	strb	r2, [r3, #0]
 800b6d2:	4b21      	ldr	r3, [pc, #132]	; (800b758 <_svfprintf_r+0x47c>)
 800b6d4:	930c      	str	r3, [sp, #48]	; 0x30
 800b6d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6d8:	2b47      	cmp	r3, #71	; 0x47
 800b6da:	dc01      	bgt.n	800b6e0 <_svfprintf_r+0x404>
 800b6dc:	4b1f      	ldr	r3, [pc, #124]	; (800b75c <_svfprintf_r+0x480>)
 800b6de:	930c      	str	r3, [sp, #48]	; 0x30
 800b6e0:	2380      	movs	r3, #128	; 0x80
 800b6e2:	2400      	movs	r4, #0
 800b6e4:	439e      	bics	r6, r3
 800b6e6:	3b7d      	subs	r3, #125	; 0x7d
 800b6e8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b6ea:	9410      	str	r4, [sp, #64]	; 0x40
 800b6ec:	e0d7      	b.n	800b89e <_svfprintf_r+0x5c2>
 800b6ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6f0:	3301      	adds	r3, #1
 800b6f2:	d024      	beq.n	800b73e <_svfprintf_r+0x462>
 800b6f4:	2320      	movs	r3, #32
 800b6f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b6f8:	439a      	bics	r2, r3
 800b6fa:	2a47      	cmp	r2, #71	; 0x47
 800b6fc:	d102      	bne.n	800b704 <_svfprintf_r+0x428>
 800b6fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b700:	2b00      	cmp	r3, #0
 800b702:	d01f      	beq.n	800b744 <_svfprintf_r+0x468>
 800b704:	2380      	movs	r3, #128	; 0x80
 800b706:	005b      	lsls	r3, r3, #1
 800b708:	4333      	orrs	r3, r6
 800b70a:	931c      	str	r3, [sp, #112]	; 0x70
 800b70c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800b70e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b710:	9310      	str	r3, [sp, #64]	; 0x40
 800b712:	2c00      	cmp	r4, #0
 800b714:	da18      	bge.n	800b748 <_svfprintf_r+0x46c>
 800b716:	2280      	movs	r2, #128	; 0x80
 800b718:	0612      	lsls	r2, r2, #24
 800b71a:	0023      	movs	r3, r4
 800b71c:	4694      	mov	ip, r2
 800b71e:	4463      	add	r3, ip
 800b720:	9315      	str	r3, [sp, #84]	; 0x54
 800b722:	232d      	movs	r3, #45	; 0x2d
 800b724:	931b      	str	r3, [sp, #108]	; 0x6c
 800b726:	2320      	movs	r3, #32
 800b728:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800b72a:	439c      	bics	r4, r3
 800b72c:	2c46      	cmp	r4, #70	; 0x46
 800b72e:	d017      	beq.n	800b760 <_svfprintf_r+0x484>
 800b730:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b732:	2c45      	cmp	r4, #69	; 0x45
 800b734:	d101      	bne.n	800b73a <_svfprintf_r+0x45e>
 800b736:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b738:	1c5d      	adds	r5, r3, #1
 800b73a:	2302      	movs	r3, #2
 800b73c:	e012      	b.n	800b764 <_svfprintf_r+0x488>
 800b73e:	2306      	movs	r3, #6
 800b740:	930b      	str	r3, [sp, #44]	; 0x2c
 800b742:	e7df      	b.n	800b704 <_svfprintf_r+0x428>
 800b744:	2301      	movs	r3, #1
 800b746:	e7fb      	b.n	800b740 <_svfprintf_r+0x464>
 800b748:	9415      	str	r4, [sp, #84]	; 0x54
 800b74a:	2300      	movs	r3, #0
 800b74c:	e7ea      	b.n	800b724 <_svfprintf_r+0x448>
 800b74e:	46c0      	nop			; (mov r8, r8)
 800b750:	0800e750 	.word	0x0800e750
 800b754:	7fefffff 	.word	0x7fefffff
 800b758:	0800e744 	.word	0x0800e744
 800b75c:	0800e740 	.word	0x0800e740
 800b760:	2303      	movs	r3, #3
 800b762:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b764:	aa25      	add	r2, sp, #148	; 0x94
 800b766:	9204      	str	r2, [sp, #16]
 800b768:	aa22      	add	r2, sp, #136	; 0x88
 800b76a:	9203      	str	r2, [sp, #12]
 800b76c:	aa21      	add	r2, sp, #132	; 0x84
 800b76e:	9202      	str	r2, [sp, #8]
 800b770:	9300      	str	r3, [sp, #0]
 800b772:	9501      	str	r5, [sp, #4]
 800b774:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b776:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b778:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b77a:	f000 fea9 	bl	800c4d0 <_dtoa_r>
 800b77e:	900c      	str	r0, [sp, #48]	; 0x30
 800b780:	2c47      	cmp	r4, #71	; 0x47
 800b782:	d103      	bne.n	800b78c <_svfprintf_r+0x4b0>
 800b784:	07f3      	lsls	r3, r6, #31
 800b786:	d401      	bmi.n	800b78c <_svfprintf_r+0x4b0>
 800b788:	f000 fde3 	bl	800c352 <_svfprintf_r+0x1076>
 800b78c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b78e:	195b      	adds	r3, r3, r5
 800b790:	930e      	str	r3, [sp, #56]	; 0x38
 800b792:	2c46      	cmp	r4, #70	; 0x46
 800b794:	d113      	bne.n	800b7be <_svfprintf_r+0x4e2>
 800b796:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	2b30      	cmp	r3, #48	; 0x30
 800b79c:	d10a      	bne.n	800b7b4 <_svfprintf_r+0x4d8>
 800b79e:	2200      	movs	r2, #0
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b7a4:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b7a6:	f7f4 fe51 	bl	800044c <__aeabi_dcmpeq>
 800b7aa:	2800      	cmp	r0, #0
 800b7ac:	d102      	bne.n	800b7b4 <_svfprintf_r+0x4d8>
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	1b5d      	subs	r5, r3, r5
 800b7b2:	9521      	str	r5, [sp, #132]	; 0x84
 800b7b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b7b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b7b8:	4694      	mov	ip, r2
 800b7ba:	4463      	add	r3, ip
 800b7bc:	930e      	str	r3, [sp, #56]	; 0x38
 800b7be:	2200      	movs	r2, #0
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b7c4:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b7c6:	f7f4 fe41 	bl	800044c <__aeabi_dcmpeq>
 800b7ca:	2230      	movs	r2, #48	; 0x30
 800b7cc:	2800      	cmp	r0, #0
 800b7ce:	d100      	bne.n	800b7d2 <_svfprintf_r+0x4f6>
 800b7d0:	e13d      	b.n	800ba4e <_svfprintf_r+0x772>
 800b7d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b7d4:	9325      	str	r3, [sp, #148]	; 0x94
 800b7d6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800b7d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7da:	1a9b      	subs	r3, r3, r2
 800b7dc:	930e      	str	r3, [sp, #56]	; 0x38
 800b7de:	2c47      	cmp	r4, #71	; 0x47
 800b7e0:	d000      	beq.n	800b7e4 <_svfprintf_r+0x508>
 800b7e2:	e139      	b.n	800ba58 <_svfprintf_r+0x77c>
 800b7e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7e6:	1cda      	adds	r2, r3, #3
 800b7e8:	db03      	blt.n	800b7f2 <_svfprintf_r+0x516>
 800b7ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	db00      	blt.n	800b7f2 <_svfprintf_r+0x516>
 800b7f0:	e162      	b.n	800bab8 <_svfprintf_r+0x7dc>
 800b7f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7f4:	3b02      	subs	r3, #2
 800b7f6:	930d      	str	r3, [sp, #52]	; 0x34
 800b7f8:	4669      	mov	r1, sp
 800b7fa:	2034      	movs	r0, #52	; 0x34
 800b7fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b7fe:	1809      	adds	r1, r1, r0
 800b800:	7809      	ldrb	r1, [r1, #0]
 800b802:	1e54      	subs	r4, r2, #1
 800b804:	ab23      	add	r3, sp, #140	; 0x8c
 800b806:	9421      	str	r4, [sp, #132]	; 0x84
 800b808:	7019      	strb	r1, [r3, #0]
 800b80a:	2c00      	cmp	r4, #0
 800b80c:	db00      	blt.n	800b810 <_svfprintf_r+0x534>
 800b80e:	e13a      	b.n	800ba86 <_svfprintf_r+0x7aa>
 800b810:	2401      	movs	r4, #1
 800b812:	1aa4      	subs	r4, r4, r2
 800b814:	222d      	movs	r2, #45	; 0x2d
 800b816:	705a      	strb	r2, [r3, #1]
 800b818:	2c09      	cmp	r4, #9
 800b81a:	dc00      	bgt.n	800b81e <_svfprintf_r+0x542>
 800b81c:	e13c      	b.n	800ba98 <_svfprintf_r+0x7bc>
 800b81e:	253b      	movs	r5, #59	; 0x3b
 800b820:	ab18      	add	r3, sp, #96	; 0x60
 800b822:	18ed      	adds	r5, r5, r3
 800b824:	1e6b      	subs	r3, r5, #1
 800b826:	0020      	movs	r0, r4
 800b828:	210a      	movs	r1, #10
 800b82a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b82c:	f7f4 fdf8 	bl	8000420 <__aeabi_idivmod>
 800b830:	1e6b      	subs	r3, r5, #1
 800b832:	3130      	adds	r1, #48	; 0x30
 800b834:	7019      	strb	r1, [r3, #0]
 800b836:	0020      	movs	r0, r4
 800b838:	210a      	movs	r1, #10
 800b83a:	f7f4 fd0b 	bl	8000254 <__divsi3>
 800b83e:	0004      	movs	r4, r0
 800b840:	2809      	cmp	r0, #9
 800b842:	dd00      	ble.n	800b846 <_svfprintf_r+0x56a>
 800b844:	e121      	b.n	800ba8a <_svfprintf_r+0x7ae>
 800b846:	232e      	movs	r3, #46	; 0x2e
 800b848:	213b      	movs	r1, #59	; 0x3b
 800b84a:	aa18      	add	r2, sp, #96	; 0x60
 800b84c:	3d02      	subs	r5, #2
 800b84e:	3430      	adds	r4, #48	; 0x30
 800b850:	702c      	strb	r4, [r5, #0]
 800b852:	189b      	adds	r3, r3, r2
 800b854:	1889      	adds	r1, r1, r2
 800b856:	001a      	movs	r2, r3
 800b858:	428d      	cmp	r5, r1
 800b85a:	d200      	bcs.n	800b85e <_svfprintf_r+0x582>
 800b85c:	e117      	b.n	800ba8e <_svfprintf_r+0x7b2>
 800b85e:	ab23      	add	r3, sp, #140	; 0x8c
 800b860:	1ad3      	subs	r3, r2, r3
 800b862:	9319      	str	r3, [sp, #100]	; 0x64
 800b864:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b866:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b868:	4694      	mov	ip, r2
 800b86a:	4463      	add	r3, ip
 800b86c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b86e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b870:	2b01      	cmp	r3, #1
 800b872:	dc03      	bgt.n	800b87c <_svfprintf_r+0x5a0>
 800b874:	2301      	movs	r3, #1
 800b876:	401e      	ands	r6, r3
 800b878:	9610      	str	r6, [sp, #64]	; 0x40
 800b87a:	d006      	beq.n	800b88a <_svfprintf_r+0x5ae>
 800b87c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b87e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b880:	4694      	mov	ip, r2
 800b882:	4463      	add	r3, ip
 800b884:	930b      	str	r3, [sp, #44]	; 0x2c
 800b886:	2300      	movs	r3, #0
 800b888:	9310      	str	r3, [sp, #64]	; 0x40
 800b88a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d004      	beq.n	800b89a <_svfprintf_r+0x5be>
 800b890:	231f      	movs	r3, #31
 800b892:	222d      	movs	r2, #45	; 0x2d
 800b894:	a918      	add	r1, sp, #96	; 0x60
 800b896:	185b      	adds	r3, r3, r1
 800b898:	701a      	strb	r2, [r3, #0]
 800b89a:	2400      	movs	r4, #0
 800b89c:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800b89e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8a0:	9415      	str	r4, [sp, #84]	; 0x54
 800b8a2:	429c      	cmp	r4, r3
 800b8a4:	da00      	bge.n	800b8a8 <_svfprintf_r+0x5cc>
 800b8a6:	9315      	str	r3, [sp, #84]	; 0x54
 800b8a8:	231f      	movs	r3, #31
 800b8aa:	aa18      	add	r2, sp, #96	; 0x60
 800b8ac:	189b      	adds	r3, r3, r2
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	1e5a      	subs	r2, r3, #1
 800b8b2:	4193      	sbcs	r3, r2
 800b8b4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b8b6:	18d3      	adds	r3, r2, r3
 800b8b8:	9315      	str	r3, [sp, #84]	; 0x54
 800b8ba:	2302      	movs	r3, #2
 800b8bc:	4033      	ands	r3, r6
 800b8be:	931b      	str	r3, [sp, #108]	; 0x6c
 800b8c0:	d002      	beq.n	800b8c8 <_svfprintf_r+0x5ec>
 800b8c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8c4:	3302      	adds	r3, #2
 800b8c6:	9315      	str	r3, [sp, #84]	; 0x54
 800b8c8:	2384      	movs	r3, #132	; 0x84
 800b8ca:	4033      	ands	r3, r6
 800b8cc:	931c      	str	r3, [sp, #112]	; 0x70
 800b8ce:	d11e      	bne.n	800b90e <_svfprintf_r+0x632>
 800b8d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b8d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b8d4:	1a9d      	subs	r5, r3, r2
 800b8d6:	2d00      	cmp	r5, #0
 800b8d8:	dd19      	ble.n	800b90e <_svfprintf_r+0x632>
 800b8da:	4bcc      	ldr	r3, [pc, #816]	; (800bc0c <_svfprintf_r+0x930>)
 800b8dc:	603b      	str	r3, [r7, #0]
 800b8de:	2d10      	cmp	r5, #16
 800b8e0:	dd00      	ble.n	800b8e4 <_svfprintf_r+0x608>
 800b8e2:	e230      	b.n	800bd46 <_svfprintf_r+0xa6a>
 800b8e4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b8e6:	607d      	str	r5, [r7, #4]
 800b8e8:	195d      	adds	r5, r3, r5
 800b8ea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b8ec:	9529      	str	r5, [sp, #164]	; 0xa4
 800b8ee:	931d      	str	r3, [sp, #116]	; 0x74
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	9328      	str	r3, [sp, #160]	; 0xa0
 800b8f4:	3708      	adds	r7, #8
 800b8f6:	2b07      	cmp	r3, #7
 800b8f8:	dd09      	ble.n	800b90e <_svfprintf_r+0x632>
 800b8fa:	aa27      	add	r2, sp, #156	; 0x9c
 800b8fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b8fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b900:	f002 f8f8 	bl	800daf4 <__ssprint_r>
 800b904:	2800      	cmp	r0, #0
 800b906:	d001      	beq.n	800b90c <_svfprintf_r+0x630>
 800b908:	f000 fce6 	bl	800c2d8 <_svfprintf_r+0xffc>
 800b90c:	af34      	add	r7, sp, #208	; 0xd0
 800b90e:	231f      	movs	r3, #31
 800b910:	aa18      	add	r2, sp, #96	; 0x60
 800b912:	189b      	adds	r3, r3, r2
 800b914:	781a      	ldrb	r2, [r3, #0]
 800b916:	2a00      	cmp	r2, #0
 800b918:	d016      	beq.n	800b948 <_svfprintf_r+0x66c>
 800b91a:	603b      	str	r3, [r7, #0]
 800b91c:	2301      	movs	r3, #1
 800b91e:	607b      	str	r3, [r7, #4]
 800b920:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b922:	3708      	adds	r7, #8
 800b924:	3301      	adds	r3, #1
 800b926:	9329      	str	r3, [sp, #164]	; 0xa4
 800b928:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b92a:	931d      	str	r3, [sp, #116]	; 0x74
 800b92c:	3301      	adds	r3, #1
 800b92e:	9328      	str	r3, [sp, #160]	; 0xa0
 800b930:	2b07      	cmp	r3, #7
 800b932:	dd09      	ble.n	800b948 <_svfprintf_r+0x66c>
 800b934:	aa27      	add	r2, sp, #156	; 0x9c
 800b936:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b938:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b93a:	f002 f8db 	bl	800daf4 <__ssprint_r>
 800b93e:	2800      	cmp	r0, #0
 800b940:	d001      	beq.n	800b946 <_svfprintf_r+0x66a>
 800b942:	f000 fcc9 	bl	800c2d8 <_svfprintf_r+0xffc>
 800b946:	af34      	add	r7, sp, #208	; 0xd0
 800b948:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d017      	beq.n	800b97e <_svfprintf_r+0x6a2>
 800b94e:	ab20      	add	r3, sp, #128	; 0x80
 800b950:	603b      	str	r3, [r7, #0]
 800b952:	2302      	movs	r3, #2
 800b954:	607b      	str	r3, [r7, #4]
 800b956:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b958:	3708      	adds	r7, #8
 800b95a:	3302      	adds	r3, #2
 800b95c:	9329      	str	r3, [sp, #164]	; 0xa4
 800b95e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b960:	931b      	str	r3, [sp, #108]	; 0x6c
 800b962:	3301      	adds	r3, #1
 800b964:	9328      	str	r3, [sp, #160]	; 0xa0
 800b966:	2b07      	cmp	r3, #7
 800b968:	dd09      	ble.n	800b97e <_svfprintf_r+0x6a2>
 800b96a:	aa27      	add	r2, sp, #156	; 0x9c
 800b96c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b96e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b970:	f002 f8c0 	bl	800daf4 <__ssprint_r>
 800b974:	2800      	cmp	r0, #0
 800b976:	d001      	beq.n	800b97c <_svfprintf_r+0x6a0>
 800b978:	f000 fcae 	bl	800c2d8 <_svfprintf_r+0xffc>
 800b97c:	af34      	add	r7, sp, #208	; 0xd0
 800b97e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b980:	2b80      	cmp	r3, #128	; 0x80
 800b982:	d11e      	bne.n	800b9c2 <_svfprintf_r+0x6e6>
 800b984:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b986:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b988:	1a9d      	subs	r5, r3, r2
 800b98a:	2d00      	cmp	r5, #0
 800b98c:	dd19      	ble.n	800b9c2 <_svfprintf_r+0x6e6>
 800b98e:	4ba0      	ldr	r3, [pc, #640]	; (800bc10 <_svfprintf_r+0x934>)
 800b990:	603b      	str	r3, [r7, #0]
 800b992:	2d10      	cmp	r5, #16
 800b994:	dd00      	ble.n	800b998 <_svfprintf_r+0x6bc>
 800b996:	e1ed      	b.n	800bd74 <_svfprintf_r+0xa98>
 800b998:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b99a:	607d      	str	r5, [r7, #4]
 800b99c:	195d      	adds	r5, r3, r5
 800b99e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b9a0:	9529      	str	r5, [sp, #164]	; 0xa4
 800b9a2:	931b      	str	r3, [sp, #108]	; 0x6c
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	9328      	str	r3, [sp, #160]	; 0xa0
 800b9a8:	3708      	adds	r7, #8
 800b9aa:	2b07      	cmp	r3, #7
 800b9ac:	dd09      	ble.n	800b9c2 <_svfprintf_r+0x6e6>
 800b9ae:	aa27      	add	r2, sp, #156	; 0x9c
 800b9b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b9b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b9b4:	f002 f89e 	bl	800daf4 <__ssprint_r>
 800b9b8:	2800      	cmp	r0, #0
 800b9ba:	d001      	beq.n	800b9c0 <_svfprintf_r+0x6e4>
 800b9bc:	f000 fc8c 	bl	800c2d8 <_svfprintf_r+0xffc>
 800b9c0:	af34      	add	r7, sp, #208	; 0xd0
 800b9c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9c4:	2510      	movs	r5, #16
 800b9c6:	1ae4      	subs	r4, r4, r3
 800b9c8:	2c00      	cmp	r4, #0
 800b9ca:	dd00      	ble.n	800b9ce <_svfprintf_r+0x6f2>
 800b9cc:	e1fe      	b.n	800bdcc <_svfprintf_r+0xaf0>
 800b9ce:	05f3      	lsls	r3, r6, #23
 800b9d0:	d500      	bpl.n	800b9d4 <_svfprintf_r+0x6f8>
 800b9d2:	e215      	b.n	800be00 <_svfprintf_r+0xb24>
 800b9d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b9d6:	603b      	str	r3, [r7, #0]
 800b9d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9da:	607b      	str	r3, [r7, #4]
 800b9dc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b9de:	3708      	adds	r7, #8
 800b9e0:	930c      	str	r3, [sp, #48]	; 0x30
 800b9e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b9e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9e6:	4694      	mov	ip, r2
 800b9e8:	4463      	add	r3, ip
 800b9ea:	9329      	str	r3, [sp, #164]	; 0xa4
 800b9ec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b9ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	9328      	str	r3, [sp, #160]	; 0xa0
 800b9f4:	2b07      	cmp	r3, #7
 800b9f6:	dd09      	ble.n	800ba0c <_svfprintf_r+0x730>
 800b9f8:	aa27      	add	r2, sp, #156	; 0x9c
 800b9fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b9fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b9fe:	f002 f879 	bl	800daf4 <__ssprint_r>
 800ba02:	2800      	cmp	r0, #0
 800ba04:	d001      	beq.n	800ba0a <_svfprintf_r+0x72e>
 800ba06:	f000 fc67 	bl	800c2d8 <_svfprintf_r+0xffc>
 800ba0a:	af34      	add	r7, sp, #208	; 0xd0
 800ba0c:	0773      	lsls	r3, r6, #29
 800ba0e:	d501      	bpl.n	800ba14 <_svfprintf_r+0x738>
 800ba10:	f000 fc41 	bl	800c296 <_svfprintf_r+0xfba>
 800ba14:	9914      	ldr	r1, [sp, #80]	; 0x50
 800ba16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba18:	4299      	cmp	r1, r3
 800ba1a:	da00      	bge.n	800ba1e <_svfprintf_r+0x742>
 800ba1c:	0019      	movs	r1, r3
 800ba1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ba20:	185b      	adds	r3, r3, r1
 800ba22:	9313      	str	r3, [sp, #76]	; 0x4c
 800ba24:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800ba26:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d008      	beq.n	800ba3e <_svfprintf_r+0x762>
 800ba2c:	aa27      	add	r2, sp, #156	; 0x9c
 800ba2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba30:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ba32:	f002 f85f 	bl	800daf4 <__ssprint_r>
 800ba36:	2800      	cmp	r0, #0
 800ba38:	d001      	beq.n	800ba3e <_svfprintf_r+0x762>
 800ba3a:	f000 fc4d 	bl	800c2d8 <_svfprintf_r+0xffc>
 800ba3e:	2300      	movs	r3, #0
 800ba40:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ba42:	9328      	str	r3, [sp, #160]	; 0xa0
 800ba44:	af34      	add	r7, sp, #208	; 0xd0
 800ba46:	e480      	b.n	800b34a <_svfprintf_r+0x6e>
 800ba48:	1c59      	adds	r1, r3, #1
 800ba4a:	9125      	str	r1, [sp, #148]	; 0x94
 800ba4c:	701a      	strb	r2, [r3, #0]
 800ba4e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800ba50:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ba52:	4299      	cmp	r1, r3
 800ba54:	d8f8      	bhi.n	800ba48 <_svfprintf_r+0x76c>
 800ba56:	e6be      	b.n	800b7d6 <_svfprintf_r+0x4fa>
 800ba58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba5a:	2b65      	cmp	r3, #101	; 0x65
 800ba5c:	dc00      	bgt.n	800ba60 <_svfprintf_r+0x784>
 800ba5e:	e6cb      	b.n	800b7f8 <_svfprintf_r+0x51c>
 800ba60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba62:	2b66      	cmp	r3, #102	; 0x66
 800ba64:	d128      	bne.n	800bab8 <_svfprintf_r+0x7dc>
 800ba66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	dd1c      	ble.n	800baa6 <_svfprintf_r+0x7ca>
 800ba6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ba6e:	2a00      	cmp	r2, #0
 800ba70:	d101      	bne.n	800ba76 <_svfprintf_r+0x79a>
 800ba72:	07f2      	lsls	r2, r6, #31
 800ba74:	d503      	bpl.n	800ba7e <_svfprintf_r+0x7a2>
 800ba76:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ba78:	189b      	adds	r3, r3, r2
 800ba7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ba7c:	189b      	adds	r3, r3, r2
 800ba7e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ba80:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba82:	9210      	str	r2, [sp, #64]	; 0x40
 800ba84:	e701      	b.n	800b88a <_svfprintf_r+0x5ae>
 800ba86:	222b      	movs	r2, #43	; 0x2b
 800ba88:	e6c5      	b.n	800b816 <_svfprintf_r+0x53a>
 800ba8a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800ba8c:	e6ca      	b.n	800b824 <_svfprintf_r+0x548>
 800ba8e:	782a      	ldrb	r2, [r5, #0]
 800ba90:	3501      	adds	r5, #1
 800ba92:	701a      	strb	r2, [r3, #0]
 800ba94:	3301      	adds	r3, #1
 800ba96:	e6de      	b.n	800b856 <_svfprintf_r+0x57a>
 800ba98:	2230      	movs	r2, #48	; 0x30
 800ba9a:	ab23      	add	r3, sp, #140	; 0x8c
 800ba9c:	18a4      	adds	r4, r4, r2
 800ba9e:	709a      	strb	r2, [r3, #2]
 800baa0:	70dc      	strb	r4, [r3, #3]
 800baa2:	aa24      	add	r2, sp, #144	; 0x90
 800baa4:	e6db      	b.n	800b85e <_svfprintf_r+0x582>
 800baa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d102      	bne.n	800bab2 <_svfprintf_r+0x7d6>
 800baac:	3301      	adds	r3, #1
 800baae:	421e      	tst	r6, r3
 800bab0:	d0e5      	beq.n	800ba7e <_svfprintf_r+0x7a2>
 800bab2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bab4:	3301      	adds	r3, #1
 800bab6:	e7e0      	b.n	800ba7a <_svfprintf_r+0x79e>
 800bab8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800baba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800babc:	429a      	cmp	r2, r3
 800babe:	db06      	blt.n	800bace <_svfprintf_r+0x7f2>
 800bac0:	07f3      	lsls	r3, r6, #31
 800bac2:	d50e      	bpl.n	800bae2 <_svfprintf_r+0x806>
 800bac4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bac6:	18d3      	adds	r3, r2, r3
 800bac8:	2267      	movs	r2, #103	; 0x67
 800baca:	920d      	str	r2, [sp, #52]	; 0x34
 800bacc:	e7d7      	b.n	800ba7e <_svfprintf_r+0x7a2>
 800bace:	9912      	ldr	r1, [sp, #72]	; 0x48
 800bad0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bad2:	185b      	adds	r3, r3, r1
 800bad4:	2167      	movs	r1, #103	; 0x67
 800bad6:	910d      	str	r1, [sp, #52]	; 0x34
 800bad8:	2a00      	cmp	r2, #0
 800bada:	dcd0      	bgt.n	800ba7e <_svfprintf_r+0x7a2>
 800badc:	1a9b      	subs	r3, r3, r2
 800bade:	3301      	adds	r3, #1
 800bae0:	e7cd      	b.n	800ba7e <_svfprintf_r+0x7a2>
 800bae2:	0013      	movs	r3, r2
 800bae4:	e7f0      	b.n	800bac8 <_svfprintf_r+0x7ec>
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d003      	beq.n	800baf2 <_svfprintf_r+0x816>
 800baea:	231f      	movs	r3, #31
 800baec:	a918      	add	r1, sp, #96	; 0x60
 800baee:	185b      	adds	r3, r3, r1
 800baf0:	701a      	strb	r2, [r3, #0]
 800baf2:	1d2b      	adds	r3, r5, #4
 800baf4:	06b2      	lsls	r2, r6, #26
 800baf6:	d506      	bpl.n	800bb06 <_svfprintf_r+0x82a>
 800baf8:	682a      	ldr	r2, [r5, #0]
 800bafa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bafc:	6011      	str	r1, [r2, #0]
 800bafe:	17c9      	asrs	r1, r1, #31
 800bb00:	6051      	str	r1, [r2, #4]
 800bb02:	001d      	movs	r5, r3
 800bb04:	e421      	b.n	800b34a <_svfprintf_r+0x6e>
 800bb06:	06f2      	lsls	r2, r6, #27
 800bb08:	d503      	bpl.n	800bb12 <_svfprintf_r+0x836>
 800bb0a:	682a      	ldr	r2, [r5, #0]
 800bb0c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bb0e:	6011      	str	r1, [r2, #0]
 800bb10:	e7f7      	b.n	800bb02 <_svfprintf_r+0x826>
 800bb12:	0672      	lsls	r2, r6, #25
 800bb14:	d5f9      	bpl.n	800bb0a <_svfprintf_r+0x82e>
 800bb16:	4669      	mov	r1, sp
 800bb18:	204c      	movs	r0, #76	; 0x4c
 800bb1a:	1809      	adds	r1, r1, r0
 800bb1c:	682a      	ldr	r2, [r5, #0]
 800bb1e:	8809      	ldrh	r1, [r1, #0]
 800bb20:	8011      	strh	r1, [r2, #0]
 800bb22:	e7ee      	b.n	800bb02 <_svfprintf_r+0x826>
 800bb24:	2310      	movs	r3, #16
 800bb26:	431e      	orrs	r6, r3
 800bb28:	2120      	movs	r1, #32
 800bb2a:	4031      	ands	r1, r6
 800bb2c:	d010      	beq.n	800bb50 <_svfprintf_r+0x874>
 800bb2e:	2307      	movs	r3, #7
 800bb30:	3507      	adds	r5, #7
 800bb32:	439d      	bics	r5, r3
 800bb34:	002b      	movs	r3, r5
 800bb36:	3308      	adds	r3, #8
 800bb38:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb3a:	682b      	ldr	r3, [r5, #0]
 800bb3c:	686c      	ldr	r4, [r5, #4]
 800bb3e:	9306      	str	r3, [sp, #24]
 800bb40:	9407      	str	r4, [sp, #28]
 800bb42:	2300      	movs	r3, #0
 800bb44:	221f      	movs	r2, #31
 800bb46:	2100      	movs	r1, #0
 800bb48:	a818      	add	r0, sp, #96	; 0x60
 800bb4a:	1812      	adds	r2, r2, r0
 800bb4c:	7011      	strb	r1, [r2, #0]
 800bb4e:	e4bf      	b.n	800b4d0 <_svfprintf_r+0x1f4>
 800bb50:	2210      	movs	r2, #16
 800bb52:	1d28      	adds	r0, r5, #4
 800bb54:	4032      	ands	r2, r6
 800bb56:	d004      	beq.n	800bb62 <_svfprintf_r+0x886>
 800bb58:	682b      	ldr	r3, [r5, #0]
 800bb5a:	900f      	str	r0, [sp, #60]	; 0x3c
 800bb5c:	9306      	str	r3, [sp, #24]
 800bb5e:	9107      	str	r1, [sp, #28]
 800bb60:	e7ef      	b.n	800bb42 <_svfprintf_r+0x866>
 800bb62:	2340      	movs	r3, #64	; 0x40
 800bb64:	900f      	str	r0, [sp, #60]	; 0x3c
 800bb66:	4033      	ands	r3, r6
 800bb68:	d004      	beq.n	800bb74 <_svfprintf_r+0x898>
 800bb6a:	682b      	ldr	r3, [r5, #0]
 800bb6c:	9207      	str	r2, [sp, #28]
 800bb6e:	b29b      	uxth	r3, r3
 800bb70:	9306      	str	r3, [sp, #24]
 800bb72:	e7e6      	b.n	800bb42 <_svfprintf_r+0x866>
 800bb74:	682a      	ldr	r2, [r5, #0]
 800bb76:	9307      	str	r3, [sp, #28]
 800bb78:	9206      	str	r2, [sp, #24]
 800bb7a:	e7e3      	b.n	800bb44 <_svfprintf_r+0x868>
 800bb7c:	1d2b      	adds	r3, r5, #4
 800bb7e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb80:	682b      	ldr	r3, [r5, #0]
 800bb82:	2078      	movs	r0, #120	; 0x78
 800bb84:	2130      	movs	r1, #48	; 0x30
 800bb86:	9306      	str	r3, [sp, #24]
 800bb88:	2300      	movs	r3, #0
 800bb8a:	aa20      	add	r2, sp, #128	; 0x80
 800bb8c:	7011      	strb	r1, [r2, #0]
 800bb8e:	7050      	strb	r0, [r2, #1]
 800bb90:	4a20      	ldr	r2, [pc, #128]	; (800bc14 <_svfprintf_r+0x938>)
 800bb92:	9307      	str	r3, [sp, #28]
 800bb94:	3302      	adds	r3, #2
 800bb96:	431e      	orrs	r6, r3
 800bb98:	921a      	str	r2, [sp, #104]	; 0x68
 800bb9a:	900d      	str	r0, [sp, #52]	; 0x34
 800bb9c:	e7d2      	b.n	800bb44 <_svfprintf_r+0x868>
 800bb9e:	1d2b      	adds	r3, r5, #4
 800bba0:	930f      	str	r3, [sp, #60]	; 0x3c
 800bba2:	682b      	ldr	r3, [r5, #0]
 800bba4:	2400      	movs	r4, #0
 800bba6:	930c      	str	r3, [sp, #48]	; 0x30
 800bba8:	231f      	movs	r3, #31
 800bbaa:	aa18      	add	r2, sp, #96	; 0x60
 800bbac:	189b      	adds	r3, r3, r2
 800bbae:	701c      	strb	r4, [r3, #0]
 800bbb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbb2:	3301      	adds	r3, #1
 800bbb4:	d00b      	beq.n	800bbce <_svfprintf_r+0x8f2>
 800bbb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bbb8:	0021      	movs	r1, r4
 800bbba:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bbbc:	f001 fc8a 	bl	800d4d4 <memchr>
 800bbc0:	42a0      	cmp	r0, r4
 800bbc2:	d100      	bne.n	800bbc6 <_svfprintf_r+0x8ea>
 800bbc4:	e0bd      	b.n	800bd42 <_svfprintf_r+0xa66>
 800bbc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bbc8:	1ac3      	subs	r3, r0, r3
 800bbca:	930b      	str	r3, [sp, #44]	; 0x2c
 800bbcc:	e58d      	b.n	800b6ea <_svfprintf_r+0x40e>
 800bbce:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bbd0:	f7f4 fa9a 	bl	8000108 <strlen>
 800bbd4:	900b      	str	r0, [sp, #44]	; 0x2c
 800bbd6:	e588      	b.n	800b6ea <_svfprintf_r+0x40e>
 800bbd8:	2310      	movs	r3, #16
 800bbda:	431e      	orrs	r6, r3
 800bbdc:	2320      	movs	r3, #32
 800bbde:	4033      	ands	r3, r6
 800bbe0:	d00b      	beq.n	800bbfa <_svfprintf_r+0x91e>
 800bbe2:	2307      	movs	r3, #7
 800bbe4:	3507      	adds	r5, #7
 800bbe6:	439d      	bics	r5, r3
 800bbe8:	002b      	movs	r3, r5
 800bbea:	3308      	adds	r3, #8
 800bbec:	930f      	str	r3, [sp, #60]	; 0x3c
 800bbee:	682b      	ldr	r3, [r5, #0]
 800bbf0:	686c      	ldr	r4, [r5, #4]
 800bbf2:	9306      	str	r3, [sp, #24]
 800bbf4:	9407      	str	r4, [sp, #28]
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	e7a4      	b.n	800bb44 <_svfprintf_r+0x868>
 800bbfa:	2210      	movs	r2, #16
 800bbfc:	1d29      	adds	r1, r5, #4
 800bbfe:	4032      	ands	r2, r6
 800bc00:	d00a      	beq.n	800bc18 <_svfprintf_r+0x93c>
 800bc02:	910f      	str	r1, [sp, #60]	; 0x3c
 800bc04:	682a      	ldr	r2, [r5, #0]
 800bc06:	9307      	str	r3, [sp, #28]
 800bc08:	9206      	str	r2, [sp, #24]
 800bc0a:	e7f4      	b.n	800bbf6 <_svfprintf_r+0x91a>
 800bc0c:	0800e774 	.word	0x0800e774
 800bc10:	0800e784 	.word	0x0800e784
 800bc14:	0800e761 	.word	0x0800e761
 800bc18:	2340      	movs	r3, #64	; 0x40
 800bc1a:	910f      	str	r1, [sp, #60]	; 0x3c
 800bc1c:	4033      	ands	r3, r6
 800bc1e:	d0f1      	beq.n	800bc04 <_svfprintf_r+0x928>
 800bc20:	682b      	ldr	r3, [r5, #0]
 800bc22:	9207      	str	r2, [sp, #28]
 800bc24:	b29b      	uxth	r3, r3
 800bc26:	9306      	str	r3, [sp, #24]
 800bc28:	e7e5      	b.n	800bbf6 <_svfprintf_r+0x91a>
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d003      	beq.n	800bc36 <_svfprintf_r+0x95a>
 800bc2e:	231f      	movs	r3, #31
 800bc30:	a918      	add	r1, sp, #96	; 0x60
 800bc32:	185b      	adds	r3, r3, r1
 800bc34:	701a      	strb	r2, [r3, #0]
 800bc36:	4baa      	ldr	r3, [pc, #680]	; (800bee0 <_svfprintf_r+0xc04>)
 800bc38:	e471      	b.n	800b51e <_svfprintf_r+0x242>
 800bc3a:	2210      	movs	r2, #16
 800bc3c:	1d29      	adds	r1, r5, #4
 800bc3e:	4032      	ands	r2, r6
 800bc40:	d004      	beq.n	800bc4c <_svfprintf_r+0x970>
 800bc42:	910f      	str	r1, [sp, #60]	; 0x3c
 800bc44:	682a      	ldr	r2, [r5, #0]
 800bc46:	9307      	str	r3, [sp, #28]
 800bc48:	9206      	str	r2, [sp, #24]
 800bc4a:	e477      	b.n	800b53c <_svfprintf_r+0x260>
 800bc4c:	2340      	movs	r3, #64	; 0x40
 800bc4e:	910f      	str	r1, [sp, #60]	; 0x3c
 800bc50:	4033      	ands	r3, r6
 800bc52:	d0f7      	beq.n	800bc44 <_svfprintf_r+0x968>
 800bc54:	682b      	ldr	r3, [r5, #0]
 800bc56:	9207      	str	r2, [sp, #28]
 800bc58:	b29b      	uxth	r3, r3
 800bc5a:	9306      	str	r3, [sp, #24]
 800bc5c:	e46e      	b.n	800b53c <_svfprintf_r+0x260>
 800bc5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc60:	e38a      	b.n	800c378 <_svfprintf_r+0x109c>
 800bc62:	9b07      	ldr	r3, [sp, #28]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d10a      	bne.n	800bc7e <_svfprintf_r+0x9a2>
 800bc68:	9b06      	ldr	r3, [sp, #24]
 800bc6a:	2b09      	cmp	r3, #9
 800bc6c:	d807      	bhi.n	800bc7e <_svfprintf_r+0x9a2>
 800bc6e:	9b06      	ldr	r3, [sp, #24]
 800bc70:	aa2c      	add	r2, sp, #176	; 0xb0
 800bc72:	3330      	adds	r3, #48	; 0x30
 800bc74:	77d3      	strb	r3, [r2, #31]
 800bc76:	236f      	movs	r3, #111	; 0x6f
 800bc78:	aa18      	add	r2, sp, #96	; 0x60
 800bc7a:	189b      	adds	r3, r3, r2
 800bc7c:	e39a      	b.n	800c3b4 <_svfprintf_r+0x10d8>
 800bc7e:	ab34      	add	r3, sp, #208	; 0xd0
 800bc80:	930c      	str	r3, [sp, #48]	; 0x30
 800bc82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc84:	9806      	ldr	r0, [sp, #24]
 800bc86:	9907      	ldr	r1, [sp, #28]
 800bc88:	3b01      	subs	r3, #1
 800bc8a:	930c      	str	r3, [sp, #48]	; 0x30
 800bc8c:	220a      	movs	r2, #10
 800bc8e:	2300      	movs	r3, #0
 800bc90:	f7f4 fc0a 	bl	80004a8 <__aeabi_uldivmod>
 800bc94:	9806      	ldr	r0, [sp, #24]
 800bc96:	9907      	ldr	r1, [sp, #28]
 800bc98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc9a:	3230      	adds	r2, #48	; 0x30
 800bc9c:	701a      	strb	r2, [r3, #0]
 800bc9e:	220a      	movs	r2, #10
 800bca0:	2300      	movs	r3, #0
 800bca2:	f7f4 fc01 	bl	80004a8 <__aeabi_uldivmod>
 800bca6:	9006      	str	r0, [sp, #24]
 800bca8:	9107      	str	r1, [sp, #28]
 800bcaa:	9b06      	ldr	r3, [sp, #24]
 800bcac:	9a07      	ldr	r2, [sp, #28]
 800bcae:	4313      	orrs	r3, r2
 800bcb0:	d1e7      	bne.n	800bc82 <_svfprintf_r+0x9a6>
 800bcb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bcb4:	ab34      	add	r3, sp, #208	; 0xd0
 800bcb6:	1a9b      	subs	r3, r3, r2
 800bcb8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800bcba:	930b      	str	r3, [sp, #44]	; 0x2c
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	002e      	movs	r6, r5
 800bcc0:	9310      	str	r3, [sp, #64]	; 0x40
 800bcc2:	e5ec      	b.n	800b89e <_svfprintf_r+0x5c2>
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	2400      	movs	r4, #0
 800bcc8:	9306      	str	r3, [sp, #24]
 800bcca:	9407      	str	r4, [sp, #28]
 800bccc:	200f      	movs	r0, #15
 800bcce:	ab34      	add	r3, sp, #208	; 0xd0
 800bcd0:	930c      	str	r3, [sp, #48]	; 0x30
 800bcd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bcd4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bcd6:	3b01      	subs	r3, #1
 800bcd8:	930c      	str	r3, [sp, #48]	; 0x30
 800bcda:	9b06      	ldr	r3, [sp, #24]
 800bcdc:	4003      	ands	r3, r0
 800bcde:	5cd3      	ldrb	r3, [r2, r3]
 800bce0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bce2:	7013      	strb	r3, [r2, #0]
 800bce4:	9b07      	ldr	r3, [sp, #28]
 800bce6:	0719      	lsls	r1, r3, #28
 800bce8:	9b06      	ldr	r3, [sp, #24]
 800bcea:	091a      	lsrs	r2, r3, #4
 800bcec:	9b07      	ldr	r3, [sp, #28]
 800bcee:	4311      	orrs	r1, r2
 800bcf0:	091b      	lsrs	r3, r3, #4
 800bcf2:	9307      	str	r3, [sp, #28]
 800bcf4:	000b      	movs	r3, r1
 800bcf6:	9a07      	ldr	r2, [sp, #28]
 800bcf8:	9106      	str	r1, [sp, #24]
 800bcfa:	4313      	orrs	r3, r2
 800bcfc:	d1e9      	bne.n	800bcd2 <_svfprintf_r+0x9f6>
 800bcfe:	e7d8      	b.n	800bcb2 <_svfprintf_r+0x9d6>
 800bd00:	aa34      	add	r2, sp, #208	; 0xd0
 800bd02:	920c      	str	r2, [sp, #48]	; 0x30
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d1d4      	bne.n	800bcb2 <_svfprintf_r+0x9d6>
 800bd08:	07f3      	lsls	r3, r6, #31
 800bd0a:	d5d2      	bpl.n	800bcb2 <_svfprintf_r+0x9d6>
 800bd0c:	2230      	movs	r2, #48	; 0x30
 800bd0e:	ab2c      	add	r3, sp, #176	; 0xb0
 800bd10:	77da      	strb	r2, [r3, #31]
 800bd12:	e7b0      	b.n	800bc76 <_svfprintf_r+0x99a>
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d003      	beq.n	800bd20 <_svfprintf_r+0xa44>
 800bd18:	231f      	movs	r3, #31
 800bd1a:	a918      	add	r1, sp, #96	; 0x60
 800bd1c:	185b      	adds	r3, r3, r1
 800bd1e:	701a      	strb	r2, [r3, #0]
 800bd20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d100      	bne.n	800bd28 <_svfprintf_r+0xa4c>
 800bd26:	e2f6      	b.n	800c316 <_svfprintf_r+0x103a>
 800bd28:	2134      	movs	r1, #52	; 0x34
 800bd2a:	466a      	mov	r2, sp
 800bd2c:	1852      	adds	r2, r2, r1
 800bd2e:	7812      	ldrb	r2, [r2, #0]
 800bd30:	ab2a      	add	r3, sp, #168	; 0xa8
 800bd32:	701a      	strb	r2, [r3, #0]
 800bd34:	221f      	movs	r2, #31
 800bd36:	2400      	movs	r4, #0
 800bd38:	a918      	add	r1, sp, #96	; 0x60
 800bd3a:	1852      	adds	r2, r2, r1
 800bd3c:	7014      	strb	r4, [r2, #0]
 800bd3e:	950f      	str	r5, [sp, #60]	; 0x3c
 800bd40:	e473      	b.n	800b62a <_svfprintf_r+0x34e>
 800bd42:	0004      	movs	r4, r0
 800bd44:	e4d1      	b.n	800b6ea <_svfprintf_r+0x40e>
 800bd46:	2310      	movs	r3, #16
 800bd48:	607b      	str	r3, [r7, #4]
 800bd4a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800bd4c:	3708      	adds	r7, #8
 800bd4e:	3310      	adds	r3, #16
 800bd50:	9329      	str	r3, [sp, #164]	; 0xa4
 800bd52:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800bd54:	931d      	str	r3, [sp, #116]	; 0x74
 800bd56:	3301      	adds	r3, #1
 800bd58:	9328      	str	r3, [sp, #160]	; 0xa0
 800bd5a:	2b07      	cmp	r3, #7
 800bd5c:	dd08      	ble.n	800bd70 <_svfprintf_r+0xa94>
 800bd5e:	aa27      	add	r2, sp, #156	; 0x9c
 800bd60:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd62:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bd64:	f001 fec6 	bl	800daf4 <__ssprint_r>
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	d000      	beq.n	800bd6e <_svfprintf_r+0xa92>
 800bd6c:	e2b4      	b.n	800c2d8 <_svfprintf_r+0xffc>
 800bd6e:	af34      	add	r7, sp, #208	; 0xd0
 800bd70:	3d10      	subs	r5, #16
 800bd72:	e5b2      	b.n	800b8da <_svfprintf_r+0x5fe>
 800bd74:	2310      	movs	r3, #16
 800bd76:	607b      	str	r3, [r7, #4]
 800bd78:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800bd7a:	3708      	adds	r7, #8
 800bd7c:	3310      	adds	r3, #16
 800bd7e:	9329      	str	r3, [sp, #164]	; 0xa4
 800bd80:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800bd82:	931b      	str	r3, [sp, #108]	; 0x6c
 800bd84:	3301      	adds	r3, #1
 800bd86:	9328      	str	r3, [sp, #160]	; 0xa0
 800bd88:	2b07      	cmp	r3, #7
 800bd8a:	dd08      	ble.n	800bd9e <_svfprintf_r+0xac2>
 800bd8c:	aa27      	add	r2, sp, #156	; 0x9c
 800bd8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd90:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bd92:	f001 feaf 	bl	800daf4 <__ssprint_r>
 800bd96:	2800      	cmp	r0, #0
 800bd98:	d000      	beq.n	800bd9c <_svfprintf_r+0xac0>
 800bd9a:	e29d      	b.n	800c2d8 <_svfprintf_r+0xffc>
 800bd9c:	af34      	add	r7, sp, #208	; 0xd0
 800bd9e:	3d10      	subs	r5, #16
 800bda0:	e5f5      	b.n	800b98e <_svfprintf_r+0x6b2>
 800bda2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800bda4:	607d      	str	r5, [r7, #4]
 800bda6:	3310      	adds	r3, #16
 800bda8:	9329      	str	r3, [sp, #164]	; 0xa4
 800bdaa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800bdac:	3708      	adds	r7, #8
 800bdae:	931b      	str	r3, [sp, #108]	; 0x6c
 800bdb0:	3301      	adds	r3, #1
 800bdb2:	9328      	str	r3, [sp, #160]	; 0xa0
 800bdb4:	2b07      	cmp	r3, #7
 800bdb6:	dd08      	ble.n	800bdca <_svfprintf_r+0xaee>
 800bdb8:	aa27      	add	r2, sp, #156	; 0x9c
 800bdba:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bdbc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bdbe:	f001 fe99 	bl	800daf4 <__ssprint_r>
 800bdc2:	2800      	cmp	r0, #0
 800bdc4:	d000      	beq.n	800bdc8 <_svfprintf_r+0xaec>
 800bdc6:	e287      	b.n	800c2d8 <_svfprintf_r+0xffc>
 800bdc8:	af34      	add	r7, sp, #208	; 0xd0
 800bdca:	3c10      	subs	r4, #16
 800bdcc:	4b45      	ldr	r3, [pc, #276]	; (800bee4 <_svfprintf_r+0xc08>)
 800bdce:	603b      	str	r3, [r7, #0]
 800bdd0:	2c10      	cmp	r4, #16
 800bdd2:	dce6      	bgt.n	800bda2 <_svfprintf_r+0xac6>
 800bdd4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800bdd6:	607c      	str	r4, [r7, #4]
 800bdd8:	191c      	adds	r4, r3, r4
 800bdda:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800bddc:	9429      	str	r4, [sp, #164]	; 0xa4
 800bdde:	931b      	str	r3, [sp, #108]	; 0x6c
 800bde0:	3301      	adds	r3, #1
 800bde2:	9328      	str	r3, [sp, #160]	; 0xa0
 800bde4:	3708      	adds	r7, #8
 800bde6:	2b07      	cmp	r3, #7
 800bde8:	dc00      	bgt.n	800bdec <_svfprintf_r+0xb10>
 800bdea:	e5f0      	b.n	800b9ce <_svfprintf_r+0x6f2>
 800bdec:	aa27      	add	r2, sp, #156	; 0x9c
 800bdee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bdf0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bdf2:	f001 fe7f 	bl	800daf4 <__ssprint_r>
 800bdf6:	2800      	cmp	r0, #0
 800bdf8:	d000      	beq.n	800bdfc <_svfprintf_r+0xb20>
 800bdfa:	e26d      	b.n	800c2d8 <_svfprintf_r+0xffc>
 800bdfc:	af34      	add	r7, sp, #208	; 0xd0
 800bdfe:	e5e6      	b.n	800b9ce <_svfprintf_r+0x6f2>
 800be00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be02:	2b65      	cmp	r3, #101	; 0x65
 800be04:	dc00      	bgt.n	800be08 <_svfprintf_r+0xb2c>
 800be06:	e1b0      	b.n	800c16a <_svfprintf_r+0xe8e>
 800be08:	2200      	movs	r2, #0
 800be0a:	2300      	movs	r3, #0
 800be0c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800be0e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800be10:	f7f4 fb1c 	bl	800044c <__aeabi_dcmpeq>
 800be14:	2800      	cmp	r0, #0
 800be16:	d069      	beq.n	800beec <_svfprintf_r+0xc10>
 800be18:	4b33      	ldr	r3, [pc, #204]	; (800bee8 <_svfprintf_r+0xc0c>)
 800be1a:	603b      	str	r3, [r7, #0]
 800be1c:	2301      	movs	r3, #1
 800be1e:	607b      	str	r3, [r7, #4]
 800be20:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800be22:	3708      	adds	r7, #8
 800be24:	3301      	adds	r3, #1
 800be26:	9329      	str	r3, [sp, #164]	; 0xa4
 800be28:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800be2a:	930b      	str	r3, [sp, #44]	; 0x2c
 800be2c:	3301      	adds	r3, #1
 800be2e:	9328      	str	r3, [sp, #160]	; 0xa0
 800be30:	2b07      	cmp	r3, #7
 800be32:	dd08      	ble.n	800be46 <_svfprintf_r+0xb6a>
 800be34:	aa27      	add	r2, sp, #156	; 0x9c
 800be36:	9909      	ldr	r1, [sp, #36]	; 0x24
 800be38:	980a      	ldr	r0, [sp, #40]	; 0x28
 800be3a:	f001 fe5b 	bl	800daf4 <__ssprint_r>
 800be3e:	2800      	cmp	r0, #0
 800be40:	d000      	beq.n	800be44 <_svfprintf_r+0xb68>
 800be42:	e249      	b.n	800c2d8 <_svfprintf_r+0xffc>
 800be44:	af34      	add	r7, sp, #208	; 0xd0
 800be46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be4a:	4293      	cmp	r3, r2
 800be4c:	db02      	blt.n	800be54 <_svfprintf_r+0xb78>
 800be4e:	07f3      	lsls	r3, r6, #31
 800be50:	d400      	bmi.n	800be54 <_svfprintf_r+0xb78>
 800be52:	e5db      	b.n	800ba0c <_svfprintf_r+0x730>
 800be54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800be56:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800be58:	4694      	mov	ip, r2
 800be5a:	603b      	str	r3, [r7, #0]
 800be5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800be5e:	607b      	str	r3, [r7, #4]
 800be60:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800be62:	3708      	adds	r7, #8
 800be64:	4463      	add	r3, ip
 800be66:	9329      	str	r3, [sp, #164]	; 0xa4
 800be68:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800be6a:	930b      	str	r3, [sp, #44]	; 0x2c
 800be6c:	3301      	adds	r3, #1
 800be6e:	9328      	str	r3, [sp, #160]	; 0xa0
 800be70:	2b07      	cmp	r3, #7
 800be72:	dd08      	ble.n	800be86 <_svfprintf_r+0xbaa>
 800be74:	aa27      	add	r2, sp, #156	; 0x9c
 800be76:	9909      	ldr	r1, [sp, #36]	; 0x24
 800be78:	980a      	ldr	r0, [sp, #40]	; 0x28
 800be7a:	f001 fe3b 	bl	800daf4 <__ssprint_r>
 800be7e:	2800      	cmp	r0, #0
 800be80:	d000      	beq.n	800be84 <_svfprintf_r+0xba8>
 800be82:	e229      	b.n	800c2d8 <_svfprintf_r+0xffc>
 800be84:	af34      	add	r7, sp, #208	; 0xd0
 800be86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be88:	2510      	movs	r5, #16
 800be8a:	1e5c      	subs	r4, r3, #1
 800be8c:	2c00      	cmp	r4, #0
 800be8e:	dc00      	bgt.n	800be92 <_svfprintf_r+0xbb6>
 800be90:	e5bc      	b.n	800ba0c <_svfprintf_r+0x730>
 800be92:	4b14      	ldr	r3, [pc, #80]	; (800bee4 <_svfprintf_r+0xc08>)
 800be94:	603b      	str	r3, [r7, #0]
 800be96:	2c10      	cmp	r4, #16
 800be98:	dc0b      	bgt.n	800beb2 <_svfprintf_r+0xbd6>
 800be9a:	607c      	str	r4, [r7, #4]
 800be9c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800be9e:	191c      	adds	r4, r3, r4
 800bea0:	9429      	str	r4, [sp, #164]	; 0xa4
 800bea2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800bea4:	930b      	str	r3, [sp, #44]	; 0x2c
 800bea6:	3301      	adds	r3, #1
 800bea8:	9328      	str	r3, [sp, #160]	; 0xa0
 800beaa:	2b07      	cmp	r3, #7
 800beac:	dc00      	bgt.n	800beb0 <_svfprintf_r+0xbd4>
 800beae:	e086      	b.n	800bfbe <_svfprintf_r+0xce2>
 800beb0:	e5a2      	b.n	800b9f8 <_svfprintf_r+0x71c>
 800beb2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800beb4:	607d      	str	r5, [r7, #4]
 800beb6:	3310      	adds	r3, #16
 800beb8:	9329      	str	r3, [sp, #164]	; 0xa4
 800beba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800bebc:	3708      	adds	r7, #8
 800bebe:	930b      	str	r3, [sp, #44]	; 0x2c
 800bec0:	3301      	adds	r3, #1
 800bec2:	9328      	str	r3, [sp, #160]	; 0xa0
 800bec4:	2b07      	cmp	r3, #7
 800bec6:	dd08      	ble.n	800beda <_svfprintf_r+0xbfe>
 800bec8:	aa27      	add	r2, sp, #156	; 0x9c
 800beca:	9909      	ldr	r1, [sp, #36]	; 0x24
 800becc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bece:	f001 fe11 	bl	800daf4 <__ssprint_r>
 800bed2:	2800      	cmp	r0, #0
 800bed4:	d000      	beq.n	800bed8 <_svfprintf_r+0xbfc>
 800bed6:	e1ff      	b.n	800c2d8 <_svfprintf_r+0xffc>
 800bed8:	af34      	add	r7, sp, #208	; 0xd0
 800beda:	3c10      	subs	r4, #16
 800bedc:	e7d9      	b.n	800be92 <_svfprintf_r+0xbb6>
 800bede:	46c0      	nop			; (mov r8, r8)
 800bee0:	0800e761 	.word	0x0800e761
 800bee4:	0800e784 	.word	0x0800e784
 800bee8:	0800e772 	.word	0x0800e772
 800beec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800beee:	2b00      	cmp	r3, #0
 800bef0:	dc7e      	bgt.n	800bff0 <_svfprintf_r+0xd14>
 800bef2:	4bcf      	ldr	r3, [pc, #828]	; (800c230 <_svfprintf_r+0xf54>)
 800bef4:	603b      	str	r3, [r7, #0]
 800bef6:	2301      	movs	r3, #1
 800bef8:	607b      	str	r3, [r7, #4]
 800befa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800befc:	3708      	adds	r7, #8
 800befe:	3301      	adds	r3, #1
 800bf00:	9329      	str	r3, [sp, #164]	; 0xa4
 800bf02:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800bf04:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf06:	3301      	adds	r3, #1
 800bf08:	9328      	str	r3, [sp, #160]	; 0xa0
 800bf0a:	2b07      	cmp	r3, #7
 800bf0c:	dd08      	ble.n	800bf20 <_svfprintf_r+0xc44>
 800bf0e:	aa27      	add	r2, sp, #156	; 0x9c
 800bf10:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf12:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bf14:	f001 fdee 	bl	800daf4 <__ssprint_r>
 800bf18:	2800      	cmp	r0, #0
 800bf1a:	d000      	beq.n	800bf1e <_svfprintf_r+0xc42>
 800bf1c:	e1dc      	b.n	800c2d8 <_svfprintf_r+0xffc>
 800bf1e:	af34      	add	r7, sp, #208	; 0xd0
 800bf20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d105      	bne.n	800bf32 <_svfprintf_r+0xc56>
 800bf26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d102      	bne.n	800bf32 <_svfprintf_r+0xc56>
 800bf2c:	07f3      	lsls	r3, r6, #31
 800bf2e:	d400      	bmi.n	800bf32 <_svfprintf_r+0xc56>
 800bf30:	e56c      	b.n	800ba0c <_svfprintf_r+0x730>
 800bf32:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bf34:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800bf36:	4694      	mov	ip, r2
 800bf38:	603b      	str	r3, [r7, #0]
 800bf3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bf3c:	607b      	str	r3, [r7, #4]
 800bf3e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800bf40:	3708      	adds	r7, #8
 800bf42:	4463      	add	r3, ip
 800bf44:	9329      	str	r3, [sp, #164]	; 0xa4
 800bf46:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800bf48:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	9328      	str	r3, [sp, #160]	; 0xa0
 800bf4e:	2b07      	cmp	r3, #7
 800bf50:	dd08      	ble.n	800bf64 <_svfprintf_r+0xc88>
 800bf52:	aa27      	add	r2, sp, #156	; 0x9c
 800bf54:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf56:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bf58:	f001 fdcc 	bl	800daf4 <__ssprint_r>
 800bf5c:	2800      	cmp	r0, #0
 800bf5e:	d000      	beq.n	800bf62 <_svfprintf_r+0xc86>
 800bf60:	e1ba      	b.n	800c2d8 <_svfprintf_r+0xffc>
 800bf62:	af34      	add	r7, sp, #208	; 0xd0
 800bf64:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800bf66:	2c00      	cmp	r4, #0
 800bf68:	da19      	bge.n	800bf9e <_svfprintf_r+0xcc2>
 800bf6a:	2510      	movs	r5, #16
 800bf6c:	4264      	negs	r4, r4
 800bf6e:	4ab1      	ldr	r2, [pc, #708]	; (800c234 <_svfprintf_r+0xf58>)
 800bf70:	603a      	str	r2, [r7, #0]
 800bf72:	2c10      	cmp	r4, #16
 800bf74:	dc25      	bgt.n	800bfc2 <_svfprintf_r+0xce6>
 800bf76:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800bf78:	607c      	str	r4, [r7, #4]
 800bf7a:	191c      	adds	r4, r3, r4
 800bf7c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800bf7e:	9429      	str	r4, [sp, #164]	; 0xa4
 800bf80:	1c5a      	adds	r2, r3, #1
 800bf82:	3708      	adds	r7, #8
 800bf84:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf86:	9228      	str	r2, [sp, #160]	; 0xa0
 800bf88:	2a07      	cmp	r2, #7
 800bf8a:	dd08      	ble.n	800bf9e <_svfprintf_r+0xcc2>
 800bf8c:	aa27      	add	r2, sp, #156	; 0x9c
 800bf8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf90:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bf92:	f001 fdaf 	bl	800daf4 <__ssprint_r>
 800bf96:	2800      	cmp	r0, #0
 800bf98:	d000      	beq.n	800bf9c <_svfprintf_r+0xcc0>
 800bf9a:	e19d      	b.n	800c2d8 <_svfprintf_r+0xffc>
 800bf9c:	af34      	add	r7, sp, #208	; 0xd0
 800bf9e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800bfa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bfa2:	468c      	mov	ip, r1
 800bfa4:	603b      	str	r3, [r7, #0]
 800bfa6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bfa8:	607b      	str	r3, [r7, #4]
 800bfaa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800bfac:	4463      	add	r3, ip
 800bfae:	9329      	str	r3, [sp, #164]	; 0xa4
 800bfb0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800bfb2:	1c5a      	adds	r2, r3, #1
 800bfb4:	930b      	str	r3, [sp, #44]	; 0x2c
 800bfb6:	9228      	str	r2, [sp, #160]	; 0xa0
 800bfb8:	2a07      	cmp	r2, #7
 800bfba:	dd00      	ble.n	800bfbe <_svfprintf_r+0xce2>
 800bfbc:	e51c      	b.n	800b9f8 <_svfprintf_r+0x71c>
 800bfbe:	3708      	adds	r7, #8
 800bfc0:	e524      	b.n	800ba0c <_svfprintf_r+0x730>
 800bfc2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800bfc4:	607d      	str	r5, [r7, #4]
 800bfc6:	001a      	movs	r2, r3
 800bfc8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800bfca:	3210      	adds	r2, #16
 800bfcc:	9229      	str	r2, [sp, #164]	; 0xa4
 800bfce:	1c5a      	adds	r2, r3, #1
 800bfd0:	930b      	str	r3, [sp, #44]	; 0x2c
 800bfd2:	9228      	str	r2, [sp, #160]	; 0xa0
 800bfd4:	3708      	adds	r7, #8
 800bfd6:	2a07      	cmp	r2, #7
 800bfd8:	dd08      	ble.n	800bfec <_svfprintf_r+0xd10>
 800bfda:	aa27      	add	r2, sp, #156	; 0x9c
 800bfdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bfde:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bfe0:	f001 fd88 	bl	800daf4 <__ssprint_r>
 800bfe4:	2800      	cmp	r0, #0
 800bfe6:	d000      	beq.n	800bfea <_svfprintf_r+0xd0e>
 800bfe8:	e176      	b.n	800c2d8 <_svfprintf_r+0xffc>
 800bfea:	af34      	add	r7, sp, #208	; 0xd0
 800bfec:	3c10      	subs	r4, #16
 800bfee:	e7be      	b.n	800bf6e <_svfprintf_r+0xc92>
 800bff0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800bff2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bff4:	4294      	cmp	r4, r2
 800bff6:	dd00      	ble.n	800bffa <_svfprintf_r+0xd1e>
 800bff8:	0014      	movs	r4, r2
 800bffa:	2c00      	cmp	r4, #0
 800bffc:	dd15      	ble.n	800c02a <_svfprintf_r+0xd4e>
 800bffe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c000:	607c      	str	r4, [r7, #4]
 800c002:	603b      	str	r3, [r7, #0]
 800c004:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800c006:	3708      	adds	r7, #8
 800c008:	191b      	adds	r3, r3, r4
 800c00a:	9329      	str	r3, [sp, #164]	; 0xa4
 800c00c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c00e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c010:	3301      	adds	r3, #1
 800c012:	9328      	str	r3, [sp, #160]	; 0xa0
 800c014:	2b07      	cmp	r3, #7
 800c016:	dd08      	ble.n	800c02a <_svfprintf_r+0xd4e>
 800c018:	aa27      	add	r2, sp, #156	; 0x9c
 800c01a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c01c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c01e:	f001 fd69 	bl	800daf4 <__ssprint_r>
 800c022:	2800      	cmp	r0, #0
 800c024:	d000      	beq.n	800c028 <_svfprintf_r+0xd4c>
 800c026:	e157      	b.n	800c2d8 <_svfprintf_r+0xffc>
 800c028:	af34      	add	r7, sp, #208	; 0xd0
 800c02a:	43e3      	mvns	r3, r4
 800c02c:	17db      	asrs	r3, r3, #31
 800c02e:	401c      	ands	r4, r3
 800c030:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c032:	2510      	movs	r5, #16
 800c034:	1b1c      	subs	r4, r3, r4
 800c036:	2c00      	cmp	r4, #0
 800c038:	dc7d      	bgt.n	800c136 <_svfprintf_r+0xe5a>
 800c03a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c03c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c03e:	4293      	cmp	r3, r2
 800c040:	db01      	blt.n	800c046 <_svfprintf_r+0xd6a>
 800c042:	07f3      	lsls	r3, r6, #31
 800c044:	d518      	bpl.n	800c078 <_svfprintf_r+0xd9c>
 800c046:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c048:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c04a:	4694      	mov	ip, r2
 800c04c:	603b      	str	r3, [r7, #0]
 800c04e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c050:	607b      	str	r3, [r7, #4]
 800c052:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800c054:	3708      	adds	r7, #8
 800c056:	4463      	add	r3, ip
 800c058:	9329      	str	r3, [sp, #164]	; 0xa4
 800c05a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c05c:	930b      	str	r3, [sp, #44]	; 0x2c
 800c05e:	3301      	adds	r3, #1
 800c060:	9328      	str	r3, [sp, #160]	; 0xa0
 800c062:	2b07      	cmp	r3, #7
 800c064:	dd08      	ble.n	800c078 <_svfprintf_r+0xd9c>
 800c066:	aa27      	add	r2, sp, #156	; 0x9c
 800c068:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c06a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c06c:	f001 fd42 	bl	800daf4 <__ssprint_r>
 800c070:	2800      	cmp	r0, #0
 800c072:	d000      	beq.n	800c076 <_svfprintf_r+0xd9a>
 800c074:	e130      	b.n	800c2d8 <_svfprintf_r+0xffc>
 800c076:	af34      	add	r7, sp, #208	; 0xd0
 800c078:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c07a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c07c:	9921      	ldr	r1, [sp, #132]	; 0x84
 800c07e:	1a9b      	subs	r3, r3, r2
 800c080:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c082:	1a54      	subs	r4, r2, r1
 800c084:	429c      	cmp	r4, r3
 800c086:	dd00      	ble.n	800c08a <_svfprintf_r+0xdae>
 800c088:	001c      	movs	r4, r3
 800c08a:	2c00      	cmp	r4, #0
 800c08c:	dd18      	ble.n	800c0c0 <_svfprintf_r+0xde4>
 800c08e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c090:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c092:	4694      	mov	ip, r2
 800c094:	4463      	add	r3, ip
 800c096:	603b      	str	r3, [r7, #0]
 800c098:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800c09a:	607c      	str	r4, [r7, #4]
 800c09c:	191b      	adds	r3, r3, r4
 800c09e:	9329      	str	r3, [sp, #164]	; 0xa4
 800c0a0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c0a2:	3708      	adds	r7, #8
 800c0a4:	930b      	str	r3, [sp, #44]	; 0x2c
 800c0a6:	3301      	adds	r3, #1
 800c0a8:	9328      	str	r3, [sp, #160]	; 0xa0
 800c0aa:	2b07      	cmp	r3, #7
 800c0ac:	dd08      	ble.n	800c0c0 <_svfprintf_r+0xde4>
 800c0ae:	aa27      	add	r2, sp, #156	; 0x9c
 800c0b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c0b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c0b4:	f001 fd1e 	bl	800daf4 <__ssprint_r>
 800c0b8:	2800      	cmp	r0, #0
 800c0ba:	d000      	beq.n	800c0be <_svfprintf_r+0xde2>
 800c0bc:	e10c      	b.n	800c2d8 <_svfprintf_r+0xffc>
 800c0be:	af34      	add	r7, sp, #208	; 0xd0
 800c0c0:	43e3      	mvns	r3, r4
 800c0c2:	17db      	asrs	r3, r3, #31
 800c0c4:	401c      	ands	r4, r3
 800c0c6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c0c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c0ca:	2510      	movs	r5, #16
 800c0cc:	1a9b      	subs	r3, r3, r2
 800c0ce:	1b1c      	subs	r4, r3, r4
 800c0d0:	2c00      	cmp	r4, #0
 800c0d2:	dc00      	bgt.n	800c0d6 <_svfprintf_r+0xdfa>
 800c0d4:	e49a      	b.n	800ba0c <_svfprintf_r+0x730>
 800c0d6:	4b57      	ldr	r3, [pc, #348]	; (800c234 <_svfprintf_r+0xf58>)
 800c0d8:	603b      	str	r3, [r7, #0]
 800c0da:	2c10      	cmp	r4, #16
 800c0dc:	dc00      	bgt.n	800c0e0 <_svfprintf_r+0xe04>
 800c0de:	e6dc      	b.n	800be9a <_svfprintf_r+0xbbe>
 800c0e0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800c0e2:	607d      	str	r5, [r7, #4]
 800c0e4:	3310      	adds	r3, #16
 800c0e6:	9329      	str	r3, [sp, #164]	; 0xa4
 800c0e8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c0ea:	3708      	adds	r7, #8
 800c0ec:	930b      	str	r3, [sp, #44]	; 0x2c
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	9328      	str	r3, [sp, #160]	; 0xa0
 800c0f2:	2b07      	cmp	r3, #7
 800c0f4:	dd08      	ble.n	800c108 <_svfprintf_r+0xe2c>
 800c0f6:	aa27      	add	r2, sp, #156	; 0x9c
 800c0f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c0fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c0fc:	f001 fcfa 	bl	800daf4 <__ssprint_r>
 800c100:	2800      	cmp	r0, #0
 800c102:	d000      	beq.n	800c106 <_svfprintf_r+0xe2a>
 800c104:	e0e8      	b.n	800c2d8 <_svfprintf_r+0xffc>
 800c106:	af34      	add	r7, sp, #208	; 0xd0
 800c108:	3c10      	subs	r4, #16
 800c10a:	e7e4      	b.n	800c0d6 <_svfprintf_r+0xdfa>
 800c10c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800c10e:	607d      	str	r5, [r7, #4]
 800c110:	3310      	adds	r3, #16
 800c112:	9329      	str	r3, [sp, #164]	; 0xa4
 800c114:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c116:	3708      	adds	r7, #8
 800c118:	930b      	str	r3, [sp, #44]	; 0x2c
 800c11a:	3301      	adds	r3, #1
 800c11c:	9328      	str	r3, [sp, #160]	; 0xa0
 800c11e:	2b07      	cmp	r3, #7
 800c120:	dd08      	ble.n	800c134 <_svfprintf_r+0xe58>
 800c122:	aa27      	add	r2, sp, #156	; 0x9c
 800c124:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c126:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c128:	f001 fce4 	bl	800daf4 <__ssprint_r>
 800c12c:	2800      	cmp	r0, #0
 800c12e:	d000      	beq.n	800c132 <_svfprintf_r+0xe56>
 800c130:	e0d2      	b.n	800c2d8 <_svfprintf_r+0xffc>
 800c132:	af34      	add	r7, sp, #208	; 0xd0
 800c134:	3c10      	subs	r4, #16
 800c136:	4b3f      	ldr	r3, [pc, #252]	; (800c234 <_svfprintf_r+0xf58>)
 800c138:	603b      	str	r3, [r7, #0]
 800c13a:	2c10      	cmp	r4, #16
 800c13c:	dce6      	bgt.n	800c10c <_svfprintf_r+0xe30>
 800c13e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800c140:	607c      	str	r4, [r7, #4]
 800c142:	191c      	adds	r4, r3, r4
 800c144:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c146:	9429      	str	r4, [sp, #164]	; 0xa4
 800c148:	930b      	str	r3, [sp, #44]	; 0x2c
 800c14a:	3301      	adds	r3, #1
 800c14c:	9328      	str	r3, [sp, #160]	; 0xa0
 800c14e:	3708      	adds	r7, #8
 800c150:	2b07      	cmp	r3, #7
 800c152:	dc00      	bgt.n	800c156 <_svfprintf_r+0xe7a>
 800c154:	e771      	b.n	800c03a <_svfprintf_r+0xd5e>
 800c156:	aa27      	add	r2, sp, #156	; 0x9c
 800c158:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c15a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c15c:	f001 fcca 	bl	800daf4 <__ssprint_r>
 800c160:	2800      	cmp	r0, #0
 800c162:	d000      	beq.n	800c166 <_svfprintf_r+0xe8a>
 800c164:	e0b8      	b.n	800c2d8 <_svfprintf_r+0xffc>
 800c166:	af34      	add	r7, sp, #208	; 0xd0
 800c168:	e767      	b.n	800c03a <_svfprintf_r+0xd5e>
 800c16a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c16c:	2b01      	cmp	r3, #1
 800c16e:	dc03      	bgt.n	800c178 <_svfprintf_r+0xe9c>
 800c170:	2301      	movs	r3, #1
 800c172:	421e      	tst	r6, r3
 800c174:	d100      	bne.n	800c178 <_svfprintf_r+0xe9c>
 800c176:	e087      	b.n	800c288 <_svfprintf_r+0xfac>
 800c178:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c17a:	603b      	str	r3, [r7, #0]
 800c17c:	2301      	movs	r3, #1
 800c17e:	607b      	str	r3, [r7, #4]
 800c180:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800c182:	3708      	adds	r7, #8
 800c184:	3301      	adds	r3, #1
 800c186:	9329      	str	r3, [sp, #164]	; 0xa4
 800c188:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c18a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c18c:	3301      	adds	r3, #1
 800c18e:	9328      	str	r3, [sp, #160]	; 0xa0
 800c190:	2b07      	cmp	r3, #7
 800c192:	dd08      	ble.n	800c1a6 <_svfprintf_r+0xeca>
 800c194:	aa27      	add	r2, sp, #156	; 0x9c
 800c196:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c198:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c19a:	f001 fcab 	bl	800daf4 <__ssprint_r>
 800c19e:	2800      	cmp	r0, #0
 800c1a0:	d000      	beq.n	800c1a4 <_svfprintf_r+0xec8>
 800c1a2:	e099      	b.n	800c2d8 <_svfprintf_r+0xffc>
 800c1a4:	af34      	add	r7, sp, #208	; 0xd0
 800c1a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c1a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c1aa:	4694      	mov	ip, r2
 800c1ac:	603b      	str	r3, [r7, #0]
 800c1ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c1b0:	607b      	str	r3, [r7, #4]
 800c1b2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800c1b4:	3708      	adds	r7, #8
 800c1b6:	4463      	add	r3, ip
 800c1b8:	9329      	str	r3, [sp, #164]	; 0xa4
 800c1ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c1bc:	930b      	str	r3, [sp, #44]	; 0x2c
 800c1be:	3301      	adds	r3, #1
 800c1c0:	9328      	str	r3, [sp, #160]	; 0xa0
 800c1c2:	2b07      	cmp	r3, #7
 800c1c4:	dd08      	ble.n	800c1d8 <_svfprintf_r+0xefc>
 800c1c6:	aa27      	add	r2, sp, #156	; 0x9c
 800c1c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c1ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c1cc:	f001 fc92 	bl	800daf4 <__ssprint_r>
 800c1d0:	2800      	cmp	r0, #0
 800c1d2:	d000      	beq.n	800c1d6 <_svfprintf_r+0xefa>
 800c1d4:	e080      	b.n	800c2d8 <_svfprintf_r+0xffc>
 800c1d6:	af34      	add	r7, sp, #208	; 0xd0
 800c1d8:	2300      	movs	r3, #0
 800c1da:	2200      	movs	r2, #0
 800c1dc:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c1de:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800c1e0:	f7f4 f934 	bl	800044c <__aeabi_dcmpeq>
 800c1e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1e6:	1e5d      	subs	r5, r3, #1
 800c1e8:	2800      	cmp	r0, #0
 800c1ea:	d125      	bne.n	800c238 <_svfprintf_r+0xf5c>
 800c1ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c1ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c1f0:	3301      	adds	r3, #1
 800c1f2:	603b      	str	r3, [r7, #0]
 800c1f4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800c1f6:	607d      	str	r5, [r7, #4]
 800c1f8:	3b01      	subs	r3, #1
 800c1fa:	189b      	adds	r3, r3, r2
 800c1fc:	9329      	str	r3, [sp, #164]	; 0xa4
 800c1fe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c200:	3708      	adds	r7, #8
 800c202:	930b      	str	r3, [sp, #44]	; 0x2c
 800c204:	3301      	adds	r3, #1
 800c206:	9328      	str	r3, [sp, #160]	; 0xa0
 800c208:	2b07      	cmp	r3, #7
 800c20a:	dd07      	ble.n	800c21c <_svfprintf_r+0xf40>
 800c20c:	aa27      	add	r2, sp, #156	; 0x9c
 800c20e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c210:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c212:	f001 fc6f 	bl	800daf4 <__ssprint_r>
 800c216:	2800      	cmp	r0, #0
 800c218:	d15e      	bne.n	800c2d8 <_svfprintf_r+0xffc>
 800c21a:	af34      	add	r7, sp, #208	; 0xd0
 800c21c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c21e:	ab23      	add	r3, sp, #140	; 0x8c
 800c220:	4694      	mov	ip, r2
 800c222:	603b      	str	r3, [r7, #0]
 800c224:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c226:	607b      	str	r3, [r7, #4]
 800c228:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800c22a:	4463      	add	r3, ip
 800c22c:	9329      	str	r3, [sp, #164]	; 0xa4
 800c22e:	e638      	b.n	800bea2 <_svfprintf_r+0xbc6>
 800c230:	0800e772 	.word	0x0800e772
 800c234:	0800e784 	.word	0x0800e784
 800c238:	2410      	movs	r4, #16
 800c23a:	2d00      	cmp	r5, #0
 800c23c:	ddee      	ble.n	800c21c <_svfprintf_r+0xf40>
 800c23e:	4b5e      	ldr	r3, [pc, #376]	; (800c3b8 <_svfprintf_r+0x10dc>)
 800c240:	603b      	str	r3, [r7, #0]
 800c242:	2d10      	cmp	r5, #16
 800c244:	dc0b      	bgt.n	800c25e <_svfprintf_r+0xf82>
 800c246:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800c248:	607d      	str	r5, [r7, #4]
 800c24a:	195d      	adds	r5, r3, r5
 800c24c:	9529      	str	r5, [sp, #164]	; 0xa4
 800c24e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c250:	930b      	str	r3, [sp, #44]	; 0x2c
 800c252:	3301      	adds	r3, #1
 800c254:	9328      	str	r3, [sp, #160]	; 0xa0
 800c256:	2b07      	cmp	r3, #7
 800c258:	dcd8      	bgt.n	800c20c <_svfprintf_r+0xf30>
 800c25a:	3708      	adds	r7, #8
 800c25c:	e7de      	b.n	800c21c <_svfprintf_r+0xf40>
 800c25e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800c260:	607c      	str	r4, [r7, #4]
 800c262:	3310      	adds	r3, #16
 800c264:	9329      	str	r3, [sp, #164]	; 0xa4
 800c266:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c268:	3708      	adds	r7, #8
 800c26a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c26c:	3301      	adds	r3, #1
 800c26e:	9328      	str	r3, [sp, #160]	; 0xa0
 800c270:	2b07      	cmp	r3, #7
 800c272:	dd07      	ble.n	800c284 <_svfprintf_r+0xfa8>
 800c274:	aa27      	add	r2, sp, #156	; 0x9c
 800c276:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c278:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c27a:	f001 fc3b 	bl	800daf4 <__ssprint_r>
 800c27e:	2800      	cmp	r0, #0
 800c280:	d12a      	bne.n	800c2d8 <_svfprintf_r+0xffc>
 800c282:	af34      	add	r7, sp, #208	; 0xd0
 800c284:	3d10      	subs	r5, #16
 800c286:	e7da      	b.n	800c23e <_svfprintf_r+0xf62>
 800c288:	607b      	str	r3, [r7, #4]
 800c28a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800c28c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c28e:	3301      	adds	r3, #1
 800c290:	603a      	str	r2, [r7, #0]
 800c292:	9329      	str	r3, [sp, #164]	; 0xa4
 800c294:	e7db      	b.n	800c24e <_svfprintf_r+0xf72>
 800c296:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c298:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c29a:	2510      	movs	r5, #16
 800c29c:	1a9c      	subs	r4, r3, r2
 800c29e:	2c00      	cmp	r4, #0
 800c2a0:	dc01      	bgt.n	800c2a6 <_svfprintf_r+0xfca>
 800c2a2:	f7ff fbb7 	bl	800ba14 <_svfprintf_r+0x738>
 800c2a6:	4b45      	ldr	r3, [pc, #276]	; (800c3bc <_svfprintf_r+0x10e0>)
 800c2a8:	603b      	str	r3, [r7, #0]
 800c2aa:	2c10      	cmp	r4, #16
 800c2ac:	dc1e      	bgt.n	800c2ec <_svfprintf_r+0x1010>
 800c2ae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800c2b0:	607c      	str	r4, [r7, #4]
 800c2b2:	191c      	adds	r4, r3, r4
 800c2b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c2b6:	9429      	str	r4, [sp, #164]	; 0xa4
 800c2b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800c2ba:	3301      	adds	r3, #1
 800c2bc:	9328      	str	r3, [sp, #160]	; 0xa0
 800c2be:	2b07      	cmp	r3, #7
 800c2c0:	dc01      	bgt.n	800c2c6 <_svfprintf_r+0xfea>
 800c2c2:	f7ff fba7 	bl	800ba14 <_svfprintf_r+0x738>
 800c2c6:	aa27      	add	r2, sp, #156	; 0x9c
 800c2c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c2ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c2cc:	f001 fc12 	bl	800daf4 <__ssprint_r>
 800c2d0:	2800      	cmp	r0, #0
 800c2d2:	d101      	bne.n	800c2d8 <_svfprintf_r+0xffc>
 800c2d4:	f7ff fb9e 	bl	800ba14 <_svfprintf_r+0x738>
 800c2d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2da:	899b      	ldrh	r3, [r3, #12]
 800c2dc:	065b      	lsls	r3, r3, #25
 800c2de:	d401      	bmi.n	800c2e4 <_svfprintf_r+0x1008>
 800c2e0:	f7ff f821 	bl	800b326 <_svfprintf_r+0x4a>
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	425b      	negs	r3, r3
 800c2e8:	f7ff f81c 	bl	800b324 <_svfprintf_r+0x48>
 800c2ec:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800c2ee:	607d      	str	r5, [r7, #4]
 800c2f0:	3310      	adds	r3, #16
 800c2f2:	9329      	str	r3, [sp, #164]	; 0xa4
 800c2f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c2f6:	3708      	adds	r7, #8
 800c2f8:	930b      	str	r3, [sp, #44]	; 0x2c
 800c2fa:	3301      	adds	r3, #1
 800c2fc:	9328      	str	r3, [sp, #160]	; 0xa0
 800c2fe:	2b07      	cmp	r3, #7
 800c300:	dd07      	ble.n	800c312 <_svfprintf_r+0x1036>
 800c302:	aa27      	add	r2, sp, #156	; 0x9c
 800c304:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c306:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c308:	f001 fbf4 	bl	800daf4 <__ssprint_r>
 800c30c:	2800      	cmp	r0, #0
 800c30e:	d1e3      	bne.n	800c2d8 <_svfprintf_r+0xffc>
 800c310:	af34      	add	r7, sp, #208	; 0xd0
 800c312:	3c10      	subs	r4, #16
 800c314:	e7c7      	b.n	800c2a6 <_svfprintf_r+0xfca>
 800c316:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800c318:	9306      	str	r3, [sp, #24]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d0dc      	beq.n	800c2d8 <_svfprintf_r+0xffc>
 800c31e:	aa27      	add	r2, sp, #156	; 0x9c
 800c320:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c322:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c324:	f001 fbe6 	bl	800daf4 <__ssprint_r>
 800c328:	e7d6      	b.n	800c2d8 <_svfprintf_r+0xffc>
 800c32a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c32c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c32e:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c330:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800c332:	f7f5 fe91 	bl	8002058 <__aeabi_dcmpun>
 800c336:	2800      	cmp	r0, #0
 800c338:	d101      	bne.n	800c33e <_svfprintf_r+0x1062>
 800c33a:	f7ff f9d8 	bl	800b6ee <_svfprintf_r+0x412>
 800c33e:	4b20      	ldr	r3, [pc, #128]	; (800c3c0 <_svfprintf_r+0x10e4>)
 800c340:	930c      	str	r3, [sp, #48]	; 0x30
 800c342:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c344:	2b47      	cmp	r3, #71	; 0x47
 800c346:	dd01      	ble.n	800c34c <_svfprintf_r+0x1070>
 800c348:	f7ff f9ca 	bl	800b6e0 <_svfprintf_r+0x404>
 800c34c:	4b1d      	ldr	r3, [pc, #116]	; (800c3c4 <_svfprintf_r+0x10e8>)
 800c34e:	f7ff f9c6 	bl	800b6de <_svfprintf_r+0x402>
 800c352:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800c354:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c356:	1a9b      	subs	r3, r3, r2
 800c358:	930e      	str	r3, [sp, #56]	; 0x38
 800c35a:	f7ff fa43 	bl	800b7e4 <_svfprintf_r+0x508>
 800c35e:	0035      	movs	r5, r6
 800c360:	2a00      	cmp	r2, #0
 800c362:	d101      	bne.n	800c368 <_svfprintf_r+0x108c>
 800c364:	f7ff f8c8 	bl	800b4f8 <_svfprintf_r+0x21c>
 800c368:	2b01      	cmp	r3, #1
 800c36a:	d100      	bne.n	800c36e <_svfprintf_r+0x1092>
 800c36c:	e479      	b.n	800bc62 <_svfprintf_r+0x986>
 800c36e:	2b02      	cmp	r3, #2
 800c370:	d100      	bne.n	800c374 <_svfprintf_r+0x1098>
 800c372:	e4ab      	b.n	800bccc <_svfprintf_r+0x9f0>
 800c374:	2607      	movs	r6, #7
 800c376:	ab34      	add	r3, sp, #208	; 0xd0
 800c378:	1e5a      	subs	r2, r3, #1
 800c37a:	920c      	str	r2, [sp, #48]	; 0x30
 800c37c:	9a06      	ldr	r2, [sp, #24]
 800c37e:	1e59      	subs	r1, r3, #1
 800c380:	4032      	ands	r2, r6
 800c382:	3230      	adds	r2, #48	; 0x30
 800c384:	700a      	strb	r2, [r1, #0]
 800c386:	9907      	ldr	r1, [sp, #28]
 800c388:	074c      	lsls	r4, r1, #29
 800c38a:	9906      	ldr	r1, [sp, #24]
 800c38c:	08c8      	lsrs	r0, r1, #3
 800c38e:	9907      	ldr	r1, [sp, #28]
 800c390:	4304      	orrs	r4, r0
 800c392:	08c9      	lsrs	r1, r1, #3
 800c394:	9107      	str	r1, [sp, #28]
 800c396:	0021      	movs	r1, r4
 800c398:	9807      	ldr	r0, [sp, #28]
 800c39a:	9406      	str	r4, [sp, #24]
 800c39c:	4301      	orrs	r1, r0
 800c39e:	d000      	beq.n	800c3a2 <_svfprintf_r+0x10c6>
 800c3a0:	e45d      	b.n	800bc5e <_svfprintf_r+0x982>
 800c3a2:	07e9      	lsls	r1, r5, #31
 800c3a4:	d400      	bmi.n	800c3a8 <_svfprintf_r+0x10cc>
 800c3a6:	e484      	b.n	800bcb2 <_svfprintf_r+0x9d6>
 800c3a8:	2a30      	cmp	r2, #48	; 0x30
 800c3aa:	d100      	bne.n	800c3ae <_svfprintf_r+0x10d2>
 800c3ac:	e481      	b.n	800bcb2 <_svfprintf_r+0x9d6>
 800c3ae:	2230      	movs	r2, #48	; 0x30
 800c3b0:	3b02      	subs	r3, #2
 800c3b2:	701a      	strb	r2, [r3, #0]
 800c3b4:	930c      	str	r3, [sp, #48]	; 0x30
 800c3b6:	e47c      	b.n	800bcb2 <_svfprintf_r+0x9d6>
 800c3b8:	0800e784 	.word	0x0800e784
 800c3bc:	0800e774 	.word	0x0800e774
 800c3c0:	0800e74c 	.word	0x0800e74c
 800c3c4:	0800e748 	.word	0x0800e748

0800c3c8 <quorem>:
 800c3c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3ca:	6903      	ldr	r3, [r0, #16]
 800c3cc:	690c      	ldr	r4, [r1, #16]
 800c3ce:	b089      	sub	sp, #36	; 0x24
 800c3d0:	0007      	movs	r7, r0
 800c3d2:	9105      	str	r1, [sp, #20]
 800c3d4:	2600      	movs	r6, #0
 800c3d6:	429c      	cmp	r4, r3
 800c3d8:	dc6d      	bgt.n	800c4b6 <quorem+0xee>
 800c3da:	000b      	movs	r3, r1
 800c3dc:	3c01      	subs	r4, #1
 800c3de:	3314      	adds	r3, #20
 800c3e0:	00a5      	lsls	r5, r4, #2
 800c3e2:	9303      	str	r3, [sp, #12]
 800c3e4:	195b      	adds	r3, r3, r5
 800c3e6:	9304      	str	r3, [sp, #16]
 800c3e8:	0003      	movs	r3, r0
 800c3ea:	3314      	adds	r3, #20
 800c3ec:	9302      	str	r3, [sp, #8]
 800c3ee:	195d      	adds	r5, r3, r5
 800c3f0:	9b04      	ldr	r3, [sp, #16]
 800c3f2:	6828      	ldr	r0, [r5, #0]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	1c59      	adds	r1, r3, #1
 800c3f8:	9301      	str	r3, [sp, #4]
 800c3fa:	f7f3 fea1 	bl	8000140 <__udivsi3>
 800c3fe:	9001      	str	r0, [sp, #4]
 800c400:	42b0      	cmp	r0, r6
 800c402:	d02d      	beq.n	800c460 <quorem+0x98>
 800c404:	9b03      	ldr	r3, [sp, #12]
 800c406:	9802      	ldr	r0, [sp, #8]
 800c408:	469c      	mov	ip, r3
 800c40a:	9606      	str	r6, [sp, #24]
 800c40c:	4662      	mov	r2, ip
 800c40e:	ca08      	ldmia	r2!, {r3}
 800c410:	4694      	mov	ip, r2
 800c412:	9a01      	ldr	r2, [sp, #4]
 800c414:	b299      	uxth	r1, r3
 800c416:	4351      	muls	r1, r2
 800c418:	0c1b      	lsrs	r3, r3, #16
 800c41a:	4353      	muls	r3, r2
 800c41c:	1989      	adds	r1, r1, r6
 800c41e:	0c0a      	lsrs	r2, r1, #16
 800c420:	189b      	adds	r3, r3, r2
 800c422:	9307      	str	r3, [sp, #28]
 800c424:	8802      	ldrh	r2, [r0, #0]
 800c426:	0c1e      	lsrs	r6, r3, #16
 800c428:	9b06      	ldr	r3, [sp, #24]
 800c42a:	b289      	uxth	r1, r1
 800c42c:	18d2      	adds	r2, r2, r3
 800c42e:	6803      	ldr	r3, [r0, #0]
 800c430:	1a52      	subs	r2, r2, r1
 800c432:	0c19      	lsrs	r1, r3, #16
 800c434:	466b      	mov	r3, sp
 800c436:	8b9b      	ldrh	r3, [r3, #28]
 800c438:	1acb      	subs	r3, r1, r3
 800c43a:	1411      	asrs	r1, r2, #16
 800c43c:	185b      	adds	r3, r3, r1
 800c43e:	1419      	asrs	r1, r3, #16
 800c440:	b292      	uxth	r2, r2
 800c442:	041b      	lsls	r3, r3, #16
 800c444:	431a      	orrs	r2, r3
 800c446:	9b04      	ldr	r3, [sp, #16]
 800c448:	9106      	str	r1, [sp, #24]
 800c44a:	c004      	stmia	r0!, {r2}
 800c44c:	4563      	cmp	r3, ip
 800c44e:	d2dd      	bcs.n	800c40c <quorem+0x44>
 800c450:	682b      	ldr	r3, [r5, #0]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d104      	bne.n	800c460 <quorem+0x98>
 800c456:	9b02      	ldr	r3, [sp, #8]
 800c458:	3d04      	subs	r5, #4
 800c45a:	42ab      	cmp	r3, r5
 800c45c:	d32e      	bcc.n	800c4bc <quorem+0xf4>
 800c45e:	613c      	str	r4, [r7, #16]
 800c460:	9905      	ldr	r1, [sp, #20]
 800c462:	0038      	movs	r0, r7
 800c464:	f001 fa63 	bl	800d92e <__mcmp>
 800c468:	2800      	cmp	r0, #0
 800c46a:	db23      	blt.n	800c4b4 <quorem+0xec>
 800c46c:	2500      	movs	r5, #0
 800c46e:	9b01      	ldr	r3, [sp, #4]
 800c470:	9802      	ldr	r0, [sp, #8]
 800c472:	3301      	adds	r3, #1
 800c474:	9903      	ldr	r1, [sp, #12]
 800c476:	9301      	str	r3, [sp, #4]
 800c478:	c908      	ldmia	r1!, {r3}
 800c47a:	8802      	ldrh	r2, [r0, #0]
 800c47c:	1955      	adds	r5, r2, r5
 800c47e:	b29a      	uxth	r2, r3
 800c480:	1aaa      	subs	r2, r5, r2
 800c482:	6805      	ldr	r5, [r0, #0]
 800c484:	0c1b      	lsrs	r3, r3, #16
 800c486:	0c2d      	lsrs	r5, r5, #16
 800c488:	1aeb      	subs	r3, r5, r3
 800c48a:	1415      	asrs	r5, r2, #16
 800c48c:	195b      	adds	r3, r3, r5
 800c48e:	141d      	asrs	r5, r3, #16
 800c490:	b292      	uxth	r2, r2
 800c492:	041b      	lsls	r3, r3, #16
 800c494:	4313      	orrs	r3, r2
 800c496:	c008      	stmia	r0!, {r3}
 800c498:	9b04      	ldr	r3, [sp, #16]
 800c49a:	428b      	cmp	r3, r1
 800c49c:	d2ec      	bcs.n	800c478 <quorem+0xb0>
 800c49e:	9a02      	ldr	r2, [sp, #8]
 800c4a0:	00a3      	lsls	r3, r4, #2
 800c4a2:	18d3      	adds	r3, r2, r3
 800c4a4:	681a      	ldr	r2, [r3, #0]
 800c4a6:	2a00      	cmp	r2, #0
 800c4a8:	d104      	bne.n	800c4b4 <quorem+0xec>
 800c4aa:	9a02      	ldr	r2, [sp, #8]
 800c4ac:	3b04      	subs	r3, #4
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d309      	bcc.n	800c4c6 <quorem+0xfe>
 800c4b2:	613c      	str	r4, [r7, #16]
 800c4b4:	9e01      	ldr	r6, [sp, #4]
 800c4b6:	0030      	movs	r0, r6
 800c4b8:	b009      	add	sp, #36	; 0x24
 800c4ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4bc:	682b      	ldr	r3, [r5, #0]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d1cd      	bne.n	800c45e <quorem+0x96>
 800c4c2:	3c01      	subs	r4, #1
 800c4c4:	e7c7      	b.n	800c456 <quorem+0x8e>
 800c4c6:	681a      	ldr	r2, [r3, #0]
 800c4c8:	2a00      	cmp	r2, #0
 800c4ca:	d1f2      	bne.n	800c4b2 <quorem+0xea>
 800c4cc:	3c01      	subs	r4, #1
 800c4ce:	e7ec      	b.n	800c4aa <quorem+0xe2>

0800c4d0 <_dtoa_r>:
 800c4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4d2:	0016      	movs	r6, r2
 800c4d4:	001f      	movs	r7, r3
 800c4d6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c4d8:	b09d      	sub	sp, #116	; 0x74
 800c4da:	9004      	str	r0, [sp, #16]
 800c4dc:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800c4de:	9606      	str	r6, [sp, #24]
 800c4e0:	9707      	str	r7, [sp, #28]
 800c4e2:	2c00      	cmp	r4, #0
 800c4e4:	d108      	bne.n	800c4f8 <_dtoa_r+0x28>
 800c4e6:	2010      	movs	r0, #16
 800c4e8:	f000 fde6 	bl	800d0b8 <malloc>
 800c4ec:	9b04      	ldr	r3, [sp, #16]
 800c4ee:	6258      	str	r0, [r3, #36]	; 0x24
 800c4f0:	6044      	str	r4, [r0, #4]
 800c4f2:	6084      	str	r4, [r0, #8]
 800c4f4:	6004      	str	r4, [r0, #0]
 800c4f6:	60c4      	str	r4, [r0, #12]
 800c4f8:	9b04      	ldr	r3, [sp, #16]
 800c4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4fc:	6819      	ldr	r1, [r3, #0]
 800c4fe:	2900      	cmp	r1, #0
 800c500:	d00b      	beq.n	800c51a <_dtoa_r+0x4a>
 800c502:	685a      	ldr	r2, [r3, #4]
 800c504:	2301      	movs	r3, #1
 800c506:	4093      	lsls	r3, r2
 800c508:	604a      	str	r2, [r1, #4]
 800c50a:	608b      	str	r3, [r1, #8]
 800c50c:	9804      	ldr	r0, [sp, #16]
 800c50e:	f001 f835 	bl	800d57c <_Bfree>
 800c512:	2200      	movs	r2, #0
 800c514:	9b04      	ldr	r3, [sp, #16]
 800c516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c518:	601a      	str	r2, [r3, #0]
 800c51a:	9b07      	ldr	r3, [sp, #28]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	da1f      	bge.n	800c560 <_dtoa_r+0x90>
 800c520:	2301      	movs	r3, #1
 800c522:	602b      	str	r3, [r5, #0]
 800c524:	007b      	lsls	r3, r7, #1
 800c526:	085b      	lsrs	r3, r3, #1
 800c528:	9307      	str	r3, [sp, #28]
 800c52a:	9c07      	ldr	r4, [sp, #28]
 800c52c:	4bb7      	ldr	r3, [pc, #732]	; (800c80c <_dtoa_r+0x33c>)
 800c52e:	0022      	movs	r2, r4
 800c530:	9319      	str	r3, [sp, #100]	; 0x64
 800c532:	401a      	ands	r2, r3
 800c534:	429a      	cmp	r2, r3
 800c536:	d116      	bne.n	800c566 <_dtoa_r+0x96>
 800c538:	4bb5      	ldr	r3, [pc, #724]	; (800c810 <_dtoa_r+0x340>)
 800c53a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c53c:	6013      	str	r3, [r2, #0]
 800c53e:	9b06      	ldr	r3, [sp, #24]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d103      	bne.n	800c54c <_dtoa_r+0x7c>
 800c544:	0324      	lsls	r4, r4, #12
 800c546:	d101      	bne.n	800c54c <_dtoa_r+0x7c>
 800c548:	f000 fd91 	bl	800d06e <_dtoa_r+0xb9e>
 800c54c:	4bb1      	ldr	r3, [pc, #708]	; (800c814 <_dtoa_r+0x344>)
 800c54e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c550:	930a      	str	r3, [sp, #40]	; 0x28
 800c552:	4bb1      	ldr	r3, [pc, #708]	; (800c818 <_dtoa_r+0x348>)
 800c554:	2a00      	cmp	r2, #0
 800c556:	d001      	beq.n	800c55c <_dtoa_r+0x8c>
 800c558:	f000 fd8f 	bl	800d07a <_dtoa_r+0xbaa>
 800c55c:	f000 fd8f 	bl	800d07e <_dtoa_r+0xbae>
 800c560:	2300      	movs	r3, #0
 800c562:	602b      	str	r3, [r5, #0]
 800c564:	e7e1      	b.n	800c52a <_dtoa_r+0x5a>
 800c566:	9e06      	ldr	r6, [sp, #24]
 800c568:	9f07      	ldr	r7, [sp, #28]
 800c56a:	2200      	movs	r2, #0
 800c56c:	2300      	movs	r3, #0
 800c56e:	0030      	movs	r0, r6
 800c570:	0039      	movs	r1, r7
 800c572:	f7f3 ff6b 	bl	800044c <__aeabi_dcmpeq>
 800c576:	1e05      	subs	r5, r0, #0
 800c578:	d00e      	beq.n	800c598 <_dtoa_r+0xc8>
 800c57a:	2301      	movs	r3, #1
 800c57c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c57e:	6013      	str	r3, [r2, #0]
 800c580:	4ba6      	ldr	r3, [pc, #664]	; (800c81c <_dtoa_r+0x34c>)
 800c582:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c584:	930a      	str	r3, [sp, #40]	; 0x28
 800c586:	2a00      	cmp	r2, #0
 800c588:	d101      	bne.n	800c58e <_dtoa_r+0xbe>
 800c58a:	f000 fd78 	bl	800d07e <_dtoa_r+0xbae>
 800c58e:	4aa4      	ldr	r2, [pc, #656]	; (800c820 <_dtoa_r+0x350>)
 800c590:	9926      	ldr	r1, [sp, #152]	; 0x98
 800c592:	600a      	str	r2, [r1, #0]
 800c594:	f000 fd73 	bl	800d07e <_dtoa_r+0xbae>
 800c598:	ab1a      	add	r3, sp, #104	; 0x68
 800c59a:	9301      	str	r3, [sp, #4]
 800c59c:	ab1b      	add	r3, sp, #108	; 0x6c
 800c59e:	9300      	str	r3, [sp, #0]
 800c5a0:	0032      	movs	r2, r6
 800c5a2:	003b      	movs	r3, r7
 800c5a4:	9804      	ldr	r0, [sp, #16]
 800c5a6:	f001 fa3f 	bl	800da28 <__d2b>
 800c5aa:	0063      	lsls	r3, r4, #1
 800c5ac:	9005      	str	r0, [sp, #20]
 800c5ae:	0d5b      	lsrs	r3, r3, #21
 800c5b0:	d100      	bne.n	800c5b4 <_dtoa_r+0xe4>
 800c5b2:	e07f      	b.n	800c6b4 <_dtoa_r+0x1e4>
 800c5b4:	033a      	lsls	r2, r7, #12
 800c5b6:	4c9b      	ldr	r4, [pc, #620]	; (800c824 <_dtoa_r+0x354>)
 800c5b8:	0b12      	lsrs	r2, r2, #12
 800c5ba:	4314      	orrs	r4, r2
 800c5bc:	0021      	movs	r1, r4
 800c5be:	4a9a      	ldr	r2, [pc, #616]	; (800c828 <_dtoa_r+0x358>)
 800c5c0:	0030      	movs	r0, r6
 800c5c2:	9518      	str	r5, [sp, #96]	; 0x60
 800c5c4:	189e      	adds	r6, r3, r2
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	4b98      	ldr	r3, [pc, #608]	; (800c82c <_dtoa_r+0x35c>)
 800c5ca:	f7f5 fa2f 	bl	8001a2c <__aeabi_dsub>
 800c5ce:	4a98      	ldr	r2, [pc, #608]	; (800c830 <_dtoa_r+0x360>)
 800c5d0:	4b98      	ldr	r3, [pc, #608]	; (800c834 <_dtoa_r+0x364>)
 800c5d2:	f7f4 ffab 	bl	800152c <__aeabi_dmul>
 800c5d6:	4a98      	ldr	r2, [pc, #608]	; (800c838 <_dtoa_r+0x368>)
 800c5d8:	4b98      	ldr	r3, [pc, #608]	; (800c83c <_dtoa_r+0x36c>)
 800c5da:	f7f4 f863 	bl	80006a4 <__aeabi_dadd>
 800c5de:	0004      	movs	r4, r0
 800c5e0:	0030      	movs	r0, r6
 800c5e2:	000d      	movs	r5, r1
 800c5e4:	f7f5 fd8c 	bl	8002100 <__aeabi_i2d>
 800c5e8:	4a95      	ldr	r2, [pc, #596]	; (800c840 <_dtoa_r+0x370>)
 800c5ea:	4b96      	ldr	r3, [pc, #600]	; (800c844 <_dtoa_r+0x374>)
 800c5ec:	f7f4 ff9e 	bl	800152c <__aeabi_dmul>
 800c5f0:	0002      	movs	r2, r0
 800c5f2:	000b      	movs	r3, r1
 800c5f4:	0020      	movs	r0, r4
 800c5f6:	0029      	movs	r1, r5
 800c5f8:	f7f4 f854 	bl	80006a4 <__aeabi_dadd>
 800c5fc:	0004      	movs	r4, r0
 800c5fe:	000d      	movs	r5, r1
 800c600:	f7f5 fd4a 	bl	8002098 <__aeabi_d2iz>
 800c604:	2200      	movs	r2, #0
 800c606:	9003      	str	r0, [sp, #12]
 800c608:	2300      	movs	r3, #0
 800c60a:	0020      	movs	r0, r4
 800c60c:	0029      	movs	r1, r5
 800c60e:	f7f3 ff23 	bl	8000458 <__aeabi_dcmplt>
 800c612:	2800      	cmp	r0, #0
 800c614:	d00e      	beq.n	800c634 <_dtoa_r+0x164>
 800c616:	9803      	ldr	r0, [sp, #12]
 800c618:	f7f5 fd72 	bl	8002100 <__aeabi_i2d>
 800c61c:	000b      	movs	r3, r1
 800c61e:	0002      	movs	r2, r0
 800c620:	0029      	movs	r1, r5
 800c622:	0020      	movs	r0, r4
 800c624:	f7f3 ff12 	bl	800044c <__aeabi_dcmpeq>
 800c628:	0003      	movs	r3, r0
 800c62a:	4258      	negs	r0, r3
 800c62c:	4158      	adcs	r0, r3
 800c62e:	9b03      	ldr	r3, [sp, #12]
 800c630:	1a1b      	subs	r3, r3, r0
 800c632:	9303      	str	r3, [sp, #12]
 800c634:	2301      	movs	r3, #1
 800c636:	9316      	str	r3, [sp, #88]	; 0x58
 800c638:	9b03      	ldr	r3, [sp, #12]
 800c63a:	2b16      	cmp	r3, #22
 800c63c:	d80f      	bhi.n	800c65e <_dtoa_r+0x18e>
 800c63e:	4982      	ldr	r1, [pc, #520]	; (800c848 <_dtoa_r+0x378>)
 800c640:	00db      	lsls	r3, r3, #3
 800c642:	18c9      	adds	r1, r1, r3
 800c644:	6808      	ldr	r0, [r1, #0]
 800c646:	6849      	ldr	r1, [r1, #4]
 800c648:	9a06      	ldr	r2, [sp, #24]
 800c64a:	9b07      	ldr	r3, [sp, #28]
 800c64c:	f7f3 ff18 	bl	8000480 <__aeabi_dcmpgt>
 800c650:	2800      	cmp	r0, #0
 800c652:	d04b      	beq.n	800c6ec <_dtoa_r+0x21c>
 800c654:	9b03      	ldr	r3, [sp, #12]
 800c656:	3b01      	subs	r3, #1
 800c658:	9303      	str	r3, [sp, #12]
 800c65a:	2300      	movs	r3, #0
 800c65c:	9316      	str	r3, [sp, #88]	; 0x58
 800c65e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c660:	1b9e      	subs	r6, r3, r6
 800c662:	2300      	movs	r3, #0
 800c664:	930b      	str	r3, [sp, #44]	; 0x2c
 800c666:	0033      	movs	r3, r6
 800c668:	3b01      	subs	r3, #1
 800c66a:	930c      	str	r3, [sp, #48]	; 0x30
 800c66c:	d504      	bpl.n	800c678 <_dtoa_r+0x1a8>
 800c66e:	2301      	movs	r3, #1
 800c670:	1b9b      	subs	r3, r3, r6
 800c672:	930b      	str	r3, [sp, #44]	; 0x2c
 800c674:	2300      	movs	r3, #0
 800c676:	930c      	str	r3, [sp, #48]	; 0x30
 800c678:	9b03      	ldr	r3, [sp, #12]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	db38      	blt.n	800c6f0 <_dtoa_r+0x220>
 800c67e:	9a03      	ldr	r2, [sp, #12]
 800c680:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c682:	4694      	mov	ip, r2
 800c684:	4463      	add	r3, ip
 800c686:	930c      	str	r3, [sp, #48]	; 0x30
 800c688:	2300      	movs	r3, #0
 800c68a:	920f      	str	r2, [sp, #60]	; 0x3c
 800c68c:	9308      	str	r3, [sp, #32]
 800c68e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c690:	2501      	movs	r5, #1
 800c692:	2b09      	cmp	r3, #9
 800c694:	d900      	bls.n	800c698 <_dtoa_r+0x1c8>
 800c696:	e091      	b.n	800c7bc <_dtoa_r+0x2ec>
 800c698:	2b05      	cmp	r3, #5
 800c69a:	dd02      	ble.n	800c6a2 <_dtoa_r+0x1d2>
 800c69c:	2500      	movs	r5, #0
 800c69e:	3b04      	subs	r3, #4
 800c6a0:	9322      	str	r3, [sp, #136]	; 0x88
 800c6a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c6a4:	1e98      	subs	r0, r3, #2
 800c6a6:	2803      	cmp	r0, #3
 800c6a8:	d900      	bls.n	800c6ac <_dtoa_r+0x1dc>
 800c6aa:	e091      	b.n	800c7d0 <_dtoa_r+0x300>
 800c6ac:	f7f3 fd34 	bl	8000118 <__gnu_thumb1_case_uqi>
 800c6b0:	76298482 	.word	0x76298482
 800c6b4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c6b6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c6b8:	189e      	adds	r6, r3, r2
 800c6ba:	4b64      	ldr	r3, [pc, #400]	; (800c84c <_dtoa_r+0x37c>)
 800c6bc:	18f2      	adds	r2, r6, r3
 800c6be:	2a20      	cmp	r2, #32
 800c6c0:	dd0f      	ble.n	800c6e2 <_dtoa_r+0x212>
 800c6c2:	4b63      	ldr	r3, [pc, #396]	; (800c850 <_dtoa_r+0x380>)
 800c6c4:	9806      	ldr	r0, [sp, #24]
 800c6c6:	18f3      	adds	r3, r6, r3
 800c6c8:	40d8      	lsrs	r0, r3
 800c6ca:	2340      	movs	r3, #64	; 0x40
 800c6cc:	1a9b      	subs	r3, r3, r2
 800c6ce:	409c      	lsls	r4, r3
 800c6d0:	4320      	orrs	r0, r4
 800c6d2:	f7f5 fd57 	bl	8002184 <__aeabi_ui2d>
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	4c5e      	ldr	r4, [pc, #376]	; (800c854 <_dtoa_r+0x384>)
 800c6da:	3e01      	subs	r6, #1
 800c6dc:	1909      	adds	r1, r1, r4
 800c6de:	9318      	str	r3, [sp, #96]	; 0x60
 800c6e0:	e771      	b.n	800c5c6 <_dtoa_r+0xf6>
 800c6e2:	2320      	movs	r3, #32
 800c6e4:	9806      	ldr	r0, [sp, #24]
 800c6e6:	1a9b      	subs	r3, r3, r2
 800c6e8:	4098      	lsls	r0, r3
 800c6ea:	e7f2      	b.n	800c6d2 <_dtoa_r+0x202>
 800c6ec:	9016      	str	r0, [sp, #88]	; 0x58
 800c6ee:	e7b6      	b.n	800c65e <_dtoa_r+0x18e>
 800c6f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6f2:	9a03      	ldr	r2, [sp, #12]
 800c6f4:	1a9b      	subs	r3, r3, r2
 800c6f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c6f8:	4253      	negs	r3, r2
 800c6fa:	9308      	str	r3, [sp, #32]
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800c700:	e7c5      	b.n	800c68e <_dtoa_r+0x1be>
 800c702:	2301      	movs	r3, #1
 800c704:	930e      	str	r3, [sp, #56]	; 0x38
 800c706:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c708:	2b00      	cmp	r3, #0
 800c70a:	dd65      	ble.n	800c7d8 <_dtoa_r+0x308>
 800c70c:	001f      	movs	r7, r3
 800c70e:	930d      	str	r3, [sp, #52]	; 0x34
 800c710:	9a04      	ldr	r2, [sp, #16]
 800c712:	6a54      	ldr	r4, [r2, #36]	; 0x24
 800c714:	2200      	movs	r2, #0
 800c716:	6062      	str	r2, [r4, #4]
 800c718:	3204      	adds	r2, #4
 800c71a:	0011      	movs	r1, r2
 800c71c:	3114      	adds	r1, #20
 800c71e:	4299      	cmp	r1, r3
 800c720:	d95f      	bls.n	800c7e2 <_dtoa_r+0x312>
 800c722:	6861      	ldr	r1, [r4, #4]
 800c724:	9804      	ldr	r0, [sp, #16]
 800c726:	f000 fef1 	bl	800d50c <_Balloc>
 800c72a:	9b04      	ldr	r3, [sp, #16]
 800c72c:	6020      	str	r0, [r4, #0]
 800c72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	930a      	str	r3, [sp, #40]	; 0x28
 800c734:	2f0e      	cmp	r7, #14
 800c736:	d900      	bls.n	800c73a <_dtoa_r+0x26a>
 800c738:	e105      	b.n	800c946 <_dtoa_r+0x476>
 800c73a:	2d00      	cmp	r5, #0
 800c73c:	d100      	bne.n	800c740 <_dtoa_r+0x270>
 800c73e:	e102      	b.n	800c946 <_dtoa_r+0x476>
 800c740:	9b06      	ldr	r3, [sp, #24]
 800c742:	9c07      	ldr	r4, [sp, #28]
 800c744:	9314      	str	r3, [sp, #80]	; 0x50
 800c746:	9415      	str	r4, [sp, #84]	; 0x54
 800c748:	9b03      	ldr	r3, [sp, #12]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	dc00      	bgt.n	800c750 <_dtoa_r+0x280>
 800c74e:	e085      	b.n	800c85c <_dtoa_r+0x38c>
 800c750:	001a      	movs	r2, r3
 800c752:	210f      	movs	r1, #15
 800c754:	4b3c      	ldr	r3, [pc, #240]	; (800c848 <_dtoa_r+0x378>)
 800c756:	400a      	ands	r2, r1
 800c758:	00d2      	lsls	r2, r2, #3
 800c75a:	189b      	adds	r3, r3, r2
 800c75c:	685c      	ldr	r4, [r3, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	9310      	str	r3, [sp, #64]	; 0x40
 800c762:	9411      	str	r4, [sp, #68]	; 0x44
 800c764:	9b03      	ldr	r3, [sp, #12]
 800c766:	2402      	movs	r4, #2
 800c768:	111d      	asrs	r5, r3, #4
 800c76a:	06eb      	lsls	r3, r5, #27
 800c76c:	d50a      	bpl.n	800c784 <_dtoa_r+0x2b4>
 800c76e:	4b3a      	ldr	r3, [pc, #232]	; (800c858 <_dtoa_r+0x388>)
 800c770:	400d      	ands	r5, r1
 800c772:	6a1a      	ldr	r2, [r3, #32]
 800c774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c776:	9814      	ldr	r0, [sp, #80]	; 0x50
 800c778:	9915      	ldr	r1, [sp, #84]	; 0x54
 800c77a:	f7f4 faa3 	bl	8000cc4 <__aeabi_ddiv>
 800c77e:	9006      	str	r0, [sp, #24]
 800c780:	9107      	str	r1, [sp, #28]
 800c782:	3401      	adds	r4, #1
 800c784:	4e34      	ldr	r6, [pc, #208]	; (800c858 <_dtoa_r+0x388>)
 800c786:	2d00      	cmp	r5, #0
 800c788:	d130      	bne.n	800c7ec <_dtoa_r+0x31c>
 800c78a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c78c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c78e:	9806      	ldr	r0, [sp, #24]
 800c790:	9907      	ldr	r1, [sp, #28]
 800c792:	f7f4 fa97 	bl	8000cc4 <__aeabi_ddiv>
 800c796:	9006      	str	r0, [sp, #24]
 800c798:	9107      	str	r1, [sp, #28]
 800c79a:	e07a      	b.n	800c892 <_dtoa_r+0x3c2>
 800c79c:	2301      	movs	r3, #1
 800c79e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800c7a0:	930e      	str	r3, [sp, #56]	; 0x38
 800c7a2:	4694      	mov	ip, r2
 800c7a4:	9b03      	ldr	r3, [sp, #12]
 800c7a6:	4463      	add	r3, ip
 800c7a8:	1c5f      	adds	r7, r3, #1
 800c7aa:	930d      	str	r3, [sp, #52]	; 0x34
 800c7ac:	1e3b      	subs	r3, r7, #0
 800c7ae:	dcaf      	bgt.n	800c710 <_dtoa_r+0x240>
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	e7ad      	b.n	800c710 <_dtoa_r+0x240>
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	e7a5      	b.n	800c704 <_dtoa_r+0x234>
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	e7f0      	b.n	800c79e <_dtoa_r+0x2ce>
 800c7bc:	2300      	movs	r3, #0
 800c7be:	950e      	str	r5, [sp, #56]	; 0x38
 800c7c0:	9322      	str	r3, [sp, #136]	; 0x88
 800c7c2:	3b01      	subs	r3, #1
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	930d      	str	r3, [sp, #52]	; 0x34
 800c7c8:	001f      	movs	r7, r3
 800c7ca:	3313      	adds	r3, #19
 800c7cc:	9223      	str	r2, [sp, #140]	; 0x8c
 800c7ce:	e79f      	b.n	800c710 <_dtoa_r+0x240>
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	930e      	str	r3, [sp, #56]	; 0x38
 800c7d4:	3b02      	subs	r3, #2
 800c7d6:	e7f5      	b.n	800c7c4 <_dtoa_r+0x2f4>
 800c7d8:	2301      	movs	r3, #1
 800c7da:	930d      	str	r3, [sp, #52]	; 0x34
 800c7dc:	001f      	movs	r7, r3
 800c7de:	001a      	movs	r2, r3
 800c7e0:	e7f4      	b.n	800c7cc <_dtoa_r+0x2fc>
 800c7e2:	6861      	ldr	r1, [r4, #4]
 800c7e4:	0052      	lsls	r2, r2, #1
 800c7e6:	3101      	adds	r1, #1
 800c7e8:	6061      	str	r1, [r4, #4]
 800c7ea:	e796      	b.n	800c71a <_dtoa_r+0x24a>
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	421d      	tst	r5, r3
 800c7f0:	d008      	beq.n	800c804 <_dtoa_r+0x334>
 800c7f2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c7f4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c7f6:	18e4      	adds	r4, r4, r3
 800c7f8:	6832      	ldr	r2, [r6, #0]
 800c7fa:	6873      	ldr	r3, [r6, #4]
 800c7fc:	f7f4 fe96 	bl	800152c <__aeabi_dmul>
 800c800:	9010      	str	r0, [sp, #64]	; 0x40
 800c802:	9111      	str	r1, [sp, #68]	; 0x44
 800c804:	106d      	asrs	r5, r5, #1
 800c806:	3608      	adds	r6, #8
 800c808:	e7bd      	b.n	800c786 <_dtoa_r+0x2b6>
 800c80a:	46c0      	nop			; (mov r8, r8)
 800c80c:	7ff00000 	.word	0x7ff00000
 800c810:	0000270f 	.word	0x0000270f
 800c814:	0800e79d 	.word	0x0800e79d
 800c818:	0800e7a0 	.word	0x0800e7a0
 800c81c:	0800e772 	.word	0x0800e772
 800c820:	0800e773 	.word	0x0800e773
 800c824:	3ff00000 	.word	0x3ff00000
 800c828:	fffffc01 	.word	0xfffffc01
 800c82c:	3ff80000 	.word	0x3ff80000
 800c830:	636f4361 	.word	0x636f4361
 800c834:	3fd287a7 	.word	0x3fd287a7
 800c838:	8b60c8b3 	.word	0x8b60c8b3
 800c83c:	3fc68a28 	.word	0x3fc68a28
 800c840:	509f79fb 	.word	0x509f79fb
 800c844:	3fd34413 	.word	0x3fd34413
 800c848:	0800e7d0 	.word	0x0800e7d0
 800c84c:	00000432 	.word	0x00000432
 800c850:	00000412 	.word	0x00000412
 800c854:	fe100000 	.word	0xfe100000
 800c858:	0800e7a8 	.word	0x0800e7a8
 800c85c:	9b03      	ldr	r3, [sp, #12]
 800c85e:	2402      	movs	r4, #2
 800c860:	2b00      	cmp	r3, #0
 800c862:	d016      	beq.n	800c892 <_dtoa_r+0x3c2>
 800c864:	9814      	ldr	r0, [sp, #80]	; 0x50
 800c866:	9915      	ldr	r1, [sp, #84]	; 0x54
 800c868:	425d      	negs	r5, r3
 800c86a:	230f      	movs	r3, #15
 800c86c:	4aca      	ldr	r2, [pc, #808]	; (800cb98 <_dtoa_r+0x6c8>)
 800c86e:	402b      	ands	r3, r5
 800c870:	00db      	lsls	r3, r3, #3
 800c872:	18d3      	adds	r3, r2, r3
 800c874:	681a      	ldr	r2, [r3, #0]
 800c876:	685b      	ldr	r3, [r3, #4]
 800c878:	f7f4 fe58 	bl	800152c <__aeabi_dmul>
 800c87c:	2300      	movs	r3, #0
 800c87e:	9006      	str	r0, [sp, #24]
 800c880:	9107      	str	r1, [sp, #28]
 800c882:	4ec6      	ldr	r6, [pc, #792]	; (800cb9c <_dtoa_r+0x6cc>)
 800c884:	112d      	asrs	r5, r5, #4
 800c886:	2d00      	cmp	r5, #0
 800c888:	d000      	beq.n	800c88c <_dtoa_r+0x3bc>
 800c88a:	e08c      	b.n	800c9a6 <_dtoa_r+0x4d6>
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d000      	beq.n	800c892 <_dtoa_r+0x3c2>
 800c890:	e781      	b.n	800c796 <_dtoa_r+0x2c6>
 800c892:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c894:	2b00      	cmp	r3, #0
 800c896:	d100      	bne.n	800c89a <_dtoa_r+0x3ca>
 800c898:	e091      	b.n	800c9be <_dtoa_r+0x4ee>
 800c89a:	9a06      	ldr	r2, [sp, #24]
 800c89c:	9b07      	ldr	r3, [sp, #28]
 800c89e:	9210      	str	r2, [sp, #64]	; 0x40
 800c8a0:	9311      	str	r3, [sp, #68]	; 0x44
 800c8a2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c8a4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	4bbd      	ldr	r3, [pc, #756]	; (800cba0 <_dtoa_r+0x6d0>)
 800c8aa:	f7f3 fdd5 	bl	8000458 <__aeabi_dcmplt>
 800c8ae:	2800      	cmp	r0, #0
 800c8b0:	d100      	bne.n	800c8b4 <_dtoa_r+0x3e4>
 800c8b2:	e084      	b.n	800c9be <_dtoa_r+0x4ee>
 800c8b4:	2f00      	cmp	r7, #0
 800c8b6:	d100      	bne.n	800c8ba <_dtoa_r+0x3ea>
 800c8b8:	e081      	b.n	800c9be <_dtoa_r+0x4ee>
 800c8ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	dd3e      	ble.n	800c93e <_dtoa_r+0x46e>
 800c8c0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c8c2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c8c4:	9b03      	ldr	r3, [sp, #12]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	1e5e      	subs	r6, r3, #1
 800c8ca:	4bb6      	ldr	r3, [pc, #728]	; (800cba4 <_dtoa_r+0x6d4>)
 800c8cc:	f7f4 fe2e 	bl	800152c <__aeabi_dmul>
 800c8d0:	9006      	str	r0, [sp, #24]
 800c8d2:	9107      	str	r1, [sp, #28]
 800c8d4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c8d6:	3401      	adds	r4, #1
 800c8d8:	0020      	movs	r0, r4
 800c8da:	f7f5 fc11 	bl	8002100 <__aeabi_i2d>
 800c8de:	9a06      	ldr	r2, [sp, #24]
 800c8e0:	9b07      	ldr	r3, [sp, #28]
 800c8e2:	f7f4 fe23 	bl	800152c <__aeabi_dmul>
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	4baf      	ldr	r3, [pc, #700]	; (800cba8 <_dtoa_r+0x6d8>)
 800c8ea:	f7f3 fedb 	bl	80006a4 <__aeabi_dadd>
 800c8ee:	9012      	str	r0, [sp, #72]	; 0x48
 800c8f0:	9113      	str	r1, [sp, #76]	; 0x4c
 800c8f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c8f4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800c8f6:	4aad      	ldr	r2, [pc, #692]	; (800cbac <_dtoa_r+0x6dc>)
 800c8f8:	9310      	str	r3, [sp, #64]	; 0x40
 800c8fa:	9411      	str	r4, [sp, #68]	; 0x44
 800c8fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c8fe:	189c      	adds	r4, r3, r2
 800c900:	9411      	str	r4, [sp, #68]	; 0x44
 800c902:	2d00      	cmp	r5, #0
 800c904:	d15e      	bne.n	800c9c4 <_dtoa_r+0x4f4>
 800c906:	9806      	ldr	r0, [sp, #24]
 800c908:	9907      	ldr	r1, [sp, #28]
 800c90a:	2200      	movs	r2, #0
 800c90c:	4ba8      	ldr	r3, [pc, #672]	; (800cbb0 <_dtoa_r+0x6e0>)
 800c90e:	f7f5 f88d 	bl	8001a2c <__aeabi_dsub>
 800c912:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c914:	0023      	movs	r3, r4
 800c916:	9006      	str	r0, [sp, #24]
 800c918:	9107      	str	r1, [sp, #28]
 800c91a:	f7f3 fdb1 	bl	8000480 <__aeabi_dcmpgt>
 800c91e:	2800      	cmp	r0, #0
 800c920:	d000      	beq.n	800c924 <_dtoa_r+0x454>
 800c922:	e301      	b.n	800cf28 <_dtoa_r+0xa58>
 800c924:	48a3      	ldr	r0, [pc, #652]	; (800cbb4 <_dtoa_r+0x6e4>)
 800c926:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c928:	4684      	mov	ip, r0
 800c92a:	4461      	add	r1, ip
 800c92c:	000b      	movs	r3, r1
 800c92e:	9806      	ldr	r0, [sp, #24]
 800c930:	9907      	ldr	r1, [sp, #28]
 800c932:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c934:	f7f3 fd90 	bl	8000458 <__aeabi_dcmplt>
 800c938:	2800      	cmp	r0, #0
 800c93a:	d000      	beq.n	800c93e <_dtoa_r+0x46e>
 800c93c:	e2e8      	b.n	800cf10 <_dtoa_r+0xa40>
 800c93e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c940:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800c942:	9306      	str	r3, [sp, #24]
 800c944:	9407      	str	r4, [sp, #28]
 800c946:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c948:	2b00      	cmp	r3, #0
 800c94a:	da00      	bge.n	800c94e <_dtoa_r+0x47e>
 800c94c:	e157      	b.n	800cbfe <_dtoa_r+0x72e>
 800c94e:	9a03      	ldr	r2, [sp, #12]
 800c950:	2a0e      	cmp	r2, #14
 800c952:	dd00      	ble.n	800c956 <_dtoa_r+0x486>
 800c954:	e153      	b.n	800cbfe <_dtoa_r+0x72e>
 800c956:	4b90      	ldr	r3, [pc, #576]	; (800cb98 <_dtoa_r+0x6c8>)
 800c958:	00d2      	lsls	r2, r2, #3
 800c95a:	189b      	adds	r3, r3, r2
 800c95c:	685c      	ldr	r4, [r3, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	9308      	str	r3, [sp, #32]
 800c962:	9409      	str	r4, [sp, #36]	; 0x24
 800c964:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c966:	2b00      	cmp	r3, #0
 800c968:	db00      	blt.n	800c96c <_dtoa_r+0x49c>
 800c96a:	e0ce      	b.n	800cb0a <_dtoa_r+0x63a>
 800c96c:	2f00      	cmp	r7, #0
 800c96e:	dd00      	ble.n	800c972 <_dtoa_r+0x4a2>
 800c970:	e0cb      	b.n	800cb0a <_dtoa_r+0x63a>
 800c972:	d000      	beq.n	800c976 <_dtoa_r+0x4a6>
 800c974:	e2cf      	b.n	800cf16 <_dtoa_r+0xa46>
 800c976:	9808      	ldr	r0, [sp, #32]
 800c978:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c97a:	2200      	movs	r2, #0
 800c97c:	4b8c      	ldr	r3, [pc, #560]	; (800cbb0 <_dtoa_r+0x6e0>)
 800c97e:	f7f4 fdd5 	bl	800152c <__aeabi_dmul>
 800c982:	9a06      	ldr	r2, [sp, #24]
 800c984:	9b07      	ldr	r3, [sp, #28]
 800c986:	f7f3 fd85 	bl	8000494 <__aeabi_dcmpge>
 800c98a:	003e      	movs	r6, r7
 800c98c:	9708      	str	r7, [sp, #32]
 800c98e:	2800      	cmp	r0, #0
 800c990:	d000      	beq.n	800c994 <_dtoa_r+0x4c4>
 800c992:	e2a4      	b.n	800cede <_dtoa_r+0xa0e>
 800c994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c996:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c998:	1c5d      	adds	r5, r3, #1
 800c99a:	2331      	movs	r3, #49	; 0x31
 800c99c:	7013      	strb	r3, [r2, #0]
 800c99e:	9b03      	ldr	r3, [sp, #12]
 800c9a0:	3301      	adds	r3, #1
 800c9a2:	9303      	str	r3, [sp, #12]
 800c9a4:	e29f      	b.n	800cee6 <_dtoa_r+0xa16>
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	4215      	tst	r5, r2
 800c9aa:	d005      	beq.n	800c9b8 <_dtoa_r+0x4e8>
 800c9ac:	18a4      	adds	r4, r4, r2
 800c9ae:	6832      	ldr	r2, [r6, #0]
 800c9b0:	6873      	ldr	r3, [r6, #4]
 800c9b2:	f7f4 fdbb 	bl	800152c <__aeabi_dmul>
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	106d      	asrs	r5, r5, #1
 800c9ba:	3608      	adds	r6, #8
 800c9bc:	e763      	b.n	800c886 <_dtoa_r+0x3b6>
 800c9be:	9e03      	ldr	r6, [sp, #12]
 800c9c0:	003d      	movs	r5, r7
 800c9c2:	e789      	b.n	800c8d8 <_dtoa_r+0x408>
 800c9c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9c6:	1e69      	subs	r1, r5, #1
 800c9c8:	1952      	adds	r2, r2, r5
 800c9ca:	9217      	str	r2, [sp, #92]	; 0x5c
 800c9cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c9ce:	4b72      	ldr	r3, [pc, #456]	; (800cb98 <_dtoa_r+0x6c8>)
 800c9d0:	00c9      	lsls	r1, r1, #3
 800c9d2:	2a00      	cmp	r2, #0
 800c9d4:	d04a      	beq.n	800ca6c <_dtoa_r+0x59c>
 800c9d6:	185b      	adds	r3, r3, r1
 800c9d8:	681a      	ldr	r2, [r3, #0]
 800c9da:	685b      	ldr	r3, [r3, #4]
 800c9dc:	2000      	movs	r0, #0
 800c9de:	4976      	ldr	r1, [pc, #472]	; (800cbb8 <_dtoa_r+0x6e8>)
 800c9e0:	f7f4 f970 	bl	8000cc4 <__aeabi_ddiv>
 800c9e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c9e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c9e8:	f7f5 f820 	bl	8001a2c <__aeabi_dsub>
 800c9ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9ee:	9010      	str	r0, [sp, #64]	; 0x40
 800c9f0:	9111      	str	r1, [sp, #68]	; 0x44
 800c9f2:	9312      	str	r3, [sp, #72]	; 0x48
 800c9f4:	9806      	ldr	r0, [sp, #24]
 800c9f6:	9907      	ldr	r1, [sp, #28]
 800c9f8:	f7f5 fb4e 	bl	8002098 <__aeabi_d2iz>
 800c9fc:	0004      	movs	r4, r0
 800c9fe:	f7f5 fb7f 	bl	8002100 <__aeabi_i2d>
 800ca02:	0002      	movs	r2, r0
 800ca04:	000b      	movs	r3, r1
 800ca06:	9806      	ldr	r0, [sp, #24]
 800ca08:	9907      	ldr	r1, [sp, #28]
 800ca0a:	f7f5 f80f 	bl	8001a2c <__aeabi_dsub>
 800ca0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ca10:	3430      	adds	r4, #48	; 0x30
 800ca12:	1c5d      	adds	r5, r3, #1
 800ca14:	701c      	strb	r4, [r3, #0]
 800ca16:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ca18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ca1a:	9006      	str	r0, [sp, #24]
 800ca1c:	9107      	str	r1, [sp, #28]
 800ca1e:	f7f3 fd1b 	bl	8000458 <__aeabi_dcmplt>
 800ca22:	2800      	cmp	r0, #0
 800ca24:	d165      	bne.n	800caf2 <_dtoa_r+0x622>
 800ca26:	9a06      	ldr	r2, [sp, #24]
 800ca28:	9b07      	ldr	r3, [sp, #28]
 800ca2a:	2000      	movs	r0, #0
 800ca2c:	495c      	ldr	r1, [pc, #368]	; (800cba0 <_dtoa_r+0x6d0>)
 800ca2e:	f7f4 fffd 	bl	8001a2c <__aeabi_dsub>
 800ca32:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ca34:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ca36:	f7f3 fd0f 	bl	8000458 <__aeabi_dcmplt>
 800ca3a:	2800      	cmp	r0, #0
 800ca3c:	d000      	beq.n	800ca40 <_dtoa_r+0x570>
 800ca3e:	e0be      	b.n	800cbbe <_dtoa_r+0x6ee>
 800ca40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ca42:	429d      	cmp	r5, r3
 800ca44:	d100      	bne.n	800ca48 <_dtoa_r+0x578>
 800ca46:	e77a      	b.n	800c93e <_dtoa_r+0x46e>
 800ca48:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ca4a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	4b55      	ldr	r3, [pc, #340]	; (800cba4 <_dtoa_r+0x6d4>)
 800ca50:	f7f4 fd6c 	bl	800152c <__aeabi_dmul>
 800ca54:	2200      	movs	r2, #0
 800ca56:	9010      	str	r0, [sp, #64]	; 0x40
 800ca58:	9111      	str	r1, [sp, #68]	; 0x44
 800ca5a:	9806      	ldr	r0, [sp, #24]
 800ca5c:	9907      	ldr	r1, [sp, #28]
 800ca5e:	4b51      	ldr	r3, [pc, #324]	; (800cba4 <_dtoa_r+0x6d4>)
 800ca60:	f7f4 fd64 	bl	800152c <__aeabi_dmul>
 800ca64:	9512      	str	r5, [sp, #72]	; 0x48
 800ca66:	9006      	str	r0, [sp, #24]
 800ca68:	9107      	str	r1, [sp, #28]
 800ca6a:	e7c3      	b.n	800c9f4 <_dtoa_r+0x524>
 800ca6c:	1859      	adds	r1, r3, r1
 800ca6e:	6808      	ldr	r0, [r1, #0]
 800ca70:	6849      	ldr	r1, [r1, #4]
 800ca72:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ca74:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ca76:	f7f4 fd59 	bl	800152c <__aeabi_dmul>
 800ca7a:	9010      	str	r0, [sp, #64]	; 0x40
 800ca7c:	9111      	str	r1, [sp, #68]	; 0x44
 800ca7e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ca80:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800ca82:	9806      	ldr	r0, [sp, #24]
 800ca84:	9907      	ldr	r1, [sp, #28]
 800ca86:	f7f5 fb07 	bl	8002098 <__aeabi_d2iz>
 800ca8a:	9012      	str	r0, [sp, #72]	; 0x48
 800ca8c:	f7f5 fb38 	bl	8002100 <__aeabi_i2d>
 800ca90:	0002      	movs	r2, r0
 800ca92:	000b      	movs	r3, r1
 800ca94:	9806      	ldr	r0, [sp, #24]
 800ca96:	9907      	ldr	r1, [sp, #28]
 800ca98:	f7f4 ffc8 	bl	8001a2c <__aeabi_dsub>
 800ca9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ca9e:	9006      	str	r0, [sp, #24]
 800caa0:	9107      	str	r1, [sp, #28]
 800caa2:	3330      	adds	r3, #48	; 0x30
 800caa4:	7023      	strb	r3, [r4, #0]
 800caa6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800caa8:	3401      	adds	r4, #1
 800caaa:	2200      	movs	r2, #0
 800caac:	42a3      	cmp	r3, r4
 800caae:	d124      	bne.n	800cafa <_dtoa_r+0x62a>
 800cab0:	4b41      	ldr	r3, [pc, #260]	; (800cbb8 <_dtoa_r+0x6e8>)
 800cab2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cab4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cab6:	f7f3 fdf5 	bl	80006a4 <__aeabi_dadd>
 800caba:	0002      	movs	r2, r0
 800cabc:	000b      	movs	r3, r1
 800cabe:	9806      	ldr	r0, [sp, #24]
 800cac0:	9907      	ldr	r1, [sp, #28]
 800cac2:	f7f3 fcdd 	bl	8000480 <__aeabi_dcmpgt>
 800cac6:	2800      	cmp	r0, #0
 800cac8:	d000      	beq.n	800cacc <_dtoa_r+0x5fc>
 800caca:	e078      	b.n	800cbbe <_dtoa_r+0x6ee>
 800cacc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cace:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cad0:	2000      	movs	r0, #0
 800cad2:	4939      	ldr	r1, [pc, #228]	; (800cbb8 <_dtoa_r+0x6e8>)
 800cad4:	f7f4 ffaa 	bl	8001a2c <__aeabi_dsub>
 800cad8:	0002      	movs	r2, r0
 800cada:	000b      	movs	r3, r1
 800cadc:	9806      	ldr	r0, [sp, #24]
 800cade:	9907      	ldr	r1, [sp, #28]
 800cae0:	f7f3 fcba 	bl	8000458 <__aeabi_dcmplt>
 800cae4:	2800      	cmp	r0, #0
 800cae6:	d100      	bne.n	800caea <_dtoa_r+0x61a>
 800cae8:	e729      	b.n	800c93e <_dtoa_r+0x46e>
 800caea:	1e6b      	subs	r3, r5, #1
 800caec:	781a      	ldrb	r2, [r3, #0]
 800caee:	2a30      	cmp	r2, #48	; 0x30
 800caf0:	d001      	beq.n	800caf6 <_dtoa_r+0x626>
 800caf2:	9603      	str	r6, [sp, #12]
 800caf4:	e03f      	b.n	800cb76 <_dtoa_r+0x6a6>
 800caf6:	001d      	movs	r5, r3
 800caf8:	e7f7      	b.n	800caea <_dtoa_r+0x61a>
 800cafa:	9806      	ldr	r0, [sp, #24]
 800cafc:	9907      	ldr	r1, [sp, #28]
 800cafe:	4b29      	ldr	r3, [pc, #164]	; (800cba4 <_dtoa_r+0x6d4>)
 800cb00:	f7f4 fd14 	bl	800152c <__aeabi_dmul>
 800cb04:	9006      	str	r0, [sp, #24]
 800cb06:	9107      	str	r1, [sp, #28]
 800cb08:	e7bb      	b.n	800ca82 <_dtoa_r+0x5b2>
 800cb0a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800cb0c:	9a08      	ldr	r2, [sp, #32]
 800cb0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb10:	9806      	ldr	r0, [sp, #24]
 800cb12:	9907      	ldr	r1, [sp, #28]
 800cb14:	f7f4 f8d6 	bl	8000cc4 <__aeabi_ddiv>
 800cb18:	f7f5 fabe 	bl	8002098 <__aeabi_d2iz>
 800cb1c:	0004      	movs	r4, r0
 800cb1e:	f7f5 faef 	bl	8002100 <__aeabi_i2d>
 800cb22:	9a08      	ldr	r2, [sp, #32]
 800cb24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb26:	f7f4 fd01 	bl	800152c <__aeabi_dmul>
 800cb2a:	000b      	movs	r3, r1
 800cb2c:	0002      	movs	r2, r0
 800cb2e:	9806      	ldr	r0, [sp, #24]
 800cb30:	9907      	ldr	r1, [sp, #28]
 800cb32:	f7f4 ff7b 	bl	8001a2c <__aeabi_dsub>
 800cb36:	0023      	movs	r3, r4
 800cb38:	3330      	adds	r3, #48	; 0x30
 800cb3a:	7033      	strb	r3, [r6, #0]
 800cb3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb3e:	1c75      	adds	r5, r6, #1
 800cb40:	1aeb      	subs	r3, r5, r3
 800cb42:	429f      	cmp	r7, r3
 800cb44:	d14c      	bne.n	800cbe0 <_dtoa_r+0x710>
 800cb46:	0002      	movs	r2, r0
 800cb48:	000b      	movs	r3, r1
 800cb4a:	f7f3 fdab 	bl	80006a4 <__aeabi_dadd>
 800cb4e:	0006      	movs	r6, r0
 800cb50:	000f      	movs	r7, r1
 800cb52:	0002      	movs	r2, r0
 800cb54:	000b      	movs	r3, r1
 800cb56:	9808      	ldr	r0, [sp, #32]
 800cb58:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb5a:	f7f3 fc7d 	bl	8000458 <__aeabi_dcmplt>
 800cb5e:	2800      	cmp	r0, #0
 800cb60:	d12c      	bne.n	800cbbc <_dtoa_r+0x6ec>
 800cb62:	9808      	ldr	r0, [sp, #32]
 800cb64:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb66:	0032      	movs	r2, r6
 800cb68:	003b      	movs	r3, r7
 800cb6a:	f7f3 fc6f 	bl	800044c <__aeabi_dcmpeq>
 800cb6e:	2800      	cmp	r0, #0
 800cb70:	d001      	beq.n	800cb76 <_dtoa_r+0x6a6>
 800cb72:	07e3      	lsls	r3, r4, #31
 800cb74:	d422      	bmi.n	800cbbc <_dtoa_r+0x6ec>
 800cb76:	9905      	ldr	r1, [sp, #20]
 800cb78:	9804      	ldr	r0, [sp, #16]
 800cb7a:	f000 fcff 	bl	800d57c <_Bfree>
 800cb7e:	2300      	movs	r3, #0
 800cb80:	702b      	strb	r3, [r5, #0]
 800cb82:	9b03      	ldr	r3, [sp, #12]
 800cb84:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cb86:	3301      	adds	r3, #1
 800cb88:	6013      	str	r3, [r2, #0]
 800cb8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d100      	bne.n	800cb92 <_dtoa_r+0x6c2>
 800cb90:	e275      	b.n	800d07e <_dtoa_r+0xbae>
 800cb92:	601d      	str	r5, [r3, #0]
 800cb94:	e273      	b.n	800d07e <_dtoa_r+0xbae>
 800cb96:	46c0      	nop			; (mov r8, r8)
 800cb98:	0800e7d0 	.word	0x0800e7d0
 800cb9c:	0800e7a8 	.word	0x0800e7a8
 800cba0:	3ff00000 	.word	0x3ff00000
 800cba4:	40240000 	.word	0x40240000
 800cba8:	401c0000 	.word	0x401c0000
 800cbac:	fcc00000 	.word	0xfcc00000
 800cbb0:	40140000 	.word	0x40140000
 800cbb4:	7cc00000 	.word	0x7cc00000
 800cbb8:	3fe00000 	.word	0x3fe00000
 800cbbc:	9e03      	ldr	r6, [sp, #12]
 800cbbe:	1e6b      	subs	r3, r5, #1
 800cbc0:	781a      	ldrb	r2, [r3, #0]
 800cbc2:	2a39      	cmp	r2, #57	; 0x39
 800cbc4:	d106      	bne.n	800cbd4 <_dtoa_r+0x704>
 800cbc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d107      	bne.n	800cbdc <_dtoa_r+0x70c>
 800cbcc:	2330      	movs	r3, #48	; 0x30
 800cbce:	7013      	strb	r3, [r2, #0]
 800cbd0:	0013      	movs	r3, r2
 800cbd2:	3601      	adds	r6, #1
 800cbd4:	781a      	ldrb	r2, [r3, #0]
 800cbd6:	3201      	adds	r2, #1
 800cbd8:	701a      	strb	r2, [r3, #0]
 800cbda:	e78a      	b.n	800caf2 <_dtoa_r+0x622>
 800cbdc:	001d      	movs	r5, r3
 800cbde:	e7ee      	b.n	800cbbe <_dtoa_r+0x6ee>
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	4bcf      	ldr	r3, [pc, #828]	; (800cf20 <_dtoa_r+0xa50>)
 800cbe4:	f7f4 fca2 	bl	800152c <__aeabi_dmul>
 800cbe8:	2200      	movs	r2, #0
 800cbea:	2300      	movs	r3, #0
 800cbec:	9006      	str	r0, [sp, #24]
 800cbee:	9107      	str	r1, [sp, #28]
 800cbf0:	002e      	movs	r6, r5
 800cbf2:	f7f3 fc2b 	bl	800044c <__aeabi_dcmpeq>
 800cbf6:	2800      	cmp	r0, #0
 800cbf8:	d100      	bne.n	800cbfc <_dtoa_r+0x72c>
 800cbfa:	e787      	b.n	800cb0c <_dtoa_r+0x63c>
 800cbfc:	e7bb      	b.n	800cb76 <_dtoa_r+0x6a6>
 800cbfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc00:	2a00      	cmp	r2, #0
 800cc02:	d100      	bne.n	800cc06 <_dtoa_r+0x736>
 800cc04:	e087      	b.n	800cd16 <_dtoa_r+0x846>
 800cc06:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800cc08:	2a01      	cmp	r2, #1
 800cc0a:	dc6e      	bgt.n	800ccea <_dtoa_r+0x81a>
 800cc0c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cc0e:	2a00      	cmp	r2, #0
 800cc10:	d067      	beq.n	800cce2 <_dtoa_r+0x812>
 800cc12:	4ac4      	ldr	r2, [pc, #784]	; (800cf24 <_dtoa_r+0xa54>)
 800cc14:	189b      	adds	r3, r3, r2
 800cc16:	9d08      	ldr	r5, [sp, #32]
 800cc18:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800cc1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cc1c:	2101      	movs	r1, #1
 800cc1e:	18d2      	adds	r2, r2, r3
 800cc20:	920b      	str	r2, [sp, #44]	; 0x2c
 800cc22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc24:	9804      	ldr	r0, [sp, #16]
 800cc26:	18d3      	adds	r3, r2, r3
 800cc28:	930c      	str	r3, [sp, #48]	; 0x30
 800cc2a:	f000 fd45 	bl	800d6b8 <__i2b>
 800cc2e:	0006      	movs	r6, r0
 800cc30:	2c00      	cmp	r4, #0
 800cc32:	dd0e      	ble.n	800cc52 <_dtoa_r+0x782>
 800cc34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	dd0b      	ble.n	800cc52 <_dtoa_r+0x782>
 800cc3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc3c:	0023      	movs	r3, r4
 800cc3e:	4294      	cmp	r4, r2
 800cc40:	dd00      	ble.n	800cc44 <_dtoa_r+0x774>
 800cc42:	0013      	movs	r3, r2
 800cc44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cc46:	1ae4      	subs	r4, r4, r3
 800cc48:	1ad2      	subs	r2, r2, r3
 800cc4a:	920b      	str	r2, [sp, #44]	; 0x2c
 800cc4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc4e:	1ad3      	subs	r3, r2, r3
 800cc50:	930c      	str	r3, [sp, #48]	; 0x30
 800cc52:	9b08      	ldr	r3, [sp, #32]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d01e      	beq.n	800cc96 <_dtoa_r+0x7c6>
 800cc58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d05f      	beq.n	800cd1e <_dtoa_r+0x84e>
 800cc5e:	2d00      	cmp	r5, #0
 800cc60:	dd11      	ble.n	800cc86 <_dtoa_r+0x7b6>
 800cc62:	0031      	movs	r1, r6
 800cc64:	002a      	movs	r2, r5
 800cc66:	9804      	ldr	r0, [sp, #16]
 800cc68:	f000 fdbe 	bl	800d7e8 <__pow5mult>
 800cc6c:	9a05      	ldr	r2, [sp, #20]
 800cc6e:	0001      	movs	r1, r0
 800cc70:	0006      	movs	r6, r0
 800cc72:	9804      	ldr	r0, [sp, #16]
 800cc74:	f000 fd29 	bl	800d6ca <__multiply>
 800cc78:	9905      	ldr	r1, [sp, #20]
 800cc7a:	9010      	str	r0, [sp, #64]	; 0x40
 800cc7c:	9804      	ldr	r0, [sp, #16]
 800cc7e:	f000 fc7d 	bl	800d57c <_Bfree>
 800cc82:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc84:	9305      	str	r3, [sp, #20]
 800cc86:	9b08      	ldr	r3, [sp, #32]
 800cc88:	1b5a      	subs	r2, r3, r5
 800cc8a:	d004      	beq.n	800cc96 <_dtoa_r+0x7c6>
 800cc8c:	9905      	ldr	r1, [sp, #20]
 800cc8e:	9804      	ldr	r0, [sp, #16]
 800cc90:	f000 fdaa 	bl	800d7e8 <__pow5mult>
 800cc94:	9005      	str	r0, [sp, #20]
 800cc96:	2101      	movs	r1, #1
 800cc98:	9804      	ldr	r0, [sp, #16]
 800cc9a:	f000 fd0d 	bl	800d6b8 <__i2b>
 800cc9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cca0:	9008      	str	r0, [sp, #32]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	dd3d      	ble.n	800cd22 <_dtoa_r+0x852>
 800cca6:	001a      	movs	r2, r3
 800cca8:	0001      	movs	r1, r0
 800ccaa:	9804      	ldr	r0, [sp, #16]
 800ccac:	f000 fd9c 	bl	800d7e8 <__pow5mult>
 800ccb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ccb2:	9008      	str	r0, [sp, #32]
 800ccb4:	2500      	movs	r5, #0
 800ccb6:	2b01      	cmp	r3, #1
 800ccb8:	dc3b      	bgt.n	800cd32 <_dtoa_r+0x862>
 800ccba:	2500      	movs	r5, #0
 800ccbc:	9b06      	ldr	r3, [sp, #24]
 800ccbe:	42ab      	cmp	r3, r5
 800ccc0:	d133      	bne.n	800cd2a <_dtoa_r+0x85a>
 800ccc2:	9b07      	ldr	r3, [sp, #28]
 800ccc4:	031b      	lsls	r3, r3, #12
 800ccc6:	42ab      	cmp	r3, r5
 800ccc8:	d12f      	bne.n	800cd2a <_dtoa_r+0x85a>
 800ccca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cccc:	9a07      	ldr	r2, [sp, #28]
 800ccce:	4213      	tst	r3, r2
 800ccd0:	d02b      	beq.n	800cd2a <_dtoa_r+0x85a>
 800ccd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ccd4:	3501      	adds	r5, #1
 800ccd6:	3301      	adds	r3, #1
 800ccd8:	930b      	str	r3, [sp, #44]	; 0x2c
 800ccda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ccdc:	3301      	adds	r3, #1
 800ccde:	930c      	str	r3, [sp, #48]	; 0x30
 800cce0:	e023      	b.n	800cd2a <_dtoa_r+0x85a>
 800cce2:	2336      	movs	r3, #54	; 0x36
 800cce4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800cce6:	1a9b      	subs	r3, r3, r2
 800cce8:	e795      	b.n	800cc16 <_dtoa_r+0x746>
 800ccea:	9b08      	ldr	r3, [sp, #32]
 800ccec:	1e7d      	subs	r5, r7, #1
 800ccee:	42ab      	cmp	r3, r5
 800ccf0:	db06      	blt.n	800cd00 <_dtoa_r+0x830>
 800ccf2:	1b5d      	subs	r5, r3, r5
 800ccf4:	2f00      	cmp	r7, #0
 800ccf6:	da0b      	bge.n	800cd10 <_dtoa_r+0x840>
 800ccf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ccfa:	1bdc      	subs	r4, r3, r7
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	e78c      	b.n	800cc1a <_dtoa_r+0x74a>
 800cd00:	9b08      	ldr	r3, [sp, #32]
 800cd02:	9508      	str	r5, [sp, #32]
 800cd04:	1aea      	subs	r2, r5, r3
 800cd06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd08:	2500      	movs	r5, #0
 800cd0a:	189b      	adds	r3, r3, r2
 800cd0c:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd0e:	e7f1      	b.n	800ccf4 <_dtoa_r+0x824>
 800cd10:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800cd12:	003b      	movs	r3, r7
 800cd14:	e781      	b.n	800cc1a <_dtoa_r+0x74a>
 800cd16:	9d08      	ldr	r5, [sp, #32]
 800cd18:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800cd1a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800cd1c:	e788      	b.n	800cc30 <_dtoa_r+0x760>
 800cd1e:	9a08      	ldr	r2, [sp, #32]
 800cd20:	e7b4      	b.n	800cc8c <_dtoa_r+0x7bc>
 800cd22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cd24:	2500      	movs	r5, #0
 800cd26:	2b01      	cmp	r3, #1
 800cd28:	ddc7      	ble.n	800ccba <_dtoa_r+0x7ea>
 800cd2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd2c:	2001      	movs	r0, #1
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d00b      	beq.n	800cd4a <_dtoa_r+0x87a>
 800cd32:	9b08      	ldr	r3, [sp, #32]
 800cd34:	9a08      	ldr	r2, [sp, #32]
 800cd36:	691b      	ldr	r3, [r3, #16]
 800cd38:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd3a:	3303      	adds	r3, #3
 800cd3c:	009b      	lsls	r3, r3, #2
 800cd3e:	18d3      	adds	r3, r2, r3
 800cd40:	6858      	ldr	r0, [r3, #4]
 800cd42:	f000 fc70 	bl	800d626 <__hi0bits>
 800cd46:	2320      	movs	r3, #32
 800cd48:	1a18      	subs	r0, r3, r0
 800cd4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd4c:	18c0      	adds	r0, r0, r3
 800cd4e:	231f      	movs	r3, #31
 800cd50:	4018      	ands	r0, r3
 800cd52:	d100      	bne.n	800cd56 <_dtoa_r+0x886>
 800cd54:	e0ab      	b.n	800ceae <_dtoa_r+0x9de>
 800cd56:	3301      	adds	r3, #1
 800cd58:	1a1b      	subs	r3, r3, r0
 800cd5a:	2b04      	cmp	r3, #4
 800cd5c:	dc00      	bgt.n	800cd60 <_dtoa_r+0x890>
 800cd5e:	e09b      	b.n	800ce98 <_dtoa_r+0x9c8>
 800cd60:	231c      	movs	r3, #28
 800cd62:	1a18      	subs	r0, r3, r0
 800cd64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd66:	1824      	adds	r4, r4, r0
 800cd68:	181b      	adds	r3, r3, r0
 800cd6a:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd6e:	181b      	adds	r3, r3, r0
 800cd70:	930c      	str	r3, [sp, #48]	; 0x30
 800cd72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	dd05      	ble.n	800cd84 <_dtoa_r+0x8b4>
 800cd78:	001a      	movs	r2, r3
 800cd7a:	9905      	ldr	r1, [sp, #20]
 800cd7c:	9804      	ldr	r0, [sp, #16]
 800cd7e:	f000 fd85 	bl	800d88c <__lshift>
 800cd82:	9005      	str	r0, [sp, #20]
 800cd84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	dd05      	ble.n	800cd96 <_dtoa_r+0x8c6>
 800cd8a:	001a      	movs	r2, r3
 800cd8c:	9908      	ldr	r1, [sp, #32]
 800cd8e:	9804      	ldr	r0, [sp, #16]
 800cd90:	f000 fd7c 	bl	800d88c <__lshift>
 800cd94:	9008      	str	r0, [sp, #32]
 800cd96:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d100      	bne.n	800cd9e <_dtoa_r+0x8ce>
 800cd9c:	e089      	b.n	800ceb2 <_dtoa_r+0x9e2>
 800cd9e:	9908      	ldr	r1, [sp, #32]
 800cda0:	9805      	ldr	r0, [sp, #20]
 800cda2:	f000 fdc4 	bl	800d92e <__mcmp>
 800cda6:	2800      	cmp	r0, #0
 800cda8:	db00      	blt.n	800cdac <_dtoa_r+0x8dc>
 800cdaa:	e082      	b.n	800ceb2 <_dtoa_r+0x9e2>
 800cdac:	9b03      	ldr	r3, [sp, #12]
 800cdae:	220a      	movs	r2, #10
 800cdb0:	3b01      	subs	r3, #1
 800cdb2:	9303      	str	r3, [sp, #12]
 800cdb4:	9905      	ldr	r1, [sp, #20]
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	9804      	ldr	r0, [sp, #16]
 800cdba:	f000 fbf8 	bl	800d5ae <__multadd>
 800cdbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cdc0:	9005      	str	r0, [sp, #20]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d100      	bne.n	800cdc8 <_dtoa_r+0x8f8>
 800cdc6:	e15d      	b.n	800d084 <_dtoa_r+0xbb4>
 800cdc8:	2300      	movs	r3, #0
 800cdca:	0031      	movs	r1, r6
 800cdcc:	220a      	movs	r2, #10
 800cdce:	9804      	ldr	r0, [sp, #16]
 800cdd0:	f000 fbed 	bl	800d5ae <__multadd>
 800cdd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cdd6:	0006      	movs	r6, r0
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	dc02      	bgt.n	800cde2 <_dtoa_r+0x912>
 800cddc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cdde:	2b02      	cmp	r3, #2
 800cde0:	dc6d      	bgt.n	800cebe <_dtoa_r+0x9ee>
 800cde2:	2c00      	cmp	r4, #0
 800cde4:	dd05      	ble.n	800cdf2 <_dtoa_r+0x922>
 800cde6:	0031      	movs	r1, r6
 800cde8:	0022      	movs	r2, r4
 800cdea:	9804      	ldr	r0, [sp, #16]
 800cdec:	f000 fd4e 	bl	800d88c <__lshift>
 800cdf0:	0006      	movs	r6, r0
 800cdf2:	0030      	movs	r0, r6
 800cdf4:	2d00      	cmp	r5, #0
 800cdf6:	d011      	beq.n	800ce1c <_dtoa_r+0x94c>
 800cdf8:	6871      	ldr	r1, [r6, #4]
 800cdfa:	9804      	ldr	r0, [sp, #16]
 800cdfc:	f000 fb86 	bl	800d50c <_Balloc>
 800ce00:	0031      	movs	r1, r6
 800ce02:	0004      	movs	r4, r0
 800ce04:	6933      	ldr	r3, [r6, #16]
 800ce06:	310c      	adds	r1, #12
 800ce08:	1c9a      	adds	r2, r3, #2
 800ce0a:	0092      	lsls	r2, r2, #2
 800ce0c:	300c      	adds	r0, #12
 800ce0e:	f7fe fa2f 	bl	800b270 <memcpy>
 800ce12:	2201      	movs	r2, #1
 800ce14:	0021      	movs	r1, r4
 800ce16:	9804      	ldr	r0, [sp, #16]
 800ce18:	f000 fd38 	bl	800d88c <__lshift>
 800ce1c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800ce1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce20:	3f01      	subs	r7, #1
 800ce22:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce24:	19db      	adds	r3, r3, r7
 800ce26:	0037      	movs	r7, r6
 800ce28:	0006      	movs	r6, r0
 800ce2a:	930f      	str	r3, [sp, #60]	; 0x3c
 800ce2c:	9908      	ldr	r1, [sp, #32]
 800ce2e:	9805      	ldr	r0, [sp, #20]
 800ce30:	f7ff faca 	bl	800c3c8 <quorem>
 800ce34:	0039      	movs	r1, r7
 800ce36:	900d      	str	r0, [sp, #52]	; 0x34
 800ce38:	0004      	movs	r4, r0
 800ce3a:	9805      	ldr	r0, [sp, #20]
 800ce3c:	f000 fd77 	bl	800d92e <__mcmp>
 800ce40:	0032      	movs	r2, r6
 800ce42:	900e      	str	r0, [sp, #56]	; 0x38
 800ce44:	9908      	ldr	r1, [sp, #32]
 800ce46:	9804      	ldr	r0, [sp, #16]
 800ce48:	f000 fd8a 	bl	800d960 <__mdiff>
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	930c      	str	r3, [sp, #48]	; 0x30
 800ce50:	68c3      	ldr	r3, [r0, #12]
 800ce52:	3430      	adds	r4, #48	; 0x30
 800ce54:	0005      	movs	r5, r0
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d104      	bne.n	800ce64 <_dtoa_r+0x994>
 800ce5a:	0001      	movs	r1, r0
 800ce5c:	9805      	ldr	r0, [sp, #20]
 800ce5e:	f000 fd66 	bl	800d92e <__mcmp>
 800ce62:	900c      	str	r0, [sp, #48]	; 0x30
 800ce64:	0029      	movs	r1, r5
 800ce66:	9804      	ldr	r0, [sp, #16]
 800ce68:	f000 fb88 	bl	800d57c <_Bfree>
 800ce6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce6e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ce70:	4313      	orrs	r3, r2
 800ce72:	d000      	beq.n	800ce76 <_dtoa_r+0x9a6>
 800ce74:	e089      	b.n	800cf8a <_dtoa_r+0xaba>
 800ce76:	9a06      	ldr	r2, [sp, #24]
 800ce78:	3301      	adds	r3, #1
 800ce7a:	4213      	tst	r3, r2
 800ce7c:	d000      	beq.n	800ce80 <_dtoa_r+0x9b0>
 800ce7e:	e084      	b.n	800cf8a <_dtoa_r+0xaba>
 800ce80:	2c39      	cmp	r4, #57	; 0x39
 800ce82:	d100      	bne.n	800ce86 <_dtoa_r+0x9b6>
 800ce84:	e0a3      	b.n	800cfce <_dtoa_r+0xafe>
 800ce86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	dd01      	ble.n	800ce90 <_dtoa_r+0x9c0>
 800ce8c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800ce8e:	3431      	adds	r4, #49	; 0x31
 800ce90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce92:	1c5d      	adds	r5, r3, #1
 800ce94:	701c      	strb	r4, [r3, #0]
 800ce96:	e027      	b.n	800cee8 <_dtoa_r+0xa18>
 800ce98:	2b04      	cmp	r3, #4
 800ce9a:	d100      	bne.n	800ce9e <_dtoa_r+0x9ce>
 800ce9c:	e769      	b.n	800cd72 <_dtoa_r+0x8a2>
 800ce9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cea0:	331c      	adds	r3, #28
 800cea2:	18d2      	adds	r2, r2, r3
 800cea4:	920b      	str	r2, [sp, #44]	; 0x2c
 800cea6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cea8:	18e4      	adds	r4, r4, r3
 800ceaa:	18d3      	adds	r3, r2, r3
 800ceac:	e760      	b.n	800cd70 <_dtoa_r+0x8a0>
 800ceae:	0003      	movs	r3, r0
 800ceb0:	e7f5      	b.n	800ce9e <_dtoa_r+0x9ce>
 800ceb2:	2f00      	cmp	r7, #0
 800ceb4:	dc3c      	bgt.n	800cf30 <_dtoa_r+0xa60>
 800ceb6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ceb8:	2b02      	cmp	r3, #2
 800ceba:	dd39      	ble.n	800cf30 <_dtoa_r+0xa60>
 800cebc:	970d      	str	r7, [sp, #52]	; 0x34
 800cebe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d10c      	bne.n	800cede <_dtoa_r+0xa0e>
 800cec4:	9908      	ldr	r1, [sp, #32]
 800cec6:	2205      	movs	r2, #5
 800cec8:	9804      	ldr	r0, [sp, #16]
 800ceca:	f000 fb70 	bl	800d5ae <__multadd>
 800cece:	9008      	str	r0, [sp, #32]
 800ced0:	0001      	movs	r1, r0
 800ced2:	9805      	ldr	r0, [sp, #20]
 800ced4:	f000 fd2b 	bl	800d92e <__mcmp>
 800ced8:	2800      	cmp	r0, #0
 800ceda:	dd00      	ble.n	800cede <_dtoa_r+0xa0e>
 800cedc:	e55a      	b.n	800c994 <_dtoa_r+0x4c4>
 800cede:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cee0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800cee2:	43db      	mvns	r3, r3
 800cee4:	9303      	str	r3, [sp, #12]
 800cee6:	2700      	movs	r7, #0
 800cee8:	9908      	ldr	r1, [sp, #32]
 800ceea:	9804      	ldr	r0, [sp, #16]
 800ceec:	f000 fb46 	bl	800d57c <_Bfree>
 800cef0:	2e00      	cmp	r6, #0
 800cef2:	d100      	bne.n	800cef6 <_dtoa_r+0xa26>
 800cef4:	e63f      	b.n	800cb76 <_dtoa_r+0x6a6>
 800cef6:	2f00      	cmp	r7, #0
 800cef8:	d005      	beq.n	800cf06 <_dtoa_r+0xa36>
 800cefa:	42b7      	cmp	r7, r6
 800cefc:	d003      	beq.n	800cf06 <_dtoa_r+0xa36>
 800cefe:	0039      	movs	r1, r7
 800cf00:	9804      	ldr	r0, [sp, #16]
 800cf02:	f000 fb3b 	bl	800d57c <_Bfree>
 800cf06:	0031      	movs	r1, r6
 800cf08:	9804      	ldr	r0, [sp, #16]
 800cf0a:	f000 fb37 	bl	800d57c <_Bfree>
 800cf0e:	e632      	b.n	800cb76 <_dtoa_r+0x6a6>
 800cf10:	9508      	str	r5, [sp, #32]
 800cf12:	002e      	movs	r6, r5
 800cf14:	e7e3      	b.n	800cede <_dtoa_r+0xa0e>
 800cf16:	2300      	movs	r3, #0
 800cf18:	9308      	str	r3, [sp, #32]
 800cf1a:	001e      	movs	r6, r3
 800cf1c:	e7df      	b.n	800cede <_dtoa_r+0xa0e>
 800cf1e:	46c0      	nop			; (mov r8, r8)
 800cf20:	40240000 	.word	0x40240000
 800cf24:	00000433 	.word	0x00000433
 800cf28:	9603      	str	r6, [sp, #12]
 800cf2a:	9508      	str	r5, [sp, #32]
 800cf2c:	002e      	movs	r6, r5
 800cf2e:	e531      	b.n	800c994 <_dtoa_r+0x4c4>
 800cf30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf32:	970d      	str	r7, [sp, #52]	; 0x34
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d000      	beq.n	800cf3a <_dtoa_r+0xa6a>
 800cf38:	e753      	b.n	800cde2 <_dtoa_r+0x912>
 800cf3a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800cf3c:	9908      	ldr	r1, [sp, #32]
 800cf3e:	9805      	ldr	r0, [sp, #20]
 800cf40:	f7ff fa42 	bl	800c3c8 <quorem>
 800cf44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf46:	3030      	adds	r0, #48	; 0x30
 800cf48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cf4a:	7028      	strb	r0, [r5, #0]
 800cf4c:	3501      	adds	r5, #1
 800cf4e:	0004      	movs	r4, r0
 800cf50:	1aeb      	subs	r3, r5, r3
 800cf52:	429a      	cmp	r2, r3
 800cf54:	dc78      	bgt.n	800d048 <_dtoa_r+0xb78>
 800cf56:	1e15      	subs	r5, r2, #0
 800cf58:	dc00      	bgt.n	800cf5c <_dtoa_r+0xa8c>
 800cf5a:	2501      	movs	r5, #1
 800cf5c:	2700      	movs	r7, #0
 800cf5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf60:	195d      	adds	r5, r3, r5
 800cf62:	9905      	ldr	r1, [sp, #20]
 800cf64:	2201      	movs	r2, #1
 800cf66:	9804      	ldr	r0, [sp, #16]
 800cf68:	f000 fc90 	bl	800d88c <__lshift>
 800cf6c:	9908      	ldr	r1, [sp, #32]
 800cf6e:	9005      	str	r0, [sp, #20]
 800cf70:	f000 fcdd 	bl	800d92e <__mcmp>
 800cf74:	2800      	cmp	r0, #0
 800cf76:	dc2f      	bgt.n	800cfd8 <_dtoa_r+0xb08>
 800cf78:	d101      	bne.n	800cf7e <_dtoa_r+0xaae>
 800cf7a:	07e3      	lsls	r3, r4, #31
 800cf7c:	d42c      	bmi.n	800cfd8 <_dtoa_r+0xb08>
 800cf7e:	1e6b      	subs	r3, r5, #1
 800cf80:	781a      	ldrb	r2, [r3, #0]
 800cf82:	2a30      	cmp	r2, #48	; 0x30
 800cf84:	d1b0      	bne.n	800cee8 <_dtoa_r+0xa18>
 800cf86:	001d      	movs	r5, r3
 800cf88:	e7f9      	b.n	800cf7e <_dtoa_r+0xaae>
 800cf8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	db07      	blt.n	800cfa0 <_dtoa_r+0xad0>
 800cf90:	001d      	movs	r5, r3
 800cf92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cf94:	431d      	orrs	r5, r3
 800cf96:	d126      	bne.n	800cfe6 <_dtoa_r+0xb16>
 800cf98:	2301      	movs	r3, #1
 800cf9a:	9a06      	ldr	r2, [sp, #24]
 800cf9c:	4213      	tst	r3, r2
 800cf9e:	d122      	bne.n	800cfe6 <_dtoa_r+0xb16>
 800cfa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	dc00      	bgt.n	800cfa8 <_dtoa_r+0xad8>
 800cfa6:	e773      	b.n	800ce90 <_dtoa_r+0x9c0>
 800cfa8:	9905      	ldr	r1, [sp, #20]
 800cfaa:	2201      	movs	r2, #1
 800cfac:	9804      	ldr	r0, [sp, #16]
 800cfae:	f000 fc6d 	bl	800d88c <__lshift>
 800cfb2:	9908      	ldr	r1, [sp, #32]
 800cfb4:	9005      	str	r0, [sp, #20]
 800cfb6:	f000 fcba 	bl	800d92e <__mcmp>
 800cfba:	2800      	cmp	r0, #0
 800cfbc:	dc04      	bgt.n	800cfc8 <_dtoa_r+0xaf8>
 800cfbe:	d000      	beq.n	800cfc2 <_dtoa_r+0xaf2>
 800cfc0:	e766      	b.n	800ce90 <_dtoa_r+0x9c0>
 800cfc2:	07e3      	lsls	r3, r4, #31
 800cfc4:	d400      	bmi.n	800cfc8 <_dtoa_r+0xaf8>
 800cfc6:	e763      	b.n	800ce90 <_dtoa_r+0x9c0>
 800cfc8:	2c39      	cmp	r4, #57	; 0x39
 800cfca:	d000      	beq.n	800cfce <_dtoa_r+0xafe>
 800cfcc:	e75e      	b.n	800ce8c <_dtoa_r+0x9bc>
 800cfce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cfd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cfd2:	1c5d      	adds	r5, r3, #1
 800cfd4:	2339      	movs	r3, #57	; 0x39
 800cfd6:	7013      	strb	r3, [r2, #0]
 800cfd8:	1e6b      	subs	r3, r5, #1
 800cfda:	781a      	ldrb	r2, [r3, #0]
 800cfdc:	2a39      	cmp	r2, #57	; 0x39
 800cfde:	d03b      	beq.n	800d058 <_dtoa_r+0xb88>
 800cfe0:	3201      	adds	r2, #1
 800cfe2:	701a      	strb	r2, [r3, #0]
 800cfe4:	e780      	b.n	800cee8 <_dtoa_r+0xa18>
 800cfe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cfe8:	3301      	adds	r3, #1
 800cfea:	930d      	str	r3, [sp, #52]	; 0x34
 800cfec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	dd05      	ble.n	800cffe <_dtoa_r+0xb2e>
 800cff2:	2c39      	cmp	r4, #57	; 0x39
 800cff4:	d0eb      	beq.n	800cfce <_dtoa_r+0xafe>
 800cff6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800cff8:	3401      	adds	r4, #1
 800cffa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cffc:	e74a      	b.n	800ce94 <_dtoa_r+0x9c4>
 800cffe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d000:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d002:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d004:	701c      	strb	r4, [r3, #0]
 800d006:	4293      	cmp	r3, r2
 800d008:	d0ab      	beq.n	800cf62 <_dtoa_r+0xa92>
 800d00a:	2300      	movs	r3, #0
 800d00c:	220a      	movs	r2, #10
 800d00e:	9905      	ldr	r1, [sp, #20]
 800d010:	9804      	ldr	r0, [sp, #16]
 800d012:	f000 facc 	bl	800d5ae <__multadd>
 800d016:	2300      	movs	r3, #0
 800d018:	9005      	str	r0, [sp, #20]
 800d01a:	220a      	movs	r2, #10
 800d01c:	0039      	movs	r1, r7
 800d01e:	9804      	ldr	r0, [sp, #16]
 800d020:	42b7      	cmp	r7, r6
 800d022:	d106      	bne.n	800d032 <_dtoa_r+0xb62>
 800d024:	f000 fac3 	bl	800d5ae <__multadd>
 800d028:	0007      	movs	r7, r0
 800d02a:	0006      	movs	r6, r0
 800d02c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d02e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d030:	e6fc      	b.n	800ce2c <_dtoa_r+0x95c>
 800d032:	f000 fabc 	bl	800d5ae <__multadd>
 800d036:	0031      	movs	r1, r6
 800d038:	0007      	movs	r7, r0
 800d03a:	2300      	movs	r3, #0
 800d03c:	220a      	movs	r2, #10
 800d03e:	9804      	ldr	r0, [sp, #16]
 800d040:	f000 fab5 	bl	800d5ae <__multadd>
 800d044:	0006      	movs	r6, r0
 800d046:	e7f1      	b.n	800d02c <_dtoa_r+0xb5c>
 800d048:	2300      	movs	r3, #0
 800d04a:	220a      	movs	r2, #10
 800d04c:	9905      	ldr	r1, [sp, #20]
 800d04e:	9804      	ldr	r0, [sp, #16]
 800d050:	f000 faad 	bl	800d5ae <__multadd>
 800d054:	9005      	str	r0, [sp, #20]
 800d056:	e771      	b.n	800cf3c <_dtoa_r+0xa6c>
 800d058:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d05a:	429a      	cmp	r2, r3
 800d05c:	d105      	bne.n	800d06a <_dtoa_r+0xb9a>
 800d05e:	9b03      	ldr	r3, [sp, #12]
 800d060:	3301      	adds	r3, #1
 800d062:	9303      	str	r3, [sp, #12]
 800d064:	2331      	movs	r3, #49	; 0x31
 800d066:	7013      	strb	r3, [r2, #0]
 800d068:	e73e      	b.n	800cee8 <_dtoa_r+0xa18>
 800d06a:	001d      	movs	r5, r3
 800d06c:	e7b4      	b.n	800cfd8 <_dtoa_r+0xb08>
 800d06e:	4b0a      	ldr	r3, [pc, #40]	; (800d098 <_dtoa_r+0xbc8>)
 800d070:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d072:	930a      	str	r3, [sp, #40]	; 0x28
 800d074:	4b09      	ldr	r3, [pc, #36]	; (800d09c <_dtoa_r+0xbcc>)
 800d076:	2a00      	cmp	r2, #0
 800d078:	d001      	beq.n	800d07e <_dtoa_r+0xbae>
 800d07a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d07c:	6013      	str	r3, [r2, #0]
 800d07e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d080:	b01d      	add	sp, #116	; 0x74
 800d082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d084:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d086:	2b00      	cmp	r3, #0
 800d088:	dd00      	ble.n	800d08c <_dtoa_r+0xbbc>
 800d08a:	e756      	b.n	800cf3a <_dtoa_r+0xa6a>
 800d08c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d08e:	2b02      	cmp	r3, #2
 800d090:	dc00      	bgt.n	800d094 <_dtoa_r+0xbc4>
 800d092:	e752      	b.n	800cf3a <_dtoa_r+0xa6a>
 800d094:	e713      	b.n	800cebe <_dtoa_r+0x9ee>
 800d096:	46c0      	nop			; (mov r8, r8)
 800d098:	0800e794 	.word	0x0800e794
 800d09c:	0800e79c 	.word	0x0800e79c

0800d0a0 <_localeconv_r>:
 800d0a0:	4b03      	ldr	r3, [pc, #12]	; (800d0b0 <_localeconv_r+0x10>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	6a18      	ldr	r0, [r3, #32]
 800d0a6:	2800      	cmp	r0, #0
 800d0a8:	d100      	bne.n	800d0ac <_localeconv_r+0xc>
 800d0aa:	4802      	ldr	r0, [pc, #8]	; (800d0b4 <_localeconv_r+0x14>)
 800d0ac:	30f0      	adds	r0, #240	; 0xf0
 800d0ae:	4770      	bx	lr
 800d0b0:	20000030 	.word	0x20000030
 800d0b4:	20000534 	.word	0x20000534

0800d0b8 <malloc>:
 800d0b8:	b510      	push	{r4, lr}
 800d0ba:	4b03      	ldr	r3, [pc, #12]	; (800d0c8 <malloc+0x10>)
 800d0bc:	0001      	movs	r1, r0
 800d0be:	6818      	ldr	r0, [r3, #0]
 800d0c0:	f000 f804 	bl	800d0cc <_malloc_r>
 800d0c4:	bd10      	pop	{r4, pc}
 800d0c6:	46c0      	nop			; (mov r8, r8)
 800d0c8:	20000030 	.word	0x20000030

0800d0cc <_malloc_r>:
 800d0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0ce:	000d      	movs	r5, r1
 800d0d0:	b085      	sub	sp, #20
 800d0d2:	350b      	adds	r5, #11
 800d0d4:	9001      	str	r0, [sp, #4]
 800d0d6:	2d16      	cmp	r5, #22
 800d0d8:	d908      	bls.n	800d0ec <_malloc_r+0x20>
 800d0da:	2307      	movs	r3, #7
 800d0dc:	439d      	bics	r5, r3
 800d0de:	d506      	bpl.n	800d0ee <_malloc_r+0x22>
 800d0e0:	230c      	movs	r3, #12
 800d0e2:	9a01      	ldr	r2, [sp, #4]
 800d0e4:	6013      	str	r3, [r2, #0]
 800d0e6:	2000      	movs	r0, #0
 800d0e8:	b005      	add	sp, #20
 800d0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0ec:	2510      	movs	r5, #16
 800d0ee:	428d      	cmp	r5, r1
 800d0f0:	d3f6      	bcc.n	800d0e0 <_malloc_r+0x14>
 800d0f2:	9801      	ldr	r0, [sp, #4]
 800d0f4:	f000 f9fa 	bl	800d4ec <__malloc_lock>
 800d0f8:	23f8      	movs	r3, #248	; 0xf8
 800d0fa:	33ff      	adds	r3, #255	; 0xff
 800d0fc:	48ba      	ldr	r0, [pc, #744]	; (800d3e8 <_malloc_r+0x31c>)
 800d0fe:	429d      	cmp	r5, r3
 800d100:	d81f      	bhi.n	800d142 <_malloc_r+0x76>
 800d102:	002a      	movs	r2, r5
 800d104:	3208      	adds	r2, #8
 800d106:	1882      	adds	r2, r0, r2
 800d108:	0011      	movs	r1, r2
 800d10a:	6854      	ldr	r4, [r2, #4]
 800d10c:	3908      	subs	r1, #8
 800d10e:	08eb      	lsrs	r3, r5, #3
 800d110:	428c      	cmp	r4, r1
 800d112:	d103      	bne.n	800d11c <_malloc_r+0x50>
 800d114:	68d4      	ldr	r4, [r2, #12]
 800d116:	3302      	adds	r3, #2
 800d118:	42a2      	cmp	r2, r4
 800d11a:	d029      	beq.n	800d170 <_malloc_r+0xa4>
 800d11c:	2303      	movs	r3, #3
 800d11e:	6862      	ldr	r2, [r4, #4]
 800d120:	68a1      	ldr	r1, [r4, #8]
 800d122:	439a      	bics	r2, r3
 800d124:	0013      	movs	r3, r2
 800d126:	68e2      	ldr	r2, [r4, #12]
 800d128:	18e3      	adds	r3, r4, r3
 800d12a:	60ca      	str	r2, [r1, #12]
 800d12c:	6091      	str	r1, [r2, #8]
 800d12e:	2201      	movs	r2, #1
 800d130:	6859      	ldr	r1, [r3, #4]
 800d132:	430a      	orrs	r2, r1
 800d134:	605a      	str	r2, [r3, #4]
 800d136:	9801      	ldr	r0, [sp, #4]
 800d138:	f000 f9e0 	bl	800d4fc <__malloc_unlock>
 800d13c:	0020      	movs	r0, r4
 800d13e:	3008      	adds	r0, #8
 800d140:	e7d2      	b.n	800d0e8 <_malloc_r+0x1c>
 800d142:	0a6a      	lsrs	r2, r5, #9
 800d144:	233f      	movs	r3, #63	; 0x3f
 800d146:	2a00      	cmp	r2, #0
 800d148:	d003      	beq.n	800d152 <_malloc_r+0x86>
 800d14a:	2a04      	cmp	r2, #4
 800d14c:	d828      	bhi.n	800d1a0 <_malloc_r+0xd4>
 800d14e:	09ab      	lsrs	r3, r5, #6
 800d150:	3338      	adds	r3, #56	; 0x38
 800d152:	2203      	movs	r2, #3
 800d154:	4694      	mov	ip, r2
 800d156:	00d9      	lsls	r1, r3, #3
 800d158:	1809      	adds	r1, r1, r0
 800d15a:	68cc      	ldr	r4, [r1, #12]
 800d15c:	428c      	cmp	r4, r1
 800d15e:	d006      	beq.n	800d16e <_malloc_r+0xa2>
 800d160:	4666      	mov	r6, ip
 800d162:	6862      	ldr	r2, [r4, #4]
 800d164:	43b2      	bics	r2, r6
 800d166:	1b57      	subs	r7, r2, r5
 800d168:	2f0f      	cmp	r7, #15
 800d16a:	dd31      	ble.n	800d1d0 <_malloc_r+0x104>
 800d16c:	3b01      	subs	r3, #1
 800d16e:	3301      	adds	r3, #1
 800d170:	0001      	movs	r1, r0
 800d172:	6904      	ldr	r4, [r0, #16]
 800d174:	3108      	adds	r1, #8
 800d176:	428c      	cmp	r4, r1
 800d178:	d04e      	beq.n	800d218 <_malloc_r+0x14c>
 800d17a:	2203      	movs	r2, #3
 800d17c:	6866      	ldr	r6, [r4, #4]
 800d17e:	4396      	bics	r6, r2
 800d180:	0032      	movs	r2, r6
 800d182:	1b76      	subs	r6, r6, r5
 800d184:	2e0f      	cmp	r6, #15
 800d186:	dd31      	ble.n	800d1ec <_malloc_r+0x120>
 800d188:	2701      	movs	r7, #1
 800d18a:	1963      	adds	r3, r4, r5
 800d18c:	433d      	orrs	r5, r7
 800d18e:	4337      	orrs	r7, r6
 800d190:	6065      	str	r5, [r4, #4]
 800d192:	6143      	str	r3, [r0, #20]
 800d194:	6103      	str	r3, [r0, #16]
 800d196:	60d9      	str	r1, [r3, #12]
 800d198:	6099      	str	r1, [r3, #8]
 800d19a:	605f      	str	r7, [r3, #4]
 800d19c:	50a6      	str	r6, [r4, r2]
 800d19e:	e7ca      	b.n	800d136 <_malloc_r+0x6a>
 800d1a0:	2a14      	cmp	r2, #20
 800d1a2:	d802      	bhi.n	800d1aa <_malloc_r+0xde>
 800d1a4:	0013      	movs	r3, r2
 800d1a6:	335b      	adds	r3, #91	; 0x5b
 800d1a8:	e7d3      	b.n	800d152 <_malloc_r+0x86>
 800d1aa:	2a54      	cmp	r2, #84	; 0x54
 800d1ac:	d802      	bhi.n	800d1b4 <_malloc_r+0xe8>
 800d1ae:	0b2b      	lsrs	r3, r5, #12
 800d1b0:	336e      	adds	r3, #110	; 0x6e
 800d1b2:	e7ce      	b.n	800d152 <_malloc_r+0x86>
 800d1b4:	23aa      	movs	r3, #170	; 0xaa
 800d1b6:	005b      	lsls	r3, r3, #1
 800d1b8:	429a      	cmp	r2, r3
 800d1ba:	d802      	bhi.n	800d1c2 <_malloc_r+0xf6>
 800d1bc:	0beb      	lsrs	r3, r5, #15
 800d1be:	3377      	adds	r3, #119	; 0x77
 800d1c0:	e7c7      	b.n	800d152 <_malloc_r+0x86>
 800d1c2:	498a      	ldr	r1, [pc, #552]	; (800d3ec <_malloc_r+0x320>)
 800d1c4:	237e      	movs	r3, #126	; 0x7e
 800d1c6:	428a      	cmp	r2, r1
 800d1c8:	d8c3      	bhi.n	800d152 <_malloc_r+0x86>
 800d1ca:	0cab      	lsrs	r3, r5, #18
 800d1cc:	337c      	adds	r3, #124	; 0x7c
 800d1ce:	e7c0      	b.n	800d152 <_malloc_r+0x86>
 800d1d0:	68e6      	ldr	r6, [r4, #12]
 800d1d2:	2f00      	cmp	r7, #0
 800d1d4:	db08      	blt.n	800d1e8 <_malloc_r+0x11c>
 800d1d6:	68a3      	ldr	r3, [r4, #8]
 800d1d8:	60de      	str	r6, [r3, #12]
 800d1da:	60b3      	str	r3, [r6, #8]
 800d1dc:	2301      	movs	r3, #1
 800d1de:	18a2      	adds	r2, r4, r2
 800d1e0:	6851      	ldr	r1, [r2, #4]
 800d1e2:	430b      	orrs	r3, r1
 800d1e4:	6053      	str	r3, [r2, #4]
 800d1e6:	e7a6      	b.n	800d136 <_malloc_r+0x6a>
 800d1e8:	0034      	movs	r4, r6
 800d1ea:	e7b7      	b.n	800d15c <_malloc_r+0x90>
 800d1ec:	6141      	str	r1, [r0, #20]
 800d1ee:	6101      	str	r1, [r0, #16]
 800d1f0:	2e00      	cmp	r6, #0
 800d1f2:	daf3      	bge.n	800d1dc <_malloc_r+0x110>
 800d1f4:	497e      	ldr	r1, [pc, #504]	; (800d3f0 <_malloc_r+0x324>)
 800d1f6:	428a      	cmp	r2, r1
 800d1f8:	d842      	bhi.n	800d280 <_malloc_r+0x1b4>
 800d1fa:	08d2      	lsrs	r2, r2, #3
 800d1fc:	39ff      	subs	r1, #255	; 0xff
 800d1fe:	1096      	asrs	r6, r2, #2
 800d200:	39ff      	subs	r1, #255	; 0xff
 800d202:	40b1      	lsls	r1, r6
 800d204:	6846      	ldr	r6, [r0, #4]
 800d206:	00d2      	lsls	r2, r2, #3
 800d208:	4331      	orrs	r1, r6
 800d20a:	6041      	str	r1, [r0, #4]
 800d20c:	1810      	adds	r0, r2, r0
 800d20e:	6882      	ldr	r2, [r0, #8]
 800d210:	60e0      	str	r0, [r4, #12]
 800d212:	60a2      	str	r2, [r4, #8]
 800d214:	6084      	str	r4, [r0, #8]
 800d216:	60d4      	str	r4, [r2, #12]
 800d218:	2201      	movs	r2, #1
 800d21a:	1099      	asrs	r1, r3, #2
 800d21c:	408a      	lsls	r2, r1
 800d21e:	4972      	ldr	r1, [pc, #456]	; (800d3e8 <_malloc_r+0x31c>)
 800d220:	6848      	ldr	r0, [r1, #4]
 800d222:	4282      	cmp	r2, r0
 800d224:	d900      	bls.n	800d228 <_malloc_r+0x15c>
 800d226:	e097      	b.n	800d358 <_malloc_r+0x28c>
 800d228:	4210      	tst	r0, r2
 800d22a:	d105      	bne.n	800d238 <_malloc_r+0x16c>
 800d22c:	2403      	movs	r4, #3
 800d22e:	43a3      	bics	r3, r4
 800d230:	0052      	lsls	r2, r2, #1
 800d232:	3304      	adds	r3, #4
 800d234:	4210      	tst	r0, r2
 800d236:	d0fb      	beq.n	800d230 <_malloc_r+0x164>
 800d238:	469c      	mov	ip, r3
 800d23a:	00d8      	lsls	r0, r3, #3
 800d23c:	1808      	adds	r0, r1, r0
 800d23e:	9002      	str	r0, [sp, #8]
 800d240:	9c02      	ldr	r4, [sp, #8]
 800d242:	68e4      	ldr	r4, [r4, #12]
 800d244:	9e02      	ldr	r6, [sp, #8]
 800d246:	42b4      	cmp	r4, r6
 800d248:	d158      	bne.n	800d2fc <_malloc_r+0x230>
 800d24a:	0034      	movs	r4, r6
 800d24c:	3408      	adds	r4, #8
 800d24e:	9402      	str	r4, [sp, #8]
 800d250:	2401      	movs	r4, #1
 800d252:	44a4      	add	ip, r4
 800d254:	4664      	mov	r4, ip
 800d256:	2603      	movs	r6, #3
 800d258:	4234      	tst	r4, r6
 800d25a:	d1f1      	bne.n	800d240 <_malloc_r+0x174>
 800d25c:	2403      	movs	r4, #3
 800d25e:	4223      	tst	r3, r4
 800d260:	d174      	bne.n	800d34c <_malloc_r+0x280>
 800d262:	684b      	ldr	r3, [r1, #4]
 800d264:	4393      	bics	r3, r2
 800d266:	604b      	str	r3, [r1, #4]
 800d268:	6848      	ldr	r0, [r1, #4]
 800d26a:	0052      	lsls	r2, r2, #1
 800d26c:	4282      	cmp	r2, r0
 800d26e:	d873      	bhi.n	800d358 <_malloc_r+0x28c>
 800d270:	2a00      	cmp	r2, #0
 800d272:	d071      	beq.n	800d358 <_malloc_r+0x28c>
 800d274:	4663      	mov	r3, ip
 800d276:	4210      	tst	r0, r2
 800d278:	d1de      	bne.n	800d238 <_malloc_r+0x16c>
 800d27a:	3304      	adds	r3, #4
 800d27c:	0052      	lsls	r2, r2, #1
 800d27e:	e7fa      	b.n	800d276 <_malloc_r+0x1aa>
 800d280:	0a56      	lsrs	r6, r2, #9
 800d282:	2e04      	cmp	r6, #4
 800d284:	d816      	bhi.n	800d2b4 <_malloc_r+0x1e8>
 800d286:	0991      	lsrs	r1, r2, #6
 800d288:	3138      	adds	r1, #56	; 0x38
 800d28a:	00cf      	lsls	r7, r1, #3
 800d28c:	183e      	adds	r6, r7, r0
 800d28e:	2703      	movs	r7, #3
 800d290:	9602      	str	r6, [sp, #8]
 800d292:	46bc      	mov	ip, r7
 800d294:	68b6      	ldr	r6, [r6, #8]
 800d296:	9f02      	ldr	r7, [sp, #8]
 800d298:	42b7      	cmp	r7, r6
 800d29a:	d127      	bne.n	800d2ec <_malloc_r+0x220>
 800d29c:	2201      	movs	r2, #1
 800d29e:	1089      	asrs	r1, r1, #2
 800d2a0:	408a      	lsls	r2, r1
 800d2a2:	6841      	ldr	r1, [r0, #4]
 800d2a4:	430a      	orrs	r2, r1
 800d2a6:	6042      	str	r2, [r0, #4]
 800d2a8:	9a02      	ldr	r2, [sp, #8]
 800d2aa:	60a6      	str	r6, [r4, #8]
 800d2ac:	60e2      	str	r2, [r4, #12]
 800d2ae:	6094      	str	r4, [r2, #8]
 800d2b0:	60f4      	str	r4, [r6, #12]
 800d2b2:	e7b1      	b.n	800d218 <_malloc_r+0x14c>
 800d2b4:	2e14      	cmp	r6, #20
 800d2b6:	d802      	bhi.n	800d2be <_malloc_r+0x1f2>
 800d2b8:	0031      	movs	r1, r6
 800d2ba:	315b      	adds	r1, #91	; 0x5b
 800d2bc:	e7e5      	b.n	800d28a <_malloc_r+0x1be>
 800d2be:	2e54      	cmp	r6, #84	; 0x54
 800d2c0:	d802      	bhi.n	800d2c8 <_malloc_r+0x1fc>
 800d2c2:	0b11      	lsrs	r1, r2, #12
 800d2c4:	316e      	adds	r1, #110	; 0x6e
 800d2c6:	e7e0      	b.n	800d28a <_malloc_r+0x1be>
 800d2c8:	21aa      	movs	r1, #170	; 0xaa
 800d2ca:	0049      	lsls	r1, r1, #1
 800d2cc:	428e      	cmp	r6, r1
 800d2ce:	d802      	bhi.n	800d2d6 <_malloc_r+0x20a>
 800d2d0:	0bd1      	lsrs	r1, r2, #15
 800d2d2:	3177      	adds	r1, #119	; 0x77
 800d2d4:	e7d9      	b.n	800d28a <_malloc_r+0x1be>
 800d2d6:	4f45      	ldr	r7, [pc, #276]	; (800d3ec <_malloc_r+0x320>)
 800d2d8:	217e      	movs	r1, #126	; 0x7e
 800d2da:	42be      	cmp	r6, r7
 800d2dc:	d8d5      	bhi.n	800d28a <_malloc_r+0x1be>
 800d2de:	0c91      	lsrs	r1, r2, #18
 800d2e0:	317c      	adds	r1, #124	; 0x7c
 800d2e2:	e7d2      	b.n	800d28a <_malloc_r+0x1be>
 800d2e4:	68b6      	ldr	r6, [r6, #8]
 800d2e6:	9902      	ldr	r1, [sp, #8]
 800d2e8:	42b1      	cmp	r1, r6
 800d2ea:	d004      	beq.n	800d2f6 <_malloc_r+0x22a>
 800d2ec:	4660      	mov	r0, ip
 800d2ee:	6871      	ldr	r1, [r6, #4]
 800d2f0:	4381      	bics	r1, r0
 800d2f2:	428a      	cmp	r2, r1
 800d2f4:	d3f6      	bcc.n	800d2e4 <_malloc_r+0x218>
 800d2f6:	68f2      	ldr	r2, [r6, #12]
 800d2f8:	9202      	str	r2, [sp, #8]
 800d2fa:	e7d5      	b.n	800d2a8 <_malloc_r+0x1dc>
 800d2fc:	2603      	movs	r6, #3
 800d2fe:	6867      	ldr	r7, [r4, #4]
 800d300:	43b7      	bics	r7, r6
 800d302:	9703      	str	r7, [sp, #12]
 800d304:	1b7e      	subs	r6, r7, r5
 800d306:	2e0f      	cmp	r6, #15
 800d308:	dd11      	ble.n	800d32e <_malloc_r+0x262>
 800d30a:	2201      	movs	r2, #1
 800d30c:	1963      	adds	r3, r4, r5
 800d30e:	4315      	orrs	r5, r2
 800d310:	6065      	str	r5, [r4, #4]
 800d312:	68e0      	ldr	r0, [r4, #12]
 800d314:	68a5      	ldr	r5, [r4, #8]
 800d316:	3108      	adds	r1, #8
 800d318:	60e8      	str	r0, [r5, #12]
 800d31a:	4332      	orrs	r2, r6
 800d31c:	6085      	str	r5, [r0, #8]
 800d31e:	60cb      	str	r3, [r1, #12]
 800d320:	608b      	str	r3, [r1, #8]
 800d322:	60d9      	str	r1, [r3, #12]
 800d324:	6099      	str	r1, [r3, #8]
 800d326:	605a      	str	r2, [r3, #4]
 800d328:	003b      	movs	r3, r7
 800d32a:	50e6      	str	r6, [r4, r3]
 800d32c:	e703      	b.n	800d136 <_malloc_r+0x6a>
 800d32e:	68e7      	ldr	r7, [r4, #12]
 800d330:	2e00      	cmp	r6, #0
 800d332:	db09      	blt.n	800d348 <_malloc_r+0x27c>
 800d334:	2201      	movs	r2, #1
 800d336:	9b03      	ldr	r3, [sp, #12]
 800d338:	18e3      	adds	r3, r4, r3
 800d33a:	6859      	ldr	r1, [r3, #4]
 800d33c:	430a      	orrs	r2, r1
 800d33e:	605a      	str	r2, [r3, #4]
 800d340:	68a3      	ldr	r3, [r4, #8]
 800d342:	60df      	str	r7, [r3, #12]
 800d344:	60bb      	str	r3, [r7, #8]
 800d346:	e6f6      	b.n	800d136 <_malloc_r+0x6a>
 800d348:	003c      	movs	r4, r7
 800d34a:	e77b      	b.n	800d244 <_malloc_r+0x178>
 800d34c:	3808      	subs	r0, #8
 800d34e:	6884      	ldr	r4, [r0, #8]
 800d350:	3b01      	subs	r3, #1
 800d352:	42a0      	cmp	r0, r4
 800d354:	d082      	beq.n	800d25c <_malloc_r+0x190>
 800d356:	e787      	b.n	800d268 <_malloc_r+0x19c>
 800d358:	2303      	movs	r3, #3
 800d35a:	688f      	ldr	r7, [r1, #8]
 800d35c:	687a      	ldr	r2, [r7, #4]
 800d35e:	439a      	bics	r2, r3
 800d360:	9202      	str	r2, [sp, #8]
 800d362:	4295      	cmp	r5, r2
 800d364:	d803      	bhi.n	800d36e <_malloc_r+0x2a2>
 800d366:	1b52      	subs	r2, r2, r5
 800d368:	2a0f      	cmp	r2, #15
 800d36a:	dd00      	ble.n	800d36e <_malloc_r+0x2a2>
 800d36c:	e09f      	b.n	800d4ae <_malloc_r+0x3e2>
 800d36e:	9b02      	ldr	r3, [sp, #8]
 800d370:	18fb      	adds	r3, r7, r3
 800d372:	9303      	str	r3, [sp, #12]
 800d374:	4b1f      	ldr	r3, [pc, #124]	; (800d3f4 <_malloc_r+0x328>)
 800d376:	681e      	ldr	r6, [r3, #0]
 800d378:	4b1f      	ldr	r3, [pc, #124]	; (800d3f8 <_malloc_r+0x32c>)
 800d37a:	3610      	adds	r6, #16
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	1976      	adds	r6, r6, r5
 800d380:	3301      	adds	r3, #1
 800d382:	d005      	beq.n	800d390 <_malloc_r+0x2c4>
 800d384:	4b1d      	ldr	r3, [pc, #116]	; (800d3fc <_malloc_r+0x330>)
 800d386:	3b01      	subs	r3, #1
 800d388:	199e      	adds	r6, r3, r6
 800d38a:	4b1c      	ldr	r3, [pc, #112]	; (800d3fc <_malloc_r+0x330>)
 800d38c:	425b      	negs	r3, r3
 800d38e:	401e      	ands	r6, r3
 800d390:	0031      	movs	r1, r6
 800d392:	9801      	ldr	r0, [sp, #4]
 800d394:	f000 fb9c 	bl	800dad0 <_sbrk_r>
 800d398:	0004      	movs	r4, r0
 800d39a:	1c43      	adds	r3, r0, #1
 800d39c:	d05f      	beq.n	800d45e <_malloc_r+0x392>
 800d39e:	9b03      	ldr	r3, [sp, #12]
 800d3a0:	4283      	cmp	r3, r0
 800d3a2:	d902      	bls.n	800d3aa <_malloc_r+0x2de>
 800d3a4:	4b10      	ldr	r3, [pc, #64]	; (800d3e8 <_malloc_r+0x31c>)
 800d3a6:	429f      	cmp	r7, r3
 800d3a8:	d159      	bne.n	800d45e <_malloc_r+0x392>
 800d3aa:	4b15      	ldr	r3, [pc, #84]	; (800d400 <_malloc_r+0x334>)
 800d3ac:	681a      	ldr	r2, [r3, #0]
 800d3ae:	18b1      	adds	r1, r6, r2
 800d3b0:	6019      	str	r1, [r3, #0]
 800d3b2:	4b12      	ldr	r3, [pc, #72]	; (800d3fc <_malloc_r+0x330>)
 800d3b4:	1e5a      	subs	r2, r3, #1
 800d3b6:	9b03      	ldr	r3, [sp, #12]
 800d3b8:	42a3      	cmp	r3, r4
 800d3ba:	d127      	bne.n	800d40c <_malloc_r+0x340>
 800d3bc:	4213      	tst	r3, r2
 800d3be:	d125      	bne.n	800d40c <_malloc_r+0x340>
 800d3c0:	9a02      	ldr	r2, [sp, #8]
 800d3c2:	4b09      	ldr	r3, [pc, #36]	; (800d3e8 <_malloc_r+0x31c>)
 800d3c4:	1992      	adds	r2, r2, r6
 800d3c6:	2601      	movs	r6, #1
 800d3c8:	689b      	ldr	r3, [r3, #8]
 800d3ca:	4316      	orrs	r6, r2
 800d3cc:	605e      	str	r6, [r3, #4]
 800d3ce:	4b0c      	ldr	r3, [pc, #48]	; (800d400 <_malloc_r+0x334>)
 800d3d0:	4a0c      	ldr	r2, [pc, #48]	; (800d404 <_malloc_r+0x338>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	6811      	ldr	r1, [r2, #0]
 800d3d6:	428b      	cmp	r3, r1
 800d3d8:	d900      	bls.n	800d3dc <_malloc_r+0x310>
 800d3da:	6013      	str	r3, [r2, #0]
 800d3dc:	4a0a      	ldr	r2, [pc, #40]	; (800d408 <_malloc_r+0x33c>)
 800d3de:	6811      	ldr	r1, [r2, #0]
 800d3e0:	428b      	cmp	r3, r1
 800d3e2:	d93c      	bls.n	800d45e <_malloc_r+0x392>
 800d3e4:	6013      	str	r3, [r2, #0]
 800d3e6:	e03a      	b.n	800d45e <_malloc_r+0x392>
 800d3e8:	20000124 	.word	0x20000124
 800d3ec:	00000554 	.word	0x00000554
 800d3f0:	000001ff 	.word	0x000001ff
 800d3f4:	20000eac 	.word	0x20000eac
 800d3f8:	2000052c 	.word	0x2000052c
 800d3fc:	00000080 	.word	0x00000080
 800d400:	20000e7c 	.word	0x20000e7c
 800d404:	20000ea4 	.word	0x20000ea4
 800d408:	20000ea8 	.word	0x20000ea8
 800d40c:	4b2d      	ldr	r3, [pc, #180]	; (800d4c4 <_malloc_r+0x3f8>)
 800d40e:	6818      	ldr	r0, [r3, #0]
 800d410:	3001      	adds	r0, #1
 800d412:	d132      	bne.n	800d47a <_malloc_r+0x3ae>
 800d414:	601c      	str	r4, [r3, #0]
 800d416:	2007      	movs	r0, #7
 800d418:	4020      	ands	r0, r4
 800d41a:	d002      	beq.n	800d422 <_malloc_r+0x356>
 800d41c:	2308      	movs	r3, #8
 800d41e:	1a18      	subs	r0, r3, r0
 800d420:	1824      	adds	r4, r4, r0
 800d422:	4b29      	ldr	r3, [pc, #164]	; (800d4c8 <_malloc_r+0x3fc>)
 800d424:	19a6      	adds	r6, r4, r6
 800d426:	1818      	adds	r0, r3, r0
 800d428:	4016      	ands	r6, r2
 800d42a:	1b86      	subs	r6, r0, r6
 800d42c:	0031      	movs	r1, r6
 800d42e:	9801      	ldr	r0, [sp, #4]
 800d430:	f000 fb4e 	bl	800dad0 <_sbrk_r>
 800d434:	1c43      	adds	r3, r0, #1
 800d436:	d101      	bne.n	800d43c <_malloc_r+0x370>
 800d438:	0020      	movs	r0, r4
 800d43a:	2600      	movs	r6, #0
 800d43c:	4a23      	ldr	r2, [pc, #140]	; (800d4cc <_malloc_r+0x400>)
 800d43e:	1b00      	subs	r0, r0, r4
 800d440:	6813      	ldr	r3, [r2, #0]
 800d442:	199b      	adds	r3, r3, r6
 800d444:	6013      	str	r3, [r2, #0]
 800d446:	2301      	movs	r3, #1
 800d448:	4a21      	ldr	r2, [pc, #132]	; (800d4d0 <_malloc_r+0x404>)
 800d44a:	1986      	adds	r6, r0, r6
 800d44c:	431e      	orrs	r6, r3
 800d44e:	6094      	str	r4, [r2, #8]
 800d450:	6066      	str	r6, [r4, #4]
 800d452:	4297      	cmp	r7, r2
 800d454:	d0bb      	beq.n	800d3ce <_malloc_r+0x302>
 800d456:	9a02      	ldr	r2, [sp, #8]
 800d458:	2a0f      	cmp	r2, #15
 800d45a:	d814      	bhi.n	800d486 <_malloc_r+0x3ba>
 800d45c:	6063      	str	r3, [r4, #4]
 800d45e:	2203      	movs	r2, #3
 800d460:	4b1b      	ldr	r3, [pc, #108]	; (800d4d0 <_malloc_r+0x404>)
 800d462:	689b      	ldr	r3, [r3, #8]
 800d464:	685b      	ldr	r3, [r3, #4]
 800d466:	4393      	bics	r3, r2
 800d468:	1b5a      	subs	r2, r3, r5
 800d46a:	429d      	cmp	r5, r3
 800d46c:	d801      	bhi.n	800d472 <_malloc_r+0x3a6>
 800d46e:	2a0f      	cmp	r2, #15
 800d470:	dc1d      	bgt.n	800d4ae <_malloc_r+0x3e2>
 800d472:	9801      	ldr	r0, [sp, #4]
 800d474:	f000 f842 	bl	800d4fc <__malloc_unlock>
 800d478:	e635      	b.n	800d0e6 <_malloc_r+0x1a>
 800d47a:	9b03      	ldr	r3, [sp, #12]
 800d47c:	1ae3      	subs	r3, r4, r3
 800d47e:	185b      	adds	r3, r3, r1
 800d480:	4912      	ldr	r1, [pc, #72]	; (800d4cc <_malloc_r+0x400>)
 800d482:	600b      	str	r3, [r1, #0]
 800d484:	e7c7      	b.n	800d416 <_malloc_r+0x34a>
 800d486:	2207      	movs	r2, #7
 800d488:	9e02      	ldr	r6, [sp, #8]
 800d48a:	3e0c      	subs	r6, #12
 800d48c:	4396      	bics	r6, r2
 800d48e:	687a      	ldr	r2, [r7, #4]
 800d490:	4013      	ands	r3, r2
 800d492:	2205      	movs	r2, #5
 800d494:	4333      	orrs	r3, r6
 800d496:	607b      	str	r3, [r7, #4]
 800d498:	19bb      	adds	r3, r7, r6
 800d49a:	605a      	str	r2, [r3, #4]
 800d49c:	609a      	str	r2, [r3, #8]
 800d49e:	2e0f      	cmp	r6, #15
 800d4a0:	d995      	bls.n	800d3ce <_malloc_r+0x302>
 800d4a2:	0039      	movs	r1, r7
 800d4a4:	9801      	ldr	r0, [sp, #4]
 800d4a6:	3108      	adds	r1, #8
 800d4a8:	f000 fc22 	bl	800dcf0 <_free_r>
 800d4ac:	e78f      	b.n	800d3ce <_malloc_r+0x302>
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	0018      	movs	r0, r3
 800d4b2:	4907      	ldr	r1, [pc, #28]	; (800d4d0 <_malloc_r+0x404>)
 800d4b4:	4328      	orrs	r0, r5
 800d4b6:	688c      	ldr	r4, [r1, #8]
 800d4b8:	4313      	orrs	r3, r2
 800d4ba:	1965      	adds	r5, r4, r5
 800d4bc:	6060      	str	r0, [r4, #4]
 800d4be:	608d      	str	r5, [r1, #8]
 800d4c0:	606b      	str	r3, [r5, #4]
 800d4c2:	e638      	b.n	800d136 <_malloc_r+0x6a>
 800d4c4:	2000052c 	.word	0x2000052c
 800d4c8:	00000080 	.word	0x00000080
 800d4cc:	20000e7c 	.word	0x20000e7c
 800d4d0:	20000124 	.word	0x20000124

0800d4d4 <memchr>:
 800d4d4:	b2c9      	uxtb	r1, r1
 800d4d6:	1882      	adds	r2, r0, r2
 800d4d8:	4290      	cmp	r0, r2
 800d4da:	d101      	bne.n	800d4e0 <memchr+0xc>
 800d4dc:	2000      	movs	r0, #0
 800d4de:	4770      	bx	lr
 800d4e0:	7803      	ldrb	r3, [r0, #0]
 800d4e2:	428b      	cmp	r3, r1
 800d4e4:	d0fb      	beq.n	800d4de <memchr+0xa>
 800d4e6:	3001      	adds	r0, #1
 800d4e8:	e7f6      	b.n	800d4d8 <memchr+0x4>
	...

0800d4ec <__malloc_lock>:
 800d4ec:	b510      	push	{r4, lr}
 800d4ee:	4802      	ldr	r0, [pc, #8]	; (800d4f8 <__malloc_lock+0xc>)
 800d4f0:	f000 fcb2 	bl	800de58 <__retarget_lock_acquire_recursive>
 800d4f4:	bd10      	pop	{r4, pc}
 800d4f6:	46c0      	nop			; (mov r8, r8)
 800d4f8:	20001068 	.word	0x20001068

0800d4fc <__malloc_unlock>:
 800d4fc:	b510      	push	{r4, lr}
 800d4fe:	4802      	ldr	r0, [pc, #8]	; (800d508 <__malloc_unlock+0xc>)
 800d500:	f000 fcab 	bl	800de5a <__retarget_lock_release_recursive>
 800d504:	bd10      	pop	{r4, pc}
 800d506:	46c0      	nop			; (mov r8, r8)
 800d508:	20001068 	.word	0x20001068

0800d50c <_Balloc>:
 800d50c:	b570      	push	{r4, r5, r6, lr}
 800d50e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d510:	0004      	movs	r4, r0
 800d512:	000d      	movs	r5, r1
 800d514:	2e00      	cmp	r6, #0
 800d516:	d107      	bne.n	800d528 <_Balloc+0x1c>
 800d518:	2010      	movs	r0, #16
 800d51a:	f7ff fdcd 	bl	800d0b8 <malloc>
 800d51e:	6260      	str	r0, [r4, #36]	; 0x24
 800d520:	6046      	str	r6, [r0, #4]
 800d522:	6086      	str	r6, [r0, #8]
 800d524:	6006      	str	r6, [r0, #0]
 800d526:	60c6      	str	r6, [r0, #12]
 800d528:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d52a:	68f3      	ldr	r3, [r6, #12]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d013      	beq.n	800d558 <_Balloc+0x4c>
 800d530:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d532:	00aa      	lsls	r2, r5, #2
 800d534:	68db      	ldr	r3, [r3, #12]
 800d536:	189b      	adds	r3, r3, r2
 800d538:	6818      	ldr	r0, [r3, #0]
 800d53a:	2800      	cmp	r0, #0
 800d53c:	d118      	bne.n	800d570 <_Balloc+0x64>
 800d53e:	2101      	movs	r1, #1
 800d540:	000e      	movs	r6, r1
 800d542:	40ae      	lsls	r6, r5
 800d544:	1d72      	adds	r2, r6, #5
 800d546:	0092      	lsls	r2, r2, #2
 800d548:	0020      	movs	r0, r4
 800d54a:	f000 fb51 	bl	800dbf0 <_calloc_r>
 800d54e:	2800      	cmp	r0, #0
 800d550:	d00c      	beq.n	800d56c <_Balloc+0x60>
 800d552:	6045      	str	r5, [r0, #4]
 800d554:	6086      	str	r6, [r0, #8]
 800d556:	e00d      	b.n	800d574 <_Balloc+0x68>
 800d558:	2221      	movs	r2, #33	; 0x21
 800d55a:	2104      	movs	r1, #4
 800d55c:	0020      	movs	r0, r4
 800d55e:	f000 fb47 	bl	800dbf0 <_calloc_r>
 800d562:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d564:	60f0      	str	r0, [r6, #12]
 800d566:	68db      	ldr	r3, [r3, #12]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d1e1      	bne.n	800d530 <_Balloc+0x24>
 800d56c:	2000      	movs	r0, #0
 800d56e:	bd70      	pop	{r4, r5, r6, pc}
 800d570:	6802      	ldr	r2, [r0, #0]
 800d572:	601a      	str	r2, [r3, #0]
 800d574:	2300      	movs	r3, #0
 800d576:	6103      	str	r3, [r0, #16]
 800d578:	60c3      	str	r3, [r0, #12]
 800d57a:	e7f8      	b.n	800d56e <_Balloc+0x62>

0800d57c <_Bfree>:
 800d57c:	b570      	push	{r4, r5, r6, lr}
 800d57e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d580:	0006      	movs	r6, r0
 800d582:	000d      	movs	r5, r1
 800d584:	2c00      	cmp	r4, #0
 800d586:	d107      	bne.n	800d598 <_Bfree+0x1c>
 800d588:	2010      	movs	r0, #16
 800d58a:	f7ff fd95 	bl	800d0b8 <malloc>
 800d58e:	6270      	str	r0, [r6, #36]	; 0x24
 800d590:	6044      	str	r4, [r0, #4]
 800d592:	6084      	str	r4, [r0, #8]
 800d594:	6004      	str	r4, [r0, #0]
 800d596:	60c4      	str	r4, [r0, #12]
 800d598:	2d00      	cmp	r5, #0
 800d59a:	d007      	beq.n	800d5ac <_Bfree+0x30>
 800d59c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d59e:	686a      	ldr	r2, [r5, #4]
 800d5a0:	68db      	ldr	r3, [r3, #12]
 800d5a2:	0092      	lsls	r2, r2, #2
 800d5a4:	189b      	adds	r3, r3, r2
 800d5a6:	681a      	ldr	r2, [r3, #0]
 800d5a8:	602a      	str	r2, [r5, #0]
 800d5aa:	601d      	str	r5, [r3, #0]
 800d5ac:	bd70      	pop	{r4, r5, r6, pc}

0800d5ae <__multadd>:
 800d5ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d5b0:	001e      	movs	r6, r3
 800d5b2:	2314      	movs	r3, #20
 800d5b4:	469c      	mov	ip, r3
 800d5b6:	0007      	movs	r7, r0
 800d5b8:	000c      	movs	r4, r1
 800d5ba:	2000      	movs	r0, #0
 800d5bc:	690d      	ldr	r5, [r1, #16]
 800d5be:	448c      	add	ip, r1
 800d5c0:	4663      	mov	r3, ip
 800d5c2:	8819      	ldrh	r1, [r3, #0]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	4351      	muls	r1, r2
 800d5c8:	0c1b      	lsrs	r3, r3, #16
 800d5ca:	4353      	muls	r3, r2
 800d5cc:	1989      	adds	r1, r1, r6
 800d5ce:	0c0e      	lsrs	r6, r1, #16
 800d5d0:	199b      	adds	r3, r3, r6
 800d5d2:	b289      	uxth	r1, r1
 800d5d4:	0c1e      	lsrs	r6, r3, #16
 800d5d6:	041b      	lsls	r3, r3, #16
 800d5d8:	185b      	adds	r3, r3, r1
 800d5da:	4661      	mov	r1, ip
 800d5dc:	3001      	adds	r0, #1
 800d5de:	c108      	stmia	r1!, {r3}
 800d5e0:	468c      	mov	ip, r1
 800d5e2:	4285      	cmp	r5, r0
 800d5e4:	dcec      	bgt.n	800d5c0 <__multadd+0x12>
 800d5e6:	2e00      	cmp	r6, #0
 800d5e8:	d01b      	beq.n	800d622 <__multadd+0x74>
 800d5ea:	68a3      	ldr	r3, [r4, #8]
 800d5ec:	429d      	cmp	r5, r3
 800d5ee:	db12      	blt.n	800d616 <__multadd+0x68>
 800d5f0:	6863      	ldr	r3, [r4, #4]
 800d5f2:	0038      	movs	r0, r7
 800d5f4:	1c59      	adds	r1, r3, #1
 800d5f6:	f7ff ff89 	bl	800d50c <_Balloc>
 800d5fa:	0021      	movs	r1, r4
 800d5fc:	6923      	ldr	r3, [r4, #16]
 800d5fe:	9001      	str	r0, [sp, #4]
 800d600:	1c9a      	adds	r2, r3, #2
 800d602:	0092      	lsls	r2, r2, #2
 800d604:	310c      	adds	r1, #12
 800d606:	300c      	adds	r0, #12
 800d608:	f7fd fe32 	bl	800b270 <memcpy>
 800d60c:	0021      	movs	r1, r4
 800d60e:	0038      	movs	r0, r7
 800d610:	f7ff ffb4 	bl	800d57c <_Bfree>
 800d614:	9c01      	ldr	r4, [sp, #4]
 800d616:	1d2b      	adds	r3, r5, #4
 800d618:	009b      	lsls	r3, r3, #2
 800d61a:	18e3      	adds	r3, r4, r3
 800d61c:	3501      	adds	r5, #1
 800d61e:	605e      	str	r6, [r3, #4]
 800d620:	6125      	str	r5, [r4, #16]
 800d622:	0020      	movs	r0, r4
 800d624:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800d626 <__hi0bits>:
 800d626:	0003      	movs	r3, r0
 800d628:	0c02      	lsrs	r2, r0, #16
 800d62a:	2000      	movs	r0, #0
 800d62c:	4282      	cmp	r2, r0
 800d62e:	d101      	bne.n	800d634 <__hi0bits+0xe>
 800d630:	041b      	lsls	r3, r3, #16
 800d632:	3010      	adds	r0, #16
 800d634:	0e1a      	lsrs	r2, r3, #24
 800d636:	d101      	bne.n	800d63c <__hi0bits+0x16>
 800d638:	3008      	adds	r0, #8
 800d63a:	021b      	lsls	r3, r3, #8
 800d63c:	0f1a      	lsrs	r2, r3, #28
 800d63e:	d101      	bne.n	800d644 <__hi0bits+0x1e>
 800d640:	3004      	adds	r0, #4
 800d642:	011b      	lsls	r3, r3, #4
 800d644:	0f9a      	lsrs	r2, r3, #30
 800d646:	d101      	bne.n	800d64c <__hi0bits+0x26>
 800d648:	3002      	adds	r0, #2
 800d64a:	009b      	lsls	r3, r3, #2
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	db03      	blt.n	800d658 <__hi0bits+0x32>
 800d650:	3001      	adds	r0, #1
 800d652:	005b      	lsls	r3, r3, #1
 800d654:	d400      	bmi.n	800d658 <__hi0bits+0x32>
 800d656:	2020      	movs	r0, #32
 800d658:	4770      	bx	lr

0800d65a <__lo0bits>:
 800d65a:	2207      	movs	r2, #7
 800d65c:	6803      	ldr	r3, [r0, #0]
 800d65e:	b510      	push	{r4, lr}
 800d660:	0001      	movs	r1, r0
 800d662:	401a      	ands	r2, r3
 800d664:	d00d      	beq.n	800d682 <__lo0bits+0x28>
 800d666:	2401      	movs	r4, #1
 800d668:	2000      	movs	r0, #0
 800d66a:	4223      	tst	r3, r4
 800d66c:	d105      	bne.n	800d67a <__lo0bits+0x20>
 800d66e:	3002      	adds	r0, #2
 800d670:	4203      	tst	r3, r0
 800d672:	d003      	beq.n	800d67c <__lo0bits+0x22>
 800d674:	40e3      	lsrs	r3, r4
 800d676:	0020      	movs	r0, r4
 800d678:	600b      	str	r3, [r1, #0]
 800d67a:	bd10      	pop	{r4, pc}
 800d67c:	089b      	lsrs	r3, r3, #2
 800d67e:	600b      	str	r3, [r1, #0]
 800d680:	e7fb      	b.n	800d67a <__lo0bits+0x20>
 800d682:	b29c      	uxth	r4, r3
 800d684:	0010      	movs	r0, r2
 800d686:	2c00      	cmp	r4, #0
 800d688:	d101      	bne.n	800d68e <__lo0bits+0x34>
 800d68a:	2010      	movs	r0, #16
 800d68c:	0c1b      	lsrs	r3, r3, #16
 800d68e:	b2da      	uxtb	r2, r3
 800d690:	2a00      	cmp	r2, #0
 800d692:	d101      	bne.n	800d698 <__lo0bits+0x3e>
 800d694:	3008      	adds	r0, #8
 800d696:	0a1b      	lsrs	r3, r3, #8
 800d698:	071a      	lsls	r2, r3, #28
 800d69a:	d101      	bne.n	800d6a0 <__lo0bits+0x46>
 800d69c:	3004      	adds	r0, #4
 800d69e:	091b      	lsrs	r3, r3, #4
 800d6a0:	079a      	lsls	r2, r3, #30
 800d6a2:	d101      	bne.n	800d6a8 <__lo0bits+0x4e>
 800d6a4:	3002      	adds	r0, #2
 800d6a6:	089b      	lsrs	r3, r3, #2
 800d6a8:	07da      	lsls	r2, r3, #31
 800d6aa:	d4e8      	bmi.n	800d67e <__lo0bits+0x24>
 800d6ac:	085b      	lsrs	r3, r3, #1
 800d6ae:	d001      	beq.n	800d6b4 <__lo0bits+0x5a>
 800d6b0:	3001      	adds	r0, #1
 800d6b2:	e7e4      	b.n	800d67e <__lo0bits+0x24>
 800d6b4:	2020      	movs	r0, #32
 800d6b6:	e7e0      	b.n	800d67a <__lo0bits+0x20>

0800d6b8 <__i2b>:
 800d6b8:	b510      	push	{r4, lr}
 800d6ba:	000c      	movs	r4, r1
 800d6bc:	2101      	movs	r1, #1
 800d6be:	f7ff ff25 	bl	800d50c <_Balloc>
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	6144      	str	r4, [r0, #20]
 800d6c6:	6103      	str	r3, [r0, #16]
 800d6c8:	bd10      	pop	{r4, pc}

0800d6ca <__multiply>:
 800d6ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6cc:	690b      	ldr	r3, [r1, #16]
 800d6ce:	0015      	movs	r5, r2
 800d6d0:	6912      	ldr	r2, [r2, #16]
 800d6d2:	b089      	sub	sp, #36	; 0x24
 800d6d4:	000c      	movs	r4, r1
 800d6d6:	4293      	cmp	r3, r2
 800d6d8:	da01      	bge.n	800d6de <__multiply+0x14>
 800d6da:	002c      	movs	r4, r5
 800d6dc:	000d      	movs	r5, r1
 800d6de:	6927      	ldr	r7, [r4, #16]
 800d6e0:	692e      	ldr	r6, [r5, #16]
 800d6e2:	68a2      	ldr	r2, [r4, #8]
 800d6e4:	19bb      	adds	r3, r7, r6
 800d6e6:	6861      	ldr	r1, [r4, #4]
 800d6e8:	9301      	str	r3, [sp, #4]
 800d6ea:	4293      	cmp	r3, r2
 800d6ec:	dd00      	ble.n	800d6f0 <__multiply+0x26>
 800d6ee:	3101      	adds	r1, #1
 800d6f0:	f7ff ff0c 	bl	800d50c <_Balloc>
 800d6f4:	0003      	movs	r3, r0
 800d6f6:	3314      	adds	r3, #20
 800d6f8:	9300      	str	r3, [sp, #0]
 800d6fa:	9a00      	ldr	r2, [sp, #0]
 800d6fc:	19bb      	adds	r3, r7, r6
 800d6fe:	4694      	mov	ip, r2
 800d700:	009b      	lsls	r3, r3, #2
 800d702:	449c      	add	ip, r3
 800d704:	0013      	movs	r3, r2
 800d706:	2200      	movs	r2, #0
 800d708:	9004      	str	r0, [sp, #16]
 800d70a:	4563      	cmp	r3, ip
 800d70c:	d31c      	bcc.n	800d748 <__multiply+0x7e>
 800d70e:	002a      	movs	r2, r5
 800d710:	3414      	adds	r4, #20
 800d712:	00bf      	lsls	r7, r7, #2
 800d714:	19e3      	adds	r3, r4, r7
 800d716:	3214      	adds	r2, #20
 800d718:	00b6      	lsls	r6, r6, #2
 800d71a:	9305      	str	r3, [sp, #20]
 800d71c:	1993      	adds	r3, r2, r6
 800d71e:	9402      	str	r4, [sp, #8]
 800d720:	9306      	str	r3, [sp, #24]
 800d722:	9b06      	ldr	r3, [sp, #24]
 800d724:	429a      	cmp	r2, r3
 800d726:	d311      	bcc.n	800d74c <__multiply+0x82>
 800d728:	9b01      	ldr	r3, [sp, #4]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	dd06      	ble.n	800d73c <__multiply+0x72>
 800d72e:	2304      	movs	r3, #4
 800d730:	425b      	negs	r3, r3
 800d732:	449c      	add	ip, r3
 800d734:	4663      	mov	r3, ip
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d051      	beq.n	800d7e0 <__multiply+0x116>
 800d73c:	9b04      	ldr	r3, [sp, #16]
 800d73e:	9a01      	ldr	r2, [sp, #4]
 800d740:	0018      	movs	r0, r3
 800d742:	611a      	str	r2, [r3, #16]
 800d744:	b009      	add	sp, #36	; 0x24
 800d746:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d748:	c304      	stmia	r3!, {r2}
 800d74a:	e7de      	b.n	800d70a <__multiply+0x40>
 800d74c:	8814      	ldrh	r4, [r2, #0]
 800d74e:	2c00      	cmp	r4, #0
 800d750:	d01e      	beq.n	800d790 <__multiply+0xc6>
 800d752:	2600      	movs	r6, #0
 800d754:	9d00      	ldr	r5, [sp, #0]
 800d756:	9f02      	ldr	r7, [sp, #8]
 800d758:	cf01      	ldmia	r7!, {r0}
 800d75a:	9507      	str	r5, [sp, #28]
 800d75c:	cd08      	ldmia	r5!, {r3}
 800d75e:	9303      	str	r3, [sp, #12]
 800d760:	b283      	uxth	r3, r0
 800d762:	4363      	muls	r3, r4
 800d764:	0019      	movs	r1, r3
 800d766:	466b      	mov	r3, sp
 800d768:	0c00      	lsrs	r0, r0, #16
 800d76a:	899b      	ldrh	r3, [r3, #12]
 800d76c:	4360      	muls	r0, r4
 800d76e:	18cb      	adds	r3, r1, r3
 800d770:	9903      	ldr	r1, [sp, #12]
 800d772:	199b      	adds	r3, r3, r6
 800d774:	0c09      	lsrs	r1, r1, #16
 800d776:	1841      	adds	r1, r0, r1
 800d778:	0c18      	lsrs	r0, r3, #16
 800d77a:	1809      	adds	r1, r1, r0
 800d77c:	0c0e      	lsrs	r6, r1, #16
 800d77e:	b29b      	uxth	r3, r3
 800d780:	0409      	lsls	r1, r1, #16
 800d782:	430b      	orrs	r3, r1
 800d784:	9907      	ldr	r1, [sp, #28]
 800d786:	600b      	str	r3, [r1, #0]
 800d788:	9b05      	ldr	r3, [sp, #20]
 800d78a:	42bb      	cmp	r3, r7
 800d78c:	d8e4      	bhi.n	800d758 <__multiply+0x8e>
 800d78e:	602e      	str	r6, [r5, #0]
 800d790:	6813      	ldr	r3, [r2, #0]
 800d792:	0c1b      	lsrs	r3, r3, #16
 800d794:	9303      	str	r3, [sp, #12]
 800d796:	d01e      	beq.n	800d7d6 <__multiply+0x10c>
 800d798:	2600      	movs	r6, #0
 800d79a:	9b00      	ldr	r3, [sp, #0]
 800d79c:	9c02      	ldr	r4, [sp, #8]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	9800      	ldr	r0, [sp, #0]
 800d7a2:	0007      	movs	r7, r0
 800d7a4:	8821      	ldrh	r1, [r4, #0]
 800d7a6:	9d03      	ldr	r5, [sp, #12]
 800d7a8:	b29b      	uxth	r3, r3
 800d7aa:	4369      	muls	r1, r5
 800d7ac:	c820      	ldmia	r0!, {r5}
 800d7ae:	0c2d      	lsrs	r5, r5, #16
 800d7b0:	1949      	adds	r1, r1, r5
 800d7b2:	198e      	adds	r6, r1, r6
 800d7b4:	0431      	lsls	r1, r6, #16
 800d7b6:	430b      	orrs	r3, r1
 800d7b8:	603b      	str	r3, [r7, #0]
 800d7ba:	cc08      	ldmia	r4!, {r3}
 800d7bc:	9903      	ldr	r1, [sp, #12]
 800d7be:	0c1b      	lsrs	r3, r3, #16
 800d7c0:	434b      	muls	r3, r1
 800d7c2:	6879      	ldr	r1, [r7, #4]
 800d7c4:	0c36      	lsrs	r6, r6, #16
 800d7c6:	b289      	uxth	r1, r1
 800d7c8:	185b      	adds	r3, r3, r1
 800d7ca:	9905      	ldr	r1, [sp, #20]
 800d7cc:	199b      	adds	r3, r3, r6
 800d7ce:	0c1e      	lsrs	r6, r3, #16
 800d7d0:	42a1      	cmp	r1, r4
 800d7d2:	d8e6      	bhi.n	800d7a2 <__multiply+0xd8>
 800d7d4:	6003      	str	r3, [r0, #0]
 800d7d6:	9b00      	ldr	r3, [sp, #0]
 800d7d8:	3204      	adds	r2, #4
 800d7da:	3304      	adds	r3, #4
 800d7dc:	9300      	str	r3, [sp, #0]
 800d7de:	e7a0      	b.n	800d722 <__multiply+0x58>
 800d7e0:	9b01      	ldr	r3, [sp, #4]
 800d7e2:	3b01      	subs	r3, #1
 800d7e4:	9301      	str	r3, [sp, #4]
 800d7e6:	e79f      	b.n	800d728 <__multiply+0x5e>

0800d7e8 <__pow5mult>:
 800d7e8:	2303      	movs	r3, #3
 800d7ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d7ec:	4013      	ands	r3, r2
 800d7ee:	0005      	movs	r5, r0
 800d7f0:	000e      	movs	r6, r1
 800d7f2:	0014      	movs	r4, r2
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d008      	beq.n	800d80a <__pow5mult+0x22>
 800d7f8:	4922      	ldr	r1, [pc, #136]	; (800d884 <__pow5mult+0x9c>)
 800d7fa:	3b01      	subs	r3, #1
 800d7fc:	009a      	lsls	r2, r3, #2
 800d7fe:	5852      	ldr	r2, [r2, r1]
 800d800:	2300      	movs	r3, #0
 800d802:	0031      	movs	r1, r6
 800d804:	f7ff fed3 	bl	800d5ae <__multadd>
 800d808:	0006      	movs	r6, r0
 800d80a:	10a3      	asrs	r3, r4, #2
 800d80c:	9301      	str	r3, [sp, #4]
 800d80e:	d036      	beq.n	800d87e <__pow5mult+0x96>
 800d810:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800d812:	2c00      	cmp	r4, #0
 800d814:	d107      	bne.n	800d826 <__pow5mult+0x3e>
 800d816:	2010      	movs	r0, #16
 800d818:	f7ff fc4e 	bl	800d0b8 <malloc>
 800d81c:	6268      	str	r0, [r5, #36]	; 0x24
 800d81e:	6044      	str	r4, [r0, #4]
 800d820:	6084      	str	r4, [r0, #8]
 800d822:	6004      	str	r4, [r0, #0]
 800d824:	60c4      	str	r4, [r0, #12]
 800d826:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800d828:	68bc      	ldr	r4, [r7, #8]
 800d82a:	2c00      	cmp	r4, #0
 800d82c:	d107      	bne.n	800d83e <__pow5mult+0x56>
 800d82e:	4916      	ldr	r1, [pc, #88]	; (800d888 <__pow5mult+0xa0>)
 800d830:	0028      	movs	r0, r5
 800d832:	f7ff ff41 	bl	800d6b8 <__i2b>
 800d836:	2300      	movs	r3, #0
 800d838:	0004      	movs	r4, r0
 800d83a:	60b8      	str	r0, [r7, #8]
 800d83c:	6003      	str	r3, [r0, #0]
 800d83e:	2201      	movs	r2, #1
 800d840:	9b01      	ldr	r3, [sp, #4]
 800d842:	4213      	tst	r3, r2
 800d844:	d00a      	beq.n	800d85c <__pow5mult+0x74>
 800d846:	0031      	movs	r1, r6
 800d848:	0022      	movs	r2, r4
 800d84a:	0028      	movs	r0, r5
 800d84c:	f7ff ff3d 	bl	800d6ca <__multiply>
 800d850:	0007      	movs	r7, r0
 800d852:	0031      	movs	r1, r6
 800d854:	0028      	movs	r0, r5
 800d856:	f7ff fe91 	bl	800d57c <_Bfree>
 800d85a:	003e      	movs	r6, r7
 800d85c:	9b01      	ldr	r3, [sp, #4]
 800d85e:	105b      	asrs	r3, r3, #1
 800d860:	9301      	str	r3, [sp, #4]
 800d862:	d00c      	beq.n	800d87e <__pow5mult+0x96>
 800d864:	6820      	ldr	r0, [r4, #0]
 800d866:	2800      	cmp	r0, #0
 800d868:	d107      	bne.n	800d87a <__pow5mult+0x92>
 800d86a:	0022      	movs	r2, r4
 800d86c:	0021      	movs	r1, r4
 800d86e:	0028      	movs	r0, r5
 800d870:	f7ff ff2b 	bl	800d6ca <__multiply>
 800d874:	2300      	movs	r3, #0
 800d876:	6020      	str	r0, [r4, #0]
 800d878:	6003      	str	r3, [r0, #0]
 800d87a:	0004      	movs	r4, r0
 800d87c:	e7df      	b.n	800d83e <__pow5mult+0x56>
 800d87e:	0030      	movs	r0, r6
 800d880:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d882:	46c0      	nop			; (mov r8, r8)
 800d884:	0800e898 	.word	0x0800e898
 800d888:	00000271 	.word	0x00000271

0800d88c <__lshift>:
 800d88c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d88e:	000d      	movs	r5, r1
 800d890:	0017      	movs	r7, r2
 800d892:	692b      	ldr	r3, [r5, #16]
 800d894:	1154      	asrs	r4, r2, #5
 800d896:	b085      	sub	sp, #20
 800d898:	18e3      	adds	r3, r4, r3
 800d89a:	9302      	str	r3, [sp, #8]
 800d89c:	3301      	adds	r3, #1
 800d89e:	9301      	str	r3, [sp, #4]
 800d8a0:	6849      	ldr	r1, [r1, #4]
 800d8a2:	68ab      	ldr	r3, [r5, #8]
 800d8a4:	9003      	str	r0, [sp, #12]
 800d8a6:	9a01      	ldr	r2, [sp, #4]
 800d8a8:	4293      	cmp	r3, r2
 800d8aa:	db34      	blt.n	800d916 <__lshift+0x8a>
 800d8ac:	9803      	ldr	r0, [sp, #12]
 800d8ae:	f7ff fe2d 	bl	800d50c <_Balloc>
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	0002      	movs	r2, r0
 800d8b6:	0006      	movs	r6, r0
 800d8b8:	0019      	movs	r1, r3
 800d8ba:	3214      	adds	r2, #20
 800d8bc:	42a3      	cmp	r3, r4
 800d8be:	db2d      	blt.n	800d91c <__lshift+0x90>
 800d8c0:	43e3      	mvns	r3, r4
 800d8c2:	17db      	asrs	r3, r3, #31
 800d8c4:	401c      	ands	r4, r3
 800d8c6:	002b      	movs	r3, r5
 800d8c8:	211f      	movs	r1, #31
 800d8ca:	00a4      	lsls	r4, r4, #2
 800d8cc:	1914      	adds	r4, r2, r4
 800d8ce:	692a      	ldr	r2, [r5, #16]
 800d8d0:	3314      	adds	r3, #20
 800d8d2:	0092      	lsls	r2, r2, #2
 800d8d4:	189a      	adds	r2, r3, r2
 800d8d6:	400f      	ands	r7, r1
 800d8d8:	d024      	beq.n	800d924 <__lshift+0x98>
 800d8da:	3101      	adds	r1, #1
 800d8dc:	1bc9      	subs	r1, r1, r7
 800d8de:	468c      	mov	ip, r1
 800d8e0:	2100      	movs	r1, #0
 800d8e2:	6818      	ldr	r0, [r3, #0]
 800d8e4:	40b8      	lsls	r0, r7
 800d8e6:	4301      	orrs	r1, r0
 800d8e8:	4660      	mov	r0, ip
 800d8ea:	6021      	str	r1, [r4, #0]
 800d8ec:	cb02      	ldmia	r3!, {r1}
 800d8ee:	3404      	adds	r4, #4
 800d8f0:	40c1      	lsrs	r1, r0
 800d8f2:	429a      	cmp	r2, r3
 800d8f4:	d8f5      	bhi.n	800d8e2 <__lshift+0x56>
 800d8f6:	6021      	str	r1, [r4, #0]
 800d8f8:	2900      	cmp	r1, #0
 800d8fa:	d002      	beq.n	800d902 <__lshift+0x76>
 800d8fc:	9b02      	ldr	r3, [sp, #8]
 800d8fe:	3302      	adds	r3, #2
 800d900:	9301      	str	r3, [sp, #4]
 800d902:	9b01      	ldr	r3, [sp, #4]
 800d904:	9803      	ldr	r0, [sp, #12]
 800d906:	3b01      	subs	r3, #1
 800d908:	6133      	str	r3, [r6, #16]
 800d90a:	0029      	movs	r1, r5
 800d90c:	f7ff fe36 	bl	800d57c <_Bfree>
 800d910:	0030      	movs	r0, r6
 800d912:	b005      	add	sp, #20
 800d914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d916:	3101      	adds	r1, #1
 800d918:	005b      	lsls	r3, r3, #1
 800d91a:	e7c4      	b.n	800d8a6 <__lshift+0x1a>
 800d91c:	0098      	lsls	r0, r3, #2
 800d91e:	5011      	str	r1, [r2, r0]
 800d920:	3301      	adds	r3, #1
 800d922:	e7cb      	b.n	800d8bc <__lshift+0x30>
 800d924:	cb02      	ldmia	r3!, {r1}
 800d926:	c402      	stmia	r4!, {r1}
 800d928:	429a      	cmp	r2, r3
 800d92a:	d8fb      	bhi.n	800d924 <__lshift+0x98>
 800d92c:	e7e9      	b.n	800d902 <__lshift+0x76>

0800d92e <__mcmp>:
 800d92e:	690a      	ldr	r2, [r1, #16]
 800d930:	6903      	ldr	r3, [r0, #16]
 800d932:	b530      	push	{r4, r5, lr}
 800d934:	1a9b      	subs	r3, r3, r2
 800d936:	d10e      	bne.n	800d956 <__mcmp+0x28>
 800d938:	0092      	lsls	r2, r2, #2
 800d93a:	3014      	adds	r0, #20
 800d93c:	3114      	adds	r1, #20
 800d93e:	1884      	adds	r4, r0, r2
 800d940:	1889      	adds	r1, r1, r2
 800d942:	3c04      	subs	r4, #4
 800d944:	3904      	subs	r1, #4
 800d946:	6822      	ldr	r2, [r4, #0]
 800d948:	680d      	ldr	r5, [r1, #0]
 800d94a:	42aa      	cmp	r2, r5
 800d94c:	d005      	beq.n	800d95a <__mcmp+0x2c>
 800d94e:	42aa      	cmp	r2, r5
 800d950:	4192      	sbcs	r2, r2
 800d952:	2301      	movs	r3, #1
 800d954:	4313      	orrs	r3, r2
 800d956:	0018      	movs	r0, r3
 800d958:	bd30      	pop	{r4, r5, pc}
 800d95a:	42a0      	cmp	r0, r4
 800d95c:	d3f1      	bcc.n	800d942 <__mcmp+0x14>
 800d95e:	e7fa      	b.n	800d956 <__mcmp+0x28>

0800d960 <__mdiff>:
 800d960:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d962:	000d      	movs	r5, r1
 800d964:	b085      	sub	sp, #20
 800d966:	0007      	movs	r7, r0
 800d968:	0011      	movs	r1, r2
 800d96a:	0028      	movs	r0, r5
 800d96c:	0014      	movs	r4, r2
 800d96e:	f7ff ffde 	bl	800d92e <__mcmp>
 800d972:	1e06      	subs	r6, r0, #0
 800d974:	d108      	bne.n	800d988 <__mdiff+0x28>
 800d976:	0001      	movs	r1, r0
 800d978:	0038      	movs	r0, r7
 800d97a:	f7ff fdc7 	bl	800d50c <_Balloc>
 800d97e:	2301      	movs	r3, #1
 800d980:	6146      	str	r6, [r0, #20]
 800d982:	6103      	str	r3, [r0, #16]
 800d984:	b005      	add	sp, #20
 800d986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d988:	2301      	movs	r3, #1
 800d98a:	9301      	str	r3, [sp, #4]
 800d98c:	2800      	cmp	r0, #0
 800d98e:	db04      	blt.n	800d99a <__mdiff+0x3a>
 800d990:	0023      	movs	r3, r4
 800d992:	002c      	movs	r4, r5
 800d994:	001d      	movs	r5, r3
 800d996:	2300      	movs	r3, #0
 800d998:	9301      	str	r3, [sp, #4]
 800d99a:	6861      	ldr	r1, [r4, #4]
 800d99c:	0038      	movs	r0, r7
 800d99e:	f7ff fdb5 	bl	800d50c <_Balloc>
 800d9a2:	002f      	movs	r7, r5
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	9b01      	ldr	r3, [sp, #4]
 800d9a8:	6926      	ldr	r6, [r4, #16]
 800d9aa:	60c3      	str	r3, [r0, #12]
 800d9ac:	3414      	adds	r4, #20
 800d9ae:	00b3      	lsls	r3, r6, #2
 800d9b0:	18e3      	adds	r3, r4, r3
 800d9b2:	9302      	str	r3, [sp, #8]
 800d9b4:	692b      	ldr	r3, [r5, #16]
 800d9b6:	3714      	adds	r7, #20
 800d9b8:	009b      	lsls	r3, r3, #2
 800d9ba:	18fb      	adds	r3, r7, r3
 800d9bc:	9303      	str	r3, [sp, #12]
 800d9be:	0003      	movs	r3, r0
 800d9c0:	4694      	mov	ip, r2
 800d9c2:	3314      	adds	r3, #20
 800d9c4:	cc20      	ldmia	r4!, {r5}
 800d9c6:	cf04      	ldmia	r7!, {r2}
 800d9c8:	9201      	str	r2, [sp, #4]
 800d9ca:	b2aa      	uxth	r2, r5
 800d9cc:	4494      	add	ip, r2
 800d9ce:	466a      	mov	r2, sp
 800d9d0:	4661      	mov	r1, ip
 800d9d2:	8892      	ldrh	r2, [r2, #4]
 800d9d4:	0c2d      	lsrs	r5, r5, #16
 800d9d6:	1a8a      	subs	r2, r1, r2
 800d9d8:	9901      	ldr	r1, [sp, #4]
 800d9da:	0c09      	lsrs	r1, r1, #16
 800d9dc:	1a69      	subs	r1, r5, r1
 800d9de:	1415      	asrs	r5, r2, #16
 800d9e0:	1949      	adds	r1, r1, r5
 800d9e2:	140d      	asrs	r5, r1, #16
 800d9e4:	b292      	uxth	r2, r2
 800d9e6:	0409      	lsls	r1, r1, #16
 800d9e8:	430a      	orrs	r2, r1
 800d9ea:	601a      	str	r2, [r3, #0]
 800d9ec:	9a03      	ldr	r2, [sp, #12]
 800d9ee:	46ac      	mov	ip, r5
 800d9f0:	3304      	adds	r3, #4
 800d9f2:	42ba      	cmp	r2, r7
 800d9f4:	d8e6      	bhi.n	800d9c4 <__mdiff+0x64>
 800d9f6:	9902      	ldr	r1, [sp, #8]
 800d9f8:	001a      	movs	r2, r3
 800d9fa:	428c      	cmp	r4, r1
 800d9fc:	d305      	bcc.n	800da0a <__mdiff+0xaa>
 800d9fe:	3a04      	subs	r2, #4
 800da00:	6813      	ldr	r3, [r2, #0]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d00e      	beq.n	800da24 <__mdiff+0xc4>
 800da06:	6106      	str	r6, [r0, #16]
 800da08:	e7bc      	b.n	800d984 <__mdiff+0x24>
 800da0a:	cc04      	ldmia	r4!, {r2}
 800da0c:	b291      	uxth	r1, r2
 800da0e:	4461      	add	r1, ip
 800da10:	140d      	asrs	r5, r1, #16
 800da12:	0c12      	lsrs	r2, r2, #16
 800da14:	1952      	adds	r2, r2, r5
 800da16:	1415      	asrs	r5, r2, #16
 800da18:	b289      	uxth	r1, r1
 800da1a:	0412      	lsls	r2, r2, #16
 800da1c:	430a      	orrs	r2, r1
 800da1e:	46ac      	mov	ip, r5
 800da20:	c304      	stmia	r3!, {r2}
 800da22:	e7e8      	b.n	800d9f6 <__mdiff+0x96>
 800da24:	3e01      	subs	r6, #1
 800da26:	e7ea      	b.n	800d9fe <__mdiff+0x9e>

0800da28 <__d2b>:
 800da28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da2a:	001d      	movs	r5, r3
 800da2c:	2101      	movs	r1, #1
 800da2e:	9f08      	ldr	r7, [sp, #32]
 800da30:	0014      	movs	r4, r2
 800da32:	f7ff fd6b 	bl	800d50c <_Balloc>
 800da36:	032b      	lsls	r3, r5, #12
 800da38:	006d      	lsls	r5, r5, #1
 800da3a:	0006      	movs	r6, r0
 800da3c:	0b1b      	lsrs	r3, r3, #12
 800da3e:	0d6d      	lsrs	r5, r5, #21
 800da40:	d124      	bne.n	800da8c <__d2b+0x64>
 800da42:	9301      	str	r3, [sp, #4]
 800da44:	2c00      	cmp	r4, #0
 800da46:	d027      	beq.n	800da98 <__d2b+0x70>
 800da48:	4668      	mov	r0, sp
 800da4a:	9400      	str	r4, [sp, #0]
 800da4c:	f7ff fe05 	bl	800d65a <__lo0bits>
 800da50:	9c00      	ldr	r4, [sp, #0]
 800da52:	2800      	cmp	r0, #0
 800da54:	d01e      	beq.n	800da94 <__d2b+0x6c>
 800da56:	9b01      	ldr	r3, [sp, #4]
 800da58:	2120      	movs	r1, #32
 800da5a:	001a      	movs	r2, r3
 800da5c:	1a09      	subs	r1, r1, r0
 800da5e:	408a      	lsls	r2, r1
 800da60:	40c3      	lsrs	r3, r0
 800da62:	4322      	orrs	r2, r4
 800da64:	6172      	str	r2, [r6, #20]
 800da66:	9301      	str	r3, [sp, #4]
 800da68:	9c01      	ldr	r4, [sp, #4]
 800da6a:	61b4      	str	r4, [r6, #24]
 800da6c:	1e63      	subs	r3, r4, #1
 800da6e:	419c      	sbcs	r4, r3
 800da70:	3401      	adds	r4, #1
 800da72:	6134      	str	r4, [r6, #16]
 800da74:	2d00      	cmp	r5, #0
 800da76:	d018      	beq.n	800daaa <__d2b+0x82>
 800da78:	4b12      	ldr	r3, [pc, #72]	; (800dac4 <__d2b+0x9c>)
 800da7a:	18ed      	adds	r5, r5, r3
 800da7c:	2335      	movs	r3, #53	; 0x35
 800da7e:	182d      	adds	r5, r5, r0
 800da80:	603d      	str	r5, [r7, #0]
 800da82:	1a18      	subs	r0, r3, r0
 800da84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da86:	6018      	str	r0, [r3, #0]
 800da88:	0030      	movs	r0, r6
 800da8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800da8c:	2280      	movs	r2, #128	; 0x80
 800da8e:	0352      	lsls	r2, r2, #13
 800da90:	4313      	orrs	r3, r2
 800da92:	e7d6      	b.n	800da42 <__d2b+0x1a>
 800da94:	6174      	str	r4, [r6, #20]
 800da96:	e7e7      	b.n	800da68 <__d2b+0x40>
 800da98:	a801      	add	r0, sp, #4
 800da9a:	f7ff fdde 	bl	800d65a <__lo0bits>
 800da9e:	2401      	movs	r4, #1
 800daa0:	9b01      	ldr	r3, [sp, #4]
 800daa2:	6134      	str	r4, [r6, #16]
 800daa4:	6173      	str	r3, [r6, #20]
 800daa6:	3020      	adds	r0, #32
 800daa8:	e7e4      	b.n	800da74 <__d2b+0x4c>
 800daaa:	4b07      	ldr	r3, [pc, #28]	; (800dac8 <__d2b+0xa0>)
 800daac:	18c0      	adds	r0, r0, r3
 800daae:	4b07      	ldr	r3, [pc, #28]	; (800dacc <__d2b+0xa4>)
 800dab0:	6038      	str	r0, [r7, #0]
 800dab2:	18e3      	adds	r3, r4, r3
 800dab4:	009b      	lsls	r3, r3, #2
 800dab6:	18f3      	adds	r3, r6, r3
 800dab8:	6958      	ldr	r0, [r3, #20]
 800daba:	f7ff fdb4 	bl	800d626 <__hi0bits>
 800dabe:	0164      	lsls	r4, r4, #5
 800dac0:	1a20      	subs	r0, r4, r0
 800dac2:	e7df      	b.n	800da84 <__d2b+0x5c>
 800dac4:	fffffbcd 	.word	0xfffffbcd
 800dac8:	fffffbce 	.word	0xfffffbce
 800dacc:	3fffffff 	.word	0x3fffffff

0800dad0 <_sbrk_r>:
 800dad0:	2300      	movs	r3, #0
 800dad2:	b570      	push	{r4, r5, r6, lr}
 800dad4:	4c06      	ldr	r4, [pc, #24]	; (800daf0 <_sbrk_r+0x20>)
 800dad6:	0005      	movs	r5, r0
 800dad8:	0008      	movs	r0, r1
 800dada:	6023      	str	r3, [r4, #0]
 800dadc:	f7fd f992 	bl	800ae04 <_sbrk>
 800dae0:	1c43      	adds	r3, r0, #1
 800dae2:	d103      	bne.n	800daec <_sbrk_r+0x1c>
 800dae4:	6823      	ldr	r3, [r4, #0]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d000      	beq.n	800daec <_sbrk_r+0x1c>
 800daea:	602b      	str	r3, [r5, #0]
 800daec:	bd70      	pop	{r4, r5, r6, pc}
 800daee:	46c0      	nop			; (mov r8, r8)
 800daf0:	20001070 	.word	0x20001070

0800daf4 <__ssprint_r>:
 800daf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800daf6:	6893      	ldr	r3, [r2, #8]
 800daf8:	b087      	sub	sp, #28
 800dafa:	9002      	str	r0, [sp, #8]
 800dafc:	000c      	movs	r4, r1
 800dafe:	0016      	movs	r6, r2
 800db00:	2b00      	cmp	r3, #0
 800db02:	d063      	beq.n	800dbcc <__ssprint_r+0xd8>
 800db04:	6813      	ldr	r3, [r2, #0]
 800db06:	9303      	str	r3, [sp, #12]
 800db08:	2300      	movs	r3, #0
 800db0a:	001f      	movs	r7, r3
 800db0c:	9305      	str	r3, [sp, #20]
 800db0e:	2f00      	cmp	r7, #0
 800db10:	d02e      	beq.n	800db70 <__ssprint_r+0x7c>
 800db12:	68a5      	ldr	r5, [r4, #8]
 800db14:	42af      	cmp	r7, r5
 800db16:	d349      	bcc.n	800dbac <__ssprint_r+0xb8>
 800db18:	2390      	movs	r3, #144	; 0x90
 800db1a:	89a2      	ldrh	r2, [r4, #12]
 800db1c:	00db      	lsls	r3, r3, #3
 800db1e:	421a      	tst	r2, r3
 800db20:	d042      	beq.n	800dba8 <__ssprint_r+0xb4>
 800db22:	2003      	movs	r0, #3
 800db24:	6921      	ldr	r1, [r4, #16]
 800db26:	6823      	ldr	r3, [r4, #0]
 800db28:	1a5b      	subs	r3, r3, r1
 800db2a:	9304      	str	r3, [sp, #16]
 800db2c:	6963      	ldr	r3, [r4, #20]
 800db2e:	4343      	muls	r3, r0
 800db30:	0fd8      	lsrs	r0, r3, #31
 800db32:	18c3      	adds	r3, r0, r3
 800db34:	105b      	asrs	r3, r3, #1
 800db36:	9301      	str	r3, [sp, #4]
 800db38:	9b04      	ldr	r3, [sp, #16]
 800db3a:	9801      	ldr	r0, [sp, #4]
 800db3c:	3301      	adds	r3, #1
 800db3e:	19db      	adds	r3, r3, r7
 800db40:	4283      	cmp	r3, r0
 800db42:	d900      	bls.n	800db46 <__ssprint_r+0x52>
 800db44:	9301      	str	r3, [sp, #4]
 800db46:	0553      	lsls	r3, r2, #21
 800db48:	d544      	bpl.n	800dbd4 <__ssprint_r+0xe0>
 800db4a:	9901      	ldr	r1, [sp, #4]
 800db4c:	9802      	ldr	r0, [sp, #8]
 800db4e:	f7ff fabd 	bl	800d0cc <_malloc_r>
 800db52:	1e05      	subs	r5, r0, #0
 800db54:	d114      	bne.n	800db80 <__ssprint_r+0x8c>
 800db56:	230c      	movs	r3, #12
 800db58:	9a02      	ldr	r2, [sp, #8]
 800db5a:	2001      	movs	r0, #1
 800db5c:	6013      	str	r3, [r2, #0]
 800db5e:	2340      	movs	r3, #64	; 0x40
 800db60:	89a2      	ldrh	r2, [r4, #12]
 800db62:	4240      	negs	r0, r0
 800db64:	4313      	orrs	r3, r2
 800db66:	81a3      	strh	r3, [r4, #12]
 800db68:	2300      	movs	r3, #0
 800db6a:	60b3      	str	r3, [r6, #8]
 800db6c:	6073      	str	r3, [r6, #4]
 800db6e:	e02f      	b.n	800dbd0 <__ssprint_r+0xdc>
 800db70:	9b03      	ldr	r3, [sp, #12]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	9305      	str	r3, [sp, #20]
 800db76:	9b03      	ldr	r3, [sp, #12]
 800db78:	685f      	ldr	r7, [r3, #4]
 800db7a:	3308      	adds	r3, #8
 800db7c:	9303      	str	r3, [sp, #12]
 800db7e:	e7c6      	b.n	800db0e <__ssprint_r+0x1a>
 800db80:	9a04      	ldr	r2, [sp, #16]
 800db82:	6921      	ldr	r1, [r4, #16]
 800db84:	f7fd fb74 	bl	800b270 <memcpy>
 800db88:	89a3      	ldrh	r3, [r4, #12]
 800db8a:	4a18      	ldr	r2, [pc, #96]	; (800dbec <__ssprint_r+0xf8>)
 800db8c:	401a      	ands	r2, r3
 800db8e:	2380      	movs	r3, #128	; 0x80
 800db90:	4313      	orrs	r3, r2
 800db92:	81a3      	strh	r3, [r4, #12]
 800db94:	9b04      	ldr	r3, [sp, #16]
 800db96:	6125      	str	r5, [r4, #16]
 800db98:	18ed      	adds	r5, r5, r3
 800db9a:	6025      	str	r5, [r4, #0]
 800db9c:	003d      	movs	r5, r7
 800db9e:	9b01      	ldr	r3, [sp, #4]
 800dba0:	9a04      	ldr	r2, [sp, #16]
 800dba2:	6163      	str	r3, [r4, #20]
 800dba4:	1a9b      	subs	r3, r3, r2
 800dba6:	60a3      	str	r3, [r4, #8]
 800dba8:	42af      	cmp	r7, r5
 800dbaa:	d200      	bcs.n	800dbae <__ssprint_r+0xba>
 800dbac:	003d      	movs	r5, r7
 800dbae:	002a      	movs	r2, r5
 800dbb0:	9905      	ldr	r1, [sp, #20]
 800dbb2:	6820      	ldr	r0, [r4, #0]
 800dbb4:	f000 f964 	bl	800de80 <memmove>
 800dbb8:	68a3      	ldr	r3, [r4, #8]
 800dbba:	1b5b      	subs	r3, r3, r5
 800dbbc:	60a3      	str	r3, [r4, #8]
 800dbbe:	6823      	ldr	r3, [r4, #0]
 800dbc0:	195d      	adds	r5, r3, r5
 800dbc2:	68b3      	ldr	r3, [r6, #8]
 800dbc4:	6025      	str	r5, [r4, #0]
 800dbc6:	1bdb      	subs	r3, r3, r7
 800dbc8:	60b3      	str	r3, [r6, #8]
 800dbca:	d1d1      	bne.n	800db70 <__ssprint_r+0x7c>
 800dbcc:	2000      	movs	r0, #0
 800dbce:	6070      	str	r0, [r6, #4]
 800dbd0:	b007      	add	sp, #28
 800dbd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbd4:	9a01      	ldr	r2, [sp, #4]
 800dbd6:	9802      	ldr	r0, [sp, #8]
 800dbd8:	f000 f964 	bl	800dea4 <_realloc_r>
 800dbdc:	1e05      	subs	r5, r0, #0
 800dbde:	d1d9      	bne.n	800db94 <__ssprint_r+0xa0>
 800dbe0:	6921      	ldr	r1, [r4, #16]
 800dbe2:	9802      	ldr	r0, [sp, #8]
 800dbe4:	f000 f884 	bl	800dcf0 <_free_r>
 800dbe8:	e7b5      	b.n	800db56 <__ssprint_r+0x62>
 800dbea:	46c0      	nop			; (mov r8, r8)
 800dbec:	fffffb7f 	.word	0xfffffb7f

0800dbf0 <_calloc_r>:
 800dbf0:	b510      	push	{r4, lr}
 800dbf2:	4351      	muls	r1, r2
 800dbf4:	f7ff fa6a 	bl	800d0cc <_malloc_r>
 800dbf8:	1e04      	subs	r4, r0, #0
 800dbfa:	d01a      	beq.n	800dc32 <_calloc_r+0x42>
 800dbfc:	0003      	movs	r3, r0
 800dbfe:	3b08      	subs	r3, #8
 800dc00:	685a      	ldr	r2, [r3, #4]
 800dc02:	2303      	movs	r3, #3
 800dc04:	439a      	bics	r2, r3
 800dc06:	3a04      	subs	r2, #4
 800dc08:	2a24      	cmp	r2, #36	; 0x24
 800dc0a:	d819      	bhi.n	800dc40 <_calloc_r+0x50>
 800dc0c:	0003      	movs	r3, r0
 800dc0e:	2a13      	cmp	r2, #19
 800dc10:	d90b      	bls.n	800dc2a <_calloc_r+0x3a>
 800dc12:	2100      	movs	r1, #0
 800dc14:	3308      	adds	r3, #8
 800dc16:	6001      	str	r1, [r0, #0]
 800dc18:	6041      	str	r1, [r0, #4]
 800dc1a:	2a1b      	cmp	r2, #27
 800dc1c:	d905      	bls.n	800dc2a <_calloc_r+0x3a>
 800dc1e:	6081      	str	r1, [r0, #8]
 800dc20:	60c1      	str	r1, [r0, #12]
 800dc22:	2a24      	cmp	r2, #36	; 0x24
 800dc24:	d007      	beq.n	800dc36 <_calloc_r+0x46>
 800dc26:	0003      	movs	r3, r0
 800dc28:	3310      	adds	r3, #16
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	601a      	str	r2, [r3, #0]
 800dc2e:	605a      	str	r2, [r3, #4]
 800dc30:	609a      	str	r2, [r3, #8]
 800dc32:	0020      	movs	r0, r4
 800dc34:	bd10      	pop	{r4, pc}
 800dc36:	0003      	movs	r3, r0
 800dc38:	6101      	str	r1, [r0, #16]
 800dc3a:	3318      	adds	r3, #24
 800dc3c:	6141      	str	r1, [r0, #20]
 800dc3e:	e7f4      	b.n	800dc2a <_calloc_r+0x3a>
 800dc40:	2100      	movs	r1, #0
 800dc42:	f7fd fb1e 	bl	800b282 <memset>
 800dc46:	e7f4      	b.n	800dc32 <_calloc_r+0x42>

0800dc48 <_malloc_trim_r>:
 800dc48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc4a:	4f25      	ldr	r7, [pc, #148]	; (800dce0 <_malloc_trim_r+0x98>)
 800dc4c:	000c      	movs	r4, r1
 800dc4e:	0005      	movs	r5, r0
 800dc50:	f7ff fc4c 	bl	800d4ec <__malloc_lock>
 800dc54:	0038      	movs	r0, r7
 800dc56:	2203      	movs	r2, #3
 800dc58:	4e22      	ldr	r6, [pc, #136]	; (800dce4 <_malloc_trim_r+0x9c>)
 800dc5a:	3811      	subs	r0, #17
 800dc5c:	68b3      	ldr	r3, [r6, #8]
 800dc5e:	1b00      	subs	r0, r0, r4
 800dc60:	685b      	ldr	r3, [r3, #4]
 800dc62:	0039      	movs	r1, r7
 800dc64:	4393      	bics	r3, r2
 800dc66:	18c0      	adds	r0, r0, r3
 800dc68:	9301      	str	r3, [sp, #4]
 800dc6a:	f7f2 fa69 	bl	8000140 <__udivsi3>
 800dc6e:	1e44      	subs	r4, r0, #1
 800dc70:	437c      	muls	r4, r7
 800dc72:	42bc      	cmp	r4, r7
 800dc74:	da04      	bge.n	800dc80 <_malloc_trim_r+0x38>
 800dc76:	0028      	movs	r0, r5
 800dc78:	f7ff fc40 	bl	800d4fc <__malloc_unlock>
 800dc7c:	2000      	movs	r0, #0
 800dc7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dc80:	2100      	movs	r1, #0
 800dc82:	0028      	movs	r0, r5
 800dc84:	f7ff ff24 	bl	800dad0 <_sbrk_r>
 800dc88:	68b3      	ldr	r3, [r6, #8]
 800dc8a:	9a01      	ldr	r2, [sp, #4]
 800dc8c:	189b      	adds	r3, r3, r2
 800dc8e:	4298      	cmp	r0, r3
 800dc90:	d1f1      	bne.n	800dc76 <_malloc_trim_r+0x2e>
 800dc92:	4261      	negs	r1, r4
 800dc94:	0028      	movs	r0, r5
 800dc96:	f7ff ff1b 	bl	800dad0 <_sbrk_r>
 800dc9a:	1c43      	adds	r3, r0, #1
 800dc9c:	d110      	bne.n	800dcc0 <_malloc_trim_r+0x78>
 800dc9e:	2100      	movs	r1, #0
 800dca0:	0028      	movs	r0, r5
 800dca2:	f7ff ff15 	bl	800dad0 <_sbrk_r>
 800dca6:	68b2      	ldr	r2, [r6, #8]
 800dca8:	1a81      	subs	r1, r0, r2
 800dcaa:	290f      	cmp	r1, #15
 800dcac:	dde3      	ble.n	800dc76 <_malloc_trim_r+0x2e>
 800dcae:	4b0e      	ldr	r3, [pc, #56]	; (800dce8 <_malloc_trim_r+0xa0>)
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	1ac0      	subs	r0, r0, r3
 800dcb4:	4b0d      	ldr	r3, [pc, #52]	; (800dcec <_malloc_trim_r+0xa4>)
 800dcb6:	6018      	str	r0, [r3, #0]
 800dcb8:	2301      	movs	r3, #1
 800dcba:	430b      	orrs	r3, r1
 800dcbc:	6053      	str	r3, [r2, #4]
 800dcbe:	e7da      	b.n	800dc76 <_malloc_trim_r+0x2e>
 800dcc0:	68b2      	ldr	r2, [r6, #8]
 800dcc2:	2601      	movs	r6, #1
 800dcc4:	9b01      	ldr	r3, [sp, #4]
 800dcc6:	0028      	movs	r0, r5
 800dcc8:	1b1b      	subs	r3, r3, r4
 800dcca:	4333      	orrs	r3, r6
 800dccc:	6053      	str	r3, [r2, #4]
 800dcce:	4b07      	ldr	r3, [pc, #28]	; (800dcec <_malloc_trim_r+0xa4>)
 800dcd0:	681a      	ldr	r2, [r3, #0]
 800dcd2:	1b14      	subs	r4, r2, r4
 800dcd4:	601c      	str	r4, [r3, #0]
 800dcd6:	f7ff fc11 	bl	800d4fc <__malloc_unlock>
 800dcda:	0030      	movs	r0, r6
 800dcdc:	e7cf      	b.n	800dc7e <_malloc_trim_r+0x36>
 800dcde:	46c0      	nop			; (mov r8, r8)
 800dce0:	00000080 	.word	0x00000080
 800dce4:	20000124 	.word	0x20000124
 800dce8:	2000052c 	.word	0x2000052c
 800dcec:	20000e7c 	.word	0x20000e7c

0800dcf0 <_free_r>:
 800dcf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dcf2:	1e0d      	subs	r5, r1, #0
 800dcf4:	9001      	str	r0, [sp, #4]
 800dcf6:	d02d      	beq.n	800dd54 <_free_r+0x64>
 800dcf8:	f7ff fbf8 	bl	800d4ec <__malloc_lock>
 800dcfc:	2301      	movs	r3, #1
 800dcfe:	0029      	movs	r1, r5
 800dd00:	469c      	mov	ip, r3
 800dd02:	3908      	subs	r1, #8
 800dd04:	684f      	ldr	r7, [r1, #4]
 800dd06:	4662      	mov	r2, ip
 800dd08:	003b      	movs	r3, r7
 800dd0a:	4666      	mov	r6, ip
 800dd0c:	4393      	bics	r3, r2
 800dd0e:	18c8      	adds	r0, r1, r3
 800dd10:	6845      	ldr	r5, [r0, #4]
 800dd12:	3202      	adds	r2, #2
 800dd14:	4395      	bics	r5, r2
 800dd16:	4a4a      	ldr	r2, [pc, #296]	; (800de40 <_free_r+0x150>)
 800dd18:	4037      	ands	r7, r6
 800dd1a:	6896      	ldr	r6, [r2, #8]
 800dd1c:	42b0      	cmp	r0, r6
 800dd1e:	d11a      	bne.n	800dd56 <_free_r+0x66>
 800dd20:	195b      	adds	r3, r3, r5
 800dd22:	2f00      	cmp	r7, #0
 800dd24:	d106      	bne.n	800dd34 <_free_r+0x44>
 800dd26:	6808      	ldr	r0, [r1, #0]
 800dd28:	1a09      	subs	r1, r1, r0
 800dd2a:	688d      	ldr	r5, [r1, #8]
 800dd2c:	181b      	adds	r3, r3, r0
 800dd2e:	68c8      	ldr	r0, [r1, #12]
 800dd30:	60e8      	str	r0, [r5, #12]
 800dd32:	6085      	str	r5, [r0, #8]
 800dd34:	2001      	movs	r0, #1
 800dd36:	4318      	orrs	r0, r3
 800dd38:	6048      	str	r0, [r1, #4]
 800dd3a:	6091      	str	r1, [r2, #8]
 800dd3c:	4a41      	ldr	r2, [pc, #260]	; (800de44 <_free_r+0x154>)
 800dd3e:	6812      	ldr	r2, [r2, #0]
 800dd40:	4293      	cmp	r3, r2
 800dd42:	d304      	bcc.n	800dd4e <_free_r+0x5e>
 800dd44:	4b40      	ldr	r3, [pc, #256]	; (800de48 <_free_r+0x158>)
 800dd46:	9801      	ldr	r0, [sp, #4]
 800dd48:	6819      	ldr	r1, [r3, #0]
 800dd4a:	f7ff ff7d 	bl	800dc48 <_malloc_trim_r>
 800dd4e:	9801      	ldr	r0, [sp, #4]
 800dd50:	f7ff fbd4 	bl	800d4fc <__malloc_unlock>
 800dd54:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800dd56:	2600      	movs	r6, #0
 800dd58:	6045      	str	r5, [r0, #4]
 800dd5a:	42b7      	cmp	r7, r6
 800dd5c:	d109      	bne.n	800dd72 <_free_r+0x82>
 800dd5e:	680f      	ldr	r7, [r1, #0]
 800dd60:	4c3a      	ldr	r4, [pc, #232]	; (800de4c <_free_r+0x15c>)
 800dd62:	1bc9      	subs	r1, r1, r7
 800dd64:	19db      	adds	r3, r3, r7
 800dd66:	688f      	ldr	r7, [r1, #8]
 800dd68:	42a7      	cmp	r7, r4
 800dd6a:	d02b      	beq.n	800ddc4 <_free_r+0xd4>
 800dd6c:	68cc      	ldr	r4, [r1, #12]
 800dd6e:	60fc      	str	r4, [r7, #12]
 800dd70:	60a7      	str	r7, [r4, #8]
 800dd72:	1947      	adds	r7, r0, r5
 800dd74:	687c      	ldr	r4, [r7, #4]
 800dd76:	2701      	movs	r7, #1
 800dd78:	423c      	tst	r4, r7
 800dd7a:	d10b      	bne.n	800dd94 <_free_r+0xa4>
 800dd7c:	195b      	adds	r3, r3, r5
 800dd7e:	6885      	ldr	r5, [r0, #8]
 800dd80:	2e00      	cmp	r6, #0
 800dd82:	d121      	bne.n	800ddc8 <_free_r+0xd8>
 800dd84:	4c31      	ldr	r4, [pc, #196]	; (800de4c <_free_r+0x15c>)
 800dd86:	42a5      	cmp	r5, r4
 800dd88:	d11e      	bne.n	800ddc8 <_free_r+0xd8>
 800dd8a:	003e      	movs	r6, r7
 800dd8c:	6151      	str	r1, [r2, #20]
 800dd8e:	6111      	str	r1, [r2, #16]
 800dd90:	60cd      	str	r5, [r1, #12]
 800dd92:	608d      	str	r5, [r1, #8]
 800dd94:	2001      	movs	r0, #1
 800dd96:	0005      	movs	r5, r0
 800dd98:	431d      	orrs	r5, r3
 800dd9a:	604d      	str	r5, [r1, #4]
 800dd9c:	50cb      	str	r3, [r1, r3]
 800dd9e:	2e00      	cmp	r6, #0
 800dda0:	d1d5      	bne.n	800dd4e <_free_r+0x5e>
 800dda2:	4d2b      	ldr	r5, [pc, #172]	; (800de50 <_free_r+0x160>)
 800dda4:	42ab      	cmp	r3, r5
 800dda6:	d813      	bhi.n	800ddd0 <_free_r+0xe0>
 800dda8:	08db      	lsrs	r3, r3, #3
 800ddaa:	109d      	asrs	r5, r3, #2
 800ddac:	40a8      	lsls	r0, r5
 800ddae:	6854      	ldr	r4, [r2, #4]
 800ddb0:	00db      	lsls	r3, r3, #3
 800ddb2:	4320      	orrs	r0, r4
 800ddb4:	6050      	str	r0, [r2, #4]
 800ddb6:	189a      	adds	r2, r3, r2
 800ddb8:	6893      	ldr	r3, [r2, #8]
 800ddba:	60ca      	str	r2, [r1, #12]
 800ddbc:	608b      	str	r3, [r1, #8]
 800ddbe:	6091      	str	r1, [r2, #8]
 800ddc0:	60d9      	str	r1, [r3, #12]
 800ddc2:	e7c4      	b.n	800dd4e <_free_r+0x5e>
 800ddc4:	4666      	mov	r6, ip
 800ddc6:	e7d4      	b.n	800dd72 <_free_r+0x82>
 800ddc8:	68c0      	ldr	r0, [r0, #12]
 800ddca:	60e8      	str	r0, [r5, #12]
 800ddcc:	6085      	str	r5, [r0, #8]
 800ddce:	e7e1      	b.n	800dd94 <_free_r+0xa4>
 800ddd0:	0a5d      	lsrs	r5, r3, #9
 800ddd2:	2d04      	cmp	r5, #4
 800ddd4:	d812      	bhi.n	800ddfc <_free_r+0x10c>
 800ddd6:	0998      	lsrs	r0, r3, #6
 800ddd8:	3038      	adds	r0, #56	; 0x38
 800ddda:	00c6      	lsls	r6, r0, #3
 800dddc:	18b6      	adds	r6, r6, r2
 800ddde:	68b5      	ldr	r5, [r6, #8]
 800dde0:	2703      	movs	r7, #3
 800dde2:	42ae      	cmp	r6, r5
 800dde4:	d125      	bne.n	800de32 <_free_r+0x142>
 800dde6:	2301      	movs	r3, #1
 800dde8:	1080      	asrs	r0, r0, #2
 800ddea:	4083      	lsls	r3, r0
 800ddec:	6850      	ldr	r0, [r2, #4]
 800ddee:	4303      	orrs	r3, r0
 800ddf0:	6053      	str	r3, [r2, #4]
 800ddf2:	60ce      	str	r6, [r1, #12]
 800ddf4:	608d      	str	r5, [r1, #8]
 800ddf6:	60b1      	str	r1, [r6, #8]
 800ddf8:	60e9      	str	r1, [r5, #12]
 800ddfa:	e7a8      	b.n	800dd4e <_free_r+0x5e>
 800ddfc:	2d14      	cmp	r5, #20
 800ddfe:	d802      	bhi.n	800de06 <_free_r+0x116>
 800de00:	0028      	movs	r0, r5
 800de02:	305b      	adds	r0, #91	; 0x5b
 800de04:	e7e9      	b.n	800ddda <_free_r+0xea>
 800de06:	2d54      	cmp	r5, #84	; 0x54
 800de08:	d802      	bhi.n	800de10 <_free_r+0x120>
 800de0a:	0b18      	lsrs	r0, r3, #12
 800de0c:	306e      	adds	r0, #110	; 0x6e
 800de0e:	e7e4      	b.n	800ddda <_free_r+0xea>
 800de10:	20aa      	movs	r0, #170	; 0xaa
 800de12:	0040      	lsls	r0, r0, #1
 800de14:	4285      	cmp	r5, r0
 800de16:	d802      	bhi.n	800de1e <_free_r+0x12e>
 800de18:	0bd8      	lsrs	r0, r3, #15
 800de1a:	3077      	adds	r0, #119	; 0x77
 800de1c:	e7dd      	b.n	800ddda <_free_r+0xea>
 800de1e:	4e0d      	ldr	r6, [pc, #52]	; (800de54 <_free_r+0x164>)
 800de20:	207e      	movs	r0, #126	; 0x7e
 800de22:	42b5      	cmp	r5, r6
 800de24:	d8d9      	bhi.n	800ddda <_free_r+0xea>
 800de26:	0c98      	lsrs	r0, r3, #18
 800de28:	307c      	adds	r0, #124	; 0x7c
 800de2a:	e7d6      	b.n	800ddda <_free_r+0xea>
 800de2c:	68ad      	ldr	r5, [r5, #8]
 800de2e:	42ae      	cmp	r6, r5
 800de30:	d003      	beq.n	800de3a <_free_r+0x14a>
 800de32:	686a      	ldr	r2, [r5, #4]
 800de34:	43ba      	bics	r2, r7
 800de36:	4293      	cmp	r3, r2
 800de38:	d3f8      	bcc.n	800de2c <_free_r+0x13c>
 800de3a:	68ee      	ldr	r6, [r5, #12]
 800de3c:	e7d9      	b.n	800ddf2 <_free_r+0x102>
 800de3e:	46c0      	nop			; (mov r8, r8)
 800de40:	20000124 	.word	0x20000124
 800de44:	20000530 	.word	0x20000530
 800de48:	20000eac 	.word	0x20000eac
 800de4c:	2000012c 	.word	0x2000012c
 800de50:	000001ff 	.word	0x000001ff
 800de54:	00000554 	.word	0x00000554

0800de58 <__retarget_lock_acquire_recursive>:
 800de58:	4770      	bx	lr

0800de5a <__retarget_lock_release_recursive>:
 800de5a:	4770      	bx	lr

0800de5c <__ascii_mbtowc>:
 800de5c:	b082      	sub	sp, #8
 800de5e:	2900      	cmp	r1, #0
 800de60:	d100      	bne.n	800de64 <__ascii_mbtowc+0x8>
 800de62:	a901      	add	r1, sp, #4
 800de64:	1e10      	subs	r0, r2, #0
 800de66:	d006      	beq.n	800de76 <__ascii_mbtowc+0x1a>
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d006      	beq.n	800de7a <__ascii_mbtowc+0x1e>
 800de6c:	7813      	ldrb	r3, [r2, #0]
 800de6e:	600b      	str	r3, [r1, #0]
 800de70:	7810      	ldrb	r0, [r2, #0]
 800de72:	1e43      	subs	r3, r0, #1
 800de74:	4198      	sbcs	r0, r3
 800de76:	b002      	add	sp, #8
 800de78:	4770      	bx	lr
 800de7a:	2002      	movs	r0, #2
 800de7c:	4240      	negs	r0, r0
 800de7e:	e7fa      	b.n	800de76 <__ascii_mbtowc+0x1a>

0800de80 <memmove>:
 800de80:	b510      	push	{r4, lr}
 800de82:	4288      	cmp	r0, r1
 800de84:	d902      	bls.n	800de8c <memmove+0xc>
 800de86:	188b      	adds	r3, r1, r2
 800de88:	4298      	cmp	r0, r3
 800de8a:	d308      	bcc.n	800de9e <memmove+0x1e>
 800de8c:	2300      	movs	r3, #0
 800de8e:	429a      	cmp	r2, r3
 800de90:	d007      	beq.n	800dea2 <memmove+0x22>
 800de92:	5ccc      	ldrb	r4, [r1, r3]
 800de94:	54c4      	strb	r4, [r0, r3]
 800de96:	3301      	adds	r3, #1
 800de98:	e7f9      	b.n	800de8e <memmove+0xe>
 800de9a:	5c8b      	ldrb	r3, [r1, r2]
 800de9c:	5483      	strb	r3, [r0, r2]
 800de9e:	3a01      	subs	r2, #1
 800dea0:	d2fb      	bcs.n	800de9a <memmove+0x1a>
 800dea2:	bd10      	pop	{r4, pc}

0800dea4 <_realloc_r>:
 800dea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dea6:	b087      	sub	sp, #28
 800dea8:	9002      	str	r0, [sp, #8]
 800deaa:	1e0c      	subs	r4, r1, #0
 800deac:	9204      	str	r2, [sp, #16]
 800deae:	d106      	bne.n	800debe <_realloc_r+0x1a>
 800deb0:	0011      	movs	r1, r2
 800deb2:	f7ff f90b 	bl	800d0cc <_malloc_r>
 800deb6:	0006      	movs	r6, r0
 800deb8:	0030      	movs	r0, r6
 800deba:	b007      	add	sp, #28
 800debc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800debe:	0027      	movs	r7, r4
 800dec0:	9802      	ldr	r0, [sp, #8]
 800dec2:	3f08      	subs	r7, #8
 800dec4:	f7ff fb12 	bl	800d4ec <__malloc_lock>
 800dec8:	6878      	ldr	r0, [r7, #4]
 800deca:	2303      	movs	r3, #3
 800decc:	0002      	movs	r2, r0
 800dece:	9e04      	ldr	r6, [sp, #16]
 800ded0:	439a      	bics	r2, r3
 800ded2:	360b      	adds	r6, #11
 800ded4:	9203      	str	r2, [sp, #12]
 800ded6:	2e16      	cmp	r6, #22
 800ded8:	d908      	bls.n	800deec <_realloc_r+0x48>
 800deda:	3304      	adds	r3, #4
 800dedc:	439e      	bics	r6, r3
 800dede:	9601      	str	r6, [sp, #4]
 800dee0:	d506      	bpl.n	800def0 <_realloc_r+0x4c>
 800dee2:	230c      	movs	r3, #12
 800dee4:	9a02      	ldr	r2, [sp, #8]
 800dee6:	2600      	movs	r6, #0
 800dee8:	6013      	str	r3, [r2, #0]
 800deea:	e7e5      	b.n	800deb8 <_realloc_r+0x14>
 800deec:	2310      	movs	r3, #16
 800deee:	9301      	str	r3, [sp, #4]
 800def0:	9b01      	ldr	r3, [sp, #4]
 800def2:	9a04      	ldr	r2, [sp, #16]
 800def4:	4293      	cmp	r3, r2
 800def6:	d3f4      	bcc.n	800dee2 <_realloc_r+0x3e>
 800def8:	9b01      	ldr	r3, [sp, #4]
 800defa:	9a03      	ldr	r2, [sp, #12]
 800defc:	4293      	cmp	r3, r2
 800defe:	dc00      	bgt.n	800df02 <_realloc_r+0x5e>
 800df00:	e141      	b.n	800e186 <_realloc_r+0x2e2>
 800df02:	18bb      	adds	r3, r7, r2
 800df04:	4aa4      	ldr	r2, [pc, #656]	; (800e198 <_realloc_r+0x2f4>)
 800df06:	6891      	ldr	r1, [r2, #8]
 800df08:	468c      	mov	ip, r1
 800df0a:	428b      	cmp	r3, r1
 800df0c:	d006      	beq.n	800df1c <_realloc_r+0x78>
 800df0e:	2501      	movs	r5, #1
 800df10:	6859      	ldr	r1, [r3, #4]
 800df12:	43a9      	bics	r1, r5
 800df14:	1859      	adds	r1, r3, r1
 800df16:	6849      	ldr	r1, [r1, #4]
 800df18:	4229      	tst	r1, r5
 800df1a:	d142      	bne.n	800dfa2 <_realloc_r+0xfe>
 800df1c:	2103      	movs	r1, #3
 800df1e:	685d      	ldr	r5, [r3, #4]
 800df20:	438d      	bics	r5, r1
 800df22:	0029      	movs	r1, r5
 800df24:	9d03      	ldr	r5, [sp, #12]
 800df26:	186e      	adds	r6, r5, r1
 800df28:	4563      	cmp	r3, ip
 800df2a:	d116      	bne.n	800df5a <_realloc_r+0xb6>
 800df2c:	9d01      	ldr	r5, [sp, #4]
 800df2e:	3510      	adds	r5, #16
 800df30:	42ae      	cmp	r6, r5
 800df32:	db38      	blt.n	800dfa6 <_realloc_r+0x102>
 800df34:	9b01      	ldr	r3, [sp, #4]
 800df36:	9802      	ldr	r0, [sp, #8]
 800df38:	18ff      	adds	r7, r7, r3
 800df3a:	6097      	str	r7, [r2, #8]
 800df3c:	2201      	movs	r2, #1
 800df3e:	1af6      	subs	r6, r6, r3
 800df40:	0023      	movs	r3, r4
 800df42:	4316      	orrs	r6, r2
 800df44:	607e      	str	r6, [r7, #4]
 800df46:	3b08      	subs	r3, #8
 800df48:	685e      	ldr	r6, [r3, #4]
 800df4a:	4016      	ands	r6, r2
 800df4c:	9a01      	ldr	r2, [sp, #4]
 800df4e:	4316      	orrs	r6, r2
 800df50:	605e      	str	r6, [r3, #4]
 800df52:	f7ff fad3 	bl	800d4fc <__malloc_unlock>
 800df56:	0026      	movs	r6, r4
 800df58:	e7ae      	b.n	800deb8 <_realloc_r+0x14>
 800df5a:	9a01      	ldr	r2, [sp, #4]
 800df5c:	42b2      	cmp	r2, r6
 800df5e:	dc22      	bgt.n	800dfa6 <_realloc_r+0x102>
 800df60:	68da      	ldr	r2, [r3, #12]
 800df62:	689b      	ldr	r3, [r3, #8]
 800df64:	60da      	str	r2, [r3, #12]
 800df66:	6093      	str	r3, [r2, #8]
 800df68:	9b01      	ldr	r3, [sp, #4]
 800df6a:	2201      	movs	r2, #1
 800df6c:	1af4      	subs	r4, r6, r3
 800df6e:	19b8      	adds	r0, r7, r6
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	2c0f      	cmp	r4, #15
 800df74:	d800      	bhi.n	800df78 <_realloc_r+0xd4>
 800df76:	e108      	b.n	800e18a <_realloc_r+0x2e6>
 800df78:	9901      	ldr	r1, [sp, #4]
 800df7a:	9d01      	ldr	r5, [sp, #4]
 800df7c:	4013      	ands	r3, r2
 800df7e:	1879      	adds	r1, r7, r1
 800df80:	432b      	orrs	r3, r5
 800df82:	4314      	orrs	r4, r2
 800df84:	607b      	str	r3, [r7, #4]
 800df86:	604c      	str	r4, [r1, #4]
 800df88:	6843      	ldr	r3, [r0, #4]
 800df8a:	3108      	adds	r1, #8
 800df8c:	431a      	orrs	r2, r3
 800df8e:	6042      	str	r2, [r0, #4]
 800df90:	9802      	ldr	r0, [sp, #8]
 800df92:	f7ff fead 	bl	800dcf0 <_free_r>
 800df96:	003e      	movs	r6, r7
 800df98:	9802      	ldr	r0, [sp, #8]
 800df9a:	f7ff faaf 	bl	800d4fc <__malloc_unlock>
 800df9e:	3608      	adds	r6, #8
 800dfa0:	e78a      	b.n	800deb8 <_realloc_r+0x14>
 800dfa2:	2100      	movs	r1, #0
 800dfa4:	000b      	movs	r3, r1
 800dfa6:	07c2      	lsls	r2, r0, #31
 800dfa8:	d500      	bpl.n	800dfac <_realloc_r+0x108>
 800dfaa:	e088      	b.n	800e0be <_realloc_r+0x21a>
 800dfac:	0022      	movs	r2, r4
 800dfae:	3a08      	subs	r2, #8
 800dfb0:	6815      	ldr	r5, [r2, #0]
 800dfb2:	2203      	movs	r2, #3
 800dfb4:	1b7d      	subs	r5, r7, r5
 800dfb6:	6868      	ldr	r0, [r5, #4]
 800dfb8:	4390      	bics	r0, r2
 800dfba:	0002      	movs	r2, r0
 800dfbc:	9803      	ldr	r0, [sp, #12]
 800dfbe:	1882      	adds	r2, r0, r2
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d078      	beq.n	800e0b6 <_realloc_r+0x212>
 800dfc4:	4563      	cmp	r3, ip
 800dfc6:	d150      	bne.n	800e06a <_realloc_r+0x1c6>
 800dfc8:	1853      	adds	r3, r2, r1
 800dfca:	9305      	str	r3, [sp, #20]
 800dfcc:	9b01      	ldr	r3, [sp, #4]
 800dfce:	9905      	ldr	r1, [sp, #20]
 800dfd0:	3310      	adds	r3, #16
 800dfd2:	4299      	cmp	r1, r3
 800dfd4:	db6f      	blt.n	800e0b6 <_realloc_r+0x212>
 800dfd6:	68aa      	ldr	r2, [r5, #8]
 800dfd8:	68eb      	ldr	r3, [r5, #12]
 800dfda:	002e      	movs	r6, r5
 800dfdc:	60d3      	str	r3, [r2, #12]
 800dfde:	609a      	str	r2, [r3, #8]
 800dfe0:	0002      	movs	r2, r0
 800dfe2:	3a04      	subs	r2, #4
 800dfe4:	3608      	adds	r6, #8
 800dfe6:	2a24      	cmp	r2, #36	; 0x24
 800dfe8:	d83a      	bhi.n	800e060 <_realloc_r+0x1bc>
 800dfea:	2a13      	cmp	r2, #19
 800dfec:	d935      	bls.n	800e05a <_realloc_r+0x1b6>
 800dfee:	6823      	ldr	r3, [r4, #0]
 800dff0:	60ab      	str	r3, [r5, #8]
 800dff2:	6863      	ldr	r3, [r4, #4]
 800dff4:	60eb      	str	r3, [r5, #12]
 800dff6:	2a1b      	cmp	r2, #27
 800dff8:	d81b      	bhi.n	800e032 <_realloc_r+0x18e>
 800dffa:	002b      	movs	r3, r5
 800dffc:	0022      	movs	r2, r4
 800dffe:	3310      	adds	r3, #16
 800e000:	3208      	adds	r2, #8
 800e002:	6811      	ldr	r1, [r2, #0]
 800e004:	6019      	str	r1, [r3, #0]
 800e006:	6851      	ldr	r1, [r2, #4]
 800e008:	6059      	str	r1, [r3, #4]
 800e00a:	6892      	ldr	r2, [r2, #8]
 800e00c:	609a      	str	r2, [r3, #8]
 800e00e:	9b01      	ldr	r3, [sp, #4]
 800e010:	9901      	ldr	r1, [sp, #4]
 800e012:	18ea      	adds	r2, r5, r3
 800e014:	4b60      	ldr	r3, [pc, #384]	; (800e198 <_realloc_r+0x2f4>)
 800e016:	609a      	str	r2, [r3, #8]
 800e018:	9b05      	ldr	r3, [sp, #20]
 800e01a:	1a5f      	subs	r7, r3, r1
 800e01c:	2301      	movs	r3, #1
 800e01e:	431f      	orrs	r7, r3
 800e020:	6057      	str	r7, [r2, #4]
 800e022:	686a      	ldr	r2, [r5, #4]
 800e024:	4013      	ands	r3, r2
 800e026:	430b      	orrs	r3, r1
 800e028:	606b      	str	r3, [r5, #4]
 800e02a:	9802      	ldr	r0, [sp, #8]
 800e02c:	f7ff fa66 	bl	800d4fc <__malloc_unlock>
 800e030:	e742      	b.n	800deb8 <_realloc_r+0x14>
 800e032:	68a3      	ldr	r3, [r4, #8]
 800e034:	612b      	str	r3, [r5, #16]
 800e036:	68e3      	ldr	r3, [r4, #12]
 800e038:	616b      	str	r3, [r5, #20]
 800e03a:	2a24      	cmp	r2, #36	; 0x24
 800e03c:	d004      	beq.n	800e048 <_realloc_r+0x1a4>
 800e03e:	002b      	movs	r3, r5
 800e040:	0022      	movs	r2, r4
 800e042:	3318      	adds	r3, #24
 800e044:	3210      	adds	r2, #16
 800e046:	e7dc      	b.n	800e002 <_realloc_r+0x15e>
 800e048:	6923      	ldr	r3, [r4, #16]
 800e04a:	0022      	movs	r2, r4
 800e04c:	61ab      	str	r3, [r5, #24]
 800e04e:	002b      	movs	r3, r5
 800e050:	6961      	ldr	r1, [r4, #20]
 800e052:	3320      	adds	r3, #32
 800e054:	3218      	adds	r2, #24
 800e056:	61e9      	str	r1, [r5, #28]
 800e058:	e7d3      	b.n	800e002 <_realloc_r+0x15e>
 800e05a:	0033      	movs	r3, r6
 800e05c:	0022      	movs	r2, r4
 800e05e:	e7d0      	b.n	800e002 <_realloc_r+0x15e>
 800e060:	0021      	movs	r1, r4
 800e062:	0030      	movs	r0, r6
 800e064:	f7ff ff0c 	bl	800de80 <memmove>
 800e068:	e7d1      	b.n	800e00e <_realloc_r+0x16a>
 800e06a:	1856      	adds	r6, r2, r1
 800e06c:	9901      	ldr	r1, [sp, #4]
 800e06e:	42b1      	cmp	r1, r6
 800e070:	dc21      	bgt.n	800e0b6 <_realloc_r+0x212>
 800e072:	68da      	ldr	r2, [r3, #12]
 800e074:	689b      	ldr	r3, [r3, #8]
 800e076:	60da      	str	r2, [r3, #12]
 800e078:	6093      	str	r3, [r2, #8]
 800e07a:	0028      	movs	r0, r5
 800e07c:	68aa      	ldr	r2, [r5, #8]
 800e07e:	68eb      	ldr	r3, [r5, #12]
 800e080:	3008      	adds	r0, #8
 800e082:	60d3      	str	r3, [r2, #12]
 800e084:	609a      	str	r2, [r3, #8]
 800e086:	9a03      	ldr	r2, [sp, #12]
 800e088:	3a04      	subs	r2, #4
 800e08a:	2a24      	cmp	r2, #36	; 0x24
 800e08c:	d841      	bhi.n	800e112 <_realloc_r+0x26e>
 800e08e:	0023      	movs	r3, r4
 800e090:	2a13      	cmp	r2, #19
 800e092:	d908      	bls.n	800e0a6 <_realloc_r+0x202>
 800e094:	6823      	ldr	r3, [r4, #0]
 800e096:	60ab      	str	r3, [r5, #8]
 800e098:	6863      	ldr	r3, [r4, #4]
 800e09a:	60eb      	str	r3, [r5, #12]
 800e09c:	2a1b      	cmp	r2, #27
 800e09e:	d824      	bhi.n	800e0ea <_realloc_r+0x246>
 800e0a0:	0023      	movs	r3, r4
 800e0a2:	3008      	adds	r0, #8
 800e0a4:	3308      	adds	r3, #8
 800e0a6:	681a      	ldr	r2, [r3, #0]
 800e0a8:	6002      	str	r2, [r0, #0]
 800e0aa:	685a      	ldr	r2, [r3, #4]
 800e0ac:	6042      	str	r2, [r0, #4]
 800e0ae:	689b      	ldr	r3, [r3, #8]
 800e0b0:	6083      	str	r3, [r0, #8]
 800e0b2:	002f      	movs	r7, r5
 800e0b4:	e758      	b.n	800df68 <_realloc_r+0xc4>
 800e0b6:	9b01      	ldr	r3, [sp, #4]
 800e0b8:	0016      	movs	r6, r2
 800e0ba:	4293      	cmp	r3, r2
 800e0bc:	dddd      	ble.n	800e07a <_realloc_r+0x1d6>
 800e0be:	9904      	ldr	r1, [sp, #16]
 800e0c0:	9802      	ldr	r0, [sp, #8]
 800e0c2:	f7ff f803 	bl	800d0cc <_malloc_r>
 800e0c6:	1e06      	subs	r6, r0, #0
 800e0c8:	d0af      	beq.n	800e02a <_realloc_r+0x186>
 800e0ca:	0023      	movs	r3, r4
 800e0cc:	2101      	movs	r1, #1
 800e0ce:	0002      	movs	r2, r0
 800e0d0:	3b08      	subs	r3, #8
 800e0d2:	685b      	ldr	r3, [r3, #4]
 800e0d4:	3a08      	subs	r2, #8
 800e0d6:	438b      	bics	r3, r1
 800e0d8:	18fb      	adds	r3, r7, r3
 800e0da:	429a      	cmp	r2, r3
 800e0dc:	d11d      	bne.n	800e11a <_realloc_r+0x276>
 800e0de:	2303      	movs	r3, #3
 800e0e0:	6856      	ldr	r6, [r2, #4]
 800e0e2:	439e      	bics	r6, r3
 800e0e4:	9b03      	ldr	r3, [sp, #12]
 800e0e6:	18f6      	adds	r6, r6, r3
 800e0e8:	e73e      	b.n	800df68 <_realloc_r+0xc4>
 800e0ea:	68a3      	ldr	r3, [r4, #8]
 800e0ec:	612b      	str	r3, [r5, #16]
 800e0ee:	68e3      	ldr	r3, [r4, #12]
 800e0f0:	616b      	str	r3, [r5, #20]
 800e0f2:	2a24      	cmp	r2, #36	; 0x24
 800e0f4:	d004      	beq.n	800e100 <_realloc_r+0x25c>
 800e0f6:	0028      	movs	r0, r5
 800e0f8:	0023      	movs	r3, r4
 800e0fa:	3018      	adds	r0, #24
 800e0fc:	3310      	adds	r3, #16
 800e0fe:	e7d2      	b.n	800e0a6 <_realloc_r+0x202>
 800e100:	6923      	ldr	r3, [r4, #16]
 800e102:	0028      	movs	r0, r5
 800e104:	61ab      	str	r3, [r5, #24]
 800e106:	0023      	movs	r3, r4
 800e108:	6962      	ldr	r2, [r4, #20]
 800e10a:	3020      	adds	r0, #32
 800e10c:	3318      	adds	r3, #24
 800e10e:	61ea      	str	r2, [r5, #28]
 800e110:	e7c9      	b.n	800e0a6 <_realloc_r+0x202>
 800e112:	0021      	movs	r1, r4
 800e114:	f7ff feb4 	bl	800de80 <memmove>
 800e118:	e7cb      	b.n	800e0b2 <_realloc_r+0x20e>
 800e11a:	9a03      	ldr	r2, [sp, #12]
 800e11c:	3a04      	subs	r2, #4
 800e11e:	2a24      	cmp	r2, #36	; 0x24
 800e120:	d82d      	bhi.n	800e17e <_realloc_r+0x2da>
 800e122:	2a13      	cmp	r2, #19
 800e124:	d928      	bls.n	800e178 <_realloc_r+0x2d4>
 800e126:	6823      	ldr	r3, [r4, #0]
 800e128:	6003      	str	r3, [r0, #0]
 800e12a:	6863      	ldr	r3, [r4, #4]
 800e12c:	6043      	str	r3, [r0, #4]
 800e12e:	2a1b      	cmp	r2, #27
 800e130:	d80e      	bhi.n	800e150 <_realloc_r+0x2ac>
 800e132:	0003      	movs	r3, r0
 800e134:	0022      	movs	r2, r4
 800e136:	3308      	adds	r3, #8
 800e138:	3208      	adds	r2, #8
 800e13a:	6811      	ldr	r1, [r2, #0]
 800e13c:	6019      	str	r1, [r3, #0]
 800e13e:	6851      	ldr	r1, [r2, #4]
 800e140:	6059      	str	r1, [r3, #4]
 800e142:	6892      	ldr	r2, [r2, #8]
 800e144:	609a      	str	r2, [r3, #8]
 800e146:	0021      	movs	r1, r4
 800e148:	9802      	ldr	r0, [sp, #8]
 800e14a:	f7ff fdd1 	bl	800dcf0 <_free_r>
 800e14e:	e76c      	b.n	800e02a <_realloc_r+0x186>
 800e150:	68a3      	ldr	r3, [r4, #8]
 800e152:	6083      	str	r3, [r0, #8]
 800e154:	68e3      	ldr	r3, [r4, #12]
 800e156:	60c3      	str	r3, [r0, #12]
 800e158:	2a24      	cmp	r2, #36	; 0x24
 800e15a:	d004      	beq.n	800e166 <_realloc_r+0x2c2>
 800e15c:	0003      	movs	r3, r0
 800e15e:	0022      	movs	r2, r4
 800e160:	3310      	adds	r3, #16
 800e162:	3210      	adds	r2, #16
 800e164:	e7e9      	b.n	800e13a <_realloc_r+0x296>
 800e166:	6923      	ldr	r3, [r4, #16]
 800e168:	0022      	movs	r2, r4
 800e16a:	6103      	str	r3, [r0, #16]
 800e16c:	0003      	movs	r3, r0
 800e16e:	6961      	ldr	r1, [r4, #20]
 800e170:	3318      	adds	r3, #24
 800e172:	3218      	adds	r2, #24
 800e174:	6141      	str	r1, [r0, #20]
 800e176:	e7e0      	b.n	800e13a <_realloc_r+0x296>
 800e178:	0003      	movs	r3, r0
 800e17a:	0022      	movs	r2, r4
 800e17c:	e7dd      	b.n	800e13a <_realloc_r+0x296>
 800e17e:	0021      	movs	r1, r4
 800e180:	f7ff fe7e 	bl	800de80 <memmove>
 800e184:	e7df      	b.n	800e146 <_realloc_r+0x2a2>
 800e186:	9e03      	ldr	r6, [sp, #12]
 800e188:	e6ee      	b.n	800df68 <_realloc_r+0xc4>
 800e18a:	4013      	ands	r3, r2
 800e18c:	431e      	orrs	r6, r3
 800e18e:	607e      	str	r6, [r7, #4]
 800e190:	6843      	ldr	r3, [r0, #4]
 800e192:	431a      	orrs	r2, r3
 800e194:	6042      	str	r2, [r0, #4]
 800e196:	e6fe      	b.n	800df96 <_realloc_r+0xf2>
 800e198:	20000124 	.word	0x20000124

0800e19c <__ascii_wctomb>:
 800e19c:	1e0b      	subs	r3, r1, #0
 800e19e:	d004      	beq.n	800e1aa <__ascii_wctomb+0xe>
 800e1a0:	2aff      	cmp	r2, #255	; 0xff
 800e1a2:	d904      	bls.n	800e1ae <__ascii_wctomb+0x12>
 800e1a4:	238a      	movs	r3, #138	; 0x8a
 800e1a6:	6003      	str	r3, [r0, #0]
 800e1a8:	3b8b      	subs	r3, #139	; 0x8b
 800e1aa:	0018      	movs	r0, r3
 800e1ac:	4770      	bx	lr
 800e1ae:	700a      	strb	r2, [r1, #0]
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	e7fa      	b.n	800e1aa <__ascii_wctomb+0xe>

0800e1b4 <ceil>:
 800e1b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1b6:	004b      	lsls	r3, r1, #1
 800e1b8:	4a39      	ldr	r2, [pc, #228]	; (800e2a0 <ceil+0xec>)
 800e1ba:	0d5b      	lsrs	r3, r3, #21
 800e1bc:	b085      	sub	sp, #20
 800e1be:	189e      	adds	r6, r3, r2
 800e1c0:	9003      	str	r0, [sp, #12]
 800e1c2:	000c      	movs	r4, r1
 800e1c4:	0005      	movs	r5, r0
 800e1c6:	2e13      	cmp	r6, #19
 800e1c8:	dc32      	bgt.n	800e230 <ceil+0x7c>
 800e1ca:	2e00      	cmp	r6, #0
 800e1cc:	da13      	bge.n	800e1f6 <ceil+0x42>
 800e1ce:	4a35      	ldr	r2, [pc, #212]	; (800e2a4 <ceil+0xf0>)
 800e1d0:	4b35      	ldr	r3, [pc, #212]	; (800e2a8 <ceil+0xf4>)
 800e1d2:	f7f2 fa67 	bl	80006a4 <__aeabi_dadd>
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	2300      	movs	r3, #0
 800e1da:	f7f2 f951 	bl	8000480 <__aeabi_dcmpgt>
 800e1de:	2800      	cmp	r0, #0
 800e1e0:	d006      	beq.n	800e1f0 <ceil+0x3c>
 800e1e2:	2c00      	cmp	r4, #0
 800e1e4:	db57      	blt.n	800e296 <ceil+0xe2>
 800e1e6:	432c      	orrs	r4, r5
 800e1e8:	2500      	movs	r5, #0
 800e1ea:	42ac      	cmp	r4, r5
 800e1ec:	d000      	beq.n	800e1f0 <ceil+0x3c>
 800e1ee:	4c2f      	ldr	r4, [pc, #188]	; (800e2ac <ceil+0xf8>)
 800e1f0:	0028      	movs	r0, r5
 800e1f2:	0021      	movs	r1, r4
 800e1f4:	e026      	b.n	800e244 <ceil+0x90>
 800e1f6:	4f2e      	ldr	r7, [pc, #184]	; (800e2b0 <ceil+0xfc>)
 800e1f8:	4137      	asrs	r7, r6
 800e1fa:	003b      	movs	r3, r7
 800e1fc:	400b      	ands	r3, r1
 800e1fe:	4303      	orrs	r3, r0
 800e200:	d020      	beq.n	800e244 <ceil+0x90>
 800e202:	9000      	str	r0, [sp, #0]
 800e204:	9101      	str	r1, [sp, #4]
 800e206:	4a27      	ldr	r2, [pc, #156]	; (800e2a4 <ceil+0xf0>)
 800e208:	4b27      	ldr	r3, [pc, #156]	; (800e2a8 <ceil+0xf4>)
 800e20a:	9800      	ldr	r0, [sp, #0]
 800e20c:	9901      	ldr	r1, [sp, #4]
 800e20e:	f7f2 fa49 	bl	80006a4 <__aeabi_dadd>
 800e212:	2200      	movs	r2, #0
 800e214:	2300      	movs	r3, #0
 800e216:	f7f2 f933 	bl	8000480 <__aeabi_dcmpgt>
 800e21a:	2800      	cmp	r0, #0
 800e21c:	d0e8      	beq.n	800e1f0 <ceil+0x3c>
 800e21e:	2c00      	cmp	r4, #0
 800e220:	dd03      	ble.n	800e22a <ceil+0x76>
 800e222:	2380      	movs	r3, #128	; 0x80
 800e224:	035b      	lsls	r3, r3, #13
 800e226:	4133      	asrs	r3, r6
 800e228:	18e4      	adds	r4, r4, r3
 800e22a:	43bc      	bics	r4, r7
 800e22c:	2500      	movs	r5, #0
 800e22e:	e7df      	b.n	800e1f0 <ceil+0x3c>
 800e230:	2e33      	cmp	r6, #51	; 0x33
 800e232:	dd09      	ble.n	800e248 <ceil+0x94>
 800e234:	2380      	movs	r3, #128	; 0x80
 800e236:	00db      	lsls	r3, r3, #3
 800e238:	429e      	cmp	r6, r3
 800e23a:	d103      	bne.n	800e244 <ceil+0x90>
 800e23c:	0002      	movs	r2, r0
 800e23e:	000b      	movs	r3, r1
 800e240:	f7f2 fa30 	bl	80006a4 <__aeabi_dadd>
 800e244:	b005      	add	sp, #20
 800e246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e248:	2701      	movs	r7, #1
 800e24a:	4a1a      	ldr	r2, [pc, #104]	; (800e2b4 <ceil+0x100>)
 800e24c:	427f      	negs	r7, r7
 800e24e:	189b      	adds	r3, r3, r2
 800e250:	40df      	lsrs	r7, r3
 800e252:	4207      	tst	r7, r0
 800e254:	d0f6      	beq.n	800e244 <ceil+0x90>
 800e256:	9000      	str	r0, [sp, #0]
 800e258:	9101      	str	r1, [sp, #4]
 800e25a:	4a12      	ldr	r2, [pc, #72]	; (800e2a4 <ceil+0xf0>)
 800e25c:	4b12      	ldr	r3, [pc, #72]	; (800e2a8 <ceil+0xf4>)
 800e25e:	9800      	ldr	r0, [sp, #0]
 800e260:	9901      	ldr	r1, [sp, #4]
 800e262:	f7f2 fa1f 	bl	80006a4 <__aeabi_dadd>
 800e266:	2200      	movs	r2, #0
 800e268:	2300      	movs	r3, #0
 800e26a:	f7f2 f909 	bl	8000480 <__aeabi_dcmpgt>
 800e26e:	2800      	cmp	r0, #0
 800e270:	d0be      	beq.n	800e1f0 <ceil+0x3c>
 800e272:	2c00      	cmp	r4, #0
 800e274:	dd02      	ble.n	800e27c <ceil+0xc8>
 800e276:	2e14      	cmp	r6, #20
 800e278:	d102      	bne.n	800e280 <ceil+0xcc>
 800e27a:	3401      	adds	r4, #1
 800e27c:	43bd      	bics	r5, r7
 800e27e:	e7b7      	b.n	800e1f0 <ceil+0x3c>
 800e280:	2334      	movs	r3, #52	; 0x34
 800e282:	1b9e      	subs	r6, r3, r6
 800e284:	3b33      	subs	r3, #51	; 0x33
 800e286:	40b3      	lsls	r3, r6
 800e288:	18ed      	adds	r5, r5, r3
 800e28a:	9b03      	ldr	r3, [sp, #12]
 800e28c:	429d      	cmp	r5, r3
 800e28e:	419b      	sbcs	r3, r3
 800e290:	425b      	negs	r3, r3
 800e292:	18e4      	adds	r4, r4, r3
 800e294:	e7f2      	b.n	800e27c <ceil+0xc8>
 800e296:	2480      	movs	r4, #128	; 0x80
 800e298:	2500      	movs	r5, #0
 800e29a:	0624      	lsls	r4, r4, #24
 800e29c:	e7a8      	b.n	800e1f0 <ceil+0x3c>
 800e29e:	46c0      	nop			; (mov r8, r8)
 800e2a0:	fffffc01 	.word	0xfffffc01
 800e2a4:	8800759c 	.word	0x8800759c
 800e2a8:	7e37e43c 	.word	0x7e37e43c
 800e2ac:	3ff00000 	.word	0x3ff00000
 800e2b0:	000fffff 	.word	0x000fffff
 800e2b4:	fffffbed 	.word	0xfffffbed

0800e2b8 <floor>:
 800e2b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2ba:	004b      	lsls	r3, r1, #1
 800e2bc:	4a39      	ldr	r2, [pc, #228]	; (800e3a4 <floor+0xec>)
 800e2be:	0d5b      	lsrs	r3, r3, #21
 800e2c0:	b085      	sub	sp, #20
 800e2c2:	189e      	adds	r6, r3, r2
 800e2c4:	9003      	str	r0, [sp, #12]
 800e2c6:	000c      	movs	r4, r1
 800e2c8:	0005      	movs	r5, r0
 800e2ca:	2e13      	cmp	r6, #19
 800e2cc:	dc34      	bgt.n	800e338 <floor+0x80>
 800e2ce:	2e00      	cmp	r6, #0
 800e2d0:	da15      	bge.n	800e2fe <floor+0x46>
 800e2d2:	4a35      	ldr	r2, [pc, #212]	; (800e3a8 <floor+0xf0>)
 800e2d4:	4b35      	ldr	r3, [pc, #212]	; (800e3ac <floor+0xf4>)
 800e2d6:	f7f2 f9e5 	bl	80006a4 <__aeabi_dadd>
 800e2da:	2200      	movs	r2, #0
 800e2dc:	2300      	movs	r3, #0
 800e2de:	f7f2 f8cf 	bl	8000480 <__aeabi_dcmpgt>
 800e2e2:	2800      	cmp	r0, #0
 800e2e4:	d008      	beq.n	800e2f8 <floor+0x40>
 800e2e6:	2c00      	cmp	r4, #0
 800e2e8:	da59      	bge.n	800e39e <floor+0xe6>
 800e2ea:	0063      	lsls	r3, r4, #1
 800e2ec:	085b      	lsrs	r3, r3, #1
 800e2ee:	432b      	orrs	r3, r5
 800e2f0:	2500      	movs	r5, #0
 800e2f2:	42ab      	cmp	r3, r5
 800e2f4:	d000      	beq.n	800e2f8 <floor+0x40>
 800e2f6:	4c2e      	ldr	r4, [pc, #184]	; (800e3b0 <floor+0xf8>)
 800e2f8:	0028      	movs	r0, r5
 800e2fa:	0021      	movs	r1, r4
 800e2fc:	e026      	b.n	800e34c <floor+0x94>
 800e2fe:	4f2d      	ldr	r7, [pc, #180]	; (800e3b4 <floor+0xfc>)
 800e300:	4137      	asrs	r7, r6
 800e302:	003b      	movs	r3, r7
 800e304:	400b      	ands	r3, r1
 800e306:	4303      	orrs	r3, r0
 800e308:	d020      	beq.n	800e34c <floor+0x94>
 800e30a:	9000      	str	r0, [sp, #0]
 800e30c:	9101      	str	r1, [sp, #4]
 800e30e:	4a26      	ldr	r2, [pc, #152]	; (800e3a8 <floor+0xf0>)
 800e310:	4b26      	ldr	r3, [pc, #152]	; (800e3ac <floor+0xf4>)
 800e312:	9800      	ldr	r0, [sp, #0]
 800e314:	9901      	ldr	r1, [sp, #4]
 800e316:	f7f2 f9c5 	bl	80006a4 <__aeabi_dadd>
 800e31a:	2200      	movs	r2, #0
 800e31c:	2300      	movs	r3, #0
 800e31e:	f7f2 f8af 	bl	8000480 <__aeabi_dcmpgt>
 800e322:	2800      	cmp	r0, #0
 800e324:	d0e8      	beq.n	800e2f8 <floor+0x40>
 800e326:	2c00      	cmp	r4, #0
 800e328:	da03      	bge.n	800e332 <floor+0x7a>
 800e32a:	2380      	movs	r3, #128	; 0x80
 800e32c:	035b      	lsls	r3, r3, #13
 800e32e:	4133      	asrs	r3, r6
 800e330:	18e4      	adds	r4, r4, r3
 800e332:	43bc      	bics	r4, r7
 800e334:	2500      	movs	r5, #0
 800e336:	e7df      	b.n	800e2f8 <floor+0x40>
 800e338:	2e33      	cmp	r6, #51	; 0x33
 800e33a:	dd09      	ble.n	800e350 <floor+0x98>
 800e33c:	2380      	movs	r3, #128	; 0x80
 800e33e:	00db      	lsls	r3, r3, #3
 800e340:	429e      	cmp	r6, r3
 800e342:	d103      	bne.n	800e34c <floor+0x94>
 800e344:	0002      	movs	r2, r0
 800e346:	000b      	movs	r3, r1
 800e348:	f7f2 f9ac 	bl	80006a4 <__aeabi_dadd>
 800e34c:	b005      	add	sp, #20
 800e34e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e350:	2701      	movs	r7, #1
 800e352:	4a19      	ldr	r2, [pc, #100]	; (800e3b8 <floor+0x100>)
 800e354:	427f      	negs	r7, r7
 800e356:	189b      	adds	r3, r3, r2
 800e358:	40df      	lsrs	r7, r3
 800e35a:	4207      	tst	r7, r0
 800e35c:	d0f6      	beq.n	800e34c <floor+0x94>
 800e35e:	9000      	str	r0, [sp, #0]
 800e360:	9101      	str	r1, [sp, #4]
 800e362:	4a11      	ldr	r2, [pc, #68]	; (800e3a8 <floor+0xf0>)
 800e364:	4b11      	ldr	r3, [pc, #68]	; (800e3ac <floor+0xf4>)
 800e366:	9800      	ldr	r0, [sp, #0]
 800e368:	9901      	ldr	r1, [sp, #4]
 800e36a:	f7f2 f99b 	bl	80006a4 <__aeabi_dadd>
 800e36e:	2200      	movs	r2, #0
 800e370:	2300      	movs	r3, #0
 800e372:	f7f2 f885 	bl	8000480 <__aeabi_dcmpgt>
 800e376:	2800      	cmp	r0, #0
 800e378:	d0be      	beq.n	800e2f8 <floor+0x40>
 800e37a:	2c00      	cmp	r4, #0
 800e37c:	da02      	bge.n	800e384 <floor+0xcc>
 800e37e:	2e14      	cmp	r6, #20
 800e380:	d102      	bne.n	800e388 <floor+0xd0>
 800e382:	3401      	adds	r4, #1
 800e384:	43bd      	bics	r5, r7
 800e386:	e7b7      	b.n	800e2f8 <floor+0x40>
 800e388:	2334      	movs	r3, #52	; 0x34
 800e38a:	1b9e      	subs	r6, r3, r6
 800e38c:	3b33      	subs	r3, #51	; 0x33
 800e38e:	40b3      	lsls	r3, r6
 800e390:	18ed      	adds	r5, r5, r3
 800e392:	9b03      	ldr	r3, [sp, #12]
 800e394:	429d      	cmp	r5, r3
 800e396:	419b      	sbcs	r3, r3
 800e398:	425b      	negs	r3, r3
 800e39a:	18e4      	adds	r4, r4, r3
 800e39c:	e7f2      	b.n	800e384 <floor+0xcc>
 800e39e:	2500      	movs	r5, #0
 800e3a0:	002c      	movs	r4, r5
 800e3a2:	e7a9      	b.n	800e2f8 <floor+0x40>
 800e3a4:	fffffc01 	.word	0xfffffc01
 800e3a8:	8800759c 	.word	0x8800759c
 800e3ac:	7e37e43c 	.word	0x7e37e43c
 800e3b0:	bff00000 	.word	0xbff00000
 800e3b4:	000fffff 	.word	0x000fffff
 800e3b8:	fffffbed 	.word	0xfffffbed

0800e3bc <round>:
 800e3bc:	b570      	push	{r4, r5, r6, lr}
 800e3be:	004a      	lsls	r2, r1, #1
 800e3c0:	4d1d      	ldr	r5, [pc, #116]	; (800e438 <round+0x7c>)
 800e3c2:	0d52      	lsrs	r2, r2, #21
 800e3c4:	1955      	adds	r5, r2, r5
 800e3c6:	000e      	movs	r6, r1
 800e3c8:	2d13      	cmp	r5, #19
 800e3ca:	dc18      	bgt.n	800e3fe <round+0x42>
 800e3cc:	2d00      	cmp	r5, #0
 800e3ce:	da09      	bge.n	800e3e4 <round+0x28>
 800e3d0:	0fcb      	lsrs	r3, r1, #31
 800e3d2:	07db      	lsls	r3, r3, #31
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	1c69      	adds	r1, r5, #1
 800e3d8:	d101      	bne.n	800e3de <round+0x22>
 800e3da:	4918      	ldr	r1, [pc, #96]	; (800e43c <round+0x80>)
 800e3dc:	430b      	orrs	r3, r1
 800e3de:	0019      	movs	r1, r3
 800e3e0:	0010      	movs	r0, r2
 800e3e2:	e016      	b.n	800e412 <round+0x56>
 800e3e4:	4a16      	ldr	r2, [pc, #88]	; (800e440 <round+0x84>)
 800e3e6:	412a      	asrs	r2, r5
 800e3e8:	420a      	tst	r2, r1
 800e3ea:	d101      	bne.n	800e3f0 <round+0x34>
 800e3ec:	2800      	cmp	r0, #0
 800e3ee:	d010      	beq.n	800e412 <round+0x56>
 800e3f0:	2380      	movs	r3, #128	; 0x80
 800e3f2:	031b      	lsls	r3, r3, #12
 800e3f4:	412b      	asrs	r3, r5
 800e3f6:	199b      	adds	r3, r3, r6
 800e3f8:	4393      	bics	r3, r2
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	e7ef      	b.n	800e3de <round+0x22>
 800e3fe:	2d33      	cmp	r5, #51	; 0x33
 800e400:	dd08      	ble.n	800e414 <round+0x58>
 800e402:	2380      	movs	r3, #128	; 0x80
 800e404:	00db      	lsls	r3, r3, #3
 800e406:	429d      	cmp	r5, r3
 800e408:	d103      	bne.n	800e412 <round+0x56>
 800e40a:	0002      	movs	r2, r0
 800e40c:	000b      	movs	r3, r1
 800e40e:	f7f2 f949 	bl	80006a4 <__aeabi_dadd>
 800e412:	bd70      	pop	{r4, r5, r6, pc}
 800e414:	4e0b      	ldr	r6, [pc, #44]	; (800e444 <round+0x88>)
 800e416:	1992      	adds	r2, r2, r6
 800e418:	2601      	movs	r6, #1
 800e41a:	4276      	negs	r6, r6
 800e41c:	40d6      	lsrs	r6, r2
 800e41e:	4206      	tst	r6, r0
 800e420:	d0f7      	beq.n	800e412 <round+0x56>
 800e422:	2233      	movs	r2, #51	; 0x33
 800e424:	1b55      	subs	r5, r2, r5
 800e426:	3a32      	subs	r2, #50	; 0x32
 800e428:	40aa      	lsls	r2, r5
 800e42a:	1812      	adds	r2, r2, r0
 800e42c:	4282      	cmp	r2, r0
 800e42e:	41a4      	sbcs	r4, r4
 800e430:	4264      	negs	r4, r4
 800e432:	190b      	adds	r3, r1, r4
 800e434:	43b2      	bics	r2, r6
 800e436:	e7d2      	b.n	800e3de <round+0x22>
 800e438:	fffffc01 	.word	0xfffffc01
 800e43c:	3ff00000 	.word	0x3ff00000
 800e440:	000fffff 	.word	0x000fffff
 800e444:	fffffbed 	.word	0xfffffbed

0800e448 <_init>:
 800e448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e44a:	46c0      	nop			; (mov r8, r8)
 800e44c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e44e:	bc08      	pop	{r3}
 800e450:	469e      	mov	lr, r3
 800e452:	4770      	bx	lr

0800e454 <_fini>:
 800e454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e456:	46c0      	nop			; (mov r8, r8)
 800e458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e45a:	bc08      	pop	{r3}
 800e45c:	469e      	mov	lr, r3
 800e45e:	4770      	bx	lr
