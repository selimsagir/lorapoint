
lora_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa18  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  0800aad8  0800aad8  0001aad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800addc  0800addc  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800addc  0800addc  0001addc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ade4  0800ade4  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ade4  0800ade4  0001ade4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ade8  0800ade8  0001ade8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800adec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004fc  20000094  0800ae80  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000590  0800ae80  00020590  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002001d  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004a29  00000000  00000000  000400d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011b8  00000000  00000000  00044b08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fe8  00000000  00000000  00045cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020ac9  00000000  00000000  00046ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017833  00000000  00000000  00067771  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a9dcd  00000000  00000000  0007efa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  00128d71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041cc  00000000  00000000  00128df0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000094 	.word	0x20000094
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800aac0 	.word	0x0800aac0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000098 	.word	0x20000098
 8000104:	0800aac0 	.word	0x0800aac0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c10      	adds	r0, r2, #0
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	1c19      	adds	r1, r3, #0
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f001 f813 	bl	8001430 <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 ff6d 	bl	80012f4 <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f001 f805 	bl	8001430 <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 fffb 	bl	8001430 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ff8d 	bl	8001368 <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 ff83 	bl	8001368 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_uldivmod>:
 8000470:	2b00      	cmp	r3, #0
 8000472:	d111      	bne.n	8000498 <__aeabi_uldivmod+0x28>
 8000474:	2a00      	cmp	r2, #0
 8000476:	d10f      	bne.n	8000498 <__aeabi_uldivmod+0x28>
 8000478:	2900      	cmp	r1, #0
 800047a:	d100      	bne.n	800047e <__aeabi_uldivmod+0xe>
 800047c:	2800      	cmp	r0, #0
 800047e:	d002      	beq.n	8000486 <__aeabi_uldivmod+0x16>
 8000480:	2100      	movs	r1, #0
 8000482:	43c9      	mvns	r1, r1
 8000484:	1c08      	adds	r0, r1, #0
 8000486:	b407      	push	{r0, r1, r2}
 8000488:	4802      	ldr	r0, [pc, #8]	; (8000494 <__aeabi_uldivmod+0x24>)
 800048a:	a102      	add	r1, pc, #8	; (adr r1, 8000494 <__aeabi_uldivmod+0x24>)
 800048c:	1840      	adds	r0, r0, r1
 800048e:	9002      	str	r0, [sp, #8]
 8000490:	bd03      	pop	{r0, r1, pc}
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	ffffff5d 	.word	0xffffff5d
 8000498:	b403      	push	{r0, r1}
 800049a:	4668      	mov	r0, sp
 800049c:	b501      	push	{r0, lr}
 800049e:	9802      	ldr	r0, [sp, #8]
 80004a0:	f000 f824 	bl	80004ec <__udivmoddi4>
 80004a4:	9b01      	ldr	r3, [sp, #4]
 80004a6:	469e      	mov	lr, r3
 80004a8:	b002      	add	sp, #8
 80004aa:	bc0c      	pop	{r2, r3}
 80004ac:	4770      	bx	lr
 80004ae:	46c0      	nop			; (mov r8, r8)

080004b0 <__aeabi_d2uiz>:
 80004b0:	b570      	push	{r4, r5, r6, lr}
 80004b2:	2200      	movs	r2, #0
 80004b4:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <__aeabi_d2uiz+0x38>)
 80004b6:	0004      	movs	r4, r0
 80004b8:	000d      	movs	r5, r1
 80004ba:	f7ff ffcf 	bl	800045c <__aeabi_dcmpge>
 80004be:	2800      	cmp	r0, #0
 80004c0:	d104      	bne.n	80004cc <__aeabi_d2uiz+0x1c>
 80004c2:	0020      	movs	r0, r4
 80004c4:	0029      	movs	r1, r5
 80004c6:	f001 fdab 	bl	8002020 <__aeabi_d2iz>
 80004ca:	bd70      	pop	{r4, r5, r6, pc}
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <__aeabi_d2uiz+0x38>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	0020      	movs	r0, r4
 80004d2:	0029      	movs	r1, r5
 80004d4:	f001 fa8e 	bl	80019f4 <__aeabi_dsub>
 80004d8:	f001 fda2 	bl	8002020 <__aeabi_d2iz>
 80004dc:	2380      	movs	r3, #128	; 0x80
 80004de:	061b      	lsls	r3, r3, #24
 80004e0:	469c      	mov	ip, r3
 80004e2:	4460      	add	r0, ip
 80004e4:	e7f1      	b.n	80004ca <__aeabi_d2uiz+0x1a>
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	41e00000 	.word	0x41e00000

080004ec <__udivmoddi4>:
 80004ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ee:	4657      	mov	r7, sl
 80004f0:	464e      	mov	r6, r9
 80004f2:	4645      	mov	r5, r8
 80004f4:	46de      	mov	lr, fp
 80004f6:	b5e0      	push	{r5, r6, r7, lr}
 80004f8:	0004      	movs	r4, r0
 80004fa:	b083      	sub	sp, #12
 80004fc:	000d      	movs	r5, r1
 80004fe:	4692      	mov	sl, r2
 8000500:	4699      	mov	r9, r3
 8000502:	428b      	cmp	r3, r1
 8000504:	d82f      	bhi.n	8000566 <__udivmoddi4+0x7a>
 8000506:	d02c      	beq.n	8000562 <__udivmoddi4+0x76>
 8000508:	4649      	mov	r1, r9
 800050a:	4650      	mov	r0, sl
 800050c:	f001 fe54 	bl	80021b8 <__clzdi2>
 8000510:	0029      	movs	r1, r5
 8000512:	0006      	movs	r6, r0
 8000514:	0020      	movs	r0, r4
 8000516:	f001 fe4f 	bl	80021b8 <__clzdi2>
 800051a:	1a33      	subs	r3, r6, r0
 800051c:	4698      	mov	r8, r3
 800051e:	3b20      	subs	r3, #32
 8000520:	469b      	mov	fp, r3
 8000522:	d500      	bpl.n	8000526 <__udivmoddi4+0x3a>
 8000524:	e074      	b.n	8000610 <__udivmoddi4+0x124>
 8000526:	4653      	mov	r3, sl
 8000528:	465a      	mov	r2, fp
 800052a:	4093      	lsls	r3, r2
 800052c:	001f      	movs	r7, r3
 800052e:	4653      	mov	r3, sl
 8000530:	4642      	mov	r2, r8
 8000532:	4093      	lsls	r3, r2
 8000534:	001e      	movs	r6, r3
 8000536:	42af      	cmp	r7, r5
 8000538:	d829      	bhi.n	800058e <__udivmoddi4+0xa2>
 800053a:	d026      	beq.n	800058a <__udivmoddi4+0x9e>
 800053c:	465b      	mov	r3, fp
 800053e:	1ba4      	subs	r4, r4, r6
 8000540:	41bd      	sbcs	r5, r7
 8000542:	2b00      	cmp	r3, #0
 8000544:	da00      	bge.n	8000548 <__udivmoddi4+0x5c>
 8000546:	e079      	b.n	800063c <__udivmoddi4+0x150>
 8000548:	2200      	movs	r2, #0
 800054a:	2300      	movs	r3, #0
 800054c:	9200      	str	r2, [sp, #0]
 800054e:	9301      	str	r3, [sp, #4]
 8000550:	2301      	movs	r3, #1
 8000552:	465a      	mov	r2, fp
 8000554:	4093      	lsls	r3, r2
 8000556:	9301      	str	r3, [sp, #4]
 8000558:	2301      	movs	r3, #1
 800055a:	4642      	mov	r2, r8
 800055c:	4093      	lsls	r3, r2
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	e019      	b.n	8000596 <__udivmoddi4+0xaa>
 8000562:	4282      	cmp	r2, r0
 8000564:	d9d0      	bls.n	8000508 <__udivmoddi4+0x1c>
 8000566:	2200      	movs	r2, #0
 8000568:	2300      	movs	r3, #0
 800056a:	9200      	str	r2, [sp, #0]
 800056c:	9301      	str	r3, [sp, #4]
 800056e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <__udivmoddi4+0x8c>
 8000574:	601c      	str	r4, [r3, #0]
 8000576:	605d      	str	r5, [r3, #4]
 8000578:	9800      	ldr	r0, [sp, #0]
 800057a:	9901      	ldr	r1, [sp, #4]
 800057c:	b003      	add	sp, #12
 800057e:	bc3c      	pop	{r2, r3, r4, r5}
 8000580:	4690      	mov	r8, r2
 8000582:	4699      	mov	r9, r3
 8000584:	46a2      	mov	sl, r4
 8000586:	46ab      	mov	fp, r5
 8000588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800058a:	42a3      	cmp	r3, r4
 800058c:	d9d6      	bls.n	800053c <__udivmoddi4+0x50>
 800058e:	2200      	movs	r2, #0
 8000590:	2300      	movs	r3, #0
 8000592:	9200      	str	r2, [sp, #0]
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	4643      	mov	r3, r8
 8000598:	2b00      	cmp	r3, #0
 800059a:	d0e8      	beq.n	800056e <__udivmoddi4+0x82>
 800059c:	07fb      	lsls	r3, r7, #31
 800059e:	0872      	lsrs	r2, r6, #1
 80005a0:	431a      	orrs	r2, r3
 80005a2:	4646      	mov	r6, r8
 80005a4:	087b      	lsrs	r3, r7, #1
 80005a6:	e00e      	b.n	80005c6 <__udivmoddi4+0xda>
 80005a8:	42ab      	cmp	r3, r5
 80005aa:	d101      	bne.n	80005b0 <__udivmoddi4+0xc4>
 80005ac:	42a2      	cmp	r2, r4
 80005ae:	d80c      	bhi.n	80005ca <__udivmoddi4+0xde>
 80005b0:	1aa4      	subs	r4, r4, r2
 80005b2:	419d      	sbcs	r5, r3
 80005b4:	2001      	movs	r0, #1
 80005b6:	1924      	adds	r4, r4, r4
 80005b8:	416d      	adcs	r5, r5
 80005ba:	2100      	movs	r1, #0
 80005bc:	3e01      	subs	r6, #1
 80005be:	1824      	adds	r4, r4, r0
 80005c0:	414d      	adcs	r5, r1
 80005c2:	2e00      	cmp	r6, #0
 80005c4:	d006      	beq.n	80005d4 <__udivmoddi4+0xe8>
 80005c6:	42ab      	cmp	r3, r5
 80005c8:	d9ee      	bls.n	80005a8 <__udivmoddi4+0xbc>
 80005ca:	3e01      	subs	r6, #1
 80005cc:	1924      	adds	r4, r4, r4
 80005ce:	416d      	adcs	r5, r5
 80005d0:	2e00      	cmp	r6, #0
 80005d2:	d1f8      	bne.n	80005c6 <__udivmoddi4+0xda>
 80005d4:	465b      	mov	r3, fp
 80005d6:	9800      	ldr	r0, [sp, #0]
 80005d8:	9901      	ldr	r1, [sp, #4]
 80005da:	1900      	adds	r0, r0, r4
 80005dc:	4169      	adcs	r1, r5
 80005de:	2b00      	cmp	r3, #0
 80005e0:	db22      	blt.n	8000628 <__udivmoddi4+0x13c>
 80005e2:	002b      	movs	r3, r5
 80005e4:	465a      	mov	r2, fp
 80005e6:	40d3      	lsrs	r3, r2
 80005e8:	002a      	movs	r2, r5
 80005ea:	4644      	mov	r4, r8
 80005ec:	40e2      	lsrs	r2, r4
 80005ee:	001c      	movs	r4, r3
 80005f0:	465b      	mov	r3, fp
 80005f2:	0015      	movs	r5, r2
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	db2c      	blt.n	8000652 <__udivmoddi4+0x166>
 80005f8:	0026      	movs	r6, r4
 80005fa:	409e      	lsls	r6, r3
 80005fc:	0033      	movs	r3, r6
 80005fe:	0026      	movs	r6, r4
 8000600:	4647      	mov	r7, r8
 8000602:	40be      	lsls	r6, r7
 8000604:	0032      	movs	r2, r6
 8000606:	1a80      	subs	r0, r0, r2
 8000608:	4199      	sbcs	r1, r3
 800060a:	9000      	str	r0, [sp, #0]
 800060c:	9101      	str	r1, [sp, #4]
 800060e:	e7ae      	b.n	800056e <__udivmoddi4+0x82>
 8000610:	4642      	mov	r2, r8
 8000612:	2320      	movs	r3, #32
 8000614:	1a9b      	subs	r3, r3, r2
 8000616:	4652      	mov	r2, sl
 8000618:	40da      	lsrs	r2, r3
 800061a:	4641      	mov	r1, r8
 800061c:	0013      	movs	r3, r2
 800061e:	464a      	mov	r2, r9
 8000620:	408a      	lsls	r2, r1
 8000622:	0017      	movs	r7, r2
 8000624:	431f      	orrs	r7, r3
 8000626:	e782      	b.n	800052e <__udivmoddi4+0x42>
 8000628:	4642      	mov	r2, r8
 800062a:	2320      	movs	r3, #32
 800062c:	1a9b      	subs	r3, r3, r2
 800062e:	002a      	movs	r2, r5
 8000630:	4646      	mov	r6, r8
 8000632:	409a      	lsls	r2, r3
 8000634:	0023      	movs	r3, r4
 8000636:	40f3      	lsrs	r3, r6
 8000638:	4313      	orrs	r3, r2
 800063a:	e7d5      	b.n	80005e8 <__udivmoddi4+0xfc>
 800063c:	4642      	mov	r2, r8
 800063e:	2320      	movs	r3, #32
 8000640:	2100      	movs	r1, #0
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	2200      	movs	r2, #0
 8000646:	9100      	str	r1, [sp, #0]
 8000648:	9201      	str	r2, [sp, #4]
 800064a:	2201      	movs	r2, #1
 800064c:	40da      	lsrs	r2, r3
 800064e:	9201      	str	r2, [sp, #4]
 8000650:	e782      	b.n	8000558 <__udivmoddi4+0x6c>
 8000652:	4642      	mov	r2, r8
 8000654:	2320      	movs	r3, #32
 8000656:	0026      	movs	r6, r4
 8000658:	1a9b      	subs	r3, r3, r2
 800065a:	40de      	lsrs	r6, r3
 800065c:	002f      	movs	r7, r5
 800065e:	46b4      	mov	ip, r6
 8000660:	4097      	lsls	r7, r2
 8000662:	4666      	mov	r6, ip
 8000664:	003b      	movs	r3, r7
 8000666:	4333      	orrs	r3, r6
 8000668:	e7c9      	b.n	80005fe <__udivmoddi4+0x112>
 800066a:	46c0      	nop			; (mov r8, r8)

0800066c <__aeabi_dadd>:
 800066c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800066e:	4645      	mov	r5, r8
 8000670:	46de      	mov	lr, fp
 8000672:	4657      	mov	r7, sl
 8000674:	464e      	mov	r6, r9
 8000676:	030c      	lsls	r4, r1, #12
 8000678:	b5e0      	push	{r5, r6, r7, lr}
 800067a:	004e      	lsls	r6, r1, #1
 800067c:	0fc9      	lsrs	r1, r1, #31
 800067e:	4688      	mov	r8, r1
 8000680:	000d      	movs	r5, r1
 8000682:	0a61      	lsrs	r1, r4, #9
 8000684:	0f44      	lsrs	r4, r0, #29
 8000686:	430c      	orrs	r4, r1
 8000688:	00c7      	lsls	r7, r0, #3
 800068a:	0319      	lsls	r1, r3, #12
 800068c:	0058      	lsls	r0, r3, #1
 800068e:	0fdb      	lsrs	r3, r3, #31
 8000690:	469b      	mov	fp, r3
 8000692:	0a4b      	lsrs	r3, r1, #9
 8000694:	0f51      	lsrs	r1, r2, #29
 8000696:	430b      	orrs	r3, r1
 8000698:	0d76      	lsrs	r6, r6, #21
 800069a:	0d40      	lsrs	r0, r0, #21
 800069c:	0019      	movs	r1, r3
 800069e:	00d2      	lsls	r2, r2, #3
 80006a0:	45d8      	cmp	r8, fp
 80006a2:	d100      	bne.n	80006a6 <__aeabi_dadd+0x3a>
 80006a4:	e0ae      	b.n	8000804 <__aeabi_dadd+0x198>
 80006a6:	1a35      	subs	r5, r6, r0
 80006a8:	2d00      	cmp	r5, #0
 80006aa:	dc00      	bgt.n	80006ae <__aeabi_dadd+0x42>
 80006ac:	e0f6      	b.n	800089c <__aeabi_dadd+0x230>
 80006ae:	2800      	cmp	r0, #0
 80006b0:	d10f      	bne.n	80006d2 <__aeabi_dadd+0x66>
 80006b2:	4313      	orrs	r3, r2
 80006b4:	d100      	bne.n	80006b8 <__aeabi_dadd+0x4c>
 80006b6:	e0db      	b.n	8000870 <__aeabi_dadd+0x204>
 80006b8:	1e6b      	subs	r3, r5, #1
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d000      	beq.n	80006c0 <__aeabi_dadd+0x54>
 80006be:	e137      	b.n	8000930 <__aeabi_dadd+0x2c4>
 80006c0:	1aba      	subs	r2, r7, r2
 80006c2:	4297      	cmp	r7, r2
 80006c4:	41bf      	sbcs	r7, r7
 80006c6:	1a64      	subs	r4, r4, r1
 80006c8:	427f      	negs	r7, r7
 80006ca:	1be4      	subs	r4, r4, r7
 80006cc:	2601      	movs	r6, #1
 80006ce:	0017      	movs	r7, r2
 80006d0:	e024      	b.n	800071c <__aeabi_dadd+0xb0>
 80006d2:	4bc6      	ldr	r3, [pc, #792]	; (80009ec <__aeabi_dadd+0x380>)
 80006d4:	429e      	cmp	r6, r3
 80006d6:	d04d      	beq.n	8000774 <__aeabi_dadd+0x108>
 80006d8:	2380      	movs	r3, #128	; 0x80
 80006da:	041b      	lsls	r3, r3, #16
 80006dc:	4319      	orrs	r1, r3
 80006de:	2d38      	cmp	r5, #56	; 0x38
 80006e0:	dd00      	ble.n	80006e4 <__aeabi_dadd+0x78>
 80006e2:	e107      	b.n	80008f4 <__aeabi_dadd+0x288>
 80006e4:	2d1f      	cmp	r5, #31
 80006e6:	dd00      	ble.n	80006ea <__aeabi_dadd+0x7e>
 80006e8:	e138      	b.n	800095c <__aeabi_dadd+0x2f0>
 80006ea:	2020      	movs	r0, #32
 80006ec:	1b43      	subs	r3, r0, r5
 80006ee:	469a      	mov	sl, r3
 80006f0:	000b      	movs	r3, r1
 80006f2:	4650      	mov	r0, sl
 80006f4:	4083      	lsls	r3, r0
 80006f6:	4699      	mov	r9, r3
 80006f8:	0013      	movs	r3, r2
 80006fa:	4648      	mov	r0, r9
 80006fc:	40eb      	lsrs	r3, r5
 80006fe:	4318      	orrs	r0, r3
 8000700:	0003      	movs	r3, r0
 8000702:	4650      	mov	r0, sl
 8000704:	4082      	lsls	r2, r0
 8000706:	1e50      	subs	r0, r2, #1
 8000708:	4182      	sbcs	r2, r0
 800070a:	40e9      	lsrs	r1, r5
 800070c:	431a      	orrs	r2, r3
 800070e:	1aba      	subs	r2, r7, r2
 8000710:	1a61      	subs	r1, r4, r1
 8000712:	4297      	cmp	r7, r2
 8000714:	41a4      	sbcs	r4, r4
 8000716:	0017      	movs	r7, r2
 8000718:	4264      	negs	r4, r4
 800071a:	1b0c      	subs	r4, r1, r4
 800071c:	0223      	lsls	r3, r4, #8
 800071e:	d562      	bpl.n	80007e6 <__aeabi_dadd+0x17a>
 8000720:	0264      	lsls	r4, r4, #9
 8000722:	0a65      	lsrs	r5, r4, #9
 8000724:	2d00      	cmp	r5, #0
 8000726:	d100      	bne.n	800072a <__aeabi_dadd+0xbe>
 8000728:	e0df      	b.n	80008ea <__aeabi_dadd+0x27e>
 800072a:	0028      	movs	r0, r5
 800072c:	f001 fd26 	bl	800217c <__clzsi2>
 8000730:	0003      	movs	r3, r0
 8000732:	3b08      	subs	r3, #8
 8000734:	2b1f      	cmp	r3, #31
 8000736:	dd00      	ble.n	800073a <__aeabi_dadd+0xce>
 8000738:	e0d2      	b.n	80008e0 <__aeabi_dadd+0x274>
 800073a:	2220      	movs	r2, #32
 800073c:	003c      	movs	r4, r7
 800073e:	1ad2      	subs	r2, r2, r3
 8000740:	409d      	lsls	r5, r3
 8000742:	40d4      	lsrs	r4, r2
 8000744:	409f      	lsls	r7, r3
 8000746:	4325      	orrs	r5, r4
 8000748:	429e      	cmp	r6, r3
 800074a:	dd00      	ble.n	800074e <__aeabi_dadd+0xe2>
 800074c:	e0c4      	b.n	80008d8 <__aeabi_dadd+0x26c>
 800074e:	1b9e      	subs	r6, r3, r6
 8000750:	1c73      	adds	r3, r6, #1
 8000752:	2b1f      	cmp	r3, #31
 8000754:	dd00      	ble.n	8000758 <__aeabi_dadd+0xec>
 8000756:	e0f1      	b.n	800093c <__aeabi_dadd+0x2d0>
 8000758:	2220      	movs	r2, #32
 800075a:	0038      	movs	r0, r7
 800075c:	0029      	movs	r1, r5
 800075e:	1ad2      	subs	r2, r2, r3
 8000760:	40d8      	lsrs	r0, r3
 8000762:	4091      	lsls	r1, r2
 8000764:	4097      	lsls	r7, r2
 8000766:	002c      	movs	r4, r5
 8000768:	4301      	orrs	r1, r0
 800076a:	1e78      	subs	r0, r7, #1
 800076c:	4187      	sbcs	r7, r0
 800076e:	40dc      	lsrs	r4, r3
 8000770:	2600      	movs	r6, #0
 8000772:	430f      	orrs	r7, r1
 8000774:	077b      	lsls	r3, r7, #29
 8000776:	d009      	beq.n	800078c <__aeabi_dadd+0x120>
 8000778:	230f      	movs	r3, #15
 800077a:	403b      	ands	r3, r7
 800077c:	2b04      	cmp	r3, #4
 800077e:	d005      	beq.n	800078c <__aeabi_dadd+0x120>
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	42bb      	cmp	r3, r7
 8000784:	41bf      	sbcs	r7, r7
 8000786:	427f      	negs	r7, r7
 8000788:	19e4      	adds	r4, r4, r7
 800078a:	001f      	movs	r7, r3
 800078c:	0223      	lsls	r3, r4, #8
 800078e:	d52c      	bpl.n	80007ea <__aeabi_dadd+0x17e>
 8000790:	4b96      	ldr	r3, [pc, #600]	; (80009ec <__aeabi_dadd+0x380>)
 8000792:	3601      	adds	r6, #1
 8000794:	429e      	cmp	r6, r3
 8000796:	d100      	bne.n	800079a <__aeabi_dadd+0x12e>
 8000798:	e09a      	b.n	80008d0 <__aeabi_dadd+0x264>
 800079a:	4645      	mov	r5, r8
 800079c:	4b94      	ldr	r3, [pc, #592]	; (80009f0 <__aeabi_dadd+0x384>)
 800079e:	08ff      	lsrs	r7, r7, #3
 80007a0:	401c      	ands	r4, r3
 80007a2:	0760      	lsls	r0, r4, #29
 80007a4:	0576      	lsls	r6, r6, #21
 80007a6:	0264      	lsls	r4, r4, #9
 80007a8:	4307      	orrs	r7, r0
 80007aa:	0b24      	lsrs	r4, r4, #12
 80007ac:	0d76      	lsrs	r6, r6, #21
 80007ae:	2100      	movs	r1, #0
 80007b0:	0324      	lsls	r4, r4, #12
 80007b2:	0b23      	lsrs	r3, r4, #12
 80007b4:	0d0c      	lsrs	r4, r1, #20
 80007b6:	4a8f      	ldr	r2, [pc, #572]	; (80009f4 <__aeabi_dadd+0x388>)
 80007b8:	0524      	lsls	r4, r4, #20
 80007ba:	431c      	orrs	r4, r3
 80007bc:	4014      	ands	r4, r2
 80007be:	0533      	lsls	r3, r6, #20
 80007c0:	4323      	orrs	r3, r4
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	07ed      	lsls	r5, r5, #31
 80007c6:	085b      	lsrs	r3, r3, #1
 80007c8:	432b      	orrs	r3, r5
 80007ca:	0038      	movs	r0, r7
 80007cc:	0019      	movs	r1, r3
 80007ce:	bc3c      	pop	{r2, r3, r4, r5}
 80007d0:	4690      	mov	r8, r2
 80007d2:	4699      	mov	r9, r3
 80007d4:	46a2      	mov	sl, r4
 80007d6:	46ab      	mov	fp, r5
 80007d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007da:	4664      	mov	r4, ip
 80007dc:	4304      	orrs	r4, r0
 80007de:	d100      	bne.n	80007e2 <__aeabi_dadd+0x176>
 80007e0:	e211      	b.n	8000c06 <__aeabi_dadd+0x59a>
 80007e2:	0004      	movs	r4, r0
 80007e4:	4667      	mov	r7, ip
 80007e6:	077b      	lsls	r3, r7, #29
 80007e8:	d1c6      	bne.n	8000778 <__aeabi_dadd+0x10c>
 80007ea:	4645      	mov	r5, r8
 80007ec:	0760      	lsls	r0, r4, #29
 80007ee:	08ff      	lsrs	r7, r7, #3
 80007f0:	4307      	orrs	r7, r0
 80007f2:	08e4      	lsrs	r4, r4, #3
 80007f4:	4b7d      	ldr	r3, [pc, #500]	; (80009ec <__aeabi_dadd+0x380>)
 80007f6:	429e      	cmp	r6, r3
 80007f8:	d030      	beq.n	800085c <__aeabi_dadd+0x1f0>
 80007fa:	0324      	lsls	r4, r4, #12
 80007fc:	0576      	lsls	r6, r6, #21
 80007fe:	0b24      	lsrs	r4, r4, #12
 8000800:	0d76      	lsrs	r6, r6, #21
 8000802:	e7d4      	b.n	80007ae <__aeabi_dadd+0x142>
 8000804:	1a33      	subs	r3, r6, r0
 8000806:	469a      	mov	sl, r3
 8000808:	2b00      	cmp	r3, #0
 800080a:	dd78      	ble.n	80008fe <__aeabi_dadd+0x292>
 800080c:	2800      	cmp	r0, #0
 800080e:	d031      	beq.n	8000874 <__aeabi_dadd+0x208>
 8000810:	4876      	ldr	r0, [pc, #472]	; (80009ec <__aeabi_dadd+0x380>)
 8000812:	4286      	cmp	r6, r0
 8000814:	d0ae      	beq.n	8000774 <__aeabi_dadd+0x108>
 8000816:	2080      	movs	r0, #128	; 0x80
 8000818:	0400      	lsls	r0, r0, #16
 800081a:	4301      	orrs	r1, r0
 800081c:	4653      	mov	r3, sl
 800081e:	2b38      	cmp	r3, #56	; 0x38
 8000820:	dc00      	bgt.n	8000824 <__aeabi_dadd+0x1b8>
 8000822:	e0e9      	b.n	80009f8 <__aeabi_dadd+0x38c>
 8000824:	430a      	orrs	r2, r1
 8000826:	1e51      	subs	r1, r2, #1
 8000828:	418a      	sbcs	r2, r1
 800082a:	2100      	movs	r1, #0
 800082c:	19d2      	adds	r2, r2, r7
 800082e:	42ba      	cmp	r2, r7
 8000830:	41bf      	sbcs	r7, r7
 8000832:	1909      	adds	r1, r1, r4
 8000834:	427c      	negs	r4, r7
 8000836:	0017      	movs	r7, r2
 8000838:	190c      	adds	r4, r1, r4
 800083a:	0223      	lsls	r3, r4, #8
 800083c:	d5d3      	bpl.n	80007e6 <__aeabi_dadd+0x17a>
 800083e:	4b6b      	ldr	r3, [pc, #428]	; (80009ec <__aeabi_dadd+0x380>)
 8000840:	3601      	adds	r6, #1
 8000842:	429e      	cmp	r6, r3
 8000844:	d100      	bne.n	8000848 <__aeabi_dadd+0x1dc>
 8000846:	e13a      	b.n	8000abe <__aeabi_dadd+0x452>
 8000848:	2001      	movs	r0, #1
 800084a:	4b69      	ldr	r3, [pc, #420]	; (80009f0 <__aeabi_dadd+0x384>)
 800084c:	401c      	ands	r4, r3
 800084e:	087b      	lsrs	r3, r7, #1
 8000850:	4007      	ands	r7, r0
 8000852:	431f      	orrs	r7, r3
 8000854:	07e0      	lsls	r0, r4, #31
 8000856:	4307      	orrs	r7, r0
 8000858:	0864      	lsrs	r4, r4, #1
 800085a:	e78b      	b.n	8000774 <__aeabi_dadd+0x108>
 800085c:	0023      	movs	r3, r4
 800085e:	433b      	orrs	r3, r7
 8000860:	d100      	bne.n	8000864 <__aeabi_dadd+0x1f8>
 8000862:	e1cb      	b.n	8000bfc <__aeabi_dadd+0x590>
 8000864:	2280      	movs	r2, #128	; 0x80
 8000866:	0312      	lsls	r2, r2, #12
 8000868:	4314      	orrs	r4, r2
 800086a:	0324      	lsls	r4, r4, #12
 800086c:	0b24      	lsrs	r4, r4, #12
 800086e:	e79e      	b.n	80007ae <__aeabi_dadd+0x142>
 8000870:	002e      	movs	r6, r5
 8000872:	e77f      	b.n	8000774 <__aeabi_dadd+0x108>
 8000874:	0008      	movs	r0, r1
 8000876:	4310      	orrs	r0, r2
 8000878:	d100      	bne.n	800087c <__aeabi_dadd+0x210>
 800087a:	e0b4      	b.n	80009e6 <__aeabi_dadd+0x37a>
 800087c:	1e58      	subs	r0, r3, #1
 800087e:	2800      	cmp	r0, #0
 8000880:	d000      	beq.n	8000884 <__aeabi_dadd+0x218>
 8000882:	e0de      	b.n	8000a42 <__aeabi_dadd+0x3d6>
 8000884:	18ba      	adds	r2, r7, r2
 8000886:	42ba      	cmp	r2, r7
 8000888:	419b      	sbcs	r3, r3
 800088a:	1864      	adds	r4, r4, r1
 800088c:	425b      	negs	r3, r3
 800088e:	18e4      	adds	r4, r4, r3
 8000890:	0017      	movs	r7, r2
 8000892:	2601      	movs	r6, #1
 8000894:	0223      	lsls	r3, r4, #8
 8000896:	d5a6      	bpl.n	80007e6 <__aeabi_dadd+0x17a>
 8000898:	2602      	movs	r6, #2
 800089a:	e7d5      	b.n	8000848 <__aeabi_dadd+0x1dc>
 800089c:	2d00      	cmp	r5, #0
 800089e:	d16e      	bne.n	800097e <__aeabi_dadd+0x312>
 80008a0:	1c70      	adds	r0, r6, #1
 80008a2:	0540      	lsls	r0, r0, #21
 80008a4:	0d40      	lsrs	r0, r0, #21
 80008a6:	2801      	cmp	r0, #1
 80008a8:	dc00      	bgt.n	80008ac <__aeabi_dadd+0x240>
 80008aa:	e0f9      	b.n	8000aa0 <__aeabi_dadd+0x434>
 80008ac:	1ab8      	subs	r0, r7, r2
 80008ae:	4684      	mov	ip, r0
 80008b0:	4287      	cmp	r7, r0
 80008b2:	4180      	sbcs	r0, r0
 80008b4:	1ae5      	subs	r5, r4, r3
 80008b6:	4240      	negs	r0, r0
 80008b8:	1a2d      	subs	r5, r5, r0
 80008ba:	0228      	lsls	r0, r5, #8
 80008bc:	d400      	bmi.n	80008c0 <__aeabi_dadd+0x254>
 80008be:	e089      	b.n	80009d4 <__aeabi_dadd+0x368>
 80008c0:	1bd7      	subs	r7, r2, r7
 80008c2:	42ba      	cmp	r2, r7
 80008c4:	4192      	sbcs	r2, r2
 80008c6:	1b1c      	subs	r4, r3, r4
 80008c8:	4252      	negs	r2, r2
 80008ca:	1aa5      	subs	r5, r4, r2
 80008cc:	46d8      	mov	r8, fp
 80008ce:	e729      	b.n	8000724 <__aeabi_dadd+0xb8>
 80008d0:	4645      	mov	r5, r8
 80008d2:	2400      	movs	r4, #0
 80008d4:	2700      	movs	r7, #0
 80008d6:	e76a      	b.n	80007ae <__aeabi_dadd+0x142>
 80008d8:	4c45      	ldr	r4, [pc, #276]	; (80009f0 <__aeabi_dadd+0x384>)
 80008da:	1af6      	subs	r6, r6, r3
 80008dc:	402c      	ands	r4, r5
 80008de:	e749      	b.n	8000774 <__aeabi_dadd+0x108>
 80008e0:	003d      	movs	r5, r7
 80008e2:	3828      	subs	r0, #40	; 0x28
 80008e4:	4085      	lsls	r5, r0
 80008e6:	2700      	movs	r7, #0
 80008e8:	e72e      	b.n	8000748 <__aeabi_dadd+0xdc>
 80008ea:	0038      	movs	r0, r7
 80008ec:	f001 fc46 	bl	800217c <__clzsi2>
 80008f0:	3020      	adds	r0, #32
 80008f2:	e71d      	b.n	8000730 <__aeabi_dadd+0xc4>
 80008f4:	430a      	orrs	r2, r1
 80008f6:	1e51      	subs	r1, r2, #1
 80008f8:	418a      	sbcs	r2, r1
 80008fa:	2100      	movs	r1, #0
 80008fc:	e707      	b.n	800070e <__aeabi_dadd+0xa2>
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d000      	beq.n	8000904 <__aeabi_dadd+0x298>
 8000902:	e0f3      	b.n	8000aec <__aeabi_dadd+0x480>
 8000904:	1c70      	adds	r0, r6, #1
 8000906:	0543      	lsls	r3, r0, #21
 8000908:	0d5b      	lsrs	r3, r3, #21
 800090a:	2b01      	cmp	r3, #1
 800090c:	dc00      	bgt.n	8000910 <__aeabi_dadd+0x2a4>
 800090e:	e0ad      	b.n	8000a6c <__aeabi_dadd+0x400>
 8000910:	4b36      	ldr	r3, [pc, #216]	; (80009ec <__aeabi_dadd+0x380>)
 8000912:	4298      	cmp	r0, r3
 8000914:	d100      	bne.n	8000918 <__aeabi_dadd+0x2ac>
 8000916:	e0d1      	b.n	8000abc <__aeabi_dadd+0x450>
 8000918:	18ba      	adds	r2, r7, r2
 800091a:	42ba      	cmp	r2, r7
 800091c:	41bf      	sbcs	r7, r7
 800091e:	1864      	adds	r4, r4, r1
 8000920:	427f      	negs	r7, r7
 8000922:	19e4      	adds	r4, r4, r7
 8000924:	07e7      	lsls	r7, r4, #31
 8000926:	0852      	lsrs	r2, r2, #1
 8000928:	4317      	orrs	r7, r2
 800092a:	0864      	lsrs	r4, r4, #1
 800092c:	0006      	movs	r6, r0
 800092e:	e721      	b.n	8000774 <__aeabi_dadd+0x108>
 8000930:	482e      	ldr	r0, [pc, #184]	; (80009ec <__aeabi_dadd+0x380>)
 8000932:	4285      	cmp	r5, r0
 8000934:	d100      	bne.n	8000938 <__aeabi_dadd+0x2cc>
 8000936:	e093      	b.n	8000a60 <__aeabi_dadd+0x3f4>
 8000938:	001d      	movs	r5, r3
 800093a:	e6d0      	b.n	80006de <__aeabi_dadd+0x72>
 800093c:	0029      	movs	r1, r5
 800093e:	3e1f      	subs	r6, #31
 8000940:	40f1      	lsrs	r1, r6
 8000942:	2b20      	cmp	r3, #32
 8000944:	d100      	bne.n	8000948 <__aeabi_dadd+0x2dc>
 8000946:	e08d      	b.n	8000a64 <__aeabi_dadd+0x3f8>
 8000948:	2240      	movs	r2, #64	; 0x40
 800094a:	1ad3      	subs	r3, r2, r3
 800094c:	409d      	lsls	r5, r3
 800094e:	432f      	orrs	r7, r5
 8000950:	1e7d      	subs	r5, r7, #1
 8000952:	41af      	sbcs	r7, r5
 8000954:	2400      	movs	r4, #0
 8000956:	430f      	orrs	r7, r1
 8000958:	2600      	movs	r6, #0
 800095a:	e744      	b.n	80007e6 <__aeabi_dadd+0x17a>
 800095c:	002b      	movs	r3, r5
 800095e:	0008      	movs	r0, r1
 8000960:	3b20      	subs	r3, #32
 8000962:	40d8      	lsrs	r0, r3
 8000964:	0003      	movs	r3, r0
 8000966:	2d20      	cmp	r5, #32
 8000968:	d100      	bne.n	800096c <__aeabi_dadd+0x300>
 800096a:	e07d      	b.n	8000a68 <__aeabi_dadd+0x3fc>
 800096c:	2040      	movs	r0, #64	; 0x40
 800096e:	1b45      	subs	r5, r0, r5
 8000970:	40a9      	lsls	r1, r5
 8000972:	430a      	orrs	r2, r1
 8000974:	1e51      	subs	r1, r2, #1
 8000976:	418a      	sbcs	r2, r1
 8000978:	2100      	movs	r1, #0
 800097a:	431a      	orrs	r2, r3
 800097c:	e6c7      	b.n	800070e <__aeabi_dadd+0xa2>
 800097e:	2e00      	cmp	r6, #0
 8000980:	d050      	beq.n	8000a24 <__aeabi_dadd+0x3b8>
 8000982:	4e1a      	ldr	r6, [pc, #104]	; (80009ec <__aeabi_dadd+0x380>)
 8000984:	42b0      	cmp	r0, r6
 8000986:	d057      	beq.n	8000a38 <__aeabi_dadd+0x3cc>
 8000988:	2680      	movs	r6, #128	; 0x80
 800098a:	426b      	negs	r3, r5
 800098c:	4699      	mov	r9, r3
 800098e:	0436      	lsls	r6, r6, #16
 8000990:	4334      	orrs	r4, r6
 8000992:	464b      	mov	r3, r9
 8000994:	2b38      	cmp	r3, #56	; 0x38
 8000996:	dd00      	ble.n	800099a <__aeabi_dadd+0x32e>
 8000998:	e0d6      	b.n	8000b48 <__aeabi_dadd+0x4dc>
 800099a:	2b1f      	cmp	r3, #31
 800099c:	dd00      	ble.n	80009a0 <__aeabi_dadd+0x334>
 800099e:	e135      	b.n	8000c0c <__aeabi_dadd+0x5a0>
 80009a0:	2620      	movs	r6, #32
 80009a2:	1af5      	subs	r5, r6, r3
 80009a4:	0026      	movs	r6, r4
 80009a6:	40ae      	lsls	r6, r5
 80009a8:	46b2      	mov	sl, r6
 80009aa:	003e      	movs	r6, r7
 80009ac:	40de      	lsrs	r6, r3
 80009ae:	46ac      	mov	ip, r5
 80009b0:	0035      	movs	r5, r6
 80009b2:	4656      	mov	r6, sl
 80009b4:	432e      	orrs	r6, r5
 80009b6:	4665      	mov	r5, ip
 80009b8:	40af      	lsls	r7, r5
 80009ba:	1e7d      	subs	r5, r7, #1
 80009bc:	41af      	sbcs	r7, r5
 80009be:	40dc      	lsrs	r4, r3
 80009c0:	4337      	orrs	r7, r6
 80009c2:	1bd7      	subs	r7, r2, r7
 80009c4:	42ba      	cmp	r2, r7
 80009c6:	4192      	sbcs	r2, r2
 80009c8:	1b0c      	subs	r4, r1, r4
 80009ca:	4252      	negs	r2, r2
 80009cc:	1aa4      	subs	r4, r4, r2
 80009ce:	0006      	movs	r6, r0
 80009d0:	46d8      	mov	r8, fp
 80009d2:	e6a3      	b.n	800071c <__aeabi_dadd+0xb0>
 80009d4:	4664      	mov	r4, ip
 80009d6:	4667      	mov	r7, ip
 80009d8:	432c      	orrs	r4, r5
 80009da:	d000      	beq.n	80009de <__aeabi_dadd+0x372>
 80009dc:	e6a2      	b.n	8000724 <__aeabi_dadd+0xb8>
 80009de:	2500      	movs	r5, #0
 80009e0:	2600      	movs	r6, #0
 80009e2:	2700      	movs	r7, #0
 80009e4:	e706      	b.n	80007f4 <__aeabi_dadd+0x188>
 80009e6:	001e      	movs	r6, r3
 80009e8:	e6c4      	b.n	8000774 <__aeabi_dadd+0x108>
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	000007ff 	.word	0x000007ff
 80009f0:	ff7fffff 	.word	0xff7fffff
 80009f4:	800fffff 	.word	0x800fffff
 80009f8:	2b1f      	cmp	r3, #31
 80009fa:	dc63      	bgt.n	8000ac4 <__aeabi_dadd+0x458>
 80009fc:	2020      	movs	r0, #32
 80009fe:	1ac3      	subs	r3, r0, r3
 8000a00:	0008      	movs	r0, r1
 8000a02:	4098      	lsls	r0, r3
 8000a04:	469c      	mov	ip, r3
 8000a06:	4683      	mov	fp, r0
 8000a08:	4653      	mov	r3, sl
 8000a0a:	0010      	movs	r0, r2
 8000a0c:	40d8      	lsrs	r0, r3
 8000a0e:	0003      	movs	r3, r0
 8000a10:	4658      	mov	r0, fp
 8000a12:	4318      	orrs	r0, r3
 8000a14:	4663      	mov	r3, ip
 8000a16:	409a      	lsls	r2, r3
 8000a18:	1e53      	subs	r3, r2, #1
 8000a1a:	419a      	sbcs	r2, r3
 8000a1c:	4653      	mov	r3, sl
 8000a1e:	4302      	orrs	r2, r0
 8000a20:	40d9      	lsrs	r1, r3
 8000a22:	e703      	b.n	800082c <__aeabi_dadd+0x1c0>
 8000a24:	0026      	movs	r6, r4
 8000a26:	433e      	orrs	r6, r7
 8000a28:	d006      	beq.n	8000a38 <__aeabi_dadd+0x3cc>
 8000a2a:	43eb      	mvns	r3, r5
 8000a2c:	4699      	mov	r9, r3
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d0c7      	beq.n	80009c2 <__aeabi_dadd+0x356>
 8000a32:	4e94      	ldr	r6, [pc, #592]	; (8000c84 <__aeabi_dadd+0x618>)
 8000a34:	42b0      	cmp	r0, r6
 8000a36:	d1ac      	bne.n	8000992 <__aeabi_dadd+0x326>
 8000a38:	000c      	movs	r4, r1
 8000a3a:	0017      	movs	r7, r2
 8000a3c:	0006      	movs	r6, r0
 8000a3e:	46d8      	mov	r8, fp
 8000a40:	e698      	b.n	8000774 <__aeabi_dadd+0x108>
 8000a42:	4b90      	ldr	r3, [pc, #576]	; (8000c84 <__aeabi_dadd+0x618>)
 8000a44:	459a      	cmp	sl, r3
 8000a46:	d00b      	beq.n	8000a60 <__aeabi_dadd+0x3f4>
 8000a48:	4682      	mov	sl, r0
 8000a4a:	e6e7      	b.n	800081c <__aeabi_dadd+0x1b0>
 8000a4c:	2800      	cmp	r0, #0
 8000a4e:	d000      	beq.n	8000a52 <__aeabi_dadd+0x3e6>
 8000a50:	e09e      	b.n	8000b90 <__aeabi_dadd+0x524>
 8000a52:	0018      	movs	r0, r3
 8000a54:	4310      	orrs	r0, r2
 8000a56:	d100      	bne.n	8000a5a <__aeabi_dadd+0x3ee>
 8000a58:	e0e9      	b.n	8000c2e <__aeabi_dadd+0x5c2>
 8000a5a:	001c      	movs	r4, r3
 8000a5c:	0017      	movs	r7, r2
 8000a5e:	46d8      	mov	r8, fp
 8000a60:	4e88      	ldr	r6, [pc, #544]	; (8000c84 <__aeabi_dadd+0x618>)
 8000a62:	e687      	b.n	8000774 <__aeabi_dadd+0x108>
 8000a64:	2500      	movs	r5, #0
 8000a66:	e772      	b.n	800094e <__aeabi_dadd+0x2e2>
 8000a68:	2100      	movs	r1, #0
 8000a6a:	e782      	b.n	8000972 <__aeabi_dadd+0x306>
 8000a6c:	0023      	movs	r3, r4
 8000a6e:	433b      	orrs	r3, r7
 8000a70:	2e00      	cmp	r6, #0
 8000a72:	d000      	beq.n	8000a76 <__aeabi_dadd+0x40a>
 8000a74:	e0ab      	b.n	8000bce <__aeabi_dadd+0x562>
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d100      	bne.n	8000a7c <__aeabi_dadd+0x410>
 8000a7a:	e0e7      	b.n	8000c4c <__aeabi_dadd+0x5e0>
 8000a7c:	000b      	movs	r3, r1
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	d100      	bne.n	8000a84 <__aeabi_dadd+0x418>
 8000a82:	e677      	b.n	8000774 <__aeabi_dadd+0x108>
 8000a84:	18ba      	adds	r2, r7, r2
 8000a86:	42ba      	cmp	r2, r7
 8000a88:	41bf      	sbcs	r7, r7
 8000a8a:	1864      	adds	r4, r4, r1
 8000a8c:	427f      	negs	r7, r7
 8000a8e:	19e4      	adds	r4, r4, r7
 8000a90:	0223      	lsls	r3, r4, #8
 8000a92:	d400      	bmi.n	8000a96 <__aeabi_dadd+0x42a>
 8000a94:	e0f2      	b.n	8000c7c <__aeabi_dadd+0x610>
 8000a96:	4b7c      	ldr	r3, [pc, #496]	; (8000c88 <__aeabi_dadd+0x61c>)
 8000a98:	0017      	movs	r7, r2
 8000a9a:	401c      	ands	r4, r3
 8000a9c:	0006      	movs	r6, r0
 8000a9e:	e669      	b.n	8000774 <__aeabi_dadd+0x108>
 8000aa0:	0020      	movs	r0, r4
 8000aa2:	4338      	orrs	r0, r7
 8000aa4:	2e00      	cmp	r6, #0
 8000aa6:	d1d1      	bne.n	8000a4c <__aeabi_dadd+0x3e0>
 8000aa8:	2800      	cmp	r0, #0
 8000aaa:	d15b      	bne.n	8000b64 <__aeabi_dadd+0x4f8>
 8000aac:	001c      	movs	r4, r3
 8000aae:	4314      	orrs	r4, r2
 8000ab0:	d100      	bne.n	8000ab4 <__aeabi_dadd+0x448>
 8000ab2:	e0a8      	b.n	8000c06 <__aeabi_dadd+0x59a>
 8000ab4:	001c      	movs	r4, r3
 8000ab6:	0017      	movs	r7, r2
 8000ab8:	46d8      	mov	r8, fp
 8000aba:	e65b      	b.n	8000774 <__aeabi_dadd+0x108>
 8000abc:	0006      	movs	r6, r0
 8000abe:	2400      	movs	r4, #0
 8000ac0:	2700      	movs	r7, #0
 8000ac2:	e697      	b.n	80007f4 <__aeabi_dadd+0x188>
 8000ac4:	4650      	mov	r0, sl
 8000ac6:	000b      	movs	r3, r1
 8000ac8:	3820      	subs	r0, #32
 8000aca:	40c3      	lsrs	r3, r0
 8000acc:	4699      	mov	r9, r3
 8000ace:	4653      	mov	r3, sl
 8000ad0:	2b20      	cmp	r3, #32
 8000ad2:	d100      	bne.n	8000ad6 <__aeabi_dadd+0x46a>
 8000ad4:	e095      	b.n	8000c02 <__aeabi_dadd+0x596>
 8000ad6:	2340      	movs	r3, #64	; 0x40
 8000ad8:	4650      	mov	r0, sl
 8000ada:	1a1b      	subs	r3, r3, r0
 8000adc:	4099      	lsls	r1, r3
 8000ade:	430a      	orrs	r2, r1
 8000ae0:	1e51      	subs	r1, r2, #1
 8000ae2:	418a      	sbcs	r2, r1
 8000ae4:	464b      	mov	r3, r9
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	e69f      	b.n	800082c <__aeabi_dadd+0x1c0>
 8000aec:	2e00      	cmp	r6, #0
 8000aee:	d130      	bne.n	8000b52 <__aeabi_dadd+0x4e6>
 8000af0:	0026      	movs	r6, r4
 8000af2:	433e      	orrs	r6, r7
 8000af4:	d067      	beq.n	8000bc6 <__aeabi_dadd+0x55a>
 8000af6:	43db      	mvns	r3, r3
 8000af8:	469a      	mov	sl, r3
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d01c      	beq.n	8000b38 <__aeabi_dadd+0x4cc>
 8000afe:	4e61      	ldr	r6, [pc, #388]	; (8000c84 <__aeabi_dadd+0x618>)
 8000b00:	42b0      	cmp	r0, r6
 8000b02:	d060      	beq.n	8000bc6 <__aeabi_dadd+0x55a>
 8000b04:	4653      	mov	r3, sl
 8000b06:	2b38      	cmp	r3, #56	; 0x38
 8000b08:	dd00      	ble.n	8000b0c <__aeabi_dadd+0x4a0>
 8000b0a:	e096      	b.n	8000c3a <__aeabi_dadd+0x5ce>
 8000b0c:	2b1f      	cmp	r3, #31
 8000b0e:	dd00      	ble.n	8000b12 <__aeabi_dadd+0x4a6>
 8000b10:	e09f      	b.n	8000c52 <__aeabi_dadd+0x5e6>
 8000b12:	2620      	movs	r6, #32
 8000b14:	1af3      	subs	r3, r6, r3
 8000b16:	0026      	movs	r6, r4
 8000b18:	409e      	lsls	r6, r3
 8000b1a:	469c      	mov	ip, r3
 8000b1c:	46b3      	mov	fp, r6
 8000b1e:	4653      	mov	r3, sl
 8000b20:	003e      	movs	r6, r7
 8000b22:	40de      	lsrs	r6, r3
 8000b24:	0033      	movs	r3, r6
 8000b26:	465e      	mov	r6, fp
 8000b28:	431e      	orrs	r6, r3
 8000b2a:	4663      	mov	r3, ip
 8000b2c:	409f      	lsls	r7, r3
 8000b2e:	1e7b      	subs	r3, r7, #1
 8000b30:	419f      	sbcs	r7, r3
 8000b32:	4653      	mov	r3, sl
 8000b34:	40dc      	lsrs	r4, r3
 8000b36:	4337      	orrs	r7, r6
 8000b38:	18bf      	adds	r7, r7, r2
 8000b3a:	4297      	cmp	r7, r2
 8000b3c:	4192      	sbcs	r2, r2
 8000b3e:	1864      	adds	r4, r4, r1
 8000b40:	4252      	negs	r2, r2
 8000b42:	18a4      	adds	r4, r4, r2
 8000b44:	0006      	movs	r6, r0
 8000b46:	e678      	b.n	800083a <__aeabi_dadd+0x1ce>
 8000b48:	4327      	orrs	r7, r4
 8000b4a:	1e7c      	subs	r4, r7, #1
 8000b4c:	41a7      	sbcs	r7, r4
 8000b4e:	2400      	movs	r4, #0
 8000b50:	e737      	b.n	80009c2 <__aeabi_dadd+0x356>
 8000b52:	4e4c      	ldr	r6, [pc, #304]	; (8000c84 <__aeabi_dadd+0x618>)
 8000b54:	42b0      	cmp	r0, r6
 8000b56:	d036      	beq.n	8000bc6 <__aeabi_dadd+0x55a>
 8000b58:	2680      	movs	r6, #128	; 0x80
 8000b5a:	425b      	negs	r3, r3
 8000b5c:	0436      	lsls	r6, r6, #16
 8000b5e:	469a      	mov	sl, r3
 8000b60:	4334      	orrs	r4, r6
 8000b62:	e7cf      	b.n	8000b04 <__aeabi_dadd+0x498>
 8000b64:	0018      	movs	r0, r3
 8000b66:	4310      	orrs	r0, r2
 8000b68:	d100      	bne.n	8000b6c <__aeabi_dadd+0x500>
 8000b6a:	e603      	b.n	8000774 <__aeabi_dadd+0x108>
 8000b6c:	1ab8      	subs	r0, r7, r2
 8000b6e:	4684      	mov	ip, r0
 8000b70:	4567      	cmp	r7, ip
 8000b72:	41ad      	sbcs	r5, r5
 8000b74:	1ae0      	subs	r0, r4, r3
 8000b76:	426d      	negs	r5, r5
 8000b78:	1b40      	subs	r0, r0, r5
 8000b7a:	0205      	lsls	r5, r0, #8
 8000b7c:	d400      	bmi.n	8000b80 <__aeabi_dadd+0x514>
 8000b7e:	e62c      	b.n	80007da <__aeabi_dadd+0x16e>
 8000b80:	1bd7      	subs	r7, r2, r7
 8000b82:	42ba      	cmp	r2, r7
 8000b84:	4192      	sbcs	r2, r2
 8000b86:	1b1c      	subs	r4, r3, r4
 8000b88:	4252      	negs	r2, r2
 8000b8a:	1aa4      	subs	r4, r4, r2
 8000b8c:	46d8      	mov	r8, fp
 8000b8e:	e5f1      	b.n	8000774 <__aeabi_dadd+0x108>
 8000b90:	0018      	movs	r0, r3
 8000b92:	4310      	orrs	r0, r2
 8000b94:	d100      	bne.n	8000b98 <__aeabi_dadd+0x52c>
 8000b96:	e763      	b.n	8000a60 <__aeabi_dadd+0x3f4>
 8000b98:	08f8      	lsrs	r0, r7, #3
 8000b9a:	0767      	lsls	r7, r4, #29
 8000b9c:	4307      	orrs	r7, r0
 8000b9e:	2080      	movs	r0, #128	; 0x80
 8000ba0:	08e4      	lsrs	r4, r4, #3
 8000ba2:	0300      	lsls	r0, r0, #12
 8000ba4:	4204      	tst	r4, r0
 8000ba6:	d008      	beq.n	8000bba <__aeabi_dadd+0x54e>
 8000ba8:	08dd      	lsrs	r5, r3, #3
 8000baa:	4205      	tst	r5, r0
 8000bac:	d105      	bne.n	8000bba <__aeabi_dadd+0x54e>
 8000bae:	08d2      	lsrs	r2, r2, #3
 8000bb0:	0759      	lsls	r1, r3, #29
 8000bb2:	4311      	orrs	r1, r2
 8000bb4:	000f      	movs	r7, r1
 8000bb6:	002c      	movs	r4, r5
 8000bb8:	46d8      	mov	r8, fp
 8000bba:	0f7b      	lsrs	r3, r7, #29
 8000bbc:	00e4      	lsls	r4, r4, #3
 8000bbe:	431c      	orrs	r4, r3
 8000bc0:	00ff      	lsls	r7, r7, #3
 8000bc2:	4e30      	ldr	r6, [pc, #192]	; (8000c84 <__aeabi_dadd+0x618>)
 8000bc4:	e5d6      	b.n	8000774 <__aeabi_dadd+0x108>
 8000bc6:	000c      	movs	r4, r1
 8000bc8:	0017      	movs	r7, r2
 8000bca:	0006      	movs	r6, r0
 8000bcc:	e5d2      	b.n	8000774 <__aeabi_dadd+0x108>
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d038      	beq.n	8000c44 <__aeabi_dadd+0x5d8>
 8000bd2:	000b      	movs	r3, r1
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	d100      	bne.n	8000bda <__aeabi_dadd+0x56e>
 8000bd8:	e742      	b.n	8000a60 <__aeabi_dadd+0x3f4>
 8000bda:	08f8      	lsrs	r0, r7, #3
 8000bdc:	0767      	lsls	r7, r4, #29
 8000bde:	4307      	orrs	r7, r0
 8000be0:	2080      	movs	r0, #128	; 0x80
 8000be2:	08e4      	lsrs	r4, r4, #3
 8000be4:	0300      	lsls	r0, r0, #12
 8000be6:	4204      	tst	r4, r0
 8000be8:	d0e7      	beq.n	8000bba <__aeabi_dadd+0x54e>
 8000bea:	08cb      	lsrs	r3, r1, #3
 8000bec:	4203      	tst	r3, r0
 8000bee:	d1e4      	bne.n	8000bba <__aeabi_dadd+0x54e>
 8000bf0:	08d2      	lsrs	r2, r2, #3
 8000bf2:	0749      	lsls	r1, r1, #29
 8000bf4:	4311      	orrs	r1, r2
 8000bf6:	000f      	movs	r7, r1
 8000bf8:	001c      	movs	r4, r3
 8000bfa:	e7de      	b.n	8000bba <__aeabi_dadd+0x54e>
 8000bfc:	2700      	movs	r7, #0
 8000bfe:	2400      	movs	r4, #0
 8000c00:	e5d5      	b.n	80007ae <__aeabi_dadd+0x142>
 8000c02:	2100      	movs	r1, #0
 8000c04:	e76b      	b.n	8000ade <__aeabi_dadd+0x472>
 8000c06:	2500      	movs	r5, #0
 8000c08:	2700      	movs	r7, #0
 8000c0a:	e5f3      	b.n	80007f4 <__aeabi_dadd+0x188>
 8000c0c:	464e      	mov	r6, r9
 8000c0e:	0025      	movs	r5, r4
 8000c10:	3e20      	subs	r6, #32
 8000c12:	40f5      	lsrs	r5, r6
 8000c14:	464b      	mov	r3, r9
 8000c16:	002e      	movs	r6, r5
 8000c18:	2b20      	cmp	r3, #32
 8000c1a:	d02d      	beq.n	8000c78 <__aeabi_dadd+0x60c>
 8000c1c:	2540      	movs	r5, #64	; 0x40
 8000c1e:	1aed      	subs	r5, r5, r3
 8000c20:	40ac      	lsls	r4, r5
 8000c22:	4327      	orrs	r7, r4
 8000c24:	1e7c      	subs	r4, r7, #1
 8000c26:	41a7      	sbcs	r7, r4
 8000c28:	2400      	movs	r4, #0
 8000c2a:	4337      	orrs	r7, r6
 8000c2c:	e6c9      	b.n	80009c2 <__aeabi_dadd+0x356>
 8000c2e:	2480      	movs	r4, #128	; 0x80
 8000c30:	2500      	movs	r5, #0
 8000c32:	0324      	lsls	r4, r4, #12
 8000c34:	4e13      	ldr	r6, [pc, #76]	; (8000c84 <__aeabi_dadd+0x618>)
 8000c36:	2700      	movs	r7, #0
 8000c38:	e5dc      	b.n	80007f4 <__aeabi_dadd+0x188>
 8000c3a:	4327      	orrs	r7, r4
 8000c3c:	1e7c      	subs	r4, r7, #1
 8000c3e:	41a7      	sbcs	r7, r4
 8000c40:	2400      	movs	r4, #0
 8000c42:	e779      	b.n	8000b38 <__aeabi_dadd+0x4cc>
 8000c44:	000c      	movs	r4, r1
 8000c46:	0017      	movs	r7, r2
 8000c48:	4e0e      	ldr	r6, [pc, #56]	; (8000c84 <__aeabi_dadd+0x618>)
 8000c4a:	e593      	b.n	8000774 <__aeabi_dadd+0x108>
 8000c4c:	000c      	movs	r4, r1
 8000c4e:	0017      	movs	r7, r2
 8000c50:	e590      	b.n	8000774 <__aeabi_dadd+0x108>
 8000c52:	4656      	mov	r6, sl
 8000c54:	0023      	movs	r3, r4
 8000c56:	3e20      	subs	r6, #32
 8000c58:	40f3      	lsrs	r3, r6
 8000c5a:	4699      	mov	r9, r3
 8000c5c:	4653      	mov	r3, sl
 8000c5e:	2b20      	cmp	r3, #32
 8000c60:	d00e      	beq.n	8000c80 <__aeabi_dadd+0x614>
 8000c62:	2340      	movs	r3, #64	; 0x40
 8000c64:	4656      	mov	r6, sl
 8000c66:	1b9b      	subs	r3, r3, r6
 8000c68:	409c      	lsls	r4, r3
 8000c6a:	4327      	orrs	r7, r4
 8000c6c:	1e7c      	subs	r4, r7, #1
 8000c6e:	41a7      	sbcs	r7, r4
 8000c70:	464b      	mov	r3, r9
 8000c72:	2400      	movs	r4, #0
 8000c74:	431f      	orrs	r7, r3
 8000c76:	e75f      	b.n	8000b38 <__aeabi_dadd+0x4cc>
 8000c78:	2400      	movs	r4, #0
 8000c7a:	e7d2      	b.n	8000c22 <__aeabi_dadd+0x5b6>
 8000c7c:	0017      	movs	r7, r2
 8000c7e:	e5b2      	b.n	80007e6 <__aeabi_dadd+0x17a>
 8000c80:	2400      	movs	r4, #0
 8000c82:	e7f2      	b.n	8000c6a <__aeabi_dadd+0x5fe>
 8000c84:	000007ff 	.word	0x000007ff
 8000c88:	ff7fffff 	.word	0xff7fffff

08000c8c <__aeabi_ddiv>:
 8000c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c8e:	4657      	mov	r7, sl
 8000c90:	4645      	mov	r5, r8
 8000c92:	46de      	mov	lr, fp
 8000c94:	464e      	mov	r6, r9
 8000c96:	b5e0      	push	{r5, r6, r7, lr}
 8000c98:	004c      	lsls	r4, r1, #1
 8000c9a:	030e      	lsls	r6, r1, #12
 8000c9c:	b087      	sub	sp, #28
 8000c9e:	4683      	mov	fp, r0
 8000ca0:	4692      	mov	sl, r2
 8000ca2:	001d      	movs	r5, r3
 8000ca4:	4680      	mov	r8, r0
 8000ca6:	0b36      	lsrs	r6, r6, #12
 8000ca8:	0d64      	lsrs	r4, r4, #21
 8000caa:	0fcf      	lsrs	r7, r1, #31
 8000cac:	2c00      	cmp	r4, #0
 8000cae:	d04f      	beq.n	8000d50 <__aeabi_ddiv+0xc4>
 8000cb0:	4b6f      	ldr	r3, [pc, #444]	; (8000e70 <__aeabi_ddiv+0x1e4>)
 8000cb2:	429c      	cmp	r4, r3
 8000cb4:	d035      	beq.n	8000d22 <__aeabi_ddiv+0x96>
 8000cb6:	2380      	movs	r3, #128	; 0x80
 8000cb8:	0f42      	lsrs	r2, r0, #29
 8000cba:	041b      	lsls	r3, r3, #16
 8000cbc:	00f6      	lsls	r6, r6, #3
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	4333      	orrs	r3, r6
 8000cc2:	4699      	mov	r9, r3
 8000cc4:	00c3      	lsls	r3, r0, #3
 8000cc6:	4698      	mov	r8, r3
 8000cc8:	4b6a      	ldr	r3, [pc, #424]	; (8000e74 <__aeabi_ddiv+0x1e8>)
 8000cca:	2600      	movs	r6, #0
 8000ccc:	469c      	mov	ip, r3
 8000cce:	2300      	movs	r3, #0
 8000cd0:	4464      	add	r4, ip
 8000cd2:	9303      	str	r3, [sp, #12]
 8000cd4:	032b      	lsls	r3, r5, #12
 8000cd6:	0b1b      	lsrs	r3, r3, #12
 8000cd8:	469b      	mov	fp, r3
 8000cda:	006b      	lsls	r3, r5, #1
 8000cdc:	0fed      	lsrs	r5, r5, #31
 8000cde:	4650      	mov	r0, sl
 8000ce0:	0d5b      	lsrs	r3, r3, #21
 8000ce2:	9501      	str	r5, [sp, #4]
 8000ce4:	d05e      	beq.n	8000da4 <__aeabi_ddiv+0x118>
 8000ce6:	4a62      	ldr	r2, [pc, #392]	; (8000e70 <__aeabi_ddiv+0x1e4>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d053      	beq.n	8000d94 <__aeabi_ddiv+0x108>
 8000cec:	465a      	mov	r2, fp
 8000cee:	00d1      	lsls	r1, r2, #3
 8000cf0:	2280      	movs	r2, #128	; 0x80
 8000cf2:	0f40      	lsrs	r0, r0, #29
 8000cf4:	0412      	lsls	r2, r2, #16
 8000cf6:	4302      	orrs	r2, r0
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	4693      	mov	fp, r2
 8000cfc:	4652      	mov	r2, sl
 8000cfe:	00d1      	lsls	r1, r2, #3
 8000d00:	4a5c      	ldr	r2, [pc, #368]	; (8000e74 <__aeabi_ddiv+0x1e8>)
 8000d02:	4694      	mov	ip, r2
 8000d04:	2200      	movs	r2, #0
 8000d06:	4463      	add	r3, ip
 8000d08:	0038      	movs	r0, r7
 8000d0a:	4068      	eors	r0, r5
 8000d0c:	4684      	mov	ip, r0
 8000d0e:	9002      	str	r0, [sp, #8]
 8000d10:	1ae4      	subs	r4, r4, r3
 8000d12:	4316      	orrs	r6, r2
 8000d14:	2e0f      	cmp	r6, #15
 8000d16:	d900      	bls.n	8000d1a <__aeabi_ddiv+0x8e>
 8000d18:	e0b4      	b.n	8000e84 <__aeabi_ddiv+0x1f8>
 8000d1a:	4b57      	ldr	r3, [pc, #348]	; (8000e78 <__aeabi_ddiv+0x1ec>)
 8000d1c:	00b6      	lsls	r6, r6, #2
 8000d1e:	599b      	ldr	r3, [r3, r6]
 8000d20:	469f      	mov	pc, r3
 8000d22:	0003      	movs	r3, r0
 8000d24:	4333      	orrs	r3, r6
 8000d26:	4699      	mov	r9, r3
 8000d28:	d16c      	bne.n	8000e04 <__aeabi_ddiv+0x178>
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	4698      	mov	r8, r3
 8000d2e:	3302      	adds	r3, #2
 8000d30:	2608      	movs	r6, #8
 8000d32:	9303      	str	r3, [sp, #12]
 8000d34:	e7ce      	b.n	8000cd4 <__aeabi_ddiv+0x48>
 8000d36:	46cb      	mov	fp, r9
 8000d38:	4641      	mov	r1, r8
 8000d3a:	9a03      	ldr	r2, [sp, #12]
 8000d3c:	9701      	str	r7, [sp, #4]
 8000d3e:	2a02      	cmp	r2, #2
 8000d40:	d165      	bne.n	8000e0e <__aeabi_ddiv+0x182>
 8000d42:	9b01      	ldr	r3, [sp, #4]
 8000d44:	4c4a      	ldr	r4, [pc, #296]	; (8000e70 <__aeabi_ddiv+0x1e4>)
 8000d46:	469c      	mov	ip, r3
 8000d48:	2300      	movs	r3, #0
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	4698      	mov	r8, r3
 8000d4e:	e06b      	b.n	8000e28 <__aeabi_ddiv+0x19c>
 8000d50:	0003      	movs	r3, r0
 8000d52:	4333      	orrs	r3, r6
 8000d54:	4699      	mov	r9, r3
 8000d56:	d04e      	beq.n	8000df6 <__aeabi_ddiv+0x16a>
 8000d58:	2e00      	cmp	r6, #0
 8000d5a:	d100      	bne.n	8000d5e <__aeabi_ddiv+0xd2>
 8000d5c:	e1bc      	b.n	80010d8 <__aeabi_ddiv+0x44c>
 8000d5e:	0030      	movs	r0, r6
 8000d60:	f001 fa0c 	bl	800217c <__clzsi2>
 8000d64:	0003      	movs	r3, r0
 8000d66:	3b0b      	subs	r3, #11
 8000d68:	2b1c      	cmp	r3, #28
 8000d6a:	dd00      	ble.n	8000d6e <__aeabi_ddiv+0xe2>
 8000d6c:	e1ac      	b.n	80010c8 <__aeabi_ddiv+0x43c>
 8000d6e:	221d      	movs	r2, #29
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	465a      	mov	r2, fp
 8000d74:	0001      	movs	r1, r0
 8000d76:	40da      	lsrs	r2, r3
 8000d78:	3908      	subs	r1, #8
 8000d7a:	408e      	lsls	r6, r1
 8000d7c:	0013      	movs	r3, r2
 8000d7e:	4333      	orrs	r3, r6
 8000d80:	4699      	mov	r9, r3
 8000d82:	465b      	mov	r3, fp
 8000d84:	408b      	lsls	r3, r1
 8000d86:	4698      	mov	r8, r3
 8000d88:	2300      	movs	r3, #0
 8000d8a:	4c3c      	ldr	r4, [pc, #240]	; (8000e7c <__aeabi_ddiv+0x1f0>)
 8000d8c:	2600      	movs	r6, #0
 8000d8e:	1a24      	subs	r4, r4, r0
 8000d90:	9303      	str	r3, [sp, #12]
 8000d92:	e79f      	b.n	8000cd4 <__aeabi_ddiv+0x48>
 8000d94:	4651      	mov	r1, sl
 8000d96:	465a      	mov	r2, fp
 8000d98:	4311      	orrs	r1, r2
 8000d9a:	d129      	bne.n	8000df0 <__aeabi_ddiv+0x164>
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4693      	mov	fp, r2
 8000da0:	3202      	adds	r2, #2
 8000da2:	e7b1      	b.n	8000d08 <__aeabi_ddiv+0x7c>
 8000da4:	4659      	mov	r1, fp
 8000da6:	4301      	orrs	r1, r0
 8000da8:	d01e      	beq.n	8000de8 <__aeabi_ddiv+0x15c>
 8000daa:	465b      	mov	r3, fp
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d100      	bne.n	8000db2 <__aeabi_ddiv+0x126>
 8000db0:	e19e      	b.n	80010f0 <__aeabi_ddiv+0x464>
 8000db2:	4658      	mov	r0, fp
 8000db4:	f001 f9e2 	bl	800217c <__clzsi2>
 8000db8:	0003      	movs	r3, r0
 8000dba:	3b0b      	subs	r3, #11
 8000dbc:	2b1c      	cmp	r3, #28
 8000dbe:	dd00      	ble.n	8000dc2 <__aeabi_ddiv+0x136>
 8000dc0:	e18f      	b.n	80010e2 <__aeabi_ddiv+0x456>
 8000dc2:	0002      	movs	r2, r0
 8000dc4:	4659      	mov	r1, fp
 8000dc6:	3a08      	subs	r2, #8
 8000dc8:	4091      	lsls	r1, r2
 8000dca:	468b      	mov	fp, r1
 8000dcc:	211d      	movs	r1, #29
 8000dce:	1acb      	subs	r3, r1, r3
 8000dd0:	4651      	mov	r1, sl
 8000dd2:	40d9      	lsrs	r1, r3
 8000dd4:	000b      	movs	r3, r1
 8000dd6:	4659      	mov	r1, fp
 8000dd8:	430b      	orrs	r3, r1
 8000dda:	4651      	mov	r1, sl
 8000ddc:	469b      	mov	fp, r3
 8000dde:	4091      	lsls	r1, r2
 8000de0:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <__aeabi_ddiv+0x1f0>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	1a1b      	subs	r3, r3, r0
 8000de6:	e78f      	b.n	8000d08 <__aeabi_ddiv+0x7c>
 8000de8:	2300      	movs	r3, #0
 8000dea:	2201      	movs	r2, #1
 8000dec:	469b      	mov	fp, r3
 8000dee:	e78b      	b.n	8000d08 <__aeabi_ddiv+0x7c>
 8000df0:	4651      	mov	r1, sl
 8000df2:	2203      	movs	r2, #3
 8000df4:	e788      	b.n	8000d08 <__aeabi_ddiv+0x7c>
 8000df6:	2300      	movs	r3, #0
 8000df8:	4698      	mov	r8, r3
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	2604      	movs	r6, #4
 8000dfe:	2400      	movs	r4, #0
 8000e00:	9303      	str	r3, [sp, #12]
 8000e02:	e767      	b.n	8000cd4 <__aeabi_ddiv+0x48>
 8000e04:	2303      	movs	r3, #3
 8000e06:	46b1      	mov	r9, r6
 8000e08:	9303      	str	r3, [sp, #12]
 8000e0a:	260c      	movs	r6, #12
 8000e0c:	e762      	b.n	8000cd4 <__aeabi_ddiv+0x48>
 8000e0e:	2a03      	cmp	r2, #3
 8000e10:	d100      	bne.n	8000e14 <__aeabi_ddiv+0x188>
 8000e12:	e25c      	b.n	80012ce <__aeabi_ddiv+0x642>
 8000e14:	9b01      	ldr	r3, [sp, #4]
 8000e16:	2a01      	cmp	r2, #1
 8000e18:	d000      	beq.n	8000e1c <__aeabi_ddiv+0x190>
 8000e1a:	e1e4      	b.n	80011e6 <__aeabi_ddiv+0x55a>
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	469c      	mov	ip, r3
 8000e20:	2300      	movs	r3, #0
 8000e22:	2400      	movs	r4, #0
 8000e24:	2200      	movs	r2, #0
 8000e26:	4698      	mov	r8, r3
 8000e28:	2100      	movs	r1, #0
 8000e2a:	0312      	lsls	r2, r2, #12
 8000e2c:	0b13      	lsrs	r3, r2, #12
 8000e2e:	0d0a      	lsrs	r2, r1, #20
 8000e30:	0512      	lsls	r2, r2, #20
 8000e32:	431a      	orrs	r2, r3
 8000e34:	0523      	lsls	r3, r4, #20
 8000e36:	4c12      	ldr	r4, [pc, #72]	; (8000e80 <__aeabi_ddiv+0x1f4>)
 8000e38:	4640      	mov	r0, r8
 8000e3a:	4022      	ands	r2, r4
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	4662      	mov	r2, ip
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	07d2      	lsls	r2, r2, #31
 8000e44:	085b      	lsrs	r3, r3, #1
 8000e46:	4313      	orrs	r3, r2
 8000e48:	0019      	movs	r1, r3
 8000e4a:	b007      	add	sp, #28
 8000e4c:	bc3c      	pop	{r2, r3, r4, r5}
 8000e4e:	4690      	mov	r8, r2
 8000e50:	4699      	mov	r9, r3
 8000e52:	46a2      	mov	sl, r4
 8000e54:	46ab      	mov	fp, r5
 8000e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e58:	2300      	movs	r3, #0
 8000e5a:	2280      	movs	r2, #128	; 0x80
 8000e5c:	469c      	mov	ip, r3
 8000e5e:	0312      	lsls	r2, r2, #12
 8000e60:	4698      	mov	r8, r3
 8000e62:	4c03      	ldr	r4, [pc, #12]	; (8000e70 <__aeabi_ddiv+0x1e4>)
 8000e64:	e7e0      	b.n	8000e28 <__aeabi_ddiv+0x19c>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4c01      	ldr	r4, [pc, #4]	; (8000e70 <__aeabi_ddiv+0x1e4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	4698      	mov	r8, r3
 8000e6e:	e7db      	b.n	8000e28 <__aeabi_ddiv+0x19c>
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	fffffc01 	.word	0xfffffc01
 8000e78:	0800ad28 	.word	0x0800ad28
 8000e7c:	fffffc0d 	.word	0xfffffc0d
 8000e80:	800fffff 	.word	0x800fffff
 8000e84:	45d9      	cmp	r9, fp
 8000e86:	d900      	bls.n	8000e8a <__aeabi_ddiv+0x1fe>
 8000e88:	e139      	b.n	80010fe <__aeabi_ddiv+0x472>
 8000e8a:	d100      	bne.n	8000e8e <__aeabi_ddiv+0x202>
 8000e8c:	e134      	b.n	80010f8 <__aeabi_ddiv+0x46c>
 8000e8e:	2300      	movs	r3, #0
 8000e90:	4646      	mov	r6, r8
 8000e92:	464d      	mov	r5, r9
 8000e94:	469a      	mov	sl, r3
 8000e96:	3c01      	subs	r4, #1
 8000e98:	465b      	mov	r3, fp
 8000e9a:	0e0a      	lsrs	r2, r1, #24
 8000e9c:	021b      	lsls	r3, r3, #8
 8000e9e:	431a      	orrs	r2, r3
 8000ea0:	020b      	lsls	r3, r1, #8
 8000ea2:	0c17      	lsrs	r7, r2, #16
 8000ea4:	9303      	str	r3, [sp, #12]
 8000ea6:	0413      	lsls	r3, r2, #16
 8000ea8:	0c1b      	lsrs	r3, r3, #16
 8000eaa:	0039      	movs	r1, r7
 8000eac:	0028      	movs	r0, r5
 8000eae:	4690      	mov	r8, r2
 8000eb0:	9301      	str	r3, [sp, #4]
 8000eb2:	f7ff f929 	bl	8000108 <__udivsi3>
 8000eb6:	0002      	movs	r2, r0
 8000eb8:	9b01      	ldr	r3, [sp, #4]
 8000eba:	4683      	mov	fp, r0
 8000ebc:	435a      	muls	r2, r3
 8000ebe:	0028      	movs	r0, r5
 8000ec0:	0039      	movs	r1, r7
 8000ec2:	4691      	mov	r9, r2
 8000ec4:	f7ff f9a6 	bl	8000214 <__aeabi_uidivmod>
 8000ec8:	0c35      	lsrs	r5, r6, #16
 8000eca:	0409      	lsls	r1, r1, #16
 8000ecc:	430d      	orrs	r5, r1
 8000ece:	45a9      	cmp	r9, r5
 8000ed0:	d90d      	bls.n	8000eee <__aeabi_ddiv+0x262>
 8000ed2:	465b      	mov	r3, fp
 8000ed4:	4445      	add	r5, r8
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	45a8      	cmp	r8, r5
 8000eda:	d900      	bls.n	8000ede <__aeabi_ddiv+0x252>
 8000edc:	e13a      	b.n	8001154 <__aeabi_ddiv+0x4c8>
 8000ede:	45a9      	cmp	r9, r5
 8000ee0:	d800      	bhi.n	8000ee4 <__aeabi_ddiv+0x258>
 8000ee2:	e137      	b.n	8001154 <__aeabi_ddiv+0x4c8>
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	425b      	negs	r3, r3
 8000ee8:	469c      	mov	ip, r3
 8000eea:	4445      	add	r5, r8
 8000eec:	44e3      	add	fp, ip
 8000eee:	464b      	mov	r3, r9
 8000ef0:	1aeb      	subs	r3, r5, r3
 8000ef2:	0039      	movs	r1, r7
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	9304      	str	r3, [sp, #16]
 8000ef8:	f7ff f906 	bl	8000108 <__udivsi3>
 8000efc:	9b01      	ldr	r3, [sp, #4]
 8000efe:	0005      	movs	r5, r0
 8000f00:	4343      	muls	r3, r0
 8000f02:	0039      	movs	r1, r7
 8000f04:	9804      	ldr	r0, [sp, #16]
 8000f06:	4699      	mov	r9, r3
 8000f08:	f7ff f984 	bl	8000214 <__aeabi_uidivmod>
 8000f0c:	0433      	lsls	r3, r6, #16
 8000f0e:	0409      	lsls	r1, r1, #16
 8000f10:	0c1b      	lsrs	r3, r3, #16
 8000f12:	430b      	orrs	r3, r1
 8000f14:	4599      	cmp	r9, r3
 8000f16:	d909      	bls.n	8000f2c <__aeabi_ddiv+0x2a0>
 8000f18:	4443      	add	r3, r8
 8000f1a:	1e6a      	subs	r2, r5, #1
 8000f1c:	4598      	cmp	r8, r3
 8000f1e:	d900      	bls.n	8000f22 <__aeabi_ddiv+0x296>
 8000f20:	e11a      	b.n	8001158 <__aeabi_ddiv+0x4cc>
 8000f22:	4599      	cmp	r9, r3
 8000f24:	d800      	bhi.n	8000f28 <__aeabi_ddiv+0x29c>
 8000f26:	e117      	b.n	8001158 <__aeabi_ddiv+0x4cc>
 8000f28:	3d02      	subs	r5, #2
 8000f2a:	4443      	add	r3, r8
 8000f2c:	464a      	mov	r2, r9
 8000f2e:	1a9b      	subs	r3, r3, r2
 8000f30:	465a      	mov	r2, fp
 8000f32:	0412      	lsls	r2, r2, #16
 8000f34:	432a      	orrs	r2, r5
 8000f36:	9903      	ldr	r1, [sp, #12]
 8000f38:	4693      	mov	fp, r2
 8000f3a:	0c10      	lsrs	r0, r2, #16
 8000f3c:	0c0a      	lsrs	r2, r1, #16
 8000f3e:	4691      	mov	r9, r2
 8000f40:	0409      	lsls	r1, r1, #16
 8000f42:	465a      	mov	r2, fp
 8000f44:	0c09      	lsrs	r1, r1, #16
 8000f46:	464e      	mov	r6, r9
 8000f48:	000d      	movs	r5, r1
 8000f4a:	0412      	lsls	r2, r2, #16
 8000f4c:	0c12      	lsrs	r2, r2, #16
 8000f4e:	4345      	muls	r5, r0
 8000f50:	9105      	str	r1, [sp, #20]
 8000f52:	4351      	muls	r1, r2
 8000f54:	4372      	muls	r2, r6
 8000f56:	4370      	muls	r0, r6
 8000f58:	1952      	adds	r2, r2, r5
 8000f5a:	0c0e      	lsrs	r6, r1, #16
 8000f5c:	18b2      	adds	r2, r6, r2
 8000f5e:	4295      	cmp	r5, r2
 8000f60:	d903      	bls.n	8000f6a <__aeabi_ddiv+0x2de>
 8000f62:	2580      	movs	r5, #128	; 0x80
 8000f64:	026d      	lsls	r5, r5, #9
 8000f66:	46ac      	mov	ip, r5
 8000f68:	4460      	add	r0, ip
 8000f6a:	0c15      	lsrs	r5, r2, #16
 8000f6c:	0409      	lsls	r1, r1, #16
 8000f6e:	0412      	lsls	r2, r2, #16
 8000f70:	0c09      	lsrs	r1, r1, #16
 8000f72:	1828      	adds	r0, r5, r0
 8000f74:	1852      	adds	r2, r2, r1
 8000f76:	4283      	cmp	r3, r0
 8000f78:	d200      	bcs.n	8000f7c <__aeabi_ddiv+0x2f0>
 8000f7a:	e0ce      	b.n	800111a <__aeabi_ddiv+0x48e>
 8000f7c:	d100      	bne.n	8000f80 <__aeabi_ddiv+0x2f4>
 8000f7e:	e0c8      	b.n	8001112 <__aeabi_ddiv+0x486>
 8000f80:	1a1d      	subs	r5, r3, r0
 8000f82:	4653      	mov	r3, sl
 8000f84:	1a9e      	subs	r6, r3, r2
 8000f86:	45b2      	cmp	sl, r6
 8000f88:	4192      	sbcs	r2, r2
 8000f8a:	4252      	negs	r2, r2
 8000f8c:	1aab      	subs	r3, r5, r2
 8000f8e:	469a      	mov	sl, r3
 8000f90:	4598      	cmp	r8, r3
 8000f92:	d100      	bne.n	8000f96 <__aeabi_ddiv+0x30a>
 8000f94:	e117      	b.n	80011c6 <__aeabi_ddiv+0x53a>
 8000f96:	0039      	movs	r1, r7
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f7ff f8b5 	bl	8000108 <__udivsi3>
 8000f9e:	9b01      	ldr	r3, [sp, #4]
 8000fa0:	0005      	movs	r5, r0
 8000fa2:	4343      	muls	r3, r0
 8000fa4:	0039      	movs	r1, r7
 8000fa6:	4650      	mov	r0, sl
 8000fa8:	9304      	str	r3, [sp, #16]
 8000faa:	f7ff f933 	bl	8000214 <__aeabi_uidivmod>
 8000fae:	9804      	ldr	r0, [sp, #16]
 8000fb0:	040b      	lsls	r3, r1, #16
 8000fb2:	0c31      	lsrs	r1, r6, #16
 8000fb4:	4319      	orrs	r1, r3
 8000fb6:	4288      	cmp	r0, r1
 8000fb8:	d909      	bls.n	8000fce <__aeabi_ddiv+0x342>
 8000fba:	4441      	add	r1, r8
 8000fbc:	1e6b      	subs	r3, r5, #1
 8000fbe:	4588      	cmp	r8, r1
 8000fc0:	d900      	bls.n	8000fc4 <__aeabi_ddiv+0x338>
 8000fc2:	e107      	b.n	80011d4 <__aeabi_ddiv+0x548>
 8000fc4:	4288      	cmp	r0, r1
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x33e>
 8000fc8:	e104      	b.n	80011d4 <__aeabi_ddiv+0x548>
 8000fca:	3d02      	subs	r5, #2
 8000fcc:	4441      	add	r1, r8
 8000fce:	9b04      	ldr	r3, [sp, #16]
 8000fd0:	1acb      	subs	r3, r1, r3
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	0039      	movs	r1, r7
 8000fd6:	9304      	str	r3, [sp, #16]
 8000fd8:	f7ff f896 	bl	8000108 <__udivsi3>
 8000fdc:	9b01      	ldr	r3, [sp, #4]
 8000fde:	4682      	mov	sl, r0
 8000fe0:	4343      	muls	r3, r0
 8000fe2:	0039      	movs	r1, r7
 8000fe4:	9804      	ldr	r0, [sp, #16]
 8000fe6:	9301      	str	r3, [sp, #4]
 8000fe8:	f7ff f914 	bl	8000214 <__aeabi_uidivmod>
 8000fec:	9801      	ldr	r0, [sp, #4]
 8000fee:	040b      	lsls	r3, r1, #16
 8000ff0:	0431      	lsls	r1, r6, #16
 8000ff2:	0c09      	lsrs	r1, r1, #16
 8000ff4:	4319      	orrs	r1, r3
 8000ff6:	4288      	cmp	r0, r1
 8000ff8:	d90d      	bls.n	8001016 <__aeabi_ddiv+0x38a>
 8000ffa:	4653      	mov	r3, sl
 8000ffc:	4441      	add	r1, r8
 8000ffe:	3b01      	subs	r3, #1
 8001000:	4588      	cmp	r8, r1
 8001002:	d900      	bls.n	8001006 <__aeabi_ddiv+0x37a>
 8001004:	e0e8      	b.n	80011d8 <__aeabi_ddiv+0x54c>
 8001006:	4288      	cmp	r0, r1
 8001008:	d800      	bhi.n	800100c <__aeabi_ddiv+0x380>
 800100a:	e0e5      	b.n	80011d8 <__aeabi_ddiv+0x54c>
 800100c:	2302      	movs	r3, #2
 800100e:	425b      	negs	r3, r3
 8001010:	469c      	mov	ip, r3
 8001012:	4441      	add	r1, r8
 8001014:	44e2      	add	sl, ip
 8001016:	9b01      	ldr	r3, [sp, #4]
 8001018:	042d      	lsls	r5, r5, #16
 800101a:	1ace      	subs	r6, r1, r3
 800101c:	4651      	mov	r1, sl
 800101e:	4329      	orrs	r1, r5
 8001020:	9d05      	ldr	r5, [sp, #20]
 8001022:	464f      	mov	r7, r9
 8001024:	002a      	movs	r2, r5
 8001026:	040b      	lsls	r3, r1, #16
 8001028:	0c08      	lsrs	r0, r1, #16
 800102a:	0c1b      	lsrs	r3, r3, #16
 800102c:	435a      	muls	r2, r3
 800102e:	4345      	muls	r5, r0
 8001030:	437b      	muls	r3, r7
 8001032:	4378      	muls	r0, r7
 8001034:	195b      	adds	r3, r3, r5
 8001036:	0c17      	lsrs	r7, r2, #16
 8001038:	18fb      	adds	r3, r7, r3
 800103a:	429d      	cmp	r5, r3
 800103c:	d903      	bls.n	8001046 <__aeabi_ddiv+0x3ba>
 800103e:	2580      	movs	r5, #128	; 0x80
 8001040:	026d      	lsls	r5, r5, #9
 8001042:	46ac      	mov	ip, r5
 8001044:	4460      	add	r0, ip
 8001046:	0c1d      	lsrs	r5, r3, #16
 8001048:	0412      	lsls	r2, r2, #16
 800104a:	041b      	lsls	r3, r3, #16
 800104c:	0c12      	lsrs	r2, r2, #16
 800104e:	1828      	adds	r0, r5, r0
 8001050:	189b      	adds	r3, r3, r2
 8001052:	4286      	cmp	r6, r0
 8001054:	d200      	bcs.n	8001058 <__aeabi_ddiv+0x3cc>
 8001056:	e093      	b.n	8001180 <__aeabi_ddiv+0x4f4>
 8001058:	d100      	bne.n	800105c <__aeabi_ddiv+0x3d0>
 800105a:	e08e      	b.n	800117a <__aeabi_ddiv+0x4ee>
 800105c:	2301      	movs	r3, #1
 800105e:	4319      	orrs	r1, r3
 8001060:	4ba0      	ldr	r3, [pc, #640]	; (80012e4 <__aeabi_ddiv+0x658>)
 8001062:	18e3      	adds	r3, r4, r3
 8001064:	2b00      	cmp	r3, #0
 8001066:	dc00      	bgt.n	800106a <__aeabi_ddiv+0x3de>
 8001068:	e099      	b.n	800119e <__aeabi_ddiv+0x512>
 800106a:	074a      	lsls	r2, r1, #29
 800106c:	d000      	beq.n	8001070 <__aeabi_ddiv+0x3e4>
 800106e:	e09e      	b.n	80011ae <__aeabi_ddiv+0x522>
 8001070:	465a      	mov	r2, fp
 8001072:	01d2      	lsls	r2, r2, #7
 8001074:	d506      	bpl.n	8001084 <__aeabi_ddiv+0x3f8>
 8001076:	465a      	mov	r2, fp
 8001078:	4b9b      	ldr	r3, [pc, #620]	; (80012e8 <__aeabi_ddiv+0x65c>)
 800107a:	401a      	ands	r2, r3
 800107c:	2380      	movs	r3, #128	; 0x80
 800107e:	4693      	mov	fp, r2
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	18e3      	adds	r3, r4, r3
 8001084:	4a99      	ldr	r2, [pc, #612]	; (80012ec <__aeabi_ddiv+0x660>)
 8001086:	4293      	cmp	r3, r2
 8001088:	dd68      	ble.n	800115c <__aeabi_ddiv+0x4d0>
 800108a:	2301      	movs	r3, #1
 800108c:	9a02      	ldr	r2, [sp, #8]
 800108e:	4c98      	ldr	r4, [pc, #608]	; (80012f0 <__aeabi_ddiv+0x664>)
 8001090:	401a      	ands	r2, r3
 8001092:	2300      	movs	r3, #0
 8001094:	4694      	mov	ip, r2
 8001096:	4698      	mov	r8, r3
 8001098:	2200      	movs	r2, #0
 800109a:	e6c5      	b.n	8000e28 <__aeabi_ddiv+0x19c>
 800109c:	2280      	movs	r2, #128	; 0x80
 800109e:	464b      	mov	r3, r9
 80010a0:	0312      	lsls	r2, r2, #12
 80010a2:	4213      	tst	r3, r2
 80010a4:	d00a      	beq.n	80010bc <__aeabi_ddiv+0x430>
 80010a6:	465b      	mov	r3, fp
 80010a8:	4213      	tst	r3, r2
 80010aa:	d106      	bne.n	80010ba <__aeabi_ddiv+0x42e>
 80010ac:	431a      	orrs	r2, r3
 80010ae:	0312      	lsls	r2, r2, #12
 80010b0:	0b12      	lsrs	r2, r2, #12
 80010b2:	46ac      	mov	ip, r5
 80010b4:	4688      	mov	r8, r1
 80010b6:	4c8e      	ldr	r4, [pc, #568]	; (80012f0 <__aeabi_ddiv+0x664>)
 80010b8:	e6b6      	b.n	8000e28 <__aeabi_ddiv+0x19c>
 80010ba:	464b      	mov	r3, r9
 80010bc:	431a      	orrs	r2, r3
 80010be:	0312      	lsls	r2, r2, #12
 80010c0:	0b12      	lsrs	r2, r2, #12
 80010c2:	46bc      	mov	ip, r7
 80010c4:	4c8a      	ldr	r4, [pc, #552]	; (80012f0 <__aeabi_ddiv+0x664>)
 80010c6:	e6af      	b.n	8000e28 <__aeabi_ddiv+0x19c>
 80010c8:	0003      	movs	r3, r0
 80010ca:	465a      	mov	r2, fp
 80010cc:	3b28      	subs	r3, #40	; 0x28
 80010ce:	409a      	lsls	r2, r3
 80010d0:	2300      	movs	r3, #0
 80010d2:	4691      	mov	r9, r2
 80010d4:	4698      	mov	r8, r3
 80010d6:	e657      	b.n	8000d88 <__aeabi_ddiv+0xfc>
 80010d8:	4658      	mov	r0, fp
 80010da:	f001 f84f 	bl	800217c <__clzsi2>
 80010de:	3020      	adds	r0, #32
 80010e0:	e640      	b.n	8000d64 <__aeabi_ddiv+0xd8>
 80010e2:	0003      	movs	r3, r0
 80010e4:	4652      	mov	r2, sl
 80010e6:	3b28      	subs	r3, #40	; 0x28
 80010e8:	409a      	lsls	r2, r3
 80010ea:	2100      	movs	r1, #0
 80010ec:	4693      	mov	fp, r2
 80010ee:	e677      	b.n	8000de0 <__aeabi_ddiv+0x154>
 80010f0:	f001 f844 	bl	800217c <__clzsi2>
 80010f4:	3020      	adds	r0, #32
 80010f6:	e65f      	b.n	8000db8 <__aeabi_ddiv+0x12c>
 80010f8:	4588      	cmp	r8, r1
 80010fa:	d200      	bcs.n	80010fe <__aeabi_ddiv+0x472>
 80010fc:	e6c7      	b.n	8000e8e <__aeabi_ddiv+0x202>
 80010fe:	464b      	mov	r3, r9
 8001100:	07de      	lsls	r6, r3, #31
 8001102:	085d      	lsrs	r5, r3, #1
 8001104:	4643      	mov	r3, r8
 8001106:	085b      	lsrs	r3, r3, #1
 8001108:	431e      	orrs	r6, r3
 800110a:	4643      	mov	r3, r8
 800110c:	07db      	lsls	r3, r3, #31
 800110e:	469a      	mov	sl, r3
 8001110:	e6c2      	b.n	8000e98 <__aeabi_ddiv+0x20c>
 8001112:	2500      	movs	r5, #0
 8001114:	4592      	cmp	sl, r2
 8001116:	d300      	bcc.n	800111a <__aeabi_ddiv+0x48e>
 8001118:	e733      	b.n	8000f82 <__aeabi_ddiv+0x2f6>
 800111a:	9e03      	ldr	r6, [sp, #12]
 800111c:	4659      	mov	r1, fp
 800111e:	46b4      	mov	ip, r6
 8001120:	44e2      	add	sl, ip
 8001122:	45b2      	cmp	sl, r6
 8001124:	41ad      	sbcs	r5, r5
 8001126:	426d      	negs	r5, r5
 8001128:	4445      	add	r5, r8
 800112a:	18eb      	adds	r3, r5, r3
 800112c:	3901      	subs	r1, #1
 800112e:	4598      	cmp	r8, r3
 8001130:	d207      	bcs.n	8001142 <__aeabi_ddiv+0x4b6>
 8001132:	4298      	cmp	r0, r3
 8001134:	d900      	bls.n	8001138 <__aeabi_ddiv+0x4ac>
 8001136:	e07f      	b.n	8001238 <__aeabi_ddiv+0x5ac>
 8001138:	d100      	bne.n	800113c <__aeabi_ddiv+0x4b0>
 800113a:	e0bc      	b.n	80012b6 <__aeabi_ddiv+0x62a>
 800113c:	1a1d      	subs	r5, r3, r0
 800113e:	468b      	mov	fp, r1
 8001140:	e71f      	b.n	8000f82 <__aeabi_ddiv+0x2f6>
 8001142:	4598      	cmp	r8, r3
 8001144:	d1fa      	bne.n	800113c <__aeabi_ddiv+0x4b0>
 8001146:	9d03      	ldr	r5, [sp, #12]
 8001148:	4555      	cmp	r5, sl
 800114a:	d9f2      	bls.n	8001132 <__aeabi_ddiv+0x4a6>
 800114c:	4643      	mov	r3, r8
 800114e:	468b      	mov	fp, r1
 8001150:	1a1d      	subs	r5, r3, r0
 8001152:	e716      	b.n	8000f82 <__aeabi_ddiv+0x2f6>
 8001154:	469b      	mov	fp, r3
 8001156:	e6ca      	b.n	8000eee <__aeabi_ddiv+0x262>
 8001158:	0015      	movs	r5, r2
 800115a:	e6e7      	b.n	8000f2c <__aeabi_ddiv+0x2a0>
 800115c:	465a      	mov	r2, fp
 800115e:	08c9      	lsrs	r1, r1, #3
 8001160:	0752      	lsls	r2, r2, #29
 8001162:	430a      	orrs	r2, r1
 8001164:	055b      	lsls	r3, r3, #21
 8001166:	4690      	mov	r8, r2
 8001168:	0d5c      	lsrs	r4, r3, #21
 800116a:	465a      	mov	r2, fp
 800116c:	2301      	movs	r3, #1
 800116e:	9902      	ldr	r1, [sp, #8]
 8001170:	0252      	lsls	r2, r2, #9
 8001172:	4019      	ands	r1, r3
 8001174:	0b12      	lsrs	r2, r2, #12
 8001176:	468c      	mov	ip, r1
 8001178:	e656      	b.n	8000e28 <__aeabi_ddiv+0x19c>
 800117a:	2b00      	cmp	r3, #0
 800117c:	d100      	bne.n	8001180 <__aeabi_ddiv+0x4f4>
 800117e:	e76f      	b.n	8001060 <__aeabi_ddiv+0x3d4>
 8001180:	4446      	add	r6, r8
 8001182:	1e4a      	subs	r2, r1, #1
 8001184:	45b0      	cmp	r8, r6
 8001186:	d929      	bls.n	80011dc <__aeabi_ddiv+0x550>
 8001188:	0011      	movs	r1, r2
 800118a:	4286      	cmp	r6, r0
 800118c:	d000      	beq.n	8001190 <__aeabi_ddiv+0x504>
 800118e:	e765      	b.n	800105c <__aeabi_ddiv+0x3d0>
 8001190:	9a03      	ldr	r2, [sp, #12]
 8001192:	4293      	cmp	r3, r2
 8001194:	d000      	beq.n	8001198 <__aeabi_ddiv+0x50c>
 8001196:	e761      	b.n	800105c <__aeabi_ddiv+0x3d0>
 8001198:	e762      	b.n	8001060 <__aeabi_ddiv+0x3d4>
 800119a:	2101      	movs	r1, #1
 800119c:	4249      	negs	r1, r1
 800119e:	2001      	movs	r0, #1
 80011a0:	1ac2      	subs	r2, r0, r3
 80011a2:	2a38      	cmp	r2, #56	; 0x38
 80011a4:	dd21      	ble.n	80011ea <__aeabi_ddiv+0x55e>
 80011a6:	9b02      	ldr	r3, [sp, #8]
 80011a8:	4003      	ands	r3, r0
 80011aa:	469c      	mov	ip, r3
 80011ac:	e638      	b.n	8000e20 <__aeabi_ddiv+0x194>
 80011ae:	220f      	movs	r2, #15
 80011b0:	400a      	ands	r2, r1
 80011b2:	2a04      	cmp	r2, #4
 80011b4:	d100      	bne.n	80011b8 <__aeabi_ddiv+0x52c>
 80011b6:	e75b      	b.n	8001070 <__aeabi_ddiv+0x3e4>
 80011b8:	000a      	movs	r2, r1
 80011ba:	1d11      	adds	r1, r2, #4
 80011bc:	4291      	cmp	r1, r2
 80011be:	4192      	sbcs	r2, r2
 80011c0:	4252      	negs	r2, r2
 80011c2:	4493      	add	fp, r2
 80011c4:	e754      	b.n	8001070 <__aeabi_ddiv+0x3e4>
 80011c6:	4b47      	ldr	r3, [pc, #284]	; (80012e4 <__aeabi_ddiv+0x658>)
 80011c8:	18e3      	adds	r3, r4, r3
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	dde5      	ble.n	800119a <__aeabi_ddiv+0x50e>
 80011ce:	2201      	movs	r2, #1
 80011d0:	4252      	negs	r2, r2
 80011d2:	e7f2      	b.n	80011ba <__aeabi_ddiv+0x52e>
 80011d4:	001d      	movs	r5, r3
 80011d6:	e6fa      	b.n	8000fce <__aeabi_ddiv+0x342>
 80011d8:	469a      	mov	sl, r3
 80011da:	e71c      	b.n	8001016 <__aeabi_ddiv+0x38a>
 80011dc:	42b0      	cmp	r0, r6
 80011de:	d839      	bhi.n	8001254 <__aeabi_ddiv+0x5c8>
 80011e0:	d06e      	beq.n	80012c0 <__aeabi_ddiv+0x634>
 80011e2:	0011      	movs	r1, r2
 80011e4:	e73a      	b.n	800105c <__aeabi_ddiv+0x3d0>
 80011e6:	9302      	str	r3, [sp, #8]
 80011e8:	e73a      	b.n	8001060 <__aeabi_ddiv+0x3d4>
 80011ea:	2a1f      	cmp	r2, #31
 80011ec:	dc3c      	bgt.n	8001268 <__aeabi_ddiv+0x5dc>
 80011ee:	2320      	movs	r3, #32
 80011f0:	1a9b      	subs	r3, r3, r2
 80011f2:	000c      	movs	r4, r1
 80011f4:	4658      	mov	r0, fp
 80011f6:	4099      	lsls	r1, r3
 80011f8:	4098      	lsls	r0, r3
 80011fa:	1e4b      	subs	r3, r1, #1
 80011fc:	4199      	sbcs	r1, r3
 80011fe:	465b      	mov	r3, fp
 8001200:	40d4      	lsrs	r4, r2
 8001202:	40d3      	lsrs	r3, r2
 8001204:	4320      	orrs	r0, r4
 8001206:	4308      	orrs	r0, r1
 8001208:	001a      	movs	r2, r3
 800120a:	0743      	lsls	r3, r0, #29
 800120c:	d009      	beq.n	8001222 <__aeabi_ddiv+0x596>
 800120e:	230f      	movs	r3, #15
 8001210:	4003      	ands	r3, r0
 8001212:	2b04      	cmp	r3, #4
 8001214:	d005      	beq.n	8001222 <__aeabi_ddiv+0x596>
 8001216:	0001      	movs	r1, r0
 8001218:	1d08      	adds	r0, r1, #4
 800121a:	4288      	cmp	r0, r1
 800121c:	419b      	sbcs	r3, r3
 800121e:	425b      	negs	r3, r3
 8001220:	18d2      	adds	r2, r2, r3
 8001222:	0213      	lsls	r3, r2, #8
 8001224:	d53a      	bpl.n	800129c <__aeabi_ddiv+0x610>
 8001226:	2301      	movs	r3, #1
 8001228:	9a02      	ldr	r2, [sp, #8]
 800122a:	2401      	movs	r4, #1
 800122c:	401a      	ands	r2, r3
 800122e:	2300      	movs	r3, #0
 8001230:	4694      	mov	ip, r2
 8001232:	4698      	mov	r8, r3
 8001234:	2200      	movs	r2, #0
 8001236:	e5f7      	b.n	8000e28 <__aeabi_ddiv+0x19c>
 8001238:	2102      	movs	r1, #2
 800123a:	4249      	negs	r1, r1
 800123c:	468c      	mov	ip, r1
 800123e:	9d03      	ldr	r5, [sp, #12]
 8001240:	44e3      	add	fp, ip
 8001242:	46ac      	mov	ip, r5
 8001244:	44e2      	add	sl, ip
 8001246:	45aa      	cmp	sl, r5
 8001248:	41ad      	sbcs	r5, r5
 800124a:	426d      	negs	r5, r5
 800124c:	4445      	add	r5, r8
 800124e:	18ed      	adds	r5, r5, r3
 8001250:	1a2d      	subs	r5, r5, r0
 8001252:	e696      	b.n	8000f82 <__aeabi_ddiv+0x2f6>
 8001254:	1e8a      	subs	r2, r1, #2
 8001256:	9903      	ldr	r1, [sp, #12]
 8001258:	004d      	lsls	r5, r1, #1
 800125a:	428d      	cmp	r5, r1
 800125c:	4189      	sbcs	r1, r1
 800125e:	4249      	negs	r1, r1
 8001260:	4441      	add	r1, r8
 8001262:	1876      	adds	r6, r6, r1
 8001264:	9503      	str	r5, [sp, #12]
 8001266:	e78f      	b.n	8001188 <__aeabi_ddiv+0x4fc>
 8001268:	201f      	movs	r0, #31
 800126a:	4240      	negs	r0, r0
 800126c:	1ac3      	subs	r3, r0, r3
 800126e:	4658      	mov	r0, fp
 8001270:	40d8      	lsrs	r0, r3
 8001272:	0003      	movs	r3, r0
 8001274:	2a20      	cmp	r2, #32
 8001276:	d028      	beq.n	80012ca <__aeabi_ddiv+0x63e>
 8001278:	2040      	movs	r0, #64	; 0x40
 800127a:	465d      	mov	r5, fp
 800127c:	1a82      	subs	r2, r0, r2
 800127e:	4095      	lsls	r5, r2
 8001280:	4329      	orrs	r1, r5
 8001282:	1e4a      	subs	r2, r1, #1
 8001284:	4191      	sbcs	r1, r2
 8001286:	4319      	orrs	r1, r3
 8001288:	2307      	movs	r3, #7
 800128a:	2200      	movs	r2, #0
 800128c:	400b      	ands	r3, r1
 800128e:	d009      	beq.n	80012a4 <__aeabi_ddiv+0x618>
 8001290:	230f      	movs	r3, #15
 8001292:	2200      	movs	r2, #0
 8001294:	400b      	ands	r3, r1
 8001296:	0008      	movs	r0, r1
 8001298:	2b04      	cmp	r3, #4
 800129a:	d1bd      	bne.n	8001218 <__aeabi_ddiv+0x58c>
 800129c:	0001      	movs	r1, r0
 800129e:	0753      	lsls	r3, r2, #29
 80012a0:	0252      	lsls	r2, r2, #9
 80012a2:	0b12      	lsrs	r2, r2, #12
 80012a4:	08c9      	lsrs	r1, r1, #3
 80012a6:	4319      	orrs	r1, r3
 80012a8:	2301      	movs	r3, #1
 80012aa:	4688      	mov	r8, r1
 80012ac:	9902      	ldr	r1, [sp, #8]
 80012ae:	2400      	movs	r4, #0
 80012b0:	4019      	ands	r1, r3
 80012b2:	468c      	mov	ip, r1
 80012b4:	e5b8      	b.n	8000e28 <__aeabi_ddiv+0x19c>
 80012b6:	4552      	cmp	r2, sl
 80012b8:	d8be      	bhi.n	8001238 <__aeabi_ddiv+0x5ac>
 80012ba:	468b      	mov	fp, r1
 80012bc:	2500      	movs	r5, #0
 80012be:	e660      	b.n	8000f82 <__aeabi_ddiv+0x2f6>
 80012c0:	9d03      	ldr	r5, [sp, #12]
 80012c2:	429d      	cmp	r5, r3
 80012c4:	d3c6      	bcc.n	8001254 <__aeabi_ddiv+0x5c8>
 80012c6:	0011      	movs	r1, r2
 80012c8:	e762      	b.n	8001190 <__aeabi_ddiv+0x504>
 80012ca:	2500      	movs	r5, #0
 80012cc:	e7d8      	b.n	8001280 <__aeabi_ddiv+0x5f4>
 80012ce:	2280      	movs	r2, #128	; 0x80
 80012d0:	465b      	mov	r3, fp
 80012d2:	0312      	lsls	r2, r2, #12
 80012d4:	431a      	orrs	r2, r3
 80012d6:	9b01      	ldr	r3, [sp, #4]
 80012d8:	0312      	lsls	r2, r2, #12
 80012da:	0b12      	lsrs	r2, r2, #12
 80012dc:	469c      	mov	ip, r3
 80012de:	4688      	mov	r8, r1
 80012e0:	4c03      	ldr	r4, [pc, #12]	; (80012f0 <__aeabi_ddiv+0x664>)
 80012e2:	e5a1      	b.n	8000e28 <__aeabi_ddiv+0x19c>
 80012e4:	000003ff 	.word	0x000003ff
 80012e8:	feffffff 	.word	0xfeffffff
 80012ec:	000007fe 	.word	0x000007fe
 80012f0:	000007ff 	.word	0x000007ff

080012f4 <__eqdf2>:
 80012f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012f6:	464f      	mov	r7, r9
 80012f8:	4646      	mov	r6, r8
 80012fa:	46d6      	mov	lr, sl
 80012fc:	005c      	lsls	r4, r3, #1
 80012fe:	b5c0      	push	{r6, r7, lr}
 8001300:	031f      	lsls	r7, r3, #12
 8001302:	0fdb      	lsrs	r3, r3, #31
 8001304:	469a      	mov	sl, r3
 8001306:	4b17      	ldr	r3, [pc, #92]	; (8001364 <__eqdf2+0x70>)
 8001308:	030e      	lsls	r6, r1, #12
 800130a:	004d      	lsls	r5, r1, #1
 800130c:	4684      	mov	ip, r0
 800130e:	4680      	mov	r8, r0
 8001310:	0b36      	lsrs	r6, r6, #12
 8001312:	0d6d      	lsrs	r5, r5, #21
 8001314:	0fc9      	lsrs	r1, r1, #31
 8001316:	4691      	mov	r9, r2
 8001318:	0b3f      	lsrs	r7, r7, #12
 800131a:	0d64      	lsrs	r4, r4, #21
 800131c:	2001      	movs	r0, #1
 800131e:	429d      	cmp	r5, r3
 8001320:	d008      	beq.n	8001334 <__eqdf2+0x40>
 8001322:	429c      	cmp	r4, r3
 8001324:	d001      	beq.n	800132a <__eqdf2+0x36>
 8001326:	42a5      	cmp	r5, r4
 8001328:	d00b      	beq.n	8001342 <__eqdf2+0x4e>
 800132a:	bc1c      	pop	{r2, r3, r4}
 800132c:	4690      	mov	r8, r2
 800132e:	4699      	mov	r9, r3
 8001330:	46a2      	mov	sl, r4
 8001332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001334:	4663      	mov	r3, ip
 8001336:	4333      	orrs	r3, r6
 8001338:	d1f7      	bne.n	800132a <__eqdf2+0x36>
 800133a:	42ac      	cmp	r4, r5
 800133c:	d1f5      	bne.n	800132a <__eqdf2+0x36>
 800133e:	433a      	orrs	r2, r7
 8001340:	d1f3      	bne.n	800132a <__eqdf2+0x36>
 8001342:	2001      	movs	r0, #1
 8001344:	42be      	cmp	r6, r7
 8001346:	d1f0      	bne.n	800132a <__eqdf2+0x36>
 8001348:	45c8      	cmp	r8, r9
 800134a:	d1ee      	bne.n	800132a <__eqdf2+0x36>
 800134c:	4551      	cmp	r1, sl
 800134e:	d007      	beq.n	8001360 <__eqdf2+0x6c>
 8001350:	2d00      	cmp	r5, #0
 8001352:	d1ea      	bne.n	800132a <__eqdf2+0x36>
 8001354:	4663      	mov	r3, ip
 8001356:	431e      	orrs	r6, r3
 8001358:	0030      	movs	r0, r6
 800135a:	1e46      	subs	r6, r0, #1
 800135c:	41b0      	sbcs	r0, r6
 800135e:	e7e4      	b.n	800132a <__eqdf2+0x36>
 8001360:	2000      	movs	r0, #0
 8001362:	e7e2      	b.n	800132a <__eqdf2+0x36>
 8001364:	000007ff 	.word	0x000007ff

08001368 <__gedf2>:
 8001368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800136a:	4645      	mov	r5, r8
 800136c:	46de      	mov	lr, fp
 800136e:	4657      	mov	r7, sl
 8001370:	464e      	mov	r6, r9
 8001372:	b5e0      	push	{r5, r6, r7, lr}
 8001374:	031f      	lsls	r7, r3, #12
 8001376:	0b3d      	lsrs	r5, r7, #12
 8001378:	4f2c      	ldr	r7, [pc, #176]	; (800142c <__gedf2+0xc4>)
 800137a:	030e      	lsls	r6, r1, #12
 800137c:	004c      	lsls	r4, r1, #1
 800137e:	46ab      	mov	fp, r5
 8001380:	005d      	lsls	r5, r3, #1
 8001382:	4684      	mov	ip, r0
 8001384:	0b36      	lsrs	r6, r6, #12
 8001386:	0d64      	lsrs	r4, r4, #21
 8001388:	0fc9      	lsrs	r1, r1, #31
 800138a:	4690      	mov	r8, r2
 800138c:	0d6d      	lsrs	r5, r5, #21
 800138e:	0fdb      	lsrs	r3, r3, #31
 8001390:	42bc      	cmp	r4, r7
 8001392:	d02a      	beq.n	80013ea <__gedf2+0x82>
 8001394:	4f25      	ldr	r7, [pc, #148]	; (800142c <__gedf2+0xc4>)
 8001396:	42bd      	cmp	r5, r7
 8001398:	d02d      	beq.n	80013f6 <__gedf2+0x8e>
 800139a:	2c00      	cmp	r4, #0
 800139c:	d10f      	bne.n	80013be <__gedf2+0x56>
 800139e:	4330      	orrs	r0, r6
 80013a0:	0007      	movs	r7, r0
 80013a2:	4681      	mov	r9, r0
 80013a4:	4278      	negs	r0, r7
 80013a6:	4178      	adcs	r0, r7
 80013a8:	b2c0      	uxtb	r0, r0
 80013aa:	2d00      	cmp	r5, #0
 80013ac:	d117      	bne.n	80013de <__gedf2+0x76>
 80013ae:	465f      	mov	r7, fp
 80013b0:	433a      	orrs	r2, r7
 80013b2:	d114      	bne.n	80013de <__gedf2+0x76>
 80013b4:	464b      	mov	r3, r9
 80013b6:	2000      	movs	r0, #0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d00a      	beq.n	80013d2 <__gedf2+0x6a>
 80013bc:	e006      	b.n	80013cc <__gedf2+0x64>
 80013be:	2d00      	cmp	r5, #0
 80013c0:	d102      	bne.n	80013c8 <__gedf2+0x60>
 80013c2:	4658      	mov	r0, fp
 80013c4:	4302      	orrs	r2, r0
 80013c6:	d001      	beq.n	80013cc <__gedf2+0x64>
 80013c8:	4299      	cmp	r1, r3
 80013ca:	d018      	beq.n	80013fe <__gedf2+0x96>
 80013cc:	4248      	negs	r0, r1
 80013ce:	2101      	movs	r1, #1
 80013d0:	4308      	orrs	r0, r1
 80013d2:	bc3c      	pop	{r2, r3, r4, r5}
 80013d4:	4690      	mov	r8, r2
 80013d6:	4699      	mov	r9, r3
 80013d8:	46a2      	mov	sl, r4
 80013da:	46ab      	mov	fp, r5
 80013dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013de:	2800      	cmp	r0, #0
 80013e0:	d0f2      	beq.n	80013c8 <__gedf2+0x60>
 80013e2:	2001      	movs	r0, #1
 80013e4:	3b01      	subs	r3, #1
 80013e6:	4318      	orrs	r0, r3
 80013e8:	e7f3      	b.n	80013d2 <__gedf2+0x6a>
 80013ea:	0037      	movs	r7, r6
 80013ec:	4307      	orrs	r7, r0
 80013ee:	d0d1      	beq.n	8001394 <__gedf2+0x2c>
 80013f0:	2002      	movs	r0, #2
 80013f2:	4240      	negs	r0, r0
 80013f4:	e7ed      	b.n	80013d2 <__gedf2+0x6a>
 80013f6:	465f      	mov	r7, fp
 80013f8:	4317      	orrs	r7, r2
 80013fa:	d0ce      	beq.n	800139a <__gedf2+0x32>
 80013fc:	e7f8      	b.n	80013f0 <__gedf2+0x88>
 80013fe:	42ac      	cmp	r4, r5
 8001400:	dce4      	bgt.n	80013cc <__gedf2+0x64>
 8001402:	da03      	bge.n	800140c <__gedf2+0xa4>
 8001404:	1e48      	subs	r0, r1, #1
 8001406:	2101      	movs	r1, #1
 8001408:	4308      	orrs	r0, r1
 800140a:	e7e2      	b.n	80013d2 <__gedf2+0x6a>
 800140c:	455e      	cmp	r6, fp
 800140e:	d8dd      	bhi.n	80013cc <__gedf2+0x64>
 8001410:	d006      	beq.n	8001420 <__gedf2+0xb8>
 8001412:	2000      	movs	r0, #0
 8001414:	455e      	cmp	r6, fp
 8001416:	d2dc      	bcs.n	80013d2 <__gedf2+0x6a>
 8001418:	2301      	movs	r3, #1
 800141a:	1e48      	subs	r0, r1, #1
 800141c:	4318      	orrs	r0, r3
 800141e:	e7d8      	b.n	80013d2 <__gedf2+0x6a>
 8001420:	45c4      	cmp	ip, r8
 8001422:	d8d3      	bhi.n	80013cc <__gedf2+0x64>
 8001424:	2000      	movs	r0, #0
 8001426:	45c4      	cmp	ip, r8
 8001428:	d3f6      	bcc.n	8001418 <__gedf2+0xb0>
 800142a:	e7d2      	b.n	80013d2 <__gedf2+0x6a>
 800142c:	000007ff 	.word	0x000007ff

08001430 <__ledf2>:
 8001430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001432:	464e      	mov	r6, r9
 8001434:	4645      	mov	r5, r8
 8001436:	46de      	mov	lr, fp
 8001438:	4657      	mov	r7, sl
 800143a:	005c      	lsls	r4, r3, #1
 800143c:	b5e0      	push	{r5, r6, r7, lr}
 800143e:	031f      	lsls	r7, r3, #12
 8001440:	0fdb      	lsrs	r3, r3, #31
 8001442:	4699      	mov	r9, r3
 8001444:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <__ledf2+0xc0>)
 8001446:	030e      	lsls	r6, r1, #12
 8001448:	004d      	lsls	r5, r1, #1
 800144a:	0fc9      	lsrs	r1, r1, #31
 800144c:	4684      	mov	ip, r0
 800144e:	0b36      	lsrs	r6, r6, #12
 8001450:	0d6d      	lsrs	r5, r5, #21
 8001452:	468b      	mov	fp, r1
 8001454:	4690      	mov	r8, r2
 8001456:	0b3f      	lsrs	r7, r7, #12
 8001458:	0d64      	lsrs	r4, r4, #21
 800145a:	429d      	cmp	r5, r3
 800145c:	d020      	beq.n	80014a0 <__ledf2+0x70>
 800145e:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <__ledf2+0xc0>)
 8001460:	429c      	cmp	r4, r3
 8001462:	d022      	beq.n	80014aa <__ledf2+0x7a>
 8001464:	2d00      	cmp	r5, #0
 8001466:	d112      	bne.n	800148e <__ledf2+0x5e>
 8001468:	4330      	orrs	r0, r6
 800146a:	4243      	negs	r3, r0
 800146c:	4143      	adcs	r3, r0
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2c00      	cmp	r4, #0
 8001472:	d01f      	beq.n	80014b4 <__ledf2+0x84>
 8001474:	2b00      	cmp	r3, #0
 8001476:	d00c      	beq.n	8001492 <__ledf2+0x62>
 8001478:	464b      	mov	r3, r9
 800147a:	2001      	movs	r0, #1
 800147c:	3b01      	subs	r3, #1
 800147e:	4303      	orrs	r3, r0
 8001480:	0018      	movs	r0, r3
 8001482:	bc3c      	pop	{r2, r3, r4, r5}
 8001484:	4690      	mov	r8, r2
 8001486:	4699      	mov	r9, r3
 8001488:	46a2      	mov	sl, r4
 800148a:	46ab      	mov	fp, r5
 800148c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800148e:	2c00      	cmp	r4, #0
 8001490:	d016      	beq.n	80014c0 <__ledf2+0x90>
 8001492:	45cb      	cmp	fp, r9
 8001494:	d017      	beq.n	80014c6 <__ledf2+0x96>
 8001496:	465b      	mov	r3, fp
 8001498:	4259      	negs	r1, r3
 800149a:	2301      	movs	r3, #1
 800149c:	430b      	orrs	r3, r1
 800149e:	e7ef      	b.n	8001480 <__ledf2+0x50>
 80014a0:	0031      	movs	r1, r6
 80014a2:	2302      	movs	r3, #2
 80014a4:	4301      	orrs	r1, r0
 80014a6:	d1eb      	bne.n	8001480 <__ledf2+0x50>
 80014a8:	e7d9      	b.n	800145e <__ledf2+0x2e>
 80014aa:	0039      	movs	r1, r7
 80014ac:	2302      	movs	r3, #2
 80014ae:	4311      	orrs	r1, r2
 80014b0:	d1e6      	bne.n	8001480 <__ledf2+0x50>
 80014b2:	e7d7      	b.n	8001464 <__ledf2+0x34>
 80014b4:	433a      	orrs	r2, r7
 80014b6:	d1dd      	bne.n	8001474 <__ledf2+0x44>
 80014b8:	2300      	movs	r3, #0
 80014ba:	2800      	cmp	r0, #0
 80014bc:	d0e0      	beq.n	8001480 <__ledf2+0x50>
 80014be:	e7ea      	b.n	8001496 <__ledf2+0x66>
 80014c0:	433a      	orrs	r2, r7
 80014c2:	d1e6      	bne.n	8001492 <__ledf2+0x62>
 80014c4:	e7e7      	b.n	8001496 <__ledf2+0x66>
 80014c6:	42a5      	cmp	r5, r4
 80014c8:	dce5      	bgt.n	8001496 <__ledf2+0x66>
 80014ca:	db05      	blt.n	80014d8 <__ledf2+0xa8>
 80014cc:	42be      	cmp	r6, r7
 80014ce:	d8e2      	bhi.n	8001496 <__ledf2+0x66>
 80014d0:	d007      	beq.n	80014e2 <__ledf2+0xb2>
 80014d2:	2300      	movs	r3, #0
 80014d4:	42be      	cmp	r6, r7
 80014d6:	d2d3      	bcs.n	8001480 <__ledf2+0x50>
 80014d8:	4659      	mov	r1, fp
 80014da:	2301      	movs	r3, #1
 80014dc:	3901      	subs	r1, #1
 80014de:	430b      	orrs	r3, r1
 80014e0:	e7ce      	b.n	8001480 <__ledf2+0x50>
 80014e2:	45c4      	cmp	ip, r8
 80014e4:	d8d7      	bhi.n	8001496 <__ledf2+0x66>
 80014e6:	2300      	movs	r3, #0
 80014e8:	45c4      	cmp	ip, r8
 80014ea:	d3f5      	bcc.n	80014d8 <__ledf2+0xa8>
 80014ec:	e7c8      	b.n	8001480 <__ledf2+0x50>
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	000007ff 	.word	0x000007ff

080014f4 <__aeabi_dmul>:
 80014f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f6:	4657      	mov	r7, sl
 80014f8:	4645      	mov	r5, r8
 80014fa:	46de      	mov	lr, fp
 80014fc:	464e      	mov	r6, r9
 80014fe:	b5e0      	push	{r5, r6, r7, lr}
 8001500:	030c      	lsls	r4, r1, #12
 8001502:	4698      	mov	r8, r3
 8001504:	004e      	lsls	r6, r1, #1
 8001506:	0b23      	lsrs	r3, r4, #12
 8001508:	b087      	sub	sp, #28
 800150a:	0007      	movs	r7, r0
 800150c:	4692      	mov	sl, r2
 800150e:	469b      	mov	fp, r3
 8001510:	0d76      	lsrs	r6, r6, #21
 8001512:	0fcd      	lsrs	r5, r1, #31
 8001514:	2e00      	cmp	r6, #0
 8001516:	d06b      	beq.n	80015f0 <__aeabi_dmul+0xfc>
 8001518:	4b6d      	ldr	r3, [pc, #436]	; (80016d0 <__aeabi_dmul+0x1dc>)
 800151a:	429e      	cmp	r6, r3
 800151c:	d035      	beq.n	800158a <__aeabi_dmul+0x96>
 800151e:	2480      	movs	r4, #128	; 0x80
 8001520:	465b      	mov	r3, fp
 8001522:	0f42      	lsrs	r2, r0, #29
 8001524:	0424      	lsls	r4, r4, #16
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	4314      	orrs	r4, r2
 800152a:	431c      	orrs	r4, r3
 800152c:	00c3      	lsls	r3, r0, #3
 800152e:	4699      	mov	r9, r3
 8001530:	4b68      	ldr	r3, [pc, #416]	; (80016d4 <__aeabi_dmul+0x1e0>)
 8001532:	46a3      	mov	fp, r4
 8001534:	469c      	mov	ip, r3
 8001536:	2300      	movs	r3, #0
 8001538:	2700      	movs	r7, #0
 800153a:	4466      	add	r6, ip
 800153c:	9302      	str	r3, [sp, #8]
 800153e:	4643      	mov	r3, r8
 8001540:	031c      	lsls	r4, r3, #12
 8001542:	005a      	lsls	r2, r3, #1
 8001544:	0fdb      	lsrs	r3, r3, #31
 8001546:	4650      	mov	r0, sl
 8001548:	0b24      	lsrs	r4, r4, #12
 800154a:	0d52      	lsrs	r2, r2, #21
 800154c:	4698      	mov	r8, r3
 800154e:	d100      	bne.n	8001552 <__aeabi_dmul+0x5e>
 8001550:	e076      	b.n	8001640 <__aeabi_dmul+0x14c>
 8001552:	4b5f      	ldr	r3, [pc, #380]	; (80016d0 <__aeabi_dmul+0x1dc>)
 8001554:	429a      	cmp	r2, r3
 8001556:	d06d      	beq.n	8001634 <__aeabi_dmul+0x140>
 8001558:	2380      	movs	r3, #128	; 0x80
 800155a:	0f41      	lsrs	r1, r0, #29
 800155c:	041b      	lsls	r3, r3, #16
 800155e:	430b      	orrs	r3, r1
 8001560:	495c      	ldr	r1, [pc, #368]	; (80016d4 <__aeabi_dmul+0x1e0>)
 8001562:	00e4      	lsls	r4, r4, #3
 8001564:	468c      	mov	ip, r1
 8001566:	431c      	orrs	r4, r3
 8001568:	00c3      	lsls	r3, r0, #3
 800156a:	2000      	movs	r0, #0
 800156c:	4462      	add	r2, ip
 800156e:	4641      	mov	r1, r8
 8001570:	18b6      	adds	r6, r6, r2
 8001572:	4069      	eors	r1, r5
 8001574:	1c72      	adds	r2, r6, #1
 8001576:	9101      	str	r1, [sp, #4]
 8001578:	4694      	mov	ip, r2
 800157a:	4307      	orrs	r7, r0
 800157c:	2f0f      	cmp	r7, #15
 800157e:	d900      	bls.n	8001582 <__aeabi_dmul+0x8e>
 8001580:	e0b0      	b.n	80016e4 <__aeabi_dmul+0x1f0>
 8001582:	4a55      	ldr	r2, [pc, #340]	; (80016d8 <__aeabi_dmul+0x1e4>)
 8001584:	00bf      	lsls	r7, r7, #2
 8001586:	59d2      	ldr	r2, [r2, r7]
 8001588:	4697      	mov	pc, r2
 800158a:	465b      	mov	r3, fp
 800158c:	4303      	orrs	r3, r0
 800158e:	4699      	mov	r9, r3
 8001590:	d000      	beq.n	8001594 <__aeabi_dmul+0xa0>
 8001592:	e087      	b.n	80016a4 <__aeabi_dmul+0x1b0>
 8001594:	2300      	movs	r3, #0
 8001596:	469b      	mov	fp, r3
 8001598:	3302      	adds	r3, #2
 800159a:	2708      	movs	r7, #8
 800159c:	9302      	str	r3, [sp, #8]
 800159e:	e7ce      	b.n	800153e <__aeabi_dmul+0x4a>
 80015a0:	4642      	mov	r2, r8
 80015a2:	9201      	str	r2, [sp, #4]
 80015a4:	2802      	cmp	r0, #2
 80015a6:	d067      	beq.n	8001678 <__aeabi_dmul+0x184>
 80015a8:	2803      	cmp	r0, #3
 80015aa:	d100      	bne.n	80015ae <__aeabi_dmul+0xba>
 80015ac:	e20e      	b.n	80019cc <__aeabi_dmul+0x4d8>
 80015ae:	2801      	cmp	r0, #1
 80015b0:	d000      	beq.n	80015b4 <__aeabi_dmul+0xc0>
 80015b2:	e162      	b.n	800187a <__aeabi_dmul+0x386>
 80015b4:	2300      	movs	r3, #0
 80015b6:	2400      	movs	r4, #0
 80015b8:	2200      	movs	r2, #0
 80015ba:	4699      	mov	r9, r3
 80015bc:	9901      	ldr	r1, [sp, #4]
 80015be:	4001      	ands	r1, r0
 80015c0:	b2cd      	uxtb	r5, r1
 80015c2:	2100      	movs	r1, #0
 80015c4:	0312      	lsls	r2, r2, #12
 80015c6:	0d0b      	lsrs	r3, r1, #20
 80015c8:	0b12      	lsrs	r2, r2, #12
 80015ca:	051b      	lsls	r3, r3, #20
 80015cc:	4313      	orrs	r3, r2
 80015ce:	4a43      	ldr	r2, [pc, #268]	; (80016dc <__aeabi_dmul+0x1e8>)
 80015d0:	0524      	lsls	r4, r4, #20
 80015d2:	4013      	ands	r3, r2
 80015d4:	431c      	orrs	r4, r3
 80015d6:	0064      	lsls	r4, r4, #1
 80015d8:	07ed      	lsls	r5, r5, #31
 80015da:	0864      	lsrs	r4, r4, #1
 80015dc:	432c      	orrs	r4, r5
 80015de:	4648      	mov	r0, r9
 80015e0:	0021      	movs	r1, r4
 80015e2:	b007      	add	sp, #28
 80015e4:	bc3c      	pop	{r2, r3, r4, r5}
 80015e6:	4690      	mov	r8, r2
 80015e8:	4699      	mov	r9, r3
 80015ea:	46a2      	mov	sl, r4
 80015ec:	46ab      	mov	fp, r5
 80015ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015f0:	4303      	orrs	r3, r0
 80015f2:	4699      	mov	r9, r3
 80015f4:	d04f      	beq.n	8001696 <__aeabi_dmul+0x1a2>
 80015f6:	465b      	mov	r3, fp
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d100      	bne.n	80015fe <__aeabi_dmul+0x10a>
 80015fc:	e189      	b.n	8001912 <__aeabi_dmul+0x41e>
 80015fe:	4658      	mov	r0, fp
 8001600:	f000 fdbc 	bl	800217c <__clzsi2>
 8001604:	0003      	movs	r3, r0
 8001606:	3b0b      	subs	r3, #11
 8001608:	2b1c      	cmp	r3, #28
 800160a:	dd00      	ble.n	800160e <__aeabi_dmul+0x11a>
 800160c:	e17a      	b.n	8001904 <__aeabi_dmul+0x410>
 800160e:	221d      	movs	r2, #29
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	003a      	movs	r2, r7
 8001614:	0001      	movs	r1, r0
 8001616:	465c      	mov	r4, fp
 8001618:	40da      	lsrs	r2, r3
 800161a:	3908      	subs	r1, #8
 800161c:	408c      	lsls	r4, r1
 800161e:	0013      	movs	r3, r2
 8001620:	408f      	lsls	r7, r1
 8001622:	4323      	orrs	r3, r4
 8001624:	469b      	mov	fp, r3
 8001626:	46b9      	mov	r9, r7
 8001628:	2300      	movs	r3, #0
 800162a:	4e2d      	ldr	r6, [pc, #180]	; (80016e0 <__aeabi_dmul+0x1ec>)
 800162c:	2700      	movs	r7, #0
 800162e:	1a36      	subs	r6, r6, r0
 8001630:	9302      	str	r3, [sp, #8]
 8001632:	e784      	b.n	800153e <__aeabi_dmul+0x4a>
 8001634:	4653      	mov	r3, sl
 8001636:	4323      	orrs	r3, r4
 8001638:	d12a      	bne.n	8001690 <__aeabi_dmul+0x19c>
 800163a:	2400      	movs	r4, #0
 800163c:	2002      	movs	r0, #2
 800163e:	e796      	b.n	800156e <__aeabi_dmul+0x7a>
 8001640:	4653      	mov	r3, sl
 8001642:	4323      	orrs	r3, r4
 8001644:	d020      	beq.n	8001688 <__aeabi_dmul+0x194>
 8001646:	2c00      	cmp	r4, #0
 8001648:	d100      	bne.n	800164c <__aeabi_dmul+0x158>
 800164a:	e157      	b.n	80018fc <__aeabi_dmul+0x408>
 800164c:	0020      	movs	r0, r4
 800164e:	f000 fd95 	bl	800217c <__clzsi2>
 8001652:	0003      	movs	r3, r0
 8001654:	3b0b      	subs	r3, #11
 8001656:	2b1c      	cmp	r3, #28
 8001658:	dd00      	ble.n	800165c <__aeabi_dmul+0x168>
 800165a:	e149      	b.n	80018f0 <__aeabi_dmul+0x3fc>
 800165c:	211d      	movs	r1, #29
 800165e:	1acb      	subs	r3, r1, r3
 8001660:	4651      	mov	r1, sl
 8001662:	0002      	movs	r2, r0
 8001664:	40d9      	lsrs	r1, r3
 8001666:	4653      	mov	r3, sl
 8001668:	3a08      	subs	r2, #8
 800166a:	4094      	lsls	r4, r2
 800166c:	4093      	lsls	r3, r2
 800166e:	430c      	orrs	r4, r1
 8001670:	4a1b      	ldr	r2, [pc, #108]	; (80016e0 <__aeabi_dmul+0x1ec>)
 8001672:	1a12      	subs	r2, r2, r0
 8001674:	2000      	movs	r0, #0
 8001676:	e77a      	b.n	800156e <__aeabi_dmul+0x7a>
 8001678:	2501      	movs	r5, #1
 800167a:	9b01      	ldr	r3, [sp, #4]
 800167c:	4c14      	ldr	r4, [pc, #80]	; (80016d0 <__aeabi_dmul+0x1dc>)
 800167e:	401d      	ands	r5, r3
 8001680:	2300      	movs	r3, #0
 8001682:	2200      	movs	r2, #0
 8001684:	4699      	mov	r9, r3
 8001686:	e79c      	b.n	80015c2 <__aeabi_dmul+0xce>
 8001688:	2400      	movs	r4, #0
 800168a:	2200      	movs	r2, #0
 800168c:	2001      	movs	r0, #1
 800168e:	e76e      	b.n	800156e <__aeabi_dmul+0x7a>
 8001690:	4653      	mov	r3, sl
 8001692:	2003      	movs	r0, #3
 8001694:	e76b      	b.n	800156e <__aeabi_dmul+0x7a>
 8001696:	2300      	movs	r3, #0
 8001698:	469b      	mov	fp, r3
 800169a:	3301      	adds	r3, #1
 800169c:	2704      	movs	r7, #4
 800169e:	2600      	movs	r6, #0
 80016a0:	9302      	str	r3, [sp, #8]
 80016a2:	e74c      	b.n	800153e <__aeabi_dmul+0x4a>
 80016a4:	2303      	movs	r3, #3
 80016a6:	4681      	mov	r9, r0
 80016a8:	270c      	movs	r7, #12
 80016aa:	9302      	str	r3, [sp, #8]
 80016ac:	e747      	b.n	800153e <__aeabi_dmul+0x4a>
 80016ae:	2280      	movs	r2, #128	; 0x80
 80016b0:	2300      	movs	r3, #0
 80016b2:	2500      	movs	r5, #0
 80016b4:	0312      	lsls	r2, r2, #12
 80016b6:	4699      	mov	r9, r3
 80016b8:	4c05      	ldr	r4, [pc, #20]	; (80016d0 <__aeabi_dmul+0x1dc>)
 80016ba:	e782      	b.n	80015c2 <__aeabi_dmul+0xce>
 80016bc:	465c      	mov	r4, fp
 80016be:	464b      	mov	r3, r9
 80016c0:	9802      	ldr	r0, [sp, #8]
 80016c2:	e76f      	b.n	80015a4 <__aeabi_dmul+0xb0>
 80016c4:	465c      	mov	r4, fp
 80016c6:	464b      	mov	r3, r9
 80016c8:	9501      	str	r5, [sp, #4]
 80016ca:	9802      	ldr	r0, [sp, #8]
 80016cc:	e76a      	b.n	80015a4 <__aeabi_dmul+0xb0>
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	000007ff 	.word	0x000007ff
 80016d4:	fffffc01 	.word	0xfffffc01
 80016d8:	0800ad68 	.word	0x0800ad68
 80016dc:	800fffff 	.word	0x800fffff
 80016e0:	fffffc0d 	.word	0xfffffc0d
 80016e4:	464a      	mov	r2, r9
 80016e6:	4649      	mov	r1, r9
 80016e8:	0c17      	lsrs	r7, r2, #16
 80016ea:	0c1a      	lsrs	r2, r3, #16
 80016ec:	041b      	lsls	r3, r3, #16
 80016ee:	0c1b      	lsrs	r3, r3, #16
 80016f0:	0408      	lsls	r0, r1, #16
 80016f2:	0019      	movs	r1, r3
 80016f4:	0c00      	lsrs	r0, r0, #16
 80016f6:	4341      	muls	r1, r0
 80016f8:	0015      	movs	r5, r2
 80016fa:	4688      	mov	r8, r1
 80016fc:	0019      	movs	r1, r3
 80016fe:	437d      	muls	r5, r7
 8001700:	4379      	muls	r1, r7
 8001702:	9503      	str	r5, [sp, #12]
 8001704:	4689      	mov	r9, r1
 8001706:	0029      	movs	r1, r5
 8001708:	0015      	movs	r5, r2
 800170a:	4345      	muls	r5, r0
 800170c:	444d      	add	r5, r9
 800170e:	9502      	str	r5, [sp, #8]
 8001710:	4645      	mov	r5, r8
 8001712:	0c2d      	lsrs	r5, r5, #16
 8001714:	46aa      	mov	sl, r5
 8001716:	9d02      	ldr	r5, [sp, #8]
 8001718:	4455      	add	r5, sl
 800171a:	45a9      	cmp	r9, r5
 800171c:	d906      	bls.n	800172c <__aeabi_dmul+0x238>
 800171e:	468a      	mov	sl, r1
 8001720:	2180      	movs	r1, #128	; 0x80
 8001722:	0249      	lsls	r1, r1, #9
 8001724:	4689      	mov	r9, r1
 8001726:	44ca      	add	sl, r9
 8001728:	4651      	mov	r1, sl
 800172a:	9103      	str	r1, [sp, #12]
 800172c:	0c29      	lsrs	r1, r5, #16
 800172e:	9104      	str	r1, [sp, #16]
 8001730:	4641      	mov	r1, r8
 8001732:	0409      	lsls	r1, r1, #16
 8001734:	042d      	lsls	r5, r5, #16
 8001736:	0c09      	lsrs	r1, r1, #16
 8001738:	4688      	mov	r8, r1
 800173a:	0029      	movs	r1, r5
 800173c:	0c25      	lsrs	r5, r4, #16
 800173e:	0424      	lsls	r4, r4, #16
 8001740:	4441      	add	r1, r8
 8001742:	0c24      	lsrs	r4, r4, #16
 8001744:	9105      	str	r1, [sp, #20]
 8001746:	0021      	movs	r1, r4
 8001748:	4341      	muls	r1, r0
 800174a:	4688      	mov	r8, r1
 800174c:	0021      	movs	r1, r4
 800174e:	4379      	muls	r1, r7
 8001750:	468a      	mov	sl, r1
 8001752:	4368      	muls	r0, r5
 8001754:	4641      	mov	r1, r8
 8001756:	4450      	add	r0, sl
 8001758:	4681      	mov	r9, r0
 800175a:	0c08      	lsrs	r0, r1, #16
 800175c:	4448      	add	r0, r9
 800175e:	436f      	muls	r7, r5
 8001760:	4582      	cmp	sl, r0
 8001762:	d903      	bls.n	800176c <__aeabi_dmul+0x278>
 8001764:	2180      	movs	r1, #128	; 0x80
 8001766:	0249      	lsls	r1, r1, #9
 8001768:	4689      	mov	r9, r1
 800176a:	444f      	add	r7, r9
 800176c:	0c01      	lsrs	r1, r0, #16
 800176e:	4689      	mov	r9, r1
 8001770:	0039      	movs	r1, r7
 8001772:	4449      	add	r1, r9
 8001774:	9102      	str	r1, [sp, #8]
 8001776:	4641      	mov	r1, r8
 8001778:	040f      	lsls	r7, r1, #16
 800177a:	9904      	ldr	r1, [sp, #16]
 800177c:	0c3f      	lsrs	r7, r7, #16
 800177e:	4688      	mov	r8, r1
 8001780:	0400      	lsls	r0, r0, #16
 8001782:	19c0      	adds	r0, r0, r7
 8001784:	4480      	add	r8, r0
 8001786:	4641      	mov	r1, r8
 8001788:	9104      	str	r1, [sp, #16]
 800178a:	4659      	mov	r1, fp
 800178c:	0c0f      	lsrs	r7, r1, #16
 800178e:	0409      	lsls	r1, r1, #16
 8001790:	0c09      	lsrs	r1, r1, #16
 8001792:	4688      	mov	r8, r1
 8001794:	4359      	muls	r1, r3
 8001796:	468a      	mov	sl, r1
 8001798:	0039      	movs	r1, r7
 800179a:	4351      	muls	r1, r2
 800179c:	4689      	mov	r9, r1
 800179e:	4641      	mov	r1, r8
 80017a0:	434a      	muls	r2, r1
 80017a2:	4651      	mov	r1, sl
 80017a4:	0c09      	lsrs	r1, r1, #16
 80017a6:	468b      	mov	fp, r1
 80017a8:	437b      	muls	r3, r7
 80017aa:	18d2      	adds	r2, r2, r3
 80017ac:	445a      	add	r2, fp
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d903      	bls.n	80017ba <__aeabi_dmul+0x2c6>
 80017b2:	2380      	movs	r3, #128	; 0x80
 80017b4:	025b      	lsls	r3, r3, #9
 80017b6:	469b      	mov	fp, r3
 80017b8:	44d9      	add	r9, fp
 80017ba:	4651      	mov	r1, sl
 80017bc:	0409      	lsls	r1, r1, #16
 80017be:	0c09      	lsrs	r1, r1, #16
 80017c0:	468a      	mov	sl, r1
 80017c2:	4641      	mov	r1, r8
 80017c4:	4361      	muls	r1, r4
 80017c6:	437c      	muls	r4, r7
 80017c8:	0c13      	lsrs	r3, r2, #16
 80017ca:	0412      	lsls	r2, r2, #16
 80017cc:	444b      	add	r3, r9
 80017ce:	4452      	add	r2, sl
 80017d0:	46a1      	mov	r9, r4
 80017d2:	468a      	mov	sl, r1
 80017d4:	003c      	movs	r4, r7
 80017d6:	4641      	mov	r1, r8
 80017d8:	436c      	muls	r4, r5
 80017da:	434d      	muls	r5, r1
 80017dc:	4651      	mov	r1, sl
 80017de:	444d      	add	r5, r9
 80017e0:	0c0f      	lsrs	r7, r1, #16
 80017e2:	197d      	adds	r5, r7, r5
 80017e4:	45a9      	cmp	r9, r5
 80017e6:	d903      	bls.n	80017f0 <__aeabi_dmul+0x2fc>
 80017e8:	2180      	movs	r1, #128	; 0x80
 80017ea:	0249      	lsls	r1, r1, #9
 80017ec:	4688      	mov	r8, r1
 80017ee:	4444      	add	r4, r8
 80017f0:	9f04      	ldr	r7, [sp, #16]
 80017f2:	9903      	ldr	r1, [sp, #12]
 80017f4:	46b8      	mov	r8, r7
 80017f6:	4441      	add	r1, r8
 80017f8:	468b      	mov	fp, r1
 80017fa:	4583      	cmp	fp, r0
 80017fc:	4180      	sbcs	r0, r0
 80017fe:	4241      	negs	r1, r0
 8001800:	4688      	mov	r8, r1
 8001802:	4651      	mov	r1, sl
 8001804:	0408      	lsls	r0, r1, #16
 8001806:	042f      	lsls	r7, r5, #16
 8001808:	0c00      	lsrs	r0, r0, #16
 800180a:	183f      	adds	r7, r7, r0
 800180c:	4658      	mov	r0, fp
 800180e:	9902      	ldr	r1, [sp, #8]
 8001810:	1810      	adds	r0, r2, r0
 8001812:	4689      	mov	r9, r1
 8001814:	4290      	cmp	r0, r2
 8001816:	4192      	sbcs	r2, r2
 8001818:	444f      	add	r7, r9
 800181a:	46ba      	mov	sl, r7
 800181c:	4252      	negs	r2, r2
 800181e:	4699      	mov	r9, r3
 8001820:	4693      	mov	fp, r2
 8001822:	44c2      	add	sl, r8
 8001824:	44d1      	add	r9, sl
 8001826:	44cb      	add	fp, r9
 8001828:	428f      	cmp	r7, r1
 800182a:	41bf      	sbcs	r7, r7
 800182c:	45c2      	cmp	sl, r8
 800182e:	4189      	sbcs	r1, r1
 8001830:	4599      	cmp	r9, r3
 8001832:	419b      	sbcs	r3, r3
 8001834:	4593      	cmp	fp, r2
 8001836:	4192      	sbcs	r2, r2
 8001838:	427f      	negs	r7, r7
 800183a:	4249      	negs	r1, r1
 800183c:	0c2d      	lsrs	r5, r5, #16
 800183e:	4252      	negs	r2, r2
 8001840:	430f      	orrs	r7, r1
 8001842:	425b      	negs	r3, r3
 8001844:	4313      	orrs	r3, r2
 8001846:	197f      	adds	r7, r7, r5
 8001848:	18ff      	adds	r7, r7, r3
 800184a:	465b      	mov	r3, fp
 800184c:	193c      	adds	r4, r7, r4
 800184e:	0ddb      	lsrs	r3, r3, #23
 8001850:	9a05      	ldr	r2, [sp, #20]
 8001852:	0264      	lsls	r4, r4, #9
 8001854:	431c      	orrs	r4, r3
 8001856:	0243      	lsls	r3, r0, #9
 8001858:	4313      	orrs	r3, r2
 800185a:	1e5d      	subs	r5, r3, #1
 800185c:	41ab      	sbcs	r3, r5
 800185e:	465a      	mov	r2, fp
 8001860:	0dc0      	lsrs	r0, r0, #23
 8001862:	4303      	orrs	r3, r0
 8001864:	0252      	lsls	r2, r2, #9
 8001866:	4313      	orrs	r3, r2
 8001868:	01e2      	lsls	r2, r4, #7
 800186a:	d556      	bpl.n	800191a <__aeabi_dmul+0x426>
 800186c:	2001      	movs	r0, #1
 800186e:	085a      	lsrs	r2, r3, #1
 8001870:	4003      	ands	r3, r0
 8001872:	4313      	orrs	r3, r2
 8001874:	07e2      	lsls	r2, r4, #31
 8001876:	4313      	orrs	r3, r2
 8001878:	0864      	lsrs	r4, r4, #1
 800187a:	485a      	ldr	r0, [pc, #360]	; (80019e4 <__aeabi_dmul+0x4f0>)
 800187c:	4460      	add	r0, ip
 800187e:	2800      	cmp	r0, #0
 8001880:	dd4d      	ble.n	800191e <__aeabi_dmul+0x42a>
 8001882:	075a      	lsls	r2, r3, #29
 8001884:	d009      	beq.n	800189a <__aeabi_dmul+0x3a6>
 8001886:	220f      	movs	r2, #15
 8001888:	401a      	ands	r2, r3
 800188a:	2a04      	cmp	r2, #4
 800188c:	d005      	beq.n	800189a <__aeabi_dmul+0x3a6>
 800188e:	1d1a      	adds	r2, r3, #4
 8001890:	429a      	cmp	r2, r3
 8001892:	419b      	sbcs	r3, r3
 8001894:	425b      	negs	r3, r3
 8001896:	18e4      	adds	r4, r4, r3
 8001898:	0013      	movs	r3, r2
 800189a:	01e2      	lsls	r2, r4, #7
 800189c:	d504      	bpl.n	80018a8 <__aeabi_dmul+0x3b4>
 800189e:	2080      	movs	r0, #128	; 0x80
 80018a0:	4a51      	ldr	r2, [pc, #324]	; (80019e8 <__aeabi_dmul+0x4f4>)
 80018a2:	00c0      	lsls	r0, r0, #3
 80018a4:	4014      	ands	r4, r2
 80018a6:	4460      	add	r0, ip
 80018a8:	4a50      	ldr	r2, [pc, #320]	; (80019ec <__aeabi_dmul+0x4f8>)
 80018aa:	4290      	cmp	r0, r2
 80018ac:	dd00      	ble.n	80018b0 <__aeabi_dmul+0x3bc>
 80018ae:	e6e3      	b.n	8001678 <__aeabi_dmul+0x184>
 80018b0:	2501      	movs	r5, #1
 80018b2:	08db      	lsrs	r3, r3, #3
 80018b4:	0762      	lsls	r2, r4, #29
 80018b6:	431a      	orrs	r2, r3
 80018b8:	0264      	lsls	r4, r4, #9
 80018ba:	9b01      	ldr	r3, [sp, #4]
 80018bc:	4691      	mov	r9, r2
 80018be:	0b22      	lsrs	r2, r4, #12
 80018c0:	0544      	lsls	r4, r0, #21
 80018c2:	0d64      	lsrs	r4, r4, #21
 80018c4:	401d      	ands	r5, r3
 80018c6:	e67c      	b.n	80015c2 <__aeabi_dmul+0xce>
 80018c8:	2280      	movs	r2, #128	; 0x80
 80018ca:	4659      	mov	r1, fp
 80018cc:	0312      	lsls	r2, r2, #12
 80018ce:	4211      	tst	r1, r2
 80018d0:	d008      	beq.n	80018e4 <__aeabi_dmul+0x3f0>
 80018d2:	4214      	tst	r4, r2
 80018d4:	d106      	bne.n	80018e4 <__aeabi_dmul+0x3f0>
 80018d6:	4322      	orrs	r2, r4
 80018d8:	0312      	lsls	r2, r2, #12
 80018da:	0b12      	lsrs	r2, r2, #12
 80018dc:	4645      	mov	r5, r8
 80018de:	4699      	mov	r9, r3
 80018e0:	4c43      	ldr	r4, [pc, #268]	; (80019f0 <__aeabi_dmul+0x4fc>)
 80018e2:	e66e      	b.n	80015c2 <__aeabi_dmul+0xce>
 80018e4:	465b      	mov	r3, fp
 80018e6:	431a      	orrs	r2, r3
 80018e8:	0312      	lsls	r2, r2, #12
 80018ea:	0b12      	lsrs	r2, r2, #12
 80018ec:	4c40      	ldr	r4, [pc, #256]	; (80019f0 <__aeabi_dmul+0x4fc>)
 80018ee:	e668      	b.n	80015c2 <__aeabi_dmul+0xce>
 80018f0:	0003      	movs	r3, r0
 80018f2:	4654      	mov	r4, sl
 80018f4:	3b28      	subs	r3, #40	; 0x28
 80018f6:	409c      	lsls	r4, r3
 80018f8:	2300      	movs	r3, #0
 80018fa:	e6b9      	b.n	8001670 <__aeabi_dmul+0x17c>
 80018fc:	f000 fc3e 	bl	800217c <__clzsi2>
 8001900:	3020      	adds	r0, #32
 8001902:	e6a6      	b.n	8001652 <__aeabi_dmul+0x15e>
 8001904:	0003      	movs	r3, r0
 8001906:	3b28      	subs	r3, #40	; 0x28
 8001908:	409f      	lsls	r7, r3
 800190a:	2300      	movs	r3, #0
 800190c:	46bb      	mov	fp, r7
 800190e:	4699      	mov	r9, r3
 8001910:	e68a      	b.n	8001628 <__aeabi_dmul+0x134>
 8001912:	f000 fc33 	bl	800217c <__clzsi2>
 8001916:	3020      	adds	r0, #32
 8001918:	e674      	b.n	8001604 <__aeabi_dmul+0x110>
 800191a:	46b4      	mov	ip, r6
 800191c:	e7ad      	b.n	800187a <__aeabi_dmul+0x386>
 800191e:	2501      	movs	r5, #1
 8001920:	1a2a      	subs	r2, r5, r0
 8001922:	2a38      	cmp	r2, #56	; 0x38
 8001924:	dd06      	ble.n	8001934 <__aeabi_dmul+0x440>
 8001926:	9b01      	ldr	r3, [sp, #4]
 8001928:	2400      	movs	r4, #0
 800192a:	401d      	ands	r5, r3
 800192c:	2300      	movs	r3, #0
 800192e:	2200      	movs	r2, #0
 8001930:	4699      	mov	r9, r3
 8001932:	e646      	b.n	80015c2 <__aeabi_dmul+0xce>
 8001934:	2a1f      	cmp	r2, #31
 8001936:	dc21      	bgt.n	800197c <__aeabi_dmul+0x488>
 8001938:	2520      	movs	r5, #32
 800193a:	0020      	movs	r0, r4
 800193c:	1aad      	subs	r5, r5, r2
 800193e:	001e      	movs	r6, r3
 8001940:	40ab      	lsls	r3, r5
 8001942:	40a8      	lsls	r0, r5
 8001944:	40d6      	lsrs	r6, r2
 8001946:	1e5d      	subs	r5, r3, #1
 8001948:	41ab      	sbcs	r3, r5
 800194a:	4330      	orrs	r0, r6
 800194c:	4318      	orrs	r0, r3
 800194e:	40d4      	lsrs	r4, r2
 8001950:	0743      	lsls	r3, r0, #29
 8001952:	d009      	beq.n	8001968 <__aeabi_dmul+0x474>
 8001954:	230f      	movs	r3, #15
 8001956:	4003      	ands	r3, r0
 8001958:	2b04      	cmp	r3, #4
 800195a:	d005      	beq.n	8001968 <__aeabi_dmul+0x474>
 800195c:	0003      	movs	r3, r0
 800195e:	1d18      	adds	r0, r3, #4
 8001960:	4298      	cmp	r0, r3
 8001962:	419b      	sbcs	r3, r3
 8001964:	425b      	negs	r3, r3
 8001966:	18e4      	adds	r4, r4, r3
 8001968:	0223      	lsls	r3, r4, #8
 800196a:	d521      	bpl.n	80019b0 <__aeabi_dmul+0x4bc>
 800196c:	2501      	movs	r5, #1
 800196e:	9b01      	ldr	r3, [sp, #4]
 8001970:	2401      	movs	r4, #1
 8001972:	401d      	ands	r5, r3
 8001974:	2300      	movs	r3, #0
 8001976:	2200      	movs	r2, #0
 8001978:	4699      	mov	r9, r3
 800197a:	e622      	b.n	80015c2 <__aeabi_dmul+0xce>
 800197c:	251f      	movs	r5, #31
 800197e:	0021      	movs	r1, r4
 8001980:	426d      	negs	r5, r5
 8001982:	1a28      	subs	r0, r5, r0
 8001984:	40c1      	lsrs	r1, r0
 8001986:	0008      	movs	r0, r1
 8001988:	2a20      	cmp	r2, #32
 800198a:	d01d      	beq.n	80019c8 <__aeabi_dmul+0x4d4>
 800198c:	355f      	adds	r5, #95	; 0x5f
 800198e:	1aaa      	subs	r2, r5, r2
 8001990:	4094      	lsls	r4, r2
 8001992:	4323      	orrs	r3, r4
 8001994:	1e5c      	subs	r4, r3, #1
 8001996:	41a3      	sbcs	r3, r4
 8001998:	2507      	movs	r5, #7
 800199a:	4303      	orrs	r3, r0
 800199c:	401d      	ands	r5, r3
 800199e:	2200      	movs	r2, #0
 80019a0:	2d00      	cmp	r5, #0
 80019a2:	d009      	beq.n	80019b8 <__aeabi_dmul+0x4c4>
 80019a4:	220f      	movs	r2, #15
 80019a6:	2400      	movs	r4, #0
 80019a8:	401a      	ands	r2, r3
 80019aa:	0018      	movs	r0, r3
 80019ac:	2a04      	cmp	r2, #4
 80019ae:	d1d6      	bne.n	800195e <__aeabi_dmul+0x46a>
 80019b0:	0003      	movs	r3, r0
 80019b2:	0765      	lsls	r5, r4, #29
 80019b4:	0264      	lsls	r4, r4, #9
 80019b6:	0b22      	lsrs	r2, r4, #12
 80019b8:	08db      	lsrs	r3, r3, #3
 80019ba:	432b      	orrs	r3, r5
 80019bc:	2501      	movs	r5, #1
 80019be:	4699      	mov	r9, r3
 80019c0:	9b01      	ldr	r3, [sp, #4]
 80019c2:	2400      	movs	r4, #0
 80019c4:	401d      	ands	r5, r3
 80019c6:	e5fc      	b.n	80015c2 <__aeabi_dmul+0xce>
 80019c8:	2400      	movs	r4, #0
 80019ca:	e7e2      	b.n	8001992 <__aeabi_dmul+0x49e>
 80019cc:	2280      	movs	r2, #128	; 0x80
 80019ce:	2501      	movs	r5, #1
 80019d0:	0312      	lsls	r2, r2, #12
 80019d2:	4322      	orrs	r2, r4
 80019d4:	9901      	ldr	r1, [sp, #4]
 80019d6:	0312      	lsls	r2, r2, #12
 80019d8:	0b12      	lsrs	r2, r2, #12
 80019da:	400d      	ands	r5, r1
 80019dc:	4699      	mov	r9, r3
 80019de:	4c04      	ldr	r4, [pc, #16]	; (80019f0 <__aeabi_dmul+0x4fc>)
 80019e0:	e5ef      	b.n	80015c2 <__aeabi_dmul+0xce>
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	000003ff 	.word	0x000003ff
 80019e8:	feffffff 	.word	0xfeffffff
 80019ec:	000007fe 	.word	0x000007fe
 80019f0:	000007ff 	.word	0x000007ff

080019f4 <__aeabi_dsub>:
 80019f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019f6:	4646      	mov	r6, r8
 80019f8:	46d6      	mov	lr, sl
 80019fa:	464f      	mov	r7, r9
 80019fc:	030c      	lsls	r4, r1, #12
 80019fe:	b5c0      	push	{r6, r7, lr}
 8001a00:	0fcd      	lsrs	r5, r1, #31
 8001a02:	004e      	lsls	r6, r1, #1
 8001a04:	0a61      	lsrs	r1, r4, #9
 8001a06:	0f44      	lsrs	r4, r0, #29
 8001a08:	430c      	orrs	r4, r1
 8001a0a:	00c1      	lsls	r1, r0, #3
 8001a0c:	0058      	lsls	r0, r3, #1
 8001a0e:	0d40      	lsrs	r0, r0, #21
 8001a10:	4684      	mov	ip, r0
 8001a12:	468a      	mov	sl, r1
 8001a14:	000f      	movs	r7, r1
 8001a16:	0319      	lsls	r1, r3, #12
 8001a18:	0f50      	lsrs	r0, r2, #29
 8001a1a:	0a49      	lsrs	r1, r1, #9
 8001a1c:	4301      	orrs	r1, r0
 8001a1e:	48c6      	ldr	r0, [pc, #792]	; (8001d38 <__aeabi_dsub+0x344>)
 8001a20:	0d76      	lsrs	r6, r6, #21
 8001a22:	46a8      	mov	r8, r5
 8001a24:	0fdb      	lsrs	r3, r3, #31
 8001a26:	00d2      	lsls	r2, r2, #3
 8001a28:	4584      	cmp	ip, r0
 8001a2a:	d100      	bne.n	8001a2e <__aeabi_dsub+0x3a>
 8001a2c:	e0d8      	b.n	8001be0 <__aeabi_dsub+0x1ec>
 8001a2e:	2001      	movs	r0, #1
 8001a30:	4043      	eors	r3, r0
 8001a32:	42ab      	cmp	r3, r5
 8001a34:	d100      	bne.n	8001a38 <__aeabi_dsub+0x44>
 8001a36:	e0a6      	b.n	8001b86 <__aeabi_dsub+0x192>
 8001a38:	4660      	mov	r0, ip
 8001a3a:	1a35      	subs	r5, r6, r0
 8001a3c:	2d00      	cmp	r5, #0
 8001a3e:	dc00      	bgt.n	8001a42 <__aeabi_dsub+0x4e>
 8001a40:	e105      	b.n	8001c4e <__aeabi_dsub+0x25a>
 8001a42:	2800      	cmp	r0, #0
 8001a44:	d110      	bne.n	8001a68 <__aeabi_dsub+0x74>
 8001a46:	000b      	movs	r3, r1
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dsub+0x5a>
 8001a4c:	e0d7      	b.n	8001bfe <__aeabi_dsub+0x20a>
 8001a4e:	1e6b      	subs	r3, r5, #1
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d000      	beq.n	8001a56 <__aeabi_dsub+0x62>
 8001a54:	e14b      	b.n	8001cee <__aeabi_dsub+0x2fa>
 8001a56:	4653      	mov	r3, sl
 8001a58:	1a9f      	subs	r7, r3, r2
 8001a5a:	45ba      	cmp	sl, r7
 8001a5c:	4180      	sbcs	r0, r0
 8001a5e:	1a64      	subs	r4, r4, r1
 8001a60:	4240      	negs	r0, r0
 8001a62:	1a24      	subs	r4, r4, r0
 8001a64:	2601      	movs	r6, #1
 8001a66:	e01e      	b.n	8001aa6 <__aeabi_dsub+0xb2>
 8001a68:	4bb3      	ldr	r3, [pc, #716]	; (8001d38 <__aeabi_dsub+0x344>)
 8001a6a:	429e      	cmp	r6, r3
 8001a6c:	d048      	beq.n	8001b00 <__aeabi_dsub+0x10c>
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	041b      	lsls	r3, r3, #16
 8001a72:	4319      	orrs	r1, r3
 8001a74:	2d38      	cmp	r5, #56	; 0x38
 8001a76:	dd00      	ble.n	8001a7a <__aeabi_dsub+0x86>
 8001a78:	e119      	b.n	8001cae <__aeabi_dsub+0x2ba>
 8001a7a:	2d1f      	cmp	r5, #31
 8001a7c:	dd00      	ble.n	8001a80 <__aeabi_dsub+0x8c>
 8001a7e:	e14c      	b.n	8001d1a <__aeabi_dsub+0x326>
 8001a80:	2320      	movs	r3, #32
 8001a82:	000f      	movs	r7, r1
 8001a84:	1b5b      	subs	r3, r3, r5
 8001a86:	0010      	movs	r0, r2
 8001a88:	409a      	lsls	r2, r3
 8001a8a:	409f      	lsls	r7, r3
 8001a8c:	40e8      	lsrs	r0, r5
 8001a8e:	1e53      	subs	r3, r2, #1
 8001a90:	419a      	sbcs	r2, r3
 8001a92:	40e9      	lsrs	r1, r5
 8001a94:	4307      	orrs	r7, r0
 8001a96:	4317      	orrs	r7, r2
 8001a98:	4653      	mov	r3, sl
 8001a9a:	1bdf      	subs	r7, r3, r7
 8001a9c:	1a61      	subs	r1, r4, r1
 8001a9e:	45ba      	cmp	sl, r7
 8001aa0:	41a4      	sbcs	r4, r4
 8001aa2:	4264      	negs	r4, r4
 8001aa4:	1b0c      	subs	r4, r1, r4
 8001aa6:	0223      	lsls	r3, r4, #8
 8001aa8:	d400      	bmi.n	8001aac <__aeabi_dsub+0xb8>
 8001aaa:	e0c5      	b.n	8001c38 <__aeabi_dsub+0x244>
 8001aac:	0264      	lsls	r4, r4, #9
 8001aae:	0a65      	lsrs	r5, r4, #9
 8001ab0:	2d00      	cmp	r5, #0
 8001ab2:	d100      	bne.n	8001ab6 <__aeabi_dsub+0xc2>
 8001ab4:	e0f6      	b.n	8001ca4 <__aeabi_dsub+0x2b0>
 8001ab6:	0028      	movs	r0, r5
 8001ab8:	f000 fb60 	bl	800217c <__clzsi2>
 8001abc:	0003      	movs	r3, r0
 8001abe:	3b08      	subs	r3, #8
 8001ac0:	2b1f      	cmp	r3, #31
 8001ac2:	dd00      	ble.n	8001ac6 <__aeabi_dsub+0xd2>
 8001ac4:	e0e9      	b.n	8001c9a <__aeabi_dsub+0x2a6>
 8001ac6:	2220      	movs	r2, #32
 8001ac8:	003c      	movs	r4, r7
 8001aca:	1ad2      	subs	r2, r2, r3
 8001acc:	409d      	lsls	r5, r3
 8001ace:	40d4      	lsrs	r4, r2
 8001ad0:	409f      	lsls	r7, r3
 8001ad2:	4325      	orrs	r5, r4
 8001ad4:	429e      	cmp	r6, r3
 8001ad6:	dd00      	ble.n	8001ada <__aeabi_dsub+0xe6>
 8001ad8:	e0db      	b.n	8001c92 <__aeabi_dsub+0x29e>
 8001ada:	1b9e      	subs	r6, r3, r6
 8001adc:	1c73      	adds	r3, r6, #1
 8001ade:	2b1f      	cmp	r3, #31
 8001ae0:	dd00      	ble.n	8001ae4 <__aeabi_dsub+0xf0>
 8001ae2:	e10a      	b.n	8001cfa <__aeabi_dsub+0x306>
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	0038      	movs	r0, r7
 8001ae8:	1ad2      	subs	r2, r2, r3
 8001aea:	0029      	movs	r1, r5
 8001aec:	4097      	lsls	r7, r2
 8001aee:	002c      	movs	r4, r5
 8001af0:	4091      	lsls	r1, r2
 8001af2:	40d8      	lsrs	r0, r3
 8001af4:	1e7a      	subs	r2, r7, #1
 8001af6:	4197      	sbcs	r7, r2
 8001af8:	40dc      	lsrs	r4, r3
 8001afa:	2600      	movs	r6, #0
 8001afc:	4301      	orrs	r1, r0
 8001afe:	430f      	orrs	r7, r1
 8001b00:	077b      	lsls	r3, r7, #29
 8001b02:	d009      	beq.n	8001b18 <__aeabi_dsub+0x124>
 8001b04:	230f      	movs	r3, #15
 8001b06:	403b      	ands	r3, r7
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d005      	beq.n	8001b18 <__aeabi_dsub+0x124>
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	42bb      	cmp	r3, r7
 8001b10:	41bf      	sbcs	r7, r7
 8001b12:	427f      	negs	r7, r7
 8001b14:	19e4      	adds	r4, r4, r7
 8001b16:	001f      	movs	r7, r3
 8001b18:	0223      	lsls	r3, r4, #8
 8001b1a:	d525      	bpl.n	8001b68 <__aeabi_dsub+0x174>
 8001b1c:	4b86      	ldr	r3, [pc, #536]	; (8001d38 <__aeabi_dsub+0x344>)
 8001b1e:	3601      	adds	r6, #1
 8001b20:	429e      	cmp	r6, r3
 8001b22:	d100      	bne.n	8001b26 <__aeabi_dsub+0x132>
 8001b24:	e0af      	b.n	8001c86 <__aeabi_dsub+0x292>
 8001b26:	4b85      	ldr	r3, [pc, #532]	; (8001d3c <__aeabi_dsub+0x348>)
 8001b28:	2501      	movs	r5, #1
 8001b2a:	401c      	ands	r4, r3
 8001b2c:	4643      	mov	r3, r8
 8001b2e:	0762      	lsls	r2, r4, #29
 8001b30:	08ff      	lsrs	r7, r7, #3
 8001b32:	0264      	lsls	r4, r4, #9
 8001b34:	0576      	lsls	r6, r6, #21
 8001b36:	4317      	orrs	r7, r2
 8001b38:	0b24      	lsrs	r4, r4, #12
 8001b3a:	0d76      	lsrs	r6, r6, #21
 8001b3c:	401d      	ands	r5, r3
 8001b3e:	2100      	movs	r1, #0
 8001b40:	0324      	lsls	r4, r4, #12
 8001b42:	0b23      	lsrs	r3, r4, #12
 8001b44:	0d0c      	lsrs	r4, r1, #20
 8001b46:	4a7e      	ldr	r2, [pc, #504]	; (8001d40 <__aeabi_dsub+0x34c>)
 8001b48:	0524      	lsls	r4, r4, #20
 8001b4a:	431c      	orrs	r4, r3
 8001b4c:	4014      	ands	r4, r2
 8001b4e:	0533      	lsls	r3, r6, #20
 8001b50:	4323      	orrs	r3, r4
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	07ed      	lsls	r5, r5, #31
 8001b56:	085b      	lsrs	r3, r3, #1
 8001b58:	432b      	orrs	r3, r5
 8001b5a:	0038      	movs	r0, r7
 8001b5c:	0019      	movs	r1, r3
 8001b5e:	bc1c      	pop	{r2, r3, r4}
 8001b60:	4690      	mov	r8, r2
 8001b62:	4699      	mov	r9, r3
 8001b64:	46a2      	mov	sl, r4
 8001b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b68:	2501      	movs	r5, #1
 8001b6a:	4643      	mov	r3, r8
 8001b6c:	0762      	lsls	r2, r4, #29
 8001b6e:	08ff      	lsrs	r7, r7, #3
 8001b70:	4317      	orrs	r7, r2
 8001b72:	08e4      	lsrs	r4, r4, #3
 8001b74:	401d      	ands	r5, r3
 8001b76:	4b70      	ldr	r3, [pc, #448]	; (8001d38 <__aeabi_dsub+0x344>)
 8001b78:	429e      	cmp	r6, r3
 8001b7a:	d036      	beq.n	8001bea <__aeabi_dsub+0x1f6>
 8001b7c:	0324      	lsls	r4, r4, #12
 8001b7e:	0576      	lsls	r6, r6, #21
 8001b80:	0b24      	lsrs	r4, r4, #12
 8001b82:	0d76      	lsrs	r6, r6, #21
 8001b84:	e7db      	b.n	8001b3e <__aeabi_dsub+0x14a>
 8001b86:	4663      	mov	r3, ip
 8001b88:	1af3      	subs	r3, r6, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	dc00      	bgt.n	8001b90 <__aeabi_dsub+0x19c>
 8001b8e:	e094      	b.n	8001cba <__aeabi_dsub+0x2c6>
 8001b90:	4660      	mov	r0, ip
 8001b92:	2800      	cmp	r0, #0
 8001b94:	d035      	beq.n	8001c02 <__aeabi_dsub+0x20e>
 8001b96:	4868      	ldr	r0, [pc, #416]	; (8001d38 <__aeabi_dsub+0x344>)
 8001b98:	4286      	cmp	r6, r0
 8001b9a:	d0b1      	beq.n	8001b00 <__aeabi_dsub+0x10c>
 8001b9c:	2780      	movs	r7, #128	; 0x80
 8001b9e:	043f      	lsls	r7, r7, #16
 8001ba0:	4339      	orrs	r1, r7
 8001ba2:	2b38      	cmp	r3, #56	; 0x38
 8001ba4:	dc00      	bgt.n	8001ba8 <__aeabi_dsub+0x1b4>
 8001ba6:	e0fd      	b.n	8001da4 <__aeabi_dsub+0x3b0>
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	0017      	movs	r7, r2
 8001bac:	2100      	movs	r1, #0
 8001bae:	1e7a      	subs	r2, r7, #1
 8001bb0:	4197      	sbcs	r7, r2
 8001bb2:	4457      	add	r7, sl
 8001bb4:	4557      	cmp	r7, sl
 8001bb6:	4180      	sbcs	r0, r0
 8001bb8:	1909      	adds	r1, r1, r4
 8001bba:	4244      	negs	r4, r0
 8001bbc:	190c      	adds	r4, r1, r4
 8001bbe:	0223      	lsls	r3, r4, #8
 8001bc0:	d53a      	bpl.n	8001c38 <__aeabi_dsub+0x244>
 8001bc2:	4b5d      	ldr	r3, [pc, #372]	; (8001d38 <__aeabi_dsub+0x344>)
 8001bc4:	3601      	adds	r6, #1
 8001bc6:	429e      	cmp	r6, r3
 8001bc8:	d100      	bne.n	8001bcc <__aeabi_dsub+0x1d8>
 8001bca:	e14b      	b.n	8001e64 <__aeabi_dsub+0x470>
 8001bcc:	2201      	movs	r2, #1
 8001bce:	4b5b      	ldr	r3, [pc, #364]	; (8001d3c <__aeabi_dsub+0x348>)
 8001bd0:	401c      	ands	r4, r3
 8001bd2:	087b      	lsrs	r3, r7, #1
 8001bd4:	4017      	ands	r7, r2
 8001bd6:	431f      	orrs	r7, r3
 8001bd8:	07e2      	lsls	r2, r4, #31
 8001bda:	4317      	orrs	r7, r2
 8001bdc:	0864      	lsrs	r4, r4, #1
 8001bde:	e78f      	b.n	8001b00 <__aeabi_dsub+0x10c>
 8001be0:	0008      	movs	r0, r1
 8001be2:	4310      	orrs	r0, r2
 8001be4:	d000      	beq.n	8001be8 <__aeabi_dsub+0x1f4>
 8001be6:	e724      	b.n	8001a32 <__aeabi_dsub+0x3e>
 8001be8:	e721      	b.n	8001a2e <__aeabi_dsub+0x3a>
 8001bea:	0023      	movs	r3, r4
 8001bec:	433b      	orrs	r3, r7
 8001bee:	d100      	bne.n	8001bf2 <__aeabi_dsub+0x1fe>
 8001bf0:	e1b9      	b.n	8001f66 <__aeabi_dsub+0x572>
 8001bf2:	2280      	movs	r2, #128	; 0x80
 8001bf4:	0312      	lsls	r2, r2, #12
 8001bf6:	4314      	orrs	r4, r2
 8001bf8:	0324      	lsls	r4, r4, #12
 8001bfa:	0b24      	lsrs	r4, r4, #12
 8001bfc:	e79f      	b.n	8001b3e <__aeabi_dsub+0x14a>
 8001bfe:	002e      	movs	r6, r5
 8001c00:	e77e      	b.n	8001b00 <__aeabi_dsub+0x10c>
 8001c02:	0008      	movs	r0, r1
 8001c04:	4310      	orrs	r0, r2
 8001c06:	d100      	bne.n	8001c0a <__aeabi_dsub+0x216>
 8001c08:	e0ca      	b.n	8001da0 <__aeabi_dsub+0x3ac>
 8001c0a:	1e58      	subs	r0, r3, #1
 8001c0c:	4684      	mov	ip, r0
 8001c0e:	2800      	cmp	r0, #0
 8001c10:	d000      	beq.n	8001c14 <__aeabi_dsub+0x220>
 8001c12:	e0e7      	b.n	8001de4 <__aeabi_dsub+0x3f0>
 8001c14:	4452      	add	r2, sl
 8001c16:	4552      	cmp	r2, sl
 8001c18:	4180      	sbcs	r0, r0
 8001c1a:	1864      	adds	r4, r4, r1
 8001c1c:	4240      	negs	r0, r0
 8001c1e:	1824      	adds	r4, r4, r0
 8001c20:	0017      	movs	r7, r2
 8001c22:	2601      	movs	r6, #1
 8001c24:	0223      	lsls	r3, r4, #8
 8001c26:	d507      	bpl.n	8001c38 <__aeabi_dsub+0x244>
 8001c28:	2602      	movs	r6, #2
 8001c2a:	e7cf      	b.n	8001bcc <__aeabi_dsub+0x1d8>
 8001c2c:	4664      	mov	r4, ip
 8001c2e:	432c      	orrs	r4, r5
 8001c30:	d100      	bne.n	8001c34 <__aeabi_dsub+0x240>
 8001c32:	e1b3      	b.n	8001f9c <__aeabi_dsub+0x5a8>
 8001c34:	002c      	movs	r4, r5
 8001c36:	4667      	mov	r7, ip
 8001c38:	077b      	lsls	r3, r7, #29
 8001c3a:	d000      	beq.n	8001c3e <__aeabi_dsub+0x24a>
 8001c3c:	e762      	b.n	8001b04 <__aeabi_dsub+0x110>
 8001c3e:	0763      	lsls	r3, r4, #29
 8001c40:	08ff      	lsrs	r7, r7, #3
 8001c42:	431f      	orrs	r7, r3
 8001c44:	2501      	movs	r5, #1
 8001c46:	4643      	mov	r3, r8
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	401d      	ands	r5, r3
 8001c4c:	e793      	b.n	8001b76 <__aeabi_dsub+0x182>
 8001c4e:	2d00      	cmp	r5, #0
 8001c50:	d178      	bne.n	8001d44 <__aeabi_dsub+0x350>
 8001c52:	1c75      	adds	r5, r6, #1
 8001c54:	056d      	lsls	r5, r5, #21
 8001c56:	0d6d      	lsrs	r5, r5, #21
 8001c58:	2d01      	cmp	r5, #1
 8001c5a:	dc00      	bgt.n	8001c5e <__aeabi_dsub+0x26a>
 8001c5c:	e0f2      	b.n	8001e44 <__aeabi_dsub+0x450>
 8001c5e:	4650      	mov	r0, sl
 8001c60:	1a80      	subs	r0, r0, r2
 8001c62:	4582      	cmp	sl, r0
 8001c64:	41bf      	sbcs	r7, r7
 8001c66:	1a65      	subs	r5, r4, r1
 8001c68:	427f      	negs	r7, r7
 8001c6a:	1bed      	subs	r5, r5, r7
 8001c6c:	4684      	mov	ip, r0
 8001c6e:	0228      	lsls	r0, r5, #8
 8001c70:	d400      	bmi.n	8001c74 <__aeabi_dsub+0x280>
 8001c72:	e08c      	b.n	8001d8e <__aeabi_dsub+0x39a>
 8001c74:	4650      	mov	r0, sl
 8001c76:	1a17      	subs	r7, r2, r0
 8001c78:	42ba      	cmp	r2, r7
 8001c7a:	4192      	sbcs	r2, r2
 8001c7c:	1b0c      	subs	r4, r1, r4
 8001c7e:	4255      	negs	r5, r2
 8001c80:	1b65      	subs	r5, r4, r5
 8001c82:	4698      	mov	r8, r3
 8001c84:	e714      	b.n	8001ab0 <__aeabi_dsub+0xbc>
 8001c86:	2501      	movs	r5, #1
 8001c88:	4643      	mov	r3, r8
 8001c8a:	2400      	movs	r4, #0
 8001c8c:	401d      	ands	r5, r3
 8001c8e:	2700      	movs	r7, #0
 8001c90:	e755      	b.n	8001b3e <__aeabi_dsub+0x14a>
 8001c92:	4c2a      	ldr	r4, [pc, #168]	; (8001d3c <__aeabi_dsub+0x348>)
 8001c94:	1af6      	subs	r6, r6, r3
 8001c96:	402c      	ands	r4, r5
 8001c98:	e732      	b.n	8001b00 <__aeabi_dsub+0x10c>
 8001c9a:	003d      	movs	r5, r7
 8001c9c:	3828      	subs	r0, #40	; 0x28
 8001c9e:	4085      	lsls	r5, r0
 8001ca0:	2700      	movs	r7, #0
 8001ca2:	e717      	b.n	8001ad4 <__aeabi_dsub+0xe0>
 8001ca4:	0038      	movs	r0, r7
 8001ca6:	f000 fa69 	bl	800217c <__clzsi2>
 8001caa:	3020      	adds	r0, #32
 8001cac:	e706      	b.n	8001abc <__aeabi_dsub+0xc8>
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	0017      	movs	r7, r2
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	1e7a      	subs	r2, r7, #1
 8001cb6:	4197      	sbcs	r7, r2
 8001cb8:	e6ee      	b.n	8001a98 <__aeabi_dsub+0xa4>
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d000      	beq.n	8001cc0 <__aeabi_dsub+0x2cc>
 8001cbe:	e0e5      	b.n	8001e8c <__aeabi_dsub+0x498>
 8001cc0:	1c73      	adds	r3, r6, #1
 8001cc2:	469c      	mov	ip, r3
 8001cc4:	055b      	lsls	r3, r3, #21
 8001cc6:	0d5b      	lsrs	r3, r3, #21
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	dc00      	bgt.n	8001cce <__aeabi_dsub+0x2da>
 8001ccc:	e09f      	b.n	8001e0e <__aeabi_dsub+0x41a>
 8001cce:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <__aeabi_dsub+0x344>)
 8001cd0:	459c      	cmp	ip, r3
 8001cd2:	d100      	bne.n	8001cd6 <__aeabi_dsub+0x2e2>
 8001cd4:	e0c5      	b.n	8001e62 <__aeabi_dsub+0x46e>
 8001cd6:	4452      	add	r2, sl
 8001cd8:	4552      	cmp	r2, sl
 8001cda:	4180      	sbcs	r0, r0
 8001cdc:	1864      	adds	r4, r4, r1
 8001cde:	4240      	negs	r0, r0
 8001ce0:	1824      	adds	r4, r4, r0
 8001ce2:	07e7      	lsls	r7, r4, #31
 8001ce4:	0852      	lsrs	r2, r2, #1
 8001ce6:	4317      	orrs	r7, r2
 8001ce8:	0864      	lsrs	r4, r4, #1
 8001cea:	4666      	mov	r6, ip
 8001cec:	e708      	b.n	8001b00 <__aeabi_dsub+0x10c>
 8001cee:	4812      	ldr	r0, [pc, #72]	; (8001d38 <__aeabi_dsub+0x344>)
 8001cf0:	4285      	cmp	r5, r0
 8001cf2:	d100      	bne.n	8001cf6 <__aeabi_dsub+0x302>
 8001cf4:	e085      	b.n	8001e02 <__aeabi_dsub+0x40e>
 8001cf6:	001d      	movs	r5, r3
 8001cf8:	e6bc      	b.n	8001a74 <__aeabi_dsub+0x80>
 8001cfa:	0029      	movs	r1, r5
 8001cfc:	3e1f      	subs	r6, #31
 8001cfe:	40f1      	lsrs	r1, r6
 8001d00:	2b20      	cmp	r3, #32
 8001d02:	d100      	bne.n	8001d06 <__aeabi_dsub+0x312>
 8001d04:	e07f      	b.n	8001e06 <__aeabi_dsub+0x412>
 8001d06:	2240      	movs	r2, #64	; 0x40
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	409d      	lsls	r5, r3
 8001d0c:	432f      	orrs	r7, r5
 8001d0e:	1e7d      	subs	r5, r7, #1
 8001d10:	41af      	sbcs	r7, r5
 8001d12:	2400      	movs	r4, #0
 8001d14:	430f      	orrs	r7, r1
 8001d16:	2600      	movs	r6, #0
 8001d18:	e78e      	b.n	8001c38 <__aeabi_dsub+0x244>
 8001d1a:	002b      	movs	r3, r5
 8001d1c:	000f      	movs	r7, r1
 8001d1e:	3b20      	subs	r3, #32
 8001d20:	40df      	lsrs	r7, r3
 8001d22:	2d20      	cmp	r5, #32
 8001d24:	d071      	beq.n	8001e0a <__aeabi_dsub+0x416>
 8001d26:	2340      	movs	r3, #64	; 0x40
 8001d28:	1b5d      	subs	r5, r3, r5
 8001d2a:	40a9      	lsls	r1, r5
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	1e51      	subs	r1, r2, #1
 8001d30:	418a      	sbcs	r2, r1
 8001d32:	2100      	movs	r1, #0
 8001d34:	4317      	orrs	r7, r2
 8001d36:	e6af      	b.n	8001a98 <__aeabi_dsub+0xa4>
 8001d38:	000007ff 	.word	0x000007ff
 8001d3c:	ff7fffff 	.word	0xff7fffff
 8001d40:	800fffff 	.word	0x800fffff
 8001d44:	2e00      	cmp	r6, #0
 8001d46:	d03e      	beq.n	8001dc6 <__aeabi_dsub+0x3d2>
 8001d48:	4eb3      	ldr	r6, [pc, #716]	; (8002018 <__aeabi_dsub+0x624>)
 8001d4a:	45b4      	cmp	ip, r6
 8001d4c:	d045      	beq.n	8001dda <__aeabi_dsub+0x3e6>
 8001d4e:	2680      	movs	r6, #128	; 0x80
 8001d50:	0436      	lsls	r6, r6, #16
 8001d52:	426d      	negs	r5, r5
 8001d54:	4334      	orrs	r4, r6
 8001d56:	2d38      	cmp	r5, #56	; 0x38
 8001d58:	dd00      	ble.n	8001d5c <__aeabi_dsub+0x368>
 8001d5a:	e0a8      	b.n	8001eae <__aeabi_dsub+0x4ba>
 8001d5c:	2d1f      	cmp	r5, #31
 8001d5e:	dd00      	ble.n	8001d62 <__aeabi_dsub+0x36e>
 8001d60:	e11f      	b.n	8001fa2 <__aeabi_dsub+0x5ae>
 8001d62:	2620      	movs	r6, #32
 8001d64:	0027      	movs	r7, r4
 8001d66:	4650      	mov	r0, sl
 8001d68:	1b76      	subs	r6, r6, r5
 8001d6a:	40b7      	lsls	r7, r6
 8001d6c:	40e8      	lsrs	r0, r5
 8001d6e:	4307      	orrs	r7, r0
 8001d70:	4650      	mov	r0, sl
 8001d72:	40b0      	lsls	r0, r6
 8001d74:	1e46      	subs	r6, r0, #1
 8001d76:	41b0      	sbcs	r0, r6
 8001d78:	40ec      	lsrs	r4, r5
 8001d7a:	4338      	orrs	r0, r7
 8001d7c:	1a17      	subs	r7, r2, r0
 8001d7e:	42ba      	cmp	r2, r7
 8001d80:	4192      	sbcs	r2, r2
 8001d82:	1b0c      	subs	r4, r1, r4
 8001d84:	4252      	negs	r2, r2
 8001d86:	1aa4      	subs	r4, r4, r2
 8001d88:	4666      	mov	r6, ip
 8001d8a:	4698      	mov	r8, r3
 8001d8c:	e68b      	b.n	8001aa6 <__aeabi_dsub+0xb2>
 8001d8e:	4664      	mov	r4, ip
 8001d90:	4667      	mov	r7, ip
 8001d92:	432c      	orrs	r4, r5
 8001d94:	d000      	beq.n	8001d98 <__aeabi_dsub+0x3a4>
 8001d96:	e68b      	b.n	8001ab0 <__aeabi_dsub+0xbc>
 8001d98:	2500      	movs	r5, #0
 8001d9a:	2600      	movs	r6, #0
 8001d9c:	2700      	movs	r7, #0
 8001d9e:	e6ea      	b.n	8001b76 <__aeabi_dsub+0x182>
 8001da0:	001e      	movs	r6, r3
 8001da2:	e6ad      	b.n	8001b00 <__aeabi_dsub+0x10c>
 8001da4:	2b1f      	cmp	r3, #31
 8001da6:	dc60      	bgt.n	8001e6a <__aeabi_dsub+0x476>
 8001da8:	2720      	movs	r7, #32
 8001daa:	1af8      	subs	r0, r7, r3
 8001dac:	000f      	movs	r7, r1
 8001dae:	4684      	mov	ip, r0
 8001db0:	4087      	lsls	r7, r0
 8001db2:	0010      	movs	r0, r2
 8001db4:	40d8      	lsrs	r0, r3
 8001db6:	4307      	orrs	r7, r0
 8001db8:	4660      	mov	r0, ip
 8001dba:	4082      	lsls	r2, r0
 8001dbc:	1e50      	subs	r0, r2, #1
 8001dbe:	4182      	sbcs	r2, r0
 8001dc0:	40d9      	lsrs	r1, r3
 8001dc2:	4317      	orrs	r7, r2
 8001dc4:	e6f5      	b.n	8001bb2 <__aeabi_dsub+0x1be>
 8001dc6:	0026      	movs	r6, r4
 8001dc8:	4650      	mov	r0, sl
 8001dca:	4306      	orrs	r6, r0
 8001dcc:	d005      	beq.n	8001dda <__aeabi_dsub+0x3e6>
 8001dce:	43ed      	mvns	r5, r5
 8001dd0:	2d00      	cmp	r5, #0
 8001dd2:	d0d3      	beq.n	8001d7c <__aeabi_dsub+0x388>
 8001dd4:	4e90      	ldr	r6, [pc, #576]	; (8002018 <__aeabi_dsub+0x624>)
 8001dd6:	45b4      	cmp	ip, r6
 8001dd8:	d1bd      	bne.n	8001d56 <__aeabi_dsub+0x362>
 8001dda:	000c      	movs	r4, r1
 8001ddc:	0017      	movs	r7, r2
 8001dde:	4666      	mov	r6, ip
 8001de0:	4698      	mov	r8, r3
 8001de2:	e68d      	b.n	8001b00 <__aeabi_dsub+0x10c>
 8001de4:	488c      	ldr	r0, [pc, #560]	; (8002018 <__aeabi_dsub+0x624>)
 8001de6:	4283      	cmp	r3, r0
 8001de8:	d00b      	beq.n	8001e02 <__aeabi_dsub+0x40e>
 8001dea:	4663      	mov	r3, ip
 8001dec:	e6d9      	b.n	8001ba2 <__aeabi_dsub+0x1ae>
 8001dee:	2d00      	cmp	r5, #0
 8001df0:	d000      	beq.n	8001df4 <__aeabi_dsub+0x400>
 8001df2:	e096      	b.n	8001f22 <__aeabi_dsub+0x52e>
 8001df4:	0008      	movs	r0, r1
 8001df6:	4310      	orrs	r0, r2
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x408>
 8001dfa:	e0e2      	b.n	8001fc2 <__aeabi_dsub+0x5ce>
 8001dfc:	000c      	movs	r4, r1
 8001dfe:	0017      	movs	r7, r2
 8001e00:	4698      	mov	r8, r3
 8001e02:	4e85      	ldr	r6, [pc, #532]	; (8002018 <__aeabi_dsub+0x624>)
 8001e04:	e67c      	b.n	8001b00 <__aeabi_dsub+0x10c>
 8001e06:	2500      	movs	r5, #0
 8001e08:	e780      	b.n	8001d0c <__aeabi_dsub+0x318>
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	e78e      	b.n	8001d2c <__aeabi_dsub+0x338>
 8001e0e:	0023      	movs	r3, r4
 8001e10:	4650      	mov	r0, sl
 8001e12:	4303      	orrs	r3, r0
 8001e14:	2e00      	cmp	r6, #0
 8001e16:	d000      	beq.n	8001e1a <__aeabi_dsub+0x426>
 8001e18:	e0a8      	b.n	8001f6c <__aeabi_dsub+0x578>
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d100      	bne.n	8001e20 <__aeabi_dsub+0x42c>
 8001e1e:	e0de      	b.n	8001fde <__aeabi_dsub+0x5ea>
 8001e20:	000b      	movs	r3, r1
 8001e22:	4313      	orrs	r3, r2
 8001e24:	d100      	bne.n	8001e28 <__aeabi_dsub+0x434>
 8001e26:	e66b      	b.n	8001b00 <__aeabi_dsub+0x10c>
 8001e28:	4452      	add	r2, sl
 8001e2a:	4552      	cmp	r2, sl
 8001e2c:	4180      	sbcs	r0, r0
 8001e2e:	1864      	adds	r4, r4, r1
 8001e30:	4240      	negs	r0, r0
 8001e32:	1824      	adds	r4, r4, r0
 8001e34:	0017      	movs	r7, r2
 8001e36:	0223      	lsls	r3, r4, #8
 8001e38:	d400      	bmi.n	8001e3c <__aeabi_dsub+0x448>
 8001e3a:	e6fd      	b.n	8001c38 <__aeabi_dsub+0x244>
 8001e3c:	4b77      	ldr	r3, [pc, #476]	; (800201c <__aeabi_dsub+0x628>)
 8001e3e:	4666      	mov	r6, ip
 8001e40:	401c      	ands	r4, r3
 8001e42:	e65d      	b.n	8001b00 <__aeabi_dsub+0x10c>
 8001e44:	0025      	movs	r5, r4
 8001e46:	4650      	mov	r0, sl
 8001e48:	4305      	orrs	r5, r0
 8001e4a:	2e00      	cmp	r6, #0
 8001e4c:	d1cf      	bne.n	8001dee <__aeabi_dsub+0x3fa>
 8001e4e:	2d00      	cmp	r5, #0
 8001e50:	d14f      	bne.n	8001ef2 <__aeabi_dsub+0x4fe>
 8001e52:	000c      	movs	r4, r1
 8001e54:	4314      	orrs	r4, r2
 8001e56:	d100      	bne.n	8001e5a <__aeabi_dsub+0x466>
 8001e58:	e0a0      	b.n	8001f9c <__aeabi_dsub+0x5a8>
 8001e5a:	000c      	movs	r4, r1
 8001e5c:	0017      	movs	r7, r2
 8001e5e:	4698      	mov	r8, r3
 8001e60:	e64e      	b.n	8001b00 <__aeabi_dsub+0x10c>
 8001e62:	4666      	mov	r6, ip
 8001e64:	2400      	movs	r4, #0
 8001e66:	2700      	movs	r7, #0
 8001e68:	e685      	b.n	8001b76 <__aeabi_dsub+0x182>
 8001e6a:	001f      	movs	r7, r3
 8001e6c:	0008      	movs	r0, r1
 8001e6e:	3f20      	subs	r7, #32
 8001e70:	40f8      	lsrs	r0, r7
 8001e72:	0007      	movs	r7, r0
 8001e74:	2b20      	cmp	r3, #32
 8001e76:	d100      	bne.n	8001e7a <__aeabi_dsub+0x486>
 8001e78:	e08e      	b.n	8001f98 <__aeabi_dsub+0x5a4>
 8001e7a:	2040      	movs	r0, #64	; 0x40
 8001e7c:	1ac3      	subs	r3, r0, r3
 8001e7e:	4099      	lsls	r1, r3
 8001e80:	430a      	orrs	r2, r1
 8001e82:	1e51      	subs	r1, r2, #1
 8001e84:	418a      	sbcs	r2, r1
 8001e86:	2100      	movs	r1, #0
 8001e88:	4317      	orrs	r7, r2
 8001e8a:	e692      	b.n	8001bb2 <__aeabi_dsub+0x1be>
 8001e8c:	2e00      	cmp	r6, #0
 8001e8e:	d114      	bne.n	8001eba <__aeabi_dsub+0x4c6>
 8001e90:	0026      	movs	r6, r4
 8001e92:	4650      	mov	r0, sl
 8001e94:	4306      	orrs	r6, r0
 8001e96:	d062      	beq.n	8001f5e <__aeabi_dsub+0x56a>
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d15c      	bne.n	8001f58 <__aeabi_dsub+0x564>
 8001e9e:	1887      	adds	r7, r0, r2
 8001ea0:	4297      	cmp	r7, r2
 8001ea2:	4192      	sbcs	r2, r2
 8001ea4:	1864      	adds	r4, r4, r1
 8001ea6:	4252      	negs	r2, r2
 8001ea8:	18a4      	adds	r4, r4, r2
 8001eaa:	4666      	mov	r6, ip
 8001eac:	e687      	b.n	8001bbe <__aeabi_dsub+0x1ca>
 8001eae:	4650      	mov	r0, sl
 8001eb0:	4320      	orrs	r0, r4
 8001eb2:	1e44      	subs	r4, r0, #1
 8001eb4:	41a0      	sbcs	r0, r4
 8001eb6:	2400      	movs	r4, #0
 8001eb8:	e760      	b.n	8001d7c <__aeabi_dsub+0x388>
 8001eba:	4e57      	ldr	r6, [pc, #348]	; (8002018 <__aeabi_dsub+0x624>)
 8001ebc:	45b4      	cmp	ip, r6
 8001ebe:	d04e      	beq.n	8001f5e <__aeabi_dsub+0x56a>
 8001ec0:	2680      	movs	r6, #128	; 0x80
 8001ec2:	0436      	lsls	r6, r6, #16
 8001ec4:	425b      	negs	r3, r3
 8001ec6:	4334      	orrs	r4, r6
 8001ec8:	2b38      	cmp	r3, #56	; 0x38
 8001eca:	dd00      	ble.n	8001ece <__aeabi_dsub+0x4da>
 8001ecc:	e07f      	b.n	8001fce <__aeabi_dsub+0x5da>
 8001ece:	2b1f      	cmp	r3, #31
 8001ed0:	dd00      	ble.n	8001ed4 <__aeabi_dsub+0x4e0>
 8001ed2:	e08b      	b.n	8001fec <__aeabi_dsub+0x5f8>
 8001ed4:	2620      	movs	r6, #32
 8001ed6:	0027      	movs	r7, r4
 8001ed8:	4650      	mov	r0, sl
 8001eda:	1af6      	subs	r6, r6, r3
 8001edc:	40b7      	lsls	r7, r6
 8001ede:	40d8      	lsrs	r0, r3
 8001ee0:	4307      	orrs	r7, r0
 8001ee2:	4650      	mov	r0, sl
 8001ee4:	40b0      	lsls	r0, r6
 8001ee6:	1e46      	subs	r6, r0, #1
 8001ee8:	41b0      	sbcs	r0, r6
 8001eea:	4307      	orrs	r7, r0
 8001eec:	40dc      	lsrs	r4, r3
 8001eee:	18bf      	adds	r7, r7, r2
 8001ef0:	e7d6      	b.n	8001ea0 <__aeabi_dsub+0x4ac>
 8001ef2:	000d      	movs	r5, r1
 8001ef4:	4315      	orrs	r5, r2
 8001ef6:	d100      	bne.n	8001efa <__aeabi_dsub+0x506>
 8001ef8:	e602      	b.n	8001b00 <__aeabi_dsub+0x10c>
 8001efa:	4650      	mov	r0, sl
 8001efc:	1a80      	subs	r0, r0, r2
 8001efe:	4582      	cmp	sl, r0
 8001f00:	41bf      	sbcs	r7, r7
 8001f02:	1a65      	subs	r5, r4, r1
 8001f04:	427f      	negs	r7, r7
 8001f06:	1bed      	subs	r5, r5, r7
 8001f08:	4684      	mov	ip, r0
 8001f0a:	0228      	lsls	r0, r5, #8
 8001f0c:	d400      	bmi.n	8001f10 <__aeabi_dsub+0x51c>
 8001f0e:	e68d      	b.n	8001c2c <__aeabi_dsub+0x238>
 8001f10:	4650      	mov	r0, sl
 8001f12:	1a17      	subs	r7, r2, r0
 8001f14:	42ba      	cmp	r2, r7
 8001f16:	4192      	sbcs	r2, r2
 8001f18:	1b0c      	subs	r4, r1, r4
 8001f1a:	4252      	negs	r2, r2
 8001f1c:	1aa4      	subs	r4, r4, r2
 8001f1e:	4698      	mov	r8, r3
 8001f20:	e5ee      	b.n	8001b00 <__aeabi_dsub+0x10c>
 8001f22:	000d      	movs	r5, r1
 8001f24:	4315      	orrs	r5, r2
 8001f26:	d100      	bne.n	8001f2a <__aeabi_dsub+0x536>
 8001f28:	e76b      	b.n	8001e02 <__aeabi_dsub+0x40e>
 8001f2a:	4650      	mov	r0, sl
 8001f2c:	0767      	lsls	r7, r4, #29
 8001f2e:	08c0      	lsrs	r0, r0, #3
 8001f30:	4307      	orrs	r7, r0
 8001f32:	2080      	movs	r0, #128	; 0x80
 8001f34:	08e4      	lsrs	r4, r4, #3
 8001f36:	0300      	lsls	r0, r0, #12
 8001f38:	4204      	tst	r4, r0
 8001f3a:	d007      	beq.n	8001f4c <__aeabi_dsub+0x558>
 8001f3c:	08cd      	lsrs	r5, r1, #3
 8001f3e:	4205      	tst	r5, r0
 8001f40:	d104      	bne.n	8001f4c <__aeabi_dsub+0x558>
 8001f42:	002c      	movs	r4, r5
 8001f44:	4698      	mov	r8, r3
 8001f46:	08d7      	lsrs	r7, r2, #3
 8001f48:	0749      	lsls	r1, r1, #29
 8001f4a:	430f      	orrs	r7, r1
 8001f4c:	0f7b      	lsrs	r3, r7, #29
 8001f4e:	00e4      	lsls	r4, r4, #3
 8001f50:	431c      	orrs	r4, r3
 8001f52:	00ff      	lsls	r7, r7, #3
 8001f54:	4e30      	ldr	r6, [pc, #192]	; (8002018 <__aeabi_dsub+0x624>)
 8001f56:	e5d3      	b.n	8001b00 <__aeabi_dsub+0x10c>
 8001f58:	4e2f      	ldr	r6, [pc, #188]	; (8002018 <__aeabi_dsub+0x624>)
 8001f5a:	45b4      	cmp	ip, r6
 8001f5c:	d1b4      	bne.n	8001ec8 <__aeabi_dsub+0x4d4>
 8001f5e:	000c      	movs	r4, r1
 8001f60:	0017      	movs	r7, r2
 8001f62:	4666      	mov	r6, ip
 8001f64:	e5cc      	b.n	8001b00 <__aeabi_dsub+0x10c>
 8001f66:	2700      	movs	r7, #0
 8001f68:	2400      	movs	r4, #0
 8001f6a:	e5e8      	b.n	8001b3e <__aeabi_dsub+0x14a>
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d039      	beq.n	8001fe4 <__aeabi_dsub+0x5f0>
 8001f70:	000b      	movs	r3, r1
 8001f72:	4313      	orrs	r3, r2
 8001f74:	d100      	bne.n	8001f78 <__aeabi_dsub+0x584>
 8001f76:	e744      	b.n	8001e02 <__aeabi_dsub+0x40e>
 8001f78:	08c0      	lsrs	r0, r0, #3
 8001f7a:	0767      	lsls	r7, r4, #29
 8001f7c:	4307      	orrs	r7, r0
 8001f7e:	2080      	movs	r0, #128	; 0x80
 8001f80:	08e4      	lsrs	r4, r4, #3
 8001f82:	0300      	lsls	r0, r0, #12
 8001f84:	4204      	tst	r4, r0
 8001f86:	d0e1      	beq.n	8001f4c <__aeabi_dsub+0x558>
 8001f88:	08cb      	lsrs	r3, r1, #3
 8001f8a:	4203      	tst	r3, r0
 8001f8c:	d1de      	bne.n	8001f4c <__aeabi_dsub+0x558>
 8001f8e:	08d7      	lsrs	r7, r2, #3
 8001f90:	0749      	lsls	r1, r1, #29
 8001f92:	430f      	orrs	r7, r1
 8001f94:	001c      	movs	r4, r3
 8001f96:	e7d9      	b.n	8001f4c <__aeabi_dsub+0x558>
 8001f98:	2100      	movs	r1, #0
 8001f9a:	e771      	b.n	8001e80 <__aeabi_dsub+0x48c>
 8001f9c:	2500      	movs	r5, #0
 8001f9e:	2700      	movs	r7, #0
 8001fa0:	e5e9      	b.n	8001b76 <__aeabi_dsub+0x182>
 8001fa2:	002e      	movs	r6, r5
 8001fa4:	0027      	movs	r7, r4
 8001fa6:	3e20      	subs	r6, #32
 8001fa8:	40f7      	lsrs	r7, r6
 8001faa:	2d20      	cmp	r5, #32
 8001fac:	d02f      	beq.n	800200e <__aeabi_dsub+0x61a>
 8001fae:	2640      	movs	r6, #64	; 0x40
 8001fb0:	1b75      	subs	r5, r6, r5
 8001fb2:	40ac      	lsls	r4, r5
 8001fb4:	4650      	mov	r0, sl
 8001fb6:	4320      	orrs	r0, r4
 8001fb8:	1e44      	subs	r4, r0, #1
 8001fba:	41a0      	sbcs	r0, r4
 8001fbc:	2400      	movs	r4, #0
 8001fbe:	4338      	orrs	r0, r7
 8001fc0:	e6dc      	b.n	8001d7c <__aeabi_dsub+0x388>
 8001fc2:	2480      	movs	r4, #128	; 0x80
 8001fc4:	2500      	movs	r5, #0
 8001fc6:	0324      	lsls	r4, r4, #12
 8001fc8:	4e13      	ldr	r6, [pc, #76]	; (8002018 <__aeabi_dsub+0x624>)
 8001fca:	2700      	movs	r7, #0
 8001fcc:	e5d3      	b.n	8001b76 <__aeabi_dsub+0x182>
 8001fce:	4650      	mov	r0, sl
 8001fd0:	4320      	orrs	r0, r4
 8001fd2:	0007      	movs	r7, r0
 8001fd4:	1e78      	subs	r0, r7, #1
 8001fd6:	4187      	sbcs	r7, r0
 8001fd8:	2400      	movs	r4, #0
 8001fda:	18bf      	adds	r7, r7, r2
 8001fdc:	e760      	b.n	8001ea0 <__aeabi_dsub+0x4ac>
 8001fde:	000c      	movs	r4, r1
 8001fe0:	0017      	movs	r7, r2
 8001fe2:	e58d      	b.n	8001b00 <__aeabi_dsub+0x10c>
 8001fe4:	000c      	movs	r4, r1
 8001fe6:	0017      	movs	r7, r2
 8001fe8:	4e0b      	ldr	r6, [pc, #44]	; (8002018 <__aeabi_dsub+0x624>)
 8001fea:	e589      	b.n	8001b00 <__aeabi_dsub+0x10c>
 8001fec:	001e      	movs	r6, r3
 8001fee:	0027      	movs	r7, r4
 8001ff0:	3e20      	subs	r6, #32
 8001ff2:	40f7      	lsrs	r7, r6
 8001ff4:	2b20      	cmp	r3, #32
 8001ff6:	d00c      	beq.n	8002012 <__aeabi_dsub+0x61e>
 8001ff8:	2640      	movs	r6, #64	; 0x40
 8001ffa:	1af3      	subs	r3, r6, r3
 8001ffc:	409c      	lsls	r4, r3
 8001ffe:	4650      	mov	r0, sl
 8002000:	4320      	orrs	r0, r4
 8002002:	1e44      	subs	r4, r0, #1
 8002004:	41a0      	sbcs	r0, r4
 8002006:	4307      	orrs	r7, r0
 8002008:	2400      	movs	r4, #0
 800200a:	18bf      	adds	r7, r7, r2
 800200c:	e748      	b.n	8001ea0 <__aeabi_dsub+0x4ac>
 800200e:	2400      	movs	r4, #0
 8002010:	e7d0      	b.n	8001fb4 <__aeabi_dsub+0x5c0>
 8002012:	2400      	movs	r4, #0
 8002014:	e7f3      	b.n	8001ffe <__aeabi_dsub+0x60a>
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	000007ff 	.word	0x000007ff
 800201c:	ff7fffff 	.word	0xff7fffff

08002020 <__aeabi_d2iz>:
 8002020:	b530      	push	{r4, r5, lr}
 8002022:	4d13      	ldr	r5, [pc, #76]	; (8002070 <__aeabi_d2iz+0x50>)
 8002024:	030a      	lsls	r2, r1, #12
 8002026:	004b      	lsls	r3, r1, #1
 8002028:	0b12      	lsrs	r2, r2, #12
 800202a:	0d5b      	lsrs	r3, r3, #21
 800202c:	0fc9      	lsrs	r1, r1, #31
 800202e:	2400      	movs	r4, #0
 8002030:	42ab      	cmp	r3, r5
 8002032:	dd10      	ble.n	8002056 <__aeabi_d2iz+0x36>
 8002034:	4c0f      	ldr	r4, [pc, #60]	; (8002074 <__aeabi_d2iz+0x54>)
 8002036:	42a3      	cmp	r3, r4
 8002038:	dc0f      	bgt.n	800205a <__aeabi_d2iz+0x3a>
 800203a:	2480      	movs	r4, #128	; 0x80
 800203c:	4d0e      	ldr	r5, [pc, #56]	; (8002078 <__aeabi_d2iz+0x58>)
 800203e:	0364      	lsls	r4, r4, #13
 8002040:	4322      	orrs	r2, r4
 8002042:	1aed      	subs	r5, r5, r3
 8002044:	2d1f      	cmp	r5, #31
 8002046:	dd0b      	ble.n	8002060 <__aeabi_d2iz+0x40>
 8002048:	480c      	ldr	r0, [pc, #48]	; (800207c <__aeabi_d2iz+0x5c>)
 800204a:	1ac3      	subs	r3, r0, r3
 800204c:	40da      	lsrs	r2, r3
 800204e:	4254      	negs	r4, r2
 8002050:	2900      	cmp	r1, #0
 8002052:	d100      	bne.n	8002056 <__aeabi_d2iz+0x36>
 8002054:	0014      	movs	r4, r2
 8002056:	0020      	movs	r0, r4
 8002058:	bd30      	pop	{r4, r5, pc}
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <__aeabi_d2iz+0x60>)
 800205c:	18cc      	adds	r4, r1, r3
 800205e:	e7fa      	b.n	8002056 <__aeabi_d2iz+0x36>
 8002060:	4c08      	ldr	r4, [pc, #32]	; (8002084 <__aeabi_d2iz+0x64>)
 8002062:	40e8      	lsrs	r0, r5
 8002064:	46a4      	mov	ip, r4
 8002066:	4463      	add	r3, ip
 8002068:	409a      	lsls	r2, r3
 800206a:	4302      	orrs	r2, r0
 800206c:	e7ef      	b.n	800204e <__aeabi_d2iz+0x2e>
 800206e:	46c0      	nop			; (mov r8, r8)
 8002070:	000003fe 	.word	0x000003fe
 8002074:	0000041d 	.word	0x0000041d
 8002078:	00000433 	.word	0x00000433
 800207c:	00000413 	.word	0x00000413
 8002080:	7fffffff 	.word	0x7fffffff
 8002084:	fffffbed 	.word	0xfffffbed

08002088 <__aeabi_i2d>:
 8002088:	b570      	push	{r4, r5, r6, lr}
 800208a:	2800      	cmp	r0, #0
 800208c:	d030      	beq.n	80020f0 <__aeabi_i2d+0x68>
 800208e:	17c3      	asrs	r3, r0, #31
 8002090:	18c4      	adds	r4, r0, r3
 8002092:	405c      	eors	r4, r3
 8002094:	0fc5      	lsrs	r5, r0, #31
 8002096:	0020      	movs	r0, r4
 8002098:	f000 f870 	bl	800217c <__clzsi2>
 800209c:	4b17      	ldr	r3, [pc, #92]	; (80020fc <__aeabi_i2d+0x74>)
 800209e:	4a18      	ldr	r2, [pc, #96]	; (8002100 <__aeabi_i2d+0x78>)
 80020a0:	1a1b      	subs	r3, r3, r0
 80020a2:	1ad2      	subs	r2, r2, r3
 80020a4:	2a1f      	cmp	r2, #31
 80020a6:	dd18      	ble.n	80020da <__aeabi_i2d+0x52>
 80020a8:	4a16      	ldr	r2, [pc, #88]	; (8002104 <__aeabi_i2d+0x7c>)
 80020aa:	1ad2      	subs	r2, r2, r3
 80020ac:	4094      	lsls	r4, r2
 80020ae:	2200      	movs	r2, #0
 80020b0:	0324      	lsls	r4, r4, #12
 80020b2:	055b      	lsls	r3, r3, #21
 80020b4:	0b24      	lsrs	r4, r4, #12
 80020b6:	0d5b      	lsrs	r3, r3, #21
 80020b8:	2100      	movs	r1, #0
 80020ba:	0010      	movs	r0, r2
 80020bc:	0324      	lsls	r4, r4, #12
 80020be:	0d0a      	lsrs	r2, r1, #20
 80020c0:	0b24      	lsrs	r4, r4, #12
 80020c2:	0512      	lsls	r2, r2, #20
 80020c4:	4322      	orrs	r2, r4
 80020c6:	4c10      	ldr	r4, [pc, #64]	; (8002108 <__aeabi_i2d+0x80>)
 80020c8:	051b      	lsls	r3, r3, #20
 80020ca:	4022      	ands	r2, r4
 80020cc:	4313      	orrs	r3, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	07ed      	lsls	r5, r5, #31
 80020d2:	085b      	lsrs	r3, r3, #1
 80020d4:	432b      	orrs	r3, r5
 80020d6:	0019      	movs	r1, r3
 80020d8:	bd70      	pop	{r4, r5, r6, pc}
 80020da:	0021      	movs	r1, r4
 80020dc:	4091      	lsls	r1, r2
 80020de:	000a      	movs	r2, r1
 80020e0:	210b      	movs	r1, #11
 80020e2:	1a08      	subs	r0, r1, r0
 80020e4:	40c4      	lsrs	r4, r0
 80020e6:	055b      	lsls	r3, r3, #21
 80020e8:	0324      	lsls	r4, r4, #12
 80020ea:	0b24      	lsrs	r4, r4, #12
 80020ec:	0d5b      	lsrs	r3, r3, #21
 80020ee:	e7e3      	b.n	80020b8 <__aeabi_i2d+0x30>
 80020f0:	2500      	movs	r5, #0
 80020f2:	2300      	movs	r3, #0
 80020f4:	2400      	movs	r4, #0
 80020f6:	2200      	movs	r2, #0
 80020f8:	e7de      	b.n	80020b8 <__aeabi_i2d+0x30>
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	0000041e 	.word	0x0000041e
 8002100:	00000433 	.word	0x00000433
 8002104:	00000413 	.word	0x00000413
 8002108:	800fffff 	.word	0x800fffff

0800210c <__aeabi_ui2d>:
 800210c:	b510      	push	{r4, lr}
 800210e:	1e04      	subs	r4, r0, #0
 8002110:	d028      	beq.n	8002164 <__aeabi_ui2d+0x58>
 8002112:	f000 f833 	bl	800217c <__clzsi2>
 8002116:	4b15      	ldr	r3, [pc, #84]	; (800216c <__aeabi_ui2d+0x60>)
 8002118:	4a15      	ldr	r2, [pc, #84]	; (8002170 <__aeabi_ui2d+0x64>)
 800211a:	1a1b      	subs	r3, r3, r0
 800211c:	1ad2      	subs	r2, r2, r3
 800211e:	2a1f      	cmp	r2, #31
 8002120:	dd15      	ble.n	800214e <__aeabi_ui2d+0x42>
 8002122:	4a14      	ldr	r2, [pc, #80]	; (8002174 <__aeabi_ui2d+0x68>)
 8002124:	1ad2      	subs	r2, r2, r3
 8002126:	4094      	lsls	r4, r2
 8002128:	2200      	movs	r2, #0
 800212a:	0324      	lsls	r4, r4, #12
 800212c:	055b      	lsls	r3, r3, #21
 800212e:	0b24      	lsrs	r4, r4, #12
 8002130:	0d5b      	lsrs	r3, r3, #21
 8002132:	2100      	movs	r1, #0
 8002134:	0010      	movs	r0, r2
 8002136:	0324      	lsls	r4, r4, #12
 8002138:	0d0a      	lsrs	r2, r1, #20
 800213a:	0b24      	lsrs	r4, r4, #12
 800213c:	0512      	lsls	r2, r2, #20
 800213e:	4322      	orrs	r2, r4
 8002140:	4c0d      	ldr	r4, [pc, #52]	; (8002178 <__aeabi_ui2d+0x6c>)
 8002142:	051b      	lsls	r3, r3, #20
 8002144:	4022      	ands	r2, r4
 8002146:	4313      	orrs	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	0859      	lsrs	r1, r3, #1
 800214c:	bd10      	pop	{r4, pc}
 800214e:	0021      	movs	r1, r4
 8002150:	4091      	lsls	r1, r2
 8002152:	000a      	movs	r2, r1
 8002154:	210b      	movs	r1, #11
 8002156:	1a08      	subs	r0, r1, r0
 8002158:	40c4      	lsrs	r4, r0
 800215a:	055b      	lsls	r3, r3, #21
 800215c:	0324      	lsls	r4, r4, #12
 800215e:	0b24      	lsrs	r4, r4, #12
 8002160:	0d5b      	lsrs	r3, r3, #21
 8002162:	e7e6      	b.n	8002132 <__aeabi_ui2d+0x26>
 8002164:	2300      	movs	r3, #0
 8002166:	2400      	movs	r4, #0
 8002168:	2200      	movs	r2, #0
 800216a:	e7e2      	b.n	8002132 <__aeabi_ui2d+0x26>
 800216c:	0000041e 	.word	0x0000041e
 8002170:	00000433 	.word	0x00000433
 8002174:	00000413 	.word	0x00000413
 8002178:	800fffff 	.word	0x800fffff

0800217c <__clzsi2>:
 800217c:	211c      	movs	r1, #28
 800217e:	2301      	movs	r3, #1
 8002180:	041b      	lsls	r3, r3, #16
 8002182:	4298      	cmp	r0, r3
 8002184:	d301      	bcc.n	800218a <__clzsi2+0xe>
 8002186:	0c00      	lsrs	r0, r0, #16
 8002188:	3910      	subs	r1, #16
 800218a:	0a1b      	lsrs	r3, r3, #8
 800218c:	4298      	cmp	r0, r3
 800218e:	d301      	bcc.n	8002194 <__clzsi2+0x18>
 8002190:	0a00      	lsrs	r0, r0, #8
 8002192:	3908      	subs	r1, #8
 8002194:	091b      	lsrs	r3, r3, #4
 8002196:	4298      	cmp	r0, r3
 8002198:	d301      	bcc.n	800219e <__clzsi2+0x22>
 800219a:	0900      	lsrs	r0, r0, #4
 800219c:	3904      	subs	r1, #4
 800219e:	a202      	add	r2, pc, #8	; (adr r2, 80021a8 <__clzsi2+0x2c>)
 80021a0:	5c10      	ldrb	r0, [r2, r0]
 80021a2:	1840      	adds	r0, r0, r1
 80021a4:	4770      	bx	lr
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	02020304 	.word	0x02020304
 80021ac:	01010101 	.word	0x01010101
	...

080021b8 <__clzdi2>:
 80021b8:	b510      	push	{r4, lr}
 80021ba:	2900      	cmp	r1, #0
 80021bc:	d103      	bne.n	80021c6 <__clzdi2+0xe>
 80021be:	f7ff ffdd 	bl	800217c <__clzsi2>
 80021c2:	3020      	adds	r0, #32
 80021c4:	e002      	b.n	80021cc <__clzdi2+0x14>
 80021c6:	1c08      	adds	r0, r1, #0
 80021c8:	f7ff ffd8 	bl	800217c <__clzsi2>
 80021cc:	bd10      	pop	{r4, pc}
 80021ce:	46c0      	nop			; (mov r8, r8)

080021d0 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08c      	sub	sp, #48	; 0x30
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	0002      	movs	r2, r0
 80021d8:	1dfb      	adds	r3, r7, #7
 80021da:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE( Led );
 80021dc:	1dfb      	adds	r3, r7, #7
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d015      	beq.n	8002210 <BSP_LED_Init+0x40>
 80021e4:	dc02      	bgt.n	80021ec <BSP_LED_Init+0x1c>
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d005      	beq.n	80021f6 <BSP_LED_Init+0x26>
 80021ea:	e037      	b.n	800225c <BSP_LED_Init+0x8c>
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d01c      	beq.n	800222a <BSP_LED_Init+0x5a>
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d027      	beq.n	8002244 <BSP_LED_Init+0x74>
 80021f4:	e032      	b.n	800225c <BSP_LED_Init+0x8c>
 80021f6:	4b2c      	ldr	r3, [pc, #176]	; (80022a8 <BSP_LED_Init+0xd8>)
 80021f8:	4a2b      	ldr	r2, [pc, #172]	; (80022a8 <BSP_LED_Init+0xd8>)
 80021fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80021fc:	2102      	movs	r1, #2
 80021fe:	430a      	orrs	r2, r1
 8002200:	62da      	str	r2, [r3, #44]	; 0x2c
 8002202:	4b29      	ldr	r3, [pc, #164]	; (80022a8 <BSP_LED_Init+0xd8>)
 8002204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002206:	2202      	movs	r2, #2
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	e025      	b.n	800225c <BSP_LED_Init+0x8c>
 8002210:	4b25      	ldr	r3, [pc, #148]	; (80022a8 <BSP_LED_Init+0xd8>)
 8002212:	4a25      	ldr	r2, [pc, #148]	; (80022a8 <BSP_LED_Init+0xd8>)
 8002214:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002216:	2101      	movs	r1, #1
 8002218:	430a      	orrs	r2, r1
 800221a:	62da      	str	r2, [r3, #44]	; 0x2c
 800221c:	4b22      	ldr	r3, [pc, #136]	; (80022a8 <BSP_LED_Init+0xd8>)
 800221e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002220:	2201      	movs	r2, #1
 8002222:	4013      	ands	r3, r2
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	e018      	b.n	800225c <BSP_LED_Init+0x8c>
 800222a:	4b1f      	ldr	r3, [pc, #124]	; (80022a8 <BSP_LED_Init+0xd8>)
 800222c:	4a1e      	ldr	r2, [pc, #120]	; (80022a8 <BSP_LED_Init+0xd8>)
 800222e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002230:	2102      	movs	r1, #2
 8002232:	430a      	orrs	r2, r1
 8002234:	62da      	str	r2, [r3, #44]	; 0x2c
 8002236:	4b1c      	ldr	r3, [pc, #112]	; (80022a8 <BSP_LED_Init+0xd8>)
 8002238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223a:	2202      	movs	r2, #2
 800223c:	4013      	ands	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	e00b      	b.n	800225c <BSP_LED_Init+0x8c>
 8002244:	4b18      	ldr	r3, [pc, #96]	; (80022a8 <BSP_LED_Init+0xd8>)
 8002246:	4a18      	ldr	r2, [pc, #96]	; (80022a8 <BSP_LED_Init+0xd8>)
 8002248:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800224a:	2102      	movs	r1, #2
 800224c:	430a      	orrs	r2, r1
 800224e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002250:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <BSP_LED_Init+0xd8>)
 8002252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002254:	2202      	movs	r2, #2
 8002256:	4013      	ands	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	46c0      	nop			; (mov r8, r8)

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800225e:	1dfb      	adds	r3, r7, #7
 8002260:	781a      	ldrb	r2, [r3, #0]
 8002262:	4b12      	ldr	r3, [pc, #72]	; (80022ac <BSP_LED_Init+0xdc>)
 8002264:	0052      	lsls	r2, r2, #1
 8002266:	5ad3      	ldrh	r3, [r2, r3]
 8002268:	001a      	movs	r2, r3
 800226a:	231c      	movs	r3, #28
 800226c:	18fb      	adds	r3, r7, r3
 800226e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002270:	231c      	movs	r3, #28
 8002272:	18fb      	adds	r3, r7, r3
 8002274:	2201      	movs	r2, #1
 8002276:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	231c      	movs	r3, #28
 800227a:	18fb      	adds	r3, r7, r3
 800227c:	2200      	movs	r2, #0
 800227e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002280:	231c      	movs	r3, #28
 8002282:	18fb      	adds	r3, r7, r3
 8002284:	2203      	movs	r2, #3
 8002286:	60da      	str	r2, [r3, #12]
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8002288:	1dfb      	adds	r3, r7, #7
 800228a:	781a      	ldrb	r2, [r3, #0]
 800228c:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <BSP_LED_Init+0xe0>)
 800228e:	0092      	lsls	r2, r2, #2
 8002290:	58d3      	ldr	r3, [r2, r3]
 8002292:	221c      	movs	r2, #28
 8002294:	18ba      	adds	r2, r7, r2
 8002296:	0011      	movs	r1, r2
 8002298:	0018      	movs	r0, r3
 800229a:	f002 ff57 	bl	800514c <HAL_GPIO_Init>
}
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	46bd      	mov	sp, r7
 80022a2:	b00c      	add	sp, #48	; 0x30
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	40021000 	.word	0x40021000
 80022ac:	0800aad8 	.word	0x0800aad8
 80022b0:	20000000 	.word	0x20000000

080022b4 <SX1276Init>:
/*
 * Radio driver functions implementation
 */

uint32_t SX1276Init( RadioEvents_t *events )
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
 80022bc:	4b32      	ldr	r3, [pc, #200]	; (8002388 <SX1276Init+0xd4>)
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	601a      	str	r2, [r3, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 80022c2:	4a32      	ldr	r2, [pc, #200]	; (800238c <SX1276Init+0xd8>)
 80022c4:	4b32      	ldr	r3, [pc, #200]	; (8002390 <SX1276Init+0xdc>)
 80022c6:	0011      	movs	r1, r2
 80022c8:	0018      	movs	r0, r3
 80022ca:	f006 f98d 	bl	80085e8 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 80022ce:	4a2f      	ldr	r2, [pc, #188]	; (800238c <SX1276Init+0xd8>)
 80022d0:	4b30      	ldr	r3, [pc, #192]	; (8002394 <SX1276Init+0xe0>)
 80022d2:	0011      	movs	r1, r2
 80022d4:	0018      	movs	r0, r3
 80022d6:	f006 f987 	bl	80085e8 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 80022da:	4a2c      	ldr	r2, [pc, #176]	; (800238c <SX1276Init+0xd8>)
 80022dc:	4b2e      	ldr	r3, [pc, #184]	; (8002398 <SX1276Init+0xe4>)
 80022de:	0011      	movs	r1, r2
 80022e0:	0018      	movs	r0, r3
 80022e2:	f006 f981 	bl	80085e8 <TimerInit>
  
    MLM_TCXO_ON(); //TCXO ON
 80022e6:	2380      	movs	r3, #128	; 0x80
 80022e8:	0159      	lsls	r1, r3, #5
 80022ea:	23a0      	movs	r3, #160	; 0xa0
 80022ec:	05db      	lsls	r3, r3, #23
 80022ee:	2201      	movs	r2, #1
 80022f0:	0018      	movs	r0, r3
 80022f2:	f006 fc6f 	bl	8008bd4 <HW_GPIO_Write>
  
    SX1276Reset( );
 80022f6:	f001 fb75 	bl	80039e4 <SX1276Reset>

    RxChainCalibration( );
 80022fa:	f000 f90d 	bl	8002518 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 80022fe:	2000      	movs	r0, #0
 8002300:	f001 fba4 	bl	8003a4c <SX1276SetOpMode>

    SX1276IoIrqInit( DioIrq );
 8002304:	4b25      	ldr	r3, [pc, #148]	; (800239c <SX1276Init+0xe8>)
 8002306:	0018      	movs	r0, r3
 8002308:	f002 fa14 	bl	8004734 <SX1276IoIrqInit>

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800230c:	230f      	movs	r3, #15
 800230e:	18fb      	adds	r3, r7, r3
 8002310:	2200      	movs	r2, #0
 8002312:	701a      	strb	r2, [r3, #0]
 8002314:	e028      	b.n	8002368 <SX1276Init+0xb4>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 8002316:	230f      	movs	r3, #15
 8002318:	18fb      	adds	r3, r7, r3
 800231a:	781a      	ldrb	r2, [r3, #0]
 800231c:	4920      	ldr	r1, [pc, #128]	; (80023a0 <SX1276Init+0xec>)
 800231e:	0013      	movs	r3, r2
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	189b      	adds	r3, r3, r2
 8002324:	5c5b      	ldrb	r3, [r3, r1]
 8002326:	0018      	movs	r0, r3
 8002328:	f001 fbbc 	bl	8003aa4 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800232c:	230f      	movs	r3, #15
 800232e:	18fb      	adds	r3, r7, r3
 8002330:	781a      	ldrb	r2, [r3, #0]
 8002332:	491b      	ldr	r1, [pc, #108]	; (80023a0 <SX1276Init+0xec>)
 8002334:	0013      	movs	r3, r2
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	189b      	adds	r3, r3, r2
 800233a:	18cb      	adds	r3, r1, r3
 800233c:	3301      	adds	r3, #1
 800233e:	7818      	ldrb	r0, [r3, #0]
 8002340:	230f      	movs	r3, #15
 8002342:	18fb      	adds	r3, r7, r3
 8002344:	781a      	ldrb	r2, [r3, #0]
 8002346:	4916      	ldr	r1, [pc, #88]	; (80023a0 <SX1276Init+0xec>)
 8002348:	0013      	movs	r3, r2
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	189b      	adds	r3, r3, r2
 800234e:	18cb      	adds	r3, r1, r3
 8002350:	3302      	adds	r3, #2
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	0019      	movs	r1, r3
 8002356:	f001 fc04 	bl	8003b62 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800235a:	230f      	movs	r3, #15
 800235c:	18fb      	adds	r3, r7, r3
 800235e:	781a      	ldrb	r2, [r3, #0]
 8002360:	230f      	movs	r3, #15
 8002362:	18fb      	adds	r3, r7, r3
 8002364:	3201      	adds	r2, #1
 8002366:	701a      	strb	r2, [r3, #0]
 8002368:	230f      	movs	r3, #15
 800236a:	18fb      	adds	r3, r7, r3
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b0f      	cmp	r3, #15
 8002370:	d9d1      	bls.n	8002316 <SX1276Init+0x62>
    }

    SX1276SetModem( MODEM_FSK );
 8002372:	2000      	movs	r0, #0
 8002374:	f001 fb96 	bl	8003aa4 <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 8002378:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <SX1276Init+0xf0>)
 800237a:	2200      	movs	r2, #0
 800237c:	711a      	strb	r2, [r3, #4]
    
    return RADIO_WAKEUP_TIME + BOARD_WAKEUP_TIME;
 800237e:	2305      	movs	r3, #5
}
 8002380:	0018      	movs	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	b004      	add	sp, #16
 8002386:	bd80      	pop	{r7, pc}
 8002388:	200000b0 	.word	0x200000b0
 800238c:	08003d79 	.word	0x08003d79
 8002390:	200004e0 	.word	0x200004e0
 8002394:	20000568 	.word	0x20000568
 8002398:	200004f4 	.word	0x200004f4
 800239c:	20000014 	.word	0x20000014
 80023a0:	0800aae8 	.word	0x0800aae8
 80023a4:	20000508 	.word	0x20000508

080023a8 <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 80023ac:	4b02      	ldr	r3, [pc, #8]	; (80023b8 <SX1276GetStatus+0x10>)
 80023ae:	791b      	ldrb	r3, [r3, #4]
}
 80023b0:	0018      	movs	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	20000508 	.word	0x20000508

080023bc <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 80023bc:	b590      	push	{r4, r7, lr}
 80023be:	b087      	sub	sp, #28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
    uint32_t channel;
    
    SX1276.Settings.Channel = freq;
 80023c4:	4b1a      	ldr	r3, [pc, #104]	; (8002430 <SX1276SetChannel+0x74>)
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	609a      	str	r2, [r3, #8]
    
    SX_FREQ_TO_CHANNEL(channel, freq);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4919      	ldr	r1, [pc, #100]	; (8002434 <SX1276SetChannel+0x78>)
 80023ce:	0018      	movs	r0, r3
 80023d0:	f7fd fe9a 	bl	8000108 <__udivsi3>
 80023d4:	0003      	movs	r3, r0
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	4a16      	ldr	r2, [pc, #88]	; (8002434 <SX1276SetChannel+0x78>)
 80023dc:	4353      	muls	r3, r2
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	021c      	lsls	r4, r3, #8
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	021b      	lsls	r3, r3, #8
 80023ec:	4a12      	ldr	r2, [pc, #72]	; (8002438 <SX1276SetChannel+0x7c>)
 80023ee:	4694      	mov	ip, r2
 80023f0:	4463      	add	r3, ip
 80023f2:	4910      	ldr	r1, [pc, #64]	; (8002434 <SX1276SetChannel+0x78>)
 80023f4:	0018      	movs	r0, r3
 80023f6:	f7fd fe87 	bl	8000108 <__udivsi3>
 80023fa:	0003      	movs	r3, r0
 80023fc:	18e3      	adds	r3, r4, r3
 80023fe:	60fb      	str	r3, [r7, #12]
    
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	0c1b      	lsrs	r3, r3, #16
 8002404:	b2db      	uxtb	r3, r3
 8002406:	0019      	movs	r1, r3
 8002408:	2006      	movs	r0, #6
 800240a:	f001 fbaa 	bl	8003b62 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	0a1b      	lsrs	r3, r3, #8
 8002412:	b2db      	uxtb	r3, r3
 8002414:	0019      	movs	r1, r3
 8002416:	2007      	movs	r0, #7
 8002418:	f001 fba3 	bl	8003b62 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	b2db      	uxtb	r3, r3
 8002420:	0019      	movs	r1, r3
 8002422:	2008      	movs	r0, #8
 8002424:	f001 fb9d 	bl	8003b62 <SX1276Write>
}
 8002428:	46c0      	nop			; (mov r8, r8)
 800242a:	46bd      	mov	sp, r7
 800242c:	b007      	add	sp, #28
 800242e:	bd90      	pop	{r4, r7, pc}
 8002430:	20000508 	.word	0x20000508
 8002434:	00003d09 	.word	0x00003d09
 8002438:	00001e84 	.word	0x00001e84

0800243c <SX1276IsChannelFree>:

bool SX1276IsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh )
{
 800243c:	b590      	push	{r4, r7, lr}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6039      	str	r1, [r7, #0]
 8002444:	0011      	movs	r1, r2
 8002446:	1dfb      	adds	r3, r7, #7
 8002448:	1c02      	adds	r2, r0, #0
 800244a:	701a      	strb	r2, [r3, #0]
 800244c:	1d3b      	adds	r3, r7, #4
 800244e:	1c0a      	adds	r2, r1, #0
 8002450:	801a      	strh	r2, [r3, #0]
    int16_t rssi = 0;
 8002452:	230e      	movs	r3, #14
 8002454:	18fb      	adds	r3, r7, r3
 8002456:	2200      	movs	r2, #0
 8002458:	801a      	strh	r2, [r3, #0]

    SX1276SetModem( modem );
 800245a:	1dfb      	adds	r3, r7, #7
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	0018      	movs	r0, r3
 8002460:	f001 fb20 	bl	8003aa4 <SX1276SetModem>

    SX1276SetChannel( freq );
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	0018      	movs	r0, r3
 8002468:	f7ff ffa8 	bl	80023bc <SX1276SetChannel>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800246c:	2005      	movs	r0, #5
 800246e:	f001 faed 	bl	8003a4c <SX1276SetOpMode>

    DelayMs( 1 );
 8002472:	2001      	movs	r0, #1
 8002474:	f006 f864 	bl	8008540 <DelayMs>

    rssi = SX1276ReadRssi( modem );
 8002478:	230e      	movs	r3, #14
 800247a:	18fc      	adds	r4, r7, r3
 800247c:	1dfb      	adds	r3, r7, #7
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	0018      	movs	r0, r3
 8002482:	f001 fa63 	bl	800394c <SX1276ReadRssi>
 8002486:	0003      	movs	r3, r0
 8002488:	8023      	strh	r3, [r4, #0]

    SX1276SetSleep( );
 800248a:	f000 ff35 	bl	80032f8 <SX1276SetSleep>

    if( rssi > rssiThresh )
 800248e:	230e      	movs	r3, #14
 8002490:	18fa      	adds	r2, r7, r3
 8002492:	1d3b      	adds	r3, r7, #4
 8002494:	2100      	movs	r1, #0
 8002496:	5e52      	ldrsh	r2, [r2, r1]
 8002498:	2100      	movs	r1, #0
 800249a:	5e5b      	ldrsh	r3, [r3, r1]
 800249c:	429a      	cmp	r2, r3
 800249e:	dd01      	ble.n	80024a4 <SX1276IsChannelFree+0x68>
    {
        return false;
 80024a0:	2300      	movs	r3, #0
 80024a2:	e000      	b.n	80024a6 <SX1276IsChannelFree+0x6a>
    }
    return true;
 80024a4:	2301      	movs	r3, #1
}
 80024a6:	0018      	movs	r0, r3
 80024a8:	46bd      	mov	sp, r7
 80024aa:	b005      	add	sp, #20
 80024ac:	bd90      	pop	{r4, r7, pc}

080024ae <SX1276Random>:

uint32_t SX1276Random( void )
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 80024b8:	2001      	movs	r0, #1
 80024ba:	f001 faf3 	bl	8003aa4 <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80024be:	21ff      	movs	r1, #255	; 0xff
 80024c0:	2011      	movs	r0, #17
 80024c2:	f001 fb4e 	bl	8003b62 <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80024c6:	2005      	movs	r0, #5
 80024c8:	f001 fac0 	bl	8003a4c <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 80024cc:	1dfb      	adds	r3, r7, #7
 80024ce:	2200      	movs	r2, #0
 80024d0:	701a      	strb	r2, [r3, #0]
 80024d2:	e015      	b.n	8002500 <SX1276Random+0x52>
    {
        DelayMs( 1 );
 80024d4:	2001      	movs	r0, #1
 80024d6:	f006 f833 	bl	8008540 <DelayMs>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 80024da:	202c      	movs	r0, #44	; 0x2c
 80024dc:	f001 fb55 	bl	8003b8a <SX1276Read>
 80024e0:	0003      	movs	r3, r0
 80024e2:	001a      	movs	r2, r3
 80024e4:	2301      	movs	r3, #1
 80024e6:	401a      	ands	r2, r3
 80024e8:	1dfb      	adds	r3, r7, #7
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	409a      	lsls	r2, r3
 80024ee:	0013      	movs	r3, r2
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 80024f6:	1dfb      	adds	r3, r7, #7
 80024f8:	781a      	ldrb	r2, [r3, #0]
 80024fa:	1dfb      	adds	r3, r7, #7
 80024fc:	3201      	adds	r2, #1
 80024fe:	701a      	strb	r2, [r3, #0]
 8002500:	1dfb      	adds	r3, r7, #7
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b1f      	cmp	r3, #31
 8002506:	d9e5      	bls.n	80024d4 <SX1276Random+0x26>
    }

    SX1276SetSleep( );
 8002508:	f000 fef6 	bl	80032f8 <SX1276SetSleep>

    return rnd;
 800250c:	683b      	ldr	r3, [r7, #0]
}
 800250e:	0018      	movs	r0, r3
 8002510:	46bd      	mov	sp, r7
 8002512:	b002      	add	sp, #8
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
 8002518:	b590      	push	{r4, r7, lr}
 800251a:	b087      	sub	sp, #28
 800251c:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;
    uint32_t channel;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 800251e:	2317      	movs	r3, #23
 8002520:	18fc      	adds	r4, r7, r3
 8002522:	2009      	movs	r0, #9
 8002524:	f001 fb31 	bl	8003b8a <SX1276Read>
 8002528:	0003      	movs	r3, r0
 800252a:	7023      	strb	r3, [r4, #0]
    
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800252c:	2006      	movs	r0, #6
 800252e:	f001 fb2c 	bl	8003b8a <SX1276Read>
 8002532:	0003      	movs	r3, r0
 8002534:	041c      	lsls	r4, r3, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8002536:	2007      	movs	r0, #7
 8002538:	f001 fb27 	bl	8003b8a <SX1276Read>
 800253c:	0003      	movs	r3, r0
 800253e:	021b      	lsls	r3, r3, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8002540:	431c      	orrs	r4, r3
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 8002542:	2008      	movs	r0, #8
 8002544:	f001 fb21 	bl	8003b8a <SX1276Read>
 8002548:	0003      	movs	r3, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800254a:	4323      	orrs	r3, r4
 800254c:	613b      	str	r3, [r7, #16]
    
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	0a1b      	lsrs	r3, r3, #8
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	021b      	lsls	r3, r3, #8
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	4a25      	ldr	r2, [pc, #148]	; (80025f8 <RxChainCalibration+0xe0>)
 8002562:	435a      	muls	r2, r3
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	4924      	ldr	r1, [pc, #144]	; (80025f8 <RxChainCalibration+0xe0>)
 8002568:	434b      	muls	r3, r1
 800256a:	3380      	adds	r3, #128	; 0x80
 800256c:	0a1b      	lsrs	r3, r3, #8
 800256e:	18d3      	adds	r3, r2, r3
 8002570:	607b      	str	r3, [r7, #4]
    
    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 8002572:	2100      	movs	r1, #0
 8002574:	2009      	movs	r0, #9
 8002576:	f001 faf4 	bl	8003b62 <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800257a:	203b      	movs	r0, #59	; 0x3b
 800257c:	f001 fb05 	bl	8003b8a <SX1276Read>
 8002580:	0003      	movs	r3, r0
 8002582:	001a      	movs	r2, r3
 8002584:	2340      	movs	r3, #64	; 0x40
 8002586:	4313      	orrs	r3, r2
 8002588:	b2db      	uxtb	r3, r3
 800258a:	0019      	movs	r1, r3
 800258c:	203b      	movs	r0, #59	; 0x3b
 800258e:	f001 fae8 	bl	8003b62 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	203b      	movs	r0, #59	; 0x3b
 8002596:	f001 faf8 	bl	8003b8a <SX1276Read>
 800259a:	0003      	movs	r3, r0
 800259c:	001a      	movs	r2, r3
 800259e:	2320      	movs	r3, #32
 80025a0:	4013      	ands	r3, r2
 80025a2:	2b20      	cmp	r3, #32
 80025a4:	d0f6      	beq.n	8002594 <RxChainCalibration+0x7c>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 80025a6:	4b15      	ldr	r3, [pc, #84]	; (80025fc <RxChainCalibration+0xe4>)
 80025a8:	0018      	movs	r0, r3
 80025aa:	f7ff ff07 	bl	80023bc <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80025ae:	203b      	movs	r0, #59	; 0x3b
 80025b0:	f001 faeb 	bl	8003b8a <SX1276Read>
 80025b4:	0003      	movs	r3, r0
 80025b6:	001a      	movs	r2, r3
 80025b8:	2340      	movs	r3, #64	; 0x40
 80025ba:	4313      	orrs	r3, r2
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	0019      	movs	r1, r3
 80025c0:	203b      	movs	r0, #59	; 0x3b
 80025c2:	f001 face 	bl	8003b62 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	203b      	movs	r0, #59	; 0x3b
 80025ca:	f001 fade 	bl	8003b8a <SX1276Read>
 80025ce:	0003      	movs	r3, r0
 80025d0:	001a      	movs	r2, r3
 80025d2:	2320      	movs	r3, #32
 80025d4:	4013      	ands	r3, r2
 80025d6:	2b20      	cmp	r3, #32
 80025d8:	d0f6      	beq.n	80025c8 <RxChainCalibration+0xb0>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 80025da:	2317      	movs	r3, #23
 80025dc:	18fb      	adds	r3, r7, r3
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	0019      	movs	r1, r3
 80025e2:	2009      	movs	r0, #9
 80025e4:	f001 fabd 	bl	8003b62 <SX1276Write>
    SX1276SetChannel( initialFreq );
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	0018      	movs	r0, r3
 80025ec:	f7ff fee6 	bl	80023bc <SX1276SetChannel>
}
 80025f0:	46c0      	nop			; (mov r8, r8)
 80025f2:	46bd      	mov	sp, r7
 80025f4:	b007      	add	sp, #28
 80025f6:	bd90      	pop	{r4, r7, pc}
 80025f8:	00003d09 	.word	0x00003d09
 80025fc:	33bca100 	.word	0x33bca100

08002600 <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8002608:	230f      	movs	r3, #15
 800260a:	18fb      	adds	r3, r7, r3
 800260c:	2200      	movs	r2, #0
 800260e:	701a      	strb	r2, [r3, #0]
 8002610:	e022      	b.n	8002658 <GetFskBandwidthRegValue+0x58>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8002612:	230f      	movs	r3, #15
 8002614:	18fb      	adds	r3, r7, r3
 8002616:	781a      	ldrb	r2, [r3, #0]
 8002618:	4b14      	ldr	r3, [pc, #80]	; (800266c <GetFskBandwidthRegValue+0x6c>)
 800261a:	00d2      	lsls	r2, r2, #3
 800261c:	58d2      	ldr	r2, [r2, r3]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	429a      	cmp	r2, r3
 8002622:	d812      	bhi.n	800264a <GetFskBandwidthRegValue+0x4a>
 8002624:	230f      	movs	r3, #15
 8002626:	18fb      	adds	r3, r7, r3
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	4b0f      	ldr	r3, [pc, #60]	; (800266c <GetFskBandwidthRegValue+0x6c>)
 800262e:	00d2      	lsls	r2, r2, #3
 8002630:	58d2      	ldr	r2, [r2, r3]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	429a      	cmp	r2, r3
 8002636:	d908      	bls.n	800264a <GetFskBandwidthRegValue+0x4a>
        {
            return FskBandwidths[i].RegValue;
 8002638:	230f      	movs	r3, #15
 800263a:	18fb      	adds	r3, r7, r3
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	4a0b      	ldr	r2, [pc, #44]	; (800266c <GetFskBandwidthRegValue+0x6c>)
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	18d3      	adds	r3, r2, r3
 8002644:	3304      	adds	r3, #4
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	e00c      	b.n	8002664 <GetFskBandwidthRegValue+0x64>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800264a:	230f      	movs	r3, #15
 800264c:	18fb      	adds	r3, r7, r3
 800264e:	781a      	ldrb	r2, [r3, #0]
 8002650:	230f      	movs	r3, #15
 8002652:	18fb      	adds	r3, r7, r3
 8002654:	3201      	adds	r2, #1
 8002656:	701a      	strb	r2, [r3, #0]
 8002658:	230f      	movs	r3, #15
 800265a:	18fb      	adds	r3, r7, r3
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b14      	cmp	r3, #20
 8002660:	d9d7      	bls.n	8002612 <GetFskBandwidthRegValue+0x12>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8002662:	e7fe      	b.n	8002662 <GetFskBandwidthRegValue+0x62>
}
 8002664:	0018      	movs	r0, r3
 8002666:	46bd      	mov	sp, r7
 8002668:	b004      	add	sp, #16
 800266a:	bd80      	pop	{r7, pc}
 800266c:	0800ab18 	.word	0x0800ab18

08002670 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 8002670:	b590      	push	{r4, r7, lr}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	60b9      	str	r1, [r7, #8]
 8002678:	607a      	str	r2, [r7, #4]
 800267a:	0019      	movs	r1, r3
 800267c:	230f      	movs	r3, #15
 800267e:	18fb      	adds	r3, r7, r3
 8002680:	1c02      	adds	r2, r0, #0
 8002682:	701a      	strb	r2, [r3, #0]
 8002684:	230e      	movs	r3, #14
 8002686:	18fb      	adds	r3, r7, r3
 8002688:	1c0a      	adds	r2, r1, #0
 800268a:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 800268c:	230f      	movs	r3, #15
 800268e:	18fb      	adds	r3, r7, r3
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	0018      	movs	r0, r3
 8002694:	f001 fa06 	bl	8003aa4 <SX1276SetModem>

    switch( modem )
 8002698:	230f      	movs	r3, #15
 800269a:	18fb      	adds	r3, r7, r3
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <SX1276SetRxConfig+0x3a>
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d100      	bne.n	80026a8 <SX1276SetRxConfig+0x38>
 80026a6:	e0b4      	b.n	8002812 <SX1276SetRxConfig+0x1a2>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 80026a8:	e201      	b.n	8002aae <SX1276SetRxConfig+0x43e>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80026aa:	4be5      	ldr	r3, [pc, #916]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 80026b0:	4be3      	ldr	r3, [pc, #908]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 80026b6:	4be2      	ldr	r3, [pc, #904]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 80026b8:	6a3a      	ldr	r2, [r7, #32]
 80026ba:	619a      	str	r2, [r3, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 80026bc:	4be0      	ldr	r3, [pc, #896]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 80026be:	222c      	movs	r2, #44	; 0x2c
 80026c0:	18ba      	adds	r2, r7, r2
 80026c2:	2122      	movs	r1, #34	; 0x22
 80026c4:	7812      	ldrb	r2, [r2, #0]
 80026c6:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 80026c8:	4bdd      	ldr	r3, [pc, #884]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 80026ca:	2230      	movs	r2, #48	; 0x30
 80026cc:	18ba      	adds	r2, r7, r2
 80026ce:	2123      	movs	r1, #35	; 0x23
 80026d0:	7812      	ldrb	r2, [r2, #0]
 80026d2:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 80026d4:	4bda      	ldr	r3, [pc, #872]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 80026d6:	2234      	movs	r2, #52	; 0x34
 80026d8:	18ba      	adds	r2, r7, r2
 80026da:	2124      	movs	r1, #36	; 0x24
 80026dc:	7812      	ldrb	r2, [r2, #0]
 80026de:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 80026e0:	4bd7      	ldr	r3, [pc, #860]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 80026e2:	2220      	movs	r2, #32
 80026e4:	2120      	movs	r1, #32
 80026e6:	468c      	mov	ip, r1
 80026e8:	44bc      	add	ip, r7
 80026ea:	4462      	add	r2, ip
 80026ec:	2125      	movs	r1, #37	; 0x25
 80026ee:	7812      	ldrb	r2, [r2, #0]
 80026f0:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 80026f2:	4bd3      	ldr	r3, [pc, #844]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 80026f4:	2224      	movs	r2, #36	; 0x24
 80026f6:	2120      	movs	r1, #32
 80026f8:	468c      	mov	ip, r1
 80026fa:	44bc      	add	ip, r7
 80026fc:	4462      	add	r2, ip
 80026fe:	2126      	movs	r1, #38	; 0x26
 8002700:	7812      	ldrb	r2, [r2, #0]
 8002702:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8002704:	4bce      	ldr	r3, [pc, #824]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 8002706:	2224      	movs	r2, #36	; 0x24
 8002708:	18ba      	adds	r2, r7, r2
 800270a:	8812      	ldrh	r2, [r2, #0]
 800270c:	841a      	strh	r2, [r3, #32]
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7ff fcfc 	bl	800210c <__aeabi_ui2d>
 8002714:	0003      	movs	r3, r0
 8002716:	000c      	movs	r4, r1
 8002718:	001a      	movs	r2, r3
 800271a:	0023      	movs	r3, r4
 800271c:	2000      	movs	r0, #0
 800271e:	49c9      	ldr	r1, [pc, #804]	; (8002a44 <SX1276SetRxConfig+0x3d4>)
 8002720:	f7fe fab4 	bl	8000c8c <__aeabi_ddiv>
 8002724:	0003      	movs	r3, r0
 8002726:	000c      	movs	r4, r1
 8002728:	0018      	movs	r0, r3
 800272a:	0021      	movs	r1, r4
 800272c:	f7fd fec0 	bl	80004b0 <__aeabi_d2uiz>
 8002730:	0003      	movs	r3, r0
 8002732:	b29b      	uxth	r3, r3
 8002734:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	0a1b      	lsrs	r3, r3, #8
 800273a:	b2db      	uxtb	r3, r3
 800273c:	0019      	movs	r1, r3
 800273e:	2002      	movs	r0, #2
 8002740:	f001 fa0f 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	b2db      	uxtb	r3, r3
 8002748:	0019      	movs	r1, r3
 800274a:	2003      	movs	r0, #3
 800274c:	f001 fa09 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	0018      	movs	r0, r3
 8002754:	f7ff ff54 	bl	8002600 <GetFskBandwidthRegValue>
 8002758:	0003      	movs	r3, r0
 800275a:	0019      	movs	r1, r3
 800275c:	2012      	movs	r0, #18
 800275e:	f001 fa00 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	0018      	movs	r0, r3
 8002766:	f7ff ff4b 	bl	8002600 <GetFskBandwidthRegValue>
 800276a:	0003      	movs	r3, r0
 800276c:	0019      	movs	r1, r3
 800276e:	2013      	movs	r0, #19
 8002770:	f001 f9f7 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8002774:	2324      	movs	r3, #36	; 0x24
 8002776:	18fb      	adds	r3, r7, r3
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	0a1b      	lsrs	r3, r3, #8
 800277c:	b29b      	uxth	r3, r3
 800277e:	b2db      	uxtb	r3, r3
 8002780:	0019      	movs	r1, r3
 8002782:	2025      	movs	r0, #37	; 0x25
 8002784:	f001 f9ed 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8002788:	2324      	movs	r3, #36	; 0x24
 800278a:	18fb      	adds	r3, r7, r3
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	b2db      	uxtb	r3, r3
 8002790:	0019      	movs	r1, r3
 8002792:	2026      	movs	r0, #38	; 0x26
 8002794:	f001 f9e5 	bl	8003b62 <SX1276Write>
            if( fixLen == 1 )
 8002798:	232c      	movs	r3, #44	; 0x2c
 800279a:	18fb      	adds	r3, r7, r3
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d007      	beq.n	80027b2 <SX1276SetRxConfig+0x142>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 80027a2:	2330      	movs	r3, #48	; 0x30
 80027a4:	18fb      	adds	r3, r7, r3
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	0019      	movs	r1, r3
 80027aa:	2032      	movs	r0, #50	; 0x32
 80027ac:	f001 f9d9 	bl	8003b62 <SX1276Write>
 80027b0:	e003      	b.n	80027ba <SX1276SetRxConfig+0x14a>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 80027b2:	21ff      	movs	r1, #255	; 0xff
 80027b4:	2032      	movs	r0, #50	; 0x32
 80027b6:	f001 f9d4 	bl	8003b62 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 80027ba:	2030      	movs	r0, #48	; 0x30
 80027bc:	f001 f9e5 	bl	8003b8a <SX1276Read>
 80027c0:	0003      	movs	r3, r0
 80027c2:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 80027c4:	226f      	movs	r2, #111	; 0x6f
 80027c6:	4013      	ands	r3, r2
 80027c8:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 80027ca:	232c      	movs	r3, #44	; 0x2c
 80027cc:	18fb      	adds	r3, r7, r3
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <SX1276SetRxConfig+0x168>
 80027d4:	2300      	movs	r3, #0
 80027d6:	e001      	b.n	80027dc <SX1276SetRxConfig+0x16c>
 80027d8:	2380      	movs	r3, #128	; 0x80
 80027da:	425b      	negs	r3, r3
 80027dc:	4313      	orrs	r3, r2
 80027de:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 80027e0:	2334      	movs	r3, #52	; 0x34
 80027e2:	18fb      	adds	r3, r7, r3
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 80027e8:	b25b      	sxtb	r3, r3
 80027ea:	4313      	orrs	r3, r2
 80027ec:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	0019      	movs	r1, r3
 80027f2:	2030      	movs	r0, #48	; 0x30
 80027f4:	f001 f9b5 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 80027f8:	2031      	movs	r0, #49	; 0x31
 80027fa:	f001 f9c6 	bl	8003b8a <SX1276Read>
 80027fe:	0003      	movs	r3, r0
 8002800:	001a      	movs	r2, r3
 8002802:	2340      	movs	r3, #64	; 0x40
 8002804:	4313      	orrs	r3, r2
 8002806:	b2db      	uxtb	r3, r3
 8002808:	0019      	movs	r1, r3
 800280a:	2031      	movs	r0, #49	; 0x31
 800280c:	f001 f9a9 	bl	8003b62 <SX1276Write>
        break;
 8002810:	e14d      	b.n	8002aae <SX1276SetRxConfig+0x43e>
            if( bandwidth > 2 )
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2b02      	cmp	r3, #2
 8002816:	d900      	bls.n	800281a <SX1276SetRxConfig+0x1aa>
                while( 1 );
 8002818:	e7fe      	b.n	8002818 <SX1276SetRxConfig+0x1a8>
            bandwidth += 7;
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	3307      	adds	r3, #7
 800281e:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8002820:	4b87      	ldr	r3, [pc, #540]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	641a      	str	r2, [r3, #64]	; 0x40
            SX1276.Settings.LoRa.Datarate = datarate;
 8002826:	4b86      	ldr	r3, [pc, #536]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Coderate = coderate;
 800282c:	4b84      	ldr	r3, [pc, #528]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 800282e:	220e      	movs	r2, #14
 8002830:	18ba      	adds	r2, r7, r2
 8002832:	2149      	movs	r1, #73	; 0x49
 8002834:	7812      	ldrb	r2, [r2, #0]
 8002836:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8002838:	4b81      	ldr	r3, [pc, #516]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 800283a:	2224      	movs	r2, #36	; 0x24
 800283c:	18ba      	adds	r2, r7, r2
 800283e:	214a      	movs	r1, #74	; 0x4a
 8002840:	8812      	ldrh	r2, [r2, #0]
 8002842:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8002844:	4b7e      	ldr	r3, [pc, #504]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 8002846:	222c      	movs	r2, #44	; 0x2c
 8002848:	18ba      	adds	r2, r7, r2
 800284a:	214c      	movs	r1, #76	; 0x4c
 800284c:	7812      	ldrb	r2, [r2, #0]
 800284e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8002850:	4b7b      	ldr	r3, [pc, #492]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 8002852:	2230      	movs	r2, #48	; 0x30
 8002854:	18ba      	adds	r2, r7, r2
 8002856:	214d      	movs	r1, #77	; 0x4d
 8002858:	7812      	ldrb	r2, [r2, #0]
 800285a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800285c:	4b78      	ldr	r3, [pc, #480]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 800285e:	2234      	movs	r2, #52	; 0x34
 8002860:	18ba      	adds	r2, r7, r2
 8002862:	214e      	movs	r1, #78	; 0x4e
 8002864:	7812      	ldrb	r2, [r2, #0]
 8002866:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8002868:	4b75      	ldr	r3, [pc, #468]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 800286a:	2238      	movs	r2, #56	; 0x38
 800286c:	18ba      	adds	r2, r7, r2
 800286e:	214f      	movs	r1, #79	; 0x4f
 8002870:	7812      	ldrb	r2, [r2, #0]
 8002872:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8002874:	4b72      	ldr	r3, [pc, #456]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 8002876:	223c      	movs	r2, #60	; 0x3c
 8002878:	18ba      	adds	r2, r7, r2
 800287a:	2150      	movs	r1, #80	; 0x50
 800287c:	7812      	ldrb	r2, [r2, #0]
 800287e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8002880:	4b6f      	ldr	r3, [pc, #444]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 8002882:	2220      	movs	r2, #32
 8002884:	2120      	movs	r1, #32
 8002886:	468c      	mov	ip, r1
 8002888:	44bc      	add	ip, r7
 800288a:	4462      	add	r2, ip
 800288c:	2151      	movs	r1, #81	; 0x51
 800288e:	7812      	ldrb	r2, [r2, #0]
 8002890:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8002892:	4b6b      	ldr	r3, [pc, #428]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 8002894:	2224      	movs	r2, #36	; 0x24
 8002896:	2120      	movs	r1, #32
 8002898:	468c      	mov	ip, r1
 800289a:	44bc      	add	ip, r7
 800289c:	4462      	add	r2, ip
 800289e:	2152      	movs	r1, #82	; 0x52
 80028a0:	7812      	ldrb	r2, [r2, #0]
 80028a2:	545a      	strb	r2, [r3, r1]
            if( datarate > 12 )
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b0c      	cmp	r3, #12
 80028a8:	d902      	bls.n	80028b0 <SX1276SetRxConfig+0x240>
                datarate = 12;
 80028aa:	230c      	movs	r3, #12
 80028ac:	607b      	str	r3, [r7, #4]
 80028ae:	e004      	b.n	80028ba <SX1276SetRxConfig+0x24a>
            else if( datarate < 6 )
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b05      	cmp	r3, #5
 80028b4:	d801      	bhi.n	80028ba <SX1276SetRxConfig+0x24a>
                datarate = 6;
 80028b6:	2306      	movs	r3, #6
 80028b8:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	2b07      	cmp	r3, #7
 80028be:	d105      	bne.n	80028cc <SX1276SetRxConfig+0x25c>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b0b      	cmp	r3, #11
 80028c4:	d008      	beq.n	80028d8 <SX1276SetRxConfig+0x268>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b0c      	cmp	r3, #12
 80028ca:	d005      	beq.n	80028d8 <SX1276SetRxConfig+0x268>
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d107      	bne.n	80028e2 <SX1276SetRxConfig+0x272>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b0c      	cmp	r3, #12
 80028d6:	d104      	bne.n	80028e2 <SX1276SetRxConfig+0x272>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 80028d8:	4b59      	ldr	r3, [pc, #356]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 80028da:	2248      	movs	r2, #72	; 0x48
 80028dc:	2101      	movs	r1, #1
 80028de:	5499      	strb	r1, [r3, r2]
 80028e0:	e003      	b.n	80028ea <SX1276SetRxConfig+0x27a>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80028e2:	4b57      	ldr	r3, [pc, #348]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 80028e4:	2248      	movs	r2, #72	; 0x48
 80028e6:	2100      	movs	r1, #0
 80028e8:	5499      	strb	r1, [r3, r2]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80028ea:	201d      	movs	r0, #29
 80028ec:	f001 f94d 	bl	8003b8a <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	011b      	lsls	r3, r3, #4
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	230e      	movs	r3, #14
 80028fa:	18fb      	adds	r3, r7, r3
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	18db      	adds	r3, r3, r3
 8002900:	b2db      	uxtb	r3, r3
 8002902:	4313      	orrs	r3, r2
 8002904:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8002906:	232c      	movs	r3, #44	; 0x2c
 8002908:	18fb      	adds	r3, r7, r3
 800290a:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800290c:	4313      	orrs	r3, r2
 800290e:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8002910:	0019      	movs	r1, r3
 8002912:	201d      	movs	r0, #29
 8002914:	f001 f925 	bl	8003b62 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8002918:	201e      	movs	r0, #30
 800291a:	f001 f936 	bl	8003b8a <SX1276Read>
 800291e:	0003      	movs	r3, r0
 8002920:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8002922:	2308      	movs	r3, #8
 8002924:	4013      	ands	r3, r2
 8002926:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	b2db      	uxtb	r3, r3
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 8002930:	4313      	orrs	r3, r2
 8002932:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8002934:	2334      	movs	r3, #52	; 0x34
 8002936:	18fb      	adds	r3, r7, r3
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	b2db      	uxtb	r3, r3
 800293e:	4313      	orrs	r3, r2
 8002940:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8002942:	2328      	movs	r3, #40	; 0x28
 8002944:	18fb      	adds	r3, r7, r3
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	0a1b      	lsrs	r3, r3, #8
 800294a:	b29b      	uxth	r3, r3
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2103      	movs	r1, #3
 8002950:	400b      	ands	r3, r1
 8002952:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8002954:	4313      	orrs	r3, r2
 8002956:	b2db      	uxtb	r3, r3
 8002958:	0019      	movs	r1, r3
 800295a:	201e      	movs	r0, #30
 800295c:	f001 f901 	bl	8003b62 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8002960:	2026      	movs	r0, #38	; 0x26
 8002962:	f001 f912 	bl	8003b8a <SX1276Read>
 8002966:	0003      	movs	r3, r0
 8002968:	b25b      	sxtb	r3, r3
 800296a:	2208      	movs	r2, #8
 800296c:	4393      	bics	r3, r2
 800296e:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8002970:	4b33      	ldr	r3, [pc, #204]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 8002972:	2148      	movs	r1, #72	; 0x48
 8002974:	5c5b      	ldrb	r3, [r3, r1]
 8002976:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8002978:	b25b      	sxtb	r3, r3
 800297a:	4313      	orrs	r3, r2
 800297c:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 800297e:	b2db      	uxtb	r3, r3
 8002980:	0019      	movs	r1, r3
 8002982:	2026      	movs	r0, #38	; 0x26
 8002984:	f001 f8ed 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8002988:	2328      	movs	r3, #40	; 0x28
 800298a:	18fb      	adds	r3, r7, r3
 800298c:	881b      	ldrh	r3, [r3, #0]
 800298e:	b2db      	uxtb	r3, r3
 8002990:	0019      	movs	r1, r3
 8002992:	201f      	movs	r0, #31
 8002994:	f001 f8e5 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8002998:	2324      	movs	r3, #36	; 0x24
 800299a:	18fb      	adds	r3, r7, r3
 800299c:	881b      	ldrh	r3, [r3, #0]
 800299e:	0a1b      	lsrs	r3, r3, #8
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	0019      	movs	r1, r3
 80029a6:	2020      	movs	r0, #32
 80029a8:	f001 f8db 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 80029ac:	2324      	movs	r3, #36	; 0x24
 80029ae:	18fb      	adds	r3, r7, r3
 80029b0:	881b      	ldrh	r3, [r3, #0]
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	0019      	movs	r1, r3
 80029b6:	2021      	movs	r0, #33	; 0x21
 80029b8:	f001 f8d3 	bl	8003b62 <SX1276Write>
            if( fixLen == 1 )
 80029bc:	232c      	movs	r3, #44	; 0x2c
 80029be:	18fb      	adds	r3, r7, r3
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d006      	beq.n	80029d4 <SX1276SetRxConfig+0x364>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 80029c6:	2330      	movs	r3, #48	; 0x30
 80029c8:	18fb      	adds	r3, r7, r3
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	0019      	movs	r1, r3
 80029ce:	2022      	movs	r0, #34	; 0x22
 80029d0:	f001 f8c7 	bl	8003b62 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80029d4:	4b1a      	ldr	r3, [pc, #104]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 80029d6:	224f      	movs	r2, #79	; 0x4f
 80029d8:	5c9b      	ldrb	r3, [r3, r2]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d013      	beq.n	8002a06 <SX1276SetRxConfig+0x396>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 80029de:	2044      	movs	r0, #68	; 0x44
 80029e0:	f001 f8d3 	bl	8003b8a <SX1276Read>
 80029e4:	0003      	movs	r3, r0
 80029e6:	001a      	movs	r2, r3
 80029e8:	2380      	movs	r3, #128	; 0x80
 80029ea:	425b      	negs	r3, r3
 80029ec:	4313      	orrs	r3, r2
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	0019      	movs	r1, r3
 80029f2:	2044      	movs	r0, #68	; 0x44
 80029f4:	f001 f8b5 	bl	8003b62 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 80029f8:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 80029fa:	2250      	movs	r2, #80	; 0x50
 80029fc:	5c9b      	ldrb	r3, [r3, r2]
 80029fe:	0019      	movs	r1, r3
 8002a00:	2024      	movs	r0, #36	; 0x24
 8002a02:	f001 f8ae 	bl	8003b62 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	2b09      	cmp	r3, #9
 8002a0a:	d10d      	bne.n	8002a28 <SX1276SetRxConfig+0x3b8>
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <SX1276SetRxConfig+0x3d0>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	4a0d      	ldr	r2, [pc, #52]	; (8002a48 <SX1276SetRxConfig+0x3d8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d908      	bls.n	8002a28 <SX1276SetRxConfig+0x3b8>
                SX1276Write( REG_LR_TEST36, 0x02 );
 8002a16:	2102      	movs	r1, #2
 8002a18:	2036      	movs	r0, #54	; 0x36
 8002a1a:	f001 f8a2 	bl	8003b62 <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x64 );
 8002a1e:	2164      	movs	r1, #100	; 0x64
 8002a20:	203a      	movs	r0, #58	; 0x3a
 8002a22:	f001 f89e 	bl	8003b62 <SX1276Write>
 8002a26:	e015      	b.n	8002a54 <SX1276SetRxConfig+0x3e4>
            else if( bandwidth == 9 )
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2b09      	cmp	r3, #9
 8002a2c:	d10e      	bne.n	8002a4c <SX1276SetRxConfig+0x3dc>
                SX1276Write( REG_LR_TEST36, 0x02 );
 8002a2e:	2102      	movs	r1, #2
 8002a30:	2036      	movs	r0, #54	; 0x36
 8002a32:	f001 f896 	bl	8003b62 <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x7F );
 8002a36:	217f      	movs	r1, #127	; 0x7f
 8002a38:	203a      	movs	r0, #58	; 0x3a
 8002a3a:	f001 f892 	bl	8003b62 <SX1276Write>
 8002a3e:	e009      	b.n	8002a54 <SX1276SetRxConfig+0x3e4>
 8002a40:	20000508 	.word	0x20000508
 8002a44:	417e8480 	.word	0x417e8480
 8002a48:	1f4add40 	.word	0x1f4add40
                SX1276Write( REG_LR_TEST36, 0x03 );
 8002a4c:	2103      	movs	r1, #3
 8002a4e:	2036      	movs	r0, #54	; 0x36
 8002a50:	f001 f887 	bl	8003b62 <SX1276Write>
            if( datarate == 6 )
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b06      	cmp	r3, #6
 8002a58:	d114      	bne.n	8002a84 <SX1276SetRxConfig+0x414>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8002a5a:	2031      	movs	r0, #49	; 0x31
 8002a5c:	f001 f895 	bl	8003b8a <SX1276Read>
 8002a60:	0003      	movs	r3, r0
 8002a62:	b25b      	sxtb	r3, r3
 8002a64:	2207      	movs	r2, #7
 8002a66:	4393      	bics	r3, r2
 8002a68:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8002a6a:	2205      	movs	r2, #5
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	0019      	movs	r1, r3
 8002a74:	2031      	movs	r0, #49	; 0x31
 8002a76:	f001 f874 	bl	8003b62 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8002a7a:	210c      	movs	r1, #12
 8002a7c:	2037      	movs	r0, #55	; 0x37
 8002a7e:	f001 f870 	bl	8003b62 <SX1276Write>
        break;
 8002a82:	e013      	b.n	8002aac <SX1276SetRxConfig+0x43c>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8002a84:	2031      	movs	r0, #49	; 0x31
 8002a86:	f001 f880 	bl	8003b8a <SX1276Read>
 8002a8a:	0003      	movs	r3, r0
 8002a8c:	b25b      	sxtb	r3, r3
 8002a8e:	2207      	movs	r2, #7
 8002a90:	4393      	bics	r3, r2
 8002a92:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8002a94:	2203      	movs	r2, #3
 8002a96:	4313      	orrs	r3, r2
 8002a98:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	0019      	movs	r1, r3
 8002a9e:	2031      	movs	r0, #49	; 0x31
 8002aa0:	f001 f85f 	bl	8003b62 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8002aa4:	210a      	movs	r1, #10
 8002aa6:	2037      	movs	r0, #55	; 0x37
 8002aa8:	f001 f85b 	bl	8003b62 <SX1276Write>
        break;
 8002aac:	46c0      	nop			; (mov r8, r8)
}
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	b005      	add	sp, #20
 8002ab4:	bd90      	pop	{r4, r7, pc}
 8002ab6:	46c0      	nop			; (mov r8, r8)

08002ab8 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8002ab8:	b590      	push	{r4, r7, lr}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60ba      	str	r2, [r7, #8]
 8002ac0:	607b      	str	r3, [r7, #4]
 8002ac2:	230f      	movs	r3, #15
 8002ac4:	18fb      	adds	r3, r7, r3
 8002ac6:	1c02      	adds	r2, r0, #0
 8002ac8:	701a      	strb	r2, [r3, #0]
 8002aca:	230e      	movs	r3, #14
 8002acc:	18fb      	adds	r3, r7, r3
 8002ace:	1c0a      	adds	r2, r1, #0
 8002ad0:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 8002ad2:	230f      	movs	r3, #15
 8002ad4:	18fb      	adds	r3, r7, r3
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	0018      	movs	r0, r3
 8002ada:	f000 ffe3 	bl	8003aa4 <SX1276SetModem>

    SX1276SetRfTxPower( power );
 8002ade:	230e      	movs	r3, #14
 8002ae0:	18fb      	adds	r3, r7, r3
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	b25b      	sxtb	r3, r3
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f001 fe86 	bl	80047f8 <SX1276SetRfTxPower>

    switch( modem )
 8002aec:	230f      	movs	r3, #15
 8002aee:	18fb      	adds	r3, r7, r3
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <SX1276SetTxConfig+0x46>
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d100      	bne.n	8002afc <SX1276SetTxConfig+0x44>
 8002afa:	e0a4      	b.n	8002c46 <SX1276SetTxConfig+0x18e>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8002afc:	e1a2      	b.n	8002e44 <SX1276SetTxConfig+0x38c>
            SX1276.Settings.Fsk.Power = power;
 8002afe:	4bd3      	ldr	r3, [pc, #844]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002b00:	220e      	movs	r2, #14
 8002b02:	18ba      	adds	r2, r7, r2
 8002b04:	7812      	ldrb	r2, [r2, #0]
 8002b06:	731a      	strb	r2, [r3, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 8002b08:	4bd0      	ldr	r3, [pc, #832]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8002b0e:	4bcf      	ldr	r3, [pc, #828]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 8002b14:	4bcd      	ldr	r3, [pc, #820]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002b16:	6a3a      	ldr	r2, [r7, #32]
 8002b18:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8002b1a:	4bcc      	ldr	r3, [pc, #816]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002b1c:	2228      	movs	r2, #40	; 0x28
 8002b1e:	18ba      	adds	r2, r7, r2
 8002b20:	8812      	ldrh	r2, [r2, #0]
 8002b22:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8002b24:	4bc9      	ldr	r3, [pc, #804]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002b26:	222c      	movs	r2, #44	; 0x2c
 8002b28:	18ba      	adds	r2, r7, r2
 8002b2a:	2122      	movs	r1, #34	; 0x22
 8002b2c:	7812      	ldrb	r2, [r2, #0]
 8002b2e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8002b30:	4bc6      	ldr	r3, [pc, #792]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002b32:	2230      	movs	r2, #48	; 0x30
 8002b34:	18ba      	adds	r2, r7, r2
 8002b36:	2124      	movs	r1, #36	; 0x24
 8002b38:	7812      	ldrb	r2, [r2, #0]
 8002b3a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8002b3c:	4bc3      	ldr	r3, [pc, #780]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002b3e:	223c      	movs	r2, #60	; 0x3c
 8002b40:	18ba      	adds	r2, r7, r2
 8002b42:	2125      	movs	r1, #37	; 0x25
 8002b44:	7812      	ldrb	r2, [r2, #0]
 8002b46:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8002b48:	4bc0      	ldr	r3, [pc, #768]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002b4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b4c:	629a      	str	r2, [r3, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8002b4e:	68b8      	ldr	r0, [r7, #8]
 8002b50:	f7ff fadc 	bl	800210c <__aeabi_ui2d>
 8002b54:	2200      	movs	r2, #0
 8002b56:	4bbe      	ldr	r3, [pc, #760]	; (8002e50 <SX1276SetTxConfig+0x398>)
 8002b58:	f7fe f898 	bl	8000c8c <__aeabi_ddiv>
 8002b5c:	0003      	movs	r3, r0
 8002b5e:	000c      	movs	r4, r1
 8002b60:	0018      	movs	r0, r3
 8002b62:	0021      	movs	r1, r4
 8002b64:	f7fd fca4 	bl	80004b0 <__aeabi_d2uiz>
 8002b68:	0003      	movs	r3, r0
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	0a1b      	lsrs	r3, r3, #8
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	0019      	movs	r1, r3
 8002b76:	2004      	movs	r0, #4
 8002b78:	f000 fff3 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	0019      	movs	r1, r3
 8002b82:	2005      	movs	r0, #5
 8002b84:	f000 ffed 	bl	8003b62 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8002b88:	6a38      	ldr	r0, [r7, #32]
 8002b8a:	f7ff fabf 	bl	800210c <__aeabi_ui2d>
 8002b8e:	0003      	movs	r3, r0
 8002b90:	000c      	movs	r4, r1
 8002b92:	001a      	movs	r2, r3
 8002b94:	0023      	movs	r3, r4
 8002b96:	2000      	movs	r0, #0
 8002b98:	49ae      	ldr	r1, [pc, #696]	; (8002e54 <SX1276SetTxConfig+0x39c>)
 8002b9a:	f7fe f877 	bl	8000c8c <__aeabi_ddiv>
 8002b9e:	0003      	movs	r3, r0
 8002ba0:	000c      	movs	r4, r1
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	0021      	movs	r1, r4
 8002ba6:	f7fd fc83 	bl	80004b0 <__aeabi_d2uiz>
 8002baa:	0003      	movs	r3, r0
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	623b      	str	r3, [r7, #32]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8002bb0:	6a3b      	ldr	r3, [r7, #32]
 8002bb2:	0a1b      	lsrs	r3, r3, #8
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	0019      	movs	r1, r3
 8002bb8:	2002      	movs	r0, #2
 8002bba:	f000 ffd2 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8002bbe:	6a3b      	ldr	r3, [r7, #32]
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	0019      	movs	r1, r3
 8002bc4:	2003      	movs	r0, #3
 8002bc6:	f000 ffcc 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8002bca:	2328      	movs	r3, #40	; 0x28
 8002bcc:	18fb      	adds	r3, r7, r3
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	0a1b      	lsrs	r3, r3, #8
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	0019      	movs	r1, r3
 8002bd8:	2025      	movs	r0, #37	; 0x25
 8002bda:	f000 ffc2 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8002bde:	2328      	movs	r3, #40	; 0x28
 8002be0:	18fb      	adds	r3, r7, r3
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	0019      	movs	r1, r3
 8002be8:	2026      	movs	r0, #38	; 0x26
 8002bea:	f000 ffba 	bl	8003b62 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8002bee:	2030      	movs	r0, #48	; 0x30
 8002bf0:	f000 ffcb 	bl	8003b8a <SX1276Read>
 8002bf4:	0003      	movs	r3, r0
 8002bf6:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8002bf8:	226f      	movs	r2, #111	; 0x6f
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8002bfe:	232c      	movs	r3, #44	; 0x2c
 8002c00:	18fb      	adds	r3, r7, r3
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <SX1276SetTxConfig+0x154>
 8002c08:	2300      	movs	r3, #0
 8002c0a:	e001      	b.n	8002c10 <SX1276SetTxConfig+0x158>
 8002c0c:	2380      	movs	r3, #128	; 0x80
 8002c0e:	425b      	negs	r3, r3
 8002c10:	4313      	orrs	r3, r2
 8002c12:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8002c14:	2330      	movs	r3, #48	; 0x30
 8002c16:	18fb      	adds	r3, r7, r3
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8002c1c:	b25b      	sxtb	r3, r3
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	0019      	movs	r1, r3
 8002c26:	2030      	movs	r0, #48	; 0x30
 8002c28:	f000 ff9b 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8002c2c:	2031      	movs	r0, #49	; 0x31
 8002c2e:	f000 ffac 	bl	8003b8a <SX1276Read>
 8002c32:	0003      	movs	r3, r0
 8002c34:	001a      	movs	r2, r3
 8002c36:	2340      	movs	r3, #64	; 0x40
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	0019      	movs	r1, r3
 8002c3e:	2031      	movs	r0, #49	; 0x31
 8002c40:	f000 ff8f 	bl	8003b62 <SX1276Write>
        break;
 8002c44:	e0fe      	b.n	8002e44 <SX1276SetTxConfig+0x38c>
            SX1276.Settings.LoRa.Power = power;
 8002c46:	4b81      	ldr	r3, [pc, #516]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002c48:	220e      	movs	r2, #14
 8002c4a:	18ba      	adds	r2, r7, r2
 8002c4c:	213c      	movs	r1, #60	; 0x3c
 8002c4e:	7812      	ldrb	r2, [r2, #0]
 8002c50:	545a      	strb	r2, [r3, r1]
            if( bandwidth > 2 )
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d900      	bls.n	8002c5a <SX1276SetTxConfig+0x1a2>
                while( 1 );
 8002c58:	e7fe      	b.n	8002c58 <SX1276SetTxConfig+0x1a0>
            bandwidth += 7;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3307      	adds	r3, #7
 8002c5e:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8002c60:	4b7a      	ldr	r3, [pc, #488]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	641a      	str	r2, [r3, #64]	; 0x40
            SX1276.Settings.LoRa.Datarate = datarate;
 8002c66:	4b79      	ldr	r3, [pc, #484]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002c68:	6a3a      	ldr	r2, [r7, #32]
 8002c6a:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Coderate = coderate;
 8002c6c:	4b77      	ldr	r3, [pc, #476]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002c6e:	2224      	movs	r2, #36	; 0x24
 8002c70:	18ba      	adds	r2, r7, r2
 8002c72:	2149      	movs	r1, #73	; 0x49
 8002c74:	7812      	ldrb	r2, [r2, #0]
 8002c76:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8002c78:	4b74      	ldr	r3, [pc, #464]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002c7a:	2228      	movs	r2, #40	; 0x28
 8002c7c:	18ba      	adds	r2, r7, r2
 8002c7e:	214a      	movs	r1, #74	; 0x4a
 8002c80:	8812      	ldrh	r2, [r2, #0]
 8002c82:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8002c84:	4b71      	ldr	r3, [pc, #452]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002c86:	222c      	movs	r2, #44	; 0x2c
 8002c88:	18ba      	adds	r2, r7, r2
 8002c8a:	214c      	movs	r1, #76	; 0x4c
 8002c8c:	7812      	ldrb	r2, [r2, #0]
 8002c8e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8002c90:	4b6e      	ldr	r3, [pc, #440]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002c92:	2234      	movs	r2, #52	; 0x34
 8002c94:	18ba      	adds	r2, r7, r2
 8002c96:	214f      	movs	r1, #79	; 0x4f
 8002c98:	7812      	ldrb	r2, [r2, #0]
 8002c9a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8002c9c:	4b6b      	ldr	r3, [pc, #428]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002c9e:	2238      	movs	r2, #56	; 0x38
 8002ca0:	18ba      	adds	r2, r7, r2
 8002ca2:	2150      	movs	r1, #80	; 0x50
 8002ca4:	7812      	ldrb	r2, [r2, #0]
 8002ca6:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8002ca8:	4b68      	ldr	r3, [pc, #416]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002caa:	2230      	movs	r2, #48	; 0x30
 8002cac:	18ba      	adds	r2, r7, r2
 8002cae:	214e      	movs	r1, #78	; 0x4e
 8002cb0:	7812      	ldrb	r2, [r2, #0]
 8002cb2:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8002cb4:	4b65      	ldr	r3, [pc, #404]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002cb6:	223c      	movs	r2, #60	; 0x3c
 8002cb8:	18ba      	adds	r2, r7, r2
 8002cba:	2151      	movs	r1, #81	; 0x51
 8002cbc:	7812      	ldrb	r2, [r2, #0]
 8002cbe:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8002cc0:	4b62      	ldr	r3, [pc, #392]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002cc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002cc4:	655a      	str	r2, [r3, #84]	; 0x54
            if( datarate > 12 )
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	2b0c      	cmp	r3, #12
 8002cca:	d902      	bls.n	8002cd2 <SX1276SetTxConfig+0x21a>
                datarate = 12;
 8002ccc:	230c      	movs	r3, #12
 8002cce:	623b      	str	r3, [r7, #32]
 8002cd0:	e004      	b.n	8002cdc <SX1276SetTxConfig+0x224>
            else if( datarate < 6 )
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	2b05      	cmp	r3, #5
 8002cd6:	d801      	bhi.n	8002cdc <SX1276SetTxConfig+0x224>
                datarate = 6;
 8002cd8:	2306      	movs	r3, #6
 8002cda:	623b      	str	r3, [r7, #32]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b07      	cmp	r3, #7
 8002ce0:	d105      	bne.n	8002cee <SX1276SetTxConfig+0x236>
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	2b0b      	cmp	r3, #11
 8002ce6:	d008      	beq.n	8002cfa <SX1276SetTxConfig+0x242>
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	2b0c      	cmp	r3, #12
 8002cec:	d005      	beq.n	8002cfa <SX1276SetTxConfig+0x242>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d107      	bne.n	8002d04 <SX1276SetTxConfig+0x24c>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	2b0c      	cmp	r3, #12
 8002cf8:	d104      	bne.n	8002d04 <SX1276SetTxConfig+0x24c>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8002cfa:	4b54      	ldr	r3, [pc, #336]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002cfc:	2248      	movs	r2, #72	; 0x48
 8002cfe:	2101      	movs	r1, #1
 8002d00:	5499      	strb	r1, [r3, r2]
 8002d02:	e003      	b.n	8002d0c <SX1276SetTxConfig+0x254>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8002d04:	4b51      	ldr	r3, [pc, #324]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002d06:	2248      	movs	r2, #72	; 0x48
 8002d08:	2100      	movs	r1, #0
 8002d0a:	5499      	strb	r1, [r3, r2]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8002d0c:	4b4f      	ldr	r3, [pc, #316]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002d0e:	224f      	movs	r2, #79	; 0x4f
 8002d10:	5c9b      	ldrb	r3, [r3, r2]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d013      	beq.n	8002d3e <SX1276SetTxConfig+0x286>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8002d16:	2044      	movs	r0, #68	; 0x44
 8002d18:	f000 ff37 	bl	8003b8a <SX1276Read>
 8002d1c:	0003      	movs	r3, r0
 8002d1e:	001a      	movs	r2, r3
 8002d20:	2380      	movs	r3, #128	; 0x80
 8002d22:	425b      	negs	r3, r3
 8002d24:	4313      	orrs	r3, r2
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	0019      	movs	r1, r3
 8002d2a:	2044      	movs	r0, #68	; 0x44
 8002d2c:	f000 ff19 	bl	8003b62 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8002d30:	4b46      	ldr	r3, [pc, #280]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002d32:	2250      	movs	r2, #80	; 0x50
 8002d34:	5c9b      	ldrb	r3, [r3, r2]
 8002d36:	0019      	movs	r1, r3
 8002d38:	2024      	movs	r0, #36	; 0x24
 8002d3a:	f000 ff12 	bl	8003b62 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8002d3e:	201d      	movs	r0, #29
 8002d40:	f000 ff23 	bl	8003b8a <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	011b      	lsls	r3, r3, #4
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	2324      	movs	r3, #36	; 0x24
 8002d4e:	18fb      	adds	r3, r7, r3
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	18db      	adds	r3, r3, r3
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	4313      	orrs	r3, r2
 8002d58:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8002d5a:	232c      	movs	r3, #44	; 0x2c
 8002d5c:	18fb      	adds	r3, r7, r3
 8002d5e:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8002d60:	4313      	orrs	r3, r2
 8002d62:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8002d64:	0019      	movs	r1, r3
 8002d66:	201d      	movs	r0, #29
 8002d68:	f000 fefb 	bl	8003b62 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8002d6c:	201e      	movs	r0, #30
 8002d6e:	f000 ff0c 	bl	8003b8a <SX1276Read>
 8002d72:	0003      	movs	r3, r0
 8002d74:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 8002d76:	230b      	movs	r3, #11
 8002d78:	4013      	ands	r3, r2
 8002d7a:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 8002d84:	4313      	orrs	r3, r2
 8002d86:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8002d88:	2330      	movs	r3, #48	; 0x30
 8002d8a:	18fb      	adds	r3, r7, r3
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8002d92:	4313      	orrs	r3, r2
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	0019      	movs	r1, r3
 8002d98:	201e      	movs	r0, #30
 8002d9a:	f000 fee2 	bl	8003b62 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8002d9e:	2026      	movs	r0, #38	; 0x26
 8002da0:	f000 fef3 	bl	8003b8a <SX1276Read>
 8002da4:	0003      	movs	r3, r0
 8002da6:	b25b      	sxtb	r3, r3
 8002da8:	2208      	movs	r2, #8
 8002daa:	4393      	bics	r3, r2
 8002dac:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8002dae:	4b27      	ldr	r3, [pc, #156]	; (8002e4c <SX1276SetTxConfig+0x394>)
 8002db0:	2148      	movs	r1, #72	; 0x48
 8002db2:	5c5b      	ldrb	r3, [r3, r1]
 8002db4:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8002db6:	b25b      	sxtb	r3, r3
 8002db8:	4313      	orrs	r3, r2
 8002dba:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	0019      	movs	r1, r3
 8002dc0:	2026      	movs	r0, #38	; 0x26
 8002dc2:	f000 fece 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8002dc6:	2328      	movs	r3, #40	; 0x28
 8002dc8:	18fb      	adds	r3, r7, r3
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	0a1b      	lsrs	r3, r3, #8
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	0019      	movs	r1, r3
 8002dd4:	2020      	movs	r0, #32
 8002dd6:	f000 fec4 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8002dda:	2328      	movs	r3, #40	; 0x28
 8002ddc:	18fb      	adds	r3, r7, r3
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	0019      	movs	r1, r3
 8002de4:	2021      	movs	r0, #33	; 0x21
 8002de6:	f000 febc 	bl	8003b62 <SX1276Write>
            if( datarate == 6 )
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	2b06      	cmp	r3, #6
 8002dee:	d114      	bne.n	8002e1a <SX1276SetTxConfig+0x362>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8002df0:	2031      	movs	r0, #49	; 0x31
 8002df2:	f000 feca 	bl	8003b8a <SX1276Read>
 8002df6:	0003      	movs	r3, r0
 8002df8:	b25b      	sxtb	r3, r3
 8002dfa:	2207      	movs	r2, #7
 8002dfc:	4393      	bics	r3, r2
 8002dfe:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8002e00:	2205      	movs	r2, #5
 8002e02:	4313      	orrs	r3, r2
 8002e04:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	0019      	movs	r1, r3
 8002e0a:	2031      	movs	r0, #49	; 0x31
 8002e0c:	f000 fea9 	bl	8003b62 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8002e10:	210c      	movs	r1, #12
 8002e12:	2037      	movs	r0, #55	; 0x37
 8002e14:	f000 fea5 	bl	8003b62 <SX1276Write>
        break;
 8002e18:	e013      	b.n	8002e42 <SX1276SetTxConfig+0x38a>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8002e1a:	2031      	movs	r0, #49	; 0x31
 8002e1c:	f000 feb5 	bl	8003b8a <SX1276Read>
 8002e20:	0003      	movs	r3, r0
 8002e22:	b25b      	sxtb	r3, r3
 8002e24:	2207      	movs	r2, #7
 8002e26:	4393      	bics	r3, r2
 8002e28:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8002e2a:	2203      	movs	r2, #3
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	0019      	movs	r1, r3
 8002e34:	2031      	movs	r0, #49	; 0x31
 8002e36:	f000 fe94 	bl	8003b62 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8002e3a:	210a      	movs	r1, #10
 8002e3c:	2037      	movs	r0, #55	; 0x37
 8002e3e:	f000 fe90 	bl	8003b62 <SX1276Write>
        break;
 8002e42:	46c0      	nop			; (mov r8, r8)
}
 8002e44:	46c0      	nop			; (mov r8, r8)
 8002e46:	46bd      	mov	sp, r7
 8002e48:	b005      	add	sp, #20
 8002e4a:	bd90      	pop	{r4, r7, pc}
 8002e4c:	20000508 	.word	0x20000508
 8002e50:	404e8480 	.word	0x404e8480
 8002e54:	417e8480 	.word	0x417e8480

08002e58 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
 8002e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e5a:	b095      	sub	sp, #84	; 0x54
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	0002      	movs	r2, r0
 8002e60:	1dfb      	adds	r3, r7, #7
 8002e62:	701a      	strb	r2, [r3, #0]
 8002e64:	1dbb      	adds	r3, r7, #6
 8002e66:	1c0a      	adds	r2, r1, #0
 8002e68:	701a      	strb	r2, [r3, #0]
    double airTime = 0;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	2400      	movs	r4, #0
 8002e6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e70:	64fc      	str	r4, [r7, #76]	; 0x4c

    switch( modem )
 8002e72:	1dfb      	adds	r3, r7, #7
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <SX1276GetTimeOnAir+0x2a>
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d100      	bne.n	8002e80 <SX1276GetTimeOnAir+0x28>
 8002e7e:	e082      	b.n	8002f86 <SX1276GetTimeOnAir+0x12e>
 8002e80:	e15c      	b.n	800313c <SX1276GetTimeOnAir+0x2e4>
    {
    case MODEM_FSK:
        {
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002e82:	4bb3      	ldr	r3, [pc, #716]	; (8003150 <SX1276GetTimeOnAir+0x2f8>)
 8002e84:	8c1b      	ldrh	r3, [r3, #32]
 8002e86:	001c      	movs	r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8002e88:	2027      	movs	r0, #39	; 0x27
 8002e8a:	f000 fe7e 	bl	8003b8a <SX1276Read>
 8002e8e:	0003      	movs	r3, r0
 8002e90:	001a      	movs	r2, r3
 8002e92:	23f8      	movs	r3, #248	; 0xf8
 8002e94:	439a      	bics	r2, r3
 8002e96:	0013      	movs	r3, r2
 8002e98:	3301      	adds	r3, #1
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002e9a:	18e3      	adds	r3, r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	f7ff f8f3 	bl	8002088 <__aeabi_i2d>
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8002ea2:	4bab      	ldr	r3, [pc, #684]	; (8003150 <SX1276GetTimeOnAir+0x2f8>)
 8002ea4:	2222      	movs	r2, #34	; 0x22
 8002ea6:	5c9b      	ldrb	r3, [r3, r2]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d002      	beq.n	8002eb2 <SX1276GetTimeOnAir+0x5a>
 8002eac:	2300      	movs	r3, #0
 8002eae:	2400      	movs	r4, #0
 8002eb0:	e001      	b.n	8002eb6 <SX1276GetTimeOnAir+0x5e>
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	4ca7      	ldr	r4, [pc, #668]	; (8003154 <SX1276GetTimeOnAir+0x2fc>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8002eb6:	001a      	movs	r2, r3
 8002eb8:	0023      	movs	r3, r4
 8002eba:	f7fd fbd7 	bl	800066c <__aeabi_dadd>
 8002ebe:	0003      	movs	r3, r0
 8002ec0:	000c      	movs	r4, r1
 8002ec2:	001d      	movs	r5, r3
 8002ec4:	0026      	movs	r6, r4
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8002ec6:	2030      	movs	r0, #48	; 0x30
 8002ec8:	f000 fe5f 	bl	8003b8a <SX1276Read>
 8002ecc:	0003      	movs	r3, r0
 8002ece:	001a      	movs	r2, r3
 8002ed0:	23f9      	movs	r3, #249	; 0xf9
 8002ed2:	439a      	bics	r2, r3
 8002ed4:	1e13      	subs	r3, r2, #0
 8002ed6:	d002      	beq.n	8002ede <SX1276GetTimeOnAir+0x86>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	4c9e      	ldr	r4, [pc, #632]	; (8003154 <SX1276GetTimeOnAir+0x2fc>)
 8002edc:	e001      	b.n	8002ee2 <SX1276GetTimeOnAir+0x8a>
 8002ede:	2300      	movs	r3, #0
 8002ee0:	2400      	movs	r4, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8002ee2:	001a      	movs	r2, r3
 8002ee4:	0023      	movs	r3, r4
 8002ee6:	0028      	movs	r0, r5
 8002ee8:	0031      	movs	r1, r6
 8002eea:	f7fd fbbf 	bl	800066c <__aeabi_dadd>
 8002eee:	0003      	movs	r3, r0
 8002ef0:	000c      	movs	r4, r1
 8002ef2:	0025      	movs	r5, r4
 8002ef4:	001c      	movs	r4, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8002ef6:	1dbb      	adds	r3, r7, #6
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	0018      	movs	r0, r3
 8002efc:	f7ff f8c4 	bl	8002088 <__aeabi_i2d>
 8002f00:	0002      	movs	r2, r0
 8002f02:	000b      	movs	r3, r1
 8002f04:	0020      	movs	r0, r4
 8002f06:	0029      	movs	r1, r5
 8002f08:	f7fd fbb0 	bl	800066c <__aeabi_dadd>
 8002f0c:	0003      	movs	r3, r0
 8002f0e:	000c      	movs	r4, r1
 8002f10:	0018      	movs	r0, r3
 8002f12:	0021      	movs	r1, r4
                                     pktLen +
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8002f14:	4b8e      	ldr	r3, [pc, #568]	; (8003150 <SX1276GetTimeOnAir+0x2f8>)
 8002f16:	2224      	movs	r2, #36	; 0x24
 8002f18:	5c9b      	ldrb	r3, [r3, r2]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <SX1276GetTimeOnAir+0xce>
 8002f1e:	2300      	movs	r3, #0
 8002f20:	2480      	movs	r4, #128	; 0x80
 8002f22:	05e4      	lsls	r4, r4, #23
 8002f24:	e001      	b.n	8002f2a <SX1276GetTimeOnAir+0xd2>
 8002f26:	2300      	movs	r3, #0
 8002f28:	2400      	movs	r4, #0
                                     pktLen +
 8002f2a:	001a      	movs	r2, r3
 8002f2c:	0023      	movs	r3, r4
 8002f2e:	f7fd fb9d 	bl	800066c <__aeabi_dadd>
 8002f32:	0003      	movs	r3, r0
 8002f34:	000c      	movs	r4, r1
 8002f36:	0018      	movs	r0, r3
 8002f38:	0021      	movs	r1, r4
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	4b86      	ldr	r3, [pc, #536]	; (8003158 <SX1276GetTimeOnAir+0x300>)
 8002f3e:	f7fe fad9 	bl	80014f4 <__aeabi_dmul>
 8002f42:	0003      	movs	r3, r0
 8002f44:	000c      	movs	r4, r1
 8002f46:	0025      	movs	r5, r4
 8002f48:	001c      	movs	r4, r3
                                     SX1276.Settings.Fsk.Datarate ) * 1e3 );
 8002f4a:	4b81      	ldr	r3, [pc, #516]	; (8003150 <SX1276GetTimeOnAir+0x2f8>)
 8002f4c:	69db      	ldr	r3, [r3, #28]
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f7ff f8dc 	bl	800210c <__aeabi_ui2d>
 8002f54:	0002      	movs	r2, r0
 8002f56:	000b      	movs	r3, r1
 8002f58:	0020      	movs	r0, r4
 8002f5a:	0029      	movs	r1, r5
 8002f5c:	f7fd fe96 	bl	8000c8c <__aeabi_ddiv>
 8002f60:	0003      	movs	r3, r0
 8002f62:	000c      	movs	r4, r1
 8002f64:	0018      	movs	r0, r3
 8002f66:	0021      	movs	r1, r4
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002f68:	2200      	movs	r2, #0
 8002f6a:	4b7c      	ldr	r3, [pc, #496]	; (800315c <SX1276GetTimeOnAir+0x304>)
 8002f6c:	f7fe fac2 	bl	80014f4 <__aeabi_dmul>
 8002f70:	0003      	movs	r3, r0
 8002f72:	000c      	movs	r4, r1
 8002f74:	0018      	movs	r0, r3
 8002f76:	0021      	movs	r1, r4
 8002f78:	f007 fd5c 	bl	800aa34 <round>
 8002f7c:	0003      	movs	r3, r0
 8002f7e:	000c      	movs	r4, r1
 8002f80:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f82:	64fc      	str	r4, [r7, #76]	; 0x4c
        }
        break;
 8002f84:	e0da      	b.n	800313c <SX1276GetTimeOnAir+0x2e4>
    case MODEM_LORA:
        {
            double bw = 0.0;
 8002f86:	2300      	movs	r3, #0
 8002f88:	2400      	movs	r4, #0
 8002f8a:	643b      	str	r3, [r7, #64]	; 0x40
 8002f8c:	647c      	str	r4, [r7, #68]	; 0x44
            // REMARK: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported
            switch( SX1276.Settings.LoRa.Bandwidth )
 8002f8e:	4b70      	ldr	r3, [pc, #448]	; (8003150 <SX1276GetTimeOnAir+0x2f8>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	d008      	beq.n	8002fa8 <SX1276GetTimeOnAir+0x150>
 8002f96:	2b09      	cmp	r3, #9
 8002f98:	d00b      	beq.n	8002fb2 <SX1276GetTimeOnAir+0x15a>
 8002f9a:	2b07      	cmp	r3, #7
 8002f9c:	d10e      	bne.n	8002fbc <SX1276GetTimeOnAir+0x164>
            //    break;
            //case 6: // 62.5 kHz
            //    bw = 625e2;
            //    break;
            case 7: // 125 kHz
                bw = 125e3;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	4c6f      	ldr	r4, [pc, #444]	; (8003160 <SX1276GetTimeOnAir+0x308>)
 8002fa2:	643b      	str	r3, [r7, #64]	; 0x40
 8002fa4:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 8002fa6:	e009      	b.n	8002fbc <SX1276GetTimeOnAir+0x164>
            case 8: // 250 kHz
                bw = 250e3;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	4c6e      	ldr	r4, [pc, #440]	; (8003164 <SX1276GetTimeOnAir+0x30c>)
 8002fac:	643b      	str	r3, [r7, #64]	; 0x40
 8002fae:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 8002fb0:	e004      	b.n	8002fbc <SX1276GetTimeOnAir+0x164>
            case 9: // 500 kHz
                bw = 500e3;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	4c6c      	ldr	r4, [pc, #432]	; (8003168 <SX1276GetTimeOnAir+0x310>)
 8002fb6:	643b      	str	r3, [r7, #64]	; 0x40
 8002fb8:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 8002fba:	46c0      	nop			; (mov r8, r8)
            }

            // Symbol rate : time for one symbol (secs)
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 8002fbc:	4b64      	ldr	r3, [pc, #400]	; (8003150 <SX1276GetTimeOnAir+0x2f8>)
 8002fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	409a      	lsls	r2, r3
 8002fc4:	0013      	movs	r3, r2
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	f7ff f85e 	bl	8002088 <__aeabi_i2d>
 8002fcc:	0003      	movs	r3, r0
 8002fce:	000c      	movs	r4, r1
 8002fd0:	001a      	movs	r2, r3
 8002fd2:	0023      	movs	r3, r4
 8002fd4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002fd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002fd8:	f7fd fe58 	bl	8000c8c <__aeabi_ddiv>
 8002fdc:	0003      	movs	r3, r0
 8002fde:	000c      	movs	r4, r1
 8002fe0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fe2:	63fc      	str	r4, [r7, #60]	; 0x3c
            double ts = 1 / rs;
 8002fe4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fe8:	2000      	movs	r0, #0
 8002fea:	495a      	ldr	r1, [pc, #360]	; (8003154 <SX1276GetTimeOnAir+0x2fc>)
 8002fec:	f7fd fe4e 	bl	8000c8c <__aeabi_ddiv>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	000c      	movs	r4, r1
 8002ff4:	633b      	str	r3, [r7, #48]	; 0x30
 8002ff6:	637c      	str	r4, [r7, #52]	; 0x34
            // time of preamble
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8002ff8:	4b55      	ldr	r3, [pc, #340]	; (8003150 <SX1276GetTimeOnAir+0x2f8>)
 8002ffa:	224a      	movs	r2, #74	; 0x4a
 8002ffc:	5a9b      	ldrh	r3, [r3, r2]
 8002ffe:	0018      	movs	r0, r3
 8003000:	f7ff f842 	bl	8002088 <__aeabi_i2d>
 8003004:	2200      	movs	r2, #0
 8003006:	4b59      	ldr	r3, [pc, #356]	; (800316c <SX1276GetTimeOnAir+0x314>)
 8003008:	f7fd fb30 	bl	800066c <__aeabi_dadd>
 800300c:	0003      	movs	r3, r0
 800300e:	000c      	movs	r4, r1
 8003010:	0018      	movs	r0, r3
 8003012:	0021      	movs	r1, r4
 8003014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003018:	f7fe fa6c 	bl	80014f4 <__aeabi_dmul>
 800301c:	0003      	movs	r3, r0
 800301e:	000c      	movs	r4, r1
 8003020:	62bb      	str	r3, [r7, #40]	; 0x28
 8003022:	62fc      	str	r4, [r7, #44]	; 0x2c
            // Symbol length of payload and time
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8003024:	1dbb      	adds	r3, r7, #6
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	001a      	movs	r2, r3
 800302c:	4b48      	ldr	r3, [pc, #288]	; (8003150 <SX1276GetTimeOnAir+0x2f8>)
 800302e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	1ad3      	subs	r3, r2, r3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8003034:	4a46      	ldr	r2, [pc, #280]	; (8003150 <SX1276GetTimeOnAir+0x2f8>)
 8003036:	214e      	movs	r1, #78	; 0x4e
 8003038:	5c52      	ldrb	r2, [r2, r1]
 800303a:	0112      	lsls	r2, r2, #4
 800303c:	189a      	adds	r2, r3, r2
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 800303e:	4b44      	ldr	r3, [pc, #272]	; (8003150 <SX1276GetTimeOnAir+0x2f8>)
 8003040:	214c      	movs	r1, #76	; 0x4c
 8003042:	5c5b      	ldrb	r3, [r3, r1]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <SX1276GetTimeOnAir+0x1f4>
 8003048:	2314      	movs	r3, #20
 800304a:	e000      	b.n	800304e <SX1276GetTimeOnAir+0x1f6>
 800304c:	2300      	movs	r3, #0
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	331c      	adds	r3, #28
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8003052:	0018      	movs	r0, r3
 8003054:	f7ff f85a 	bl	800210c <__aeabi_ui2d>
 8003058:	0004      	movs	r4, r0
 800305a:	000d      	movs	r5, r1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 800305c:	4b3c      	ldr	r3, [pc, #240]	; (8003150 <SX1276GetTimeOnAir+0x2f8>)
 800305e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8003060:	4b3b      	ldr	r3, [pc, #236]	; (8003150 <SX1276GetTimeOnAir+0x2f8>)
 8003062:	2148      	movs	r1, #72	; 0x48
 8003064:	5c5b      	ldrb	r3, [r3, r1]
 8003066:	2b00      	cmp	r3, #0
 8003068:	dd01      	ble.n	800306e <SX1276GetTimeOnAir+0x216>
 800306a:	2302      	movs	r3, #2
 800306c:	e000      	b.n	8003070 <SX1276GetTimeOnAir+0x218>
 800306e:	2300      	movs	r3, #0
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	0018      	movs	r0, r3
 8003076:	f7ff f849 	bl	800210c <__aeabi_ui2d>
 800307a:	0002      	movs	r2, r0
 800307c:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800307e:	0020      	movs	r0, r4
 8003080:	0029      	movs	r1, r5
 8003082:	f7fd fe03 	bl	8000c8c <__aeabi_ddiv>
 8003086:	0003      	movs	r3, r0
 8003088:	000c      	movs	r4, r1
 800308a:	0018      	movs	r0, r3
 800308c:	0021      	movs	r1, r4
 800308e:	f007 fbcd 	bl	800a82c <ceil>
 8003092:	0004      	movs	r4, r0
 8003094:	000d      	movs	r5, r1
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 8003096:	4b2e      	ldr	r3, [pc, #184]	; (8003150 <SX1276GetTimeOnAir+0x2f8>)
 8003098:	2249      	movs	r2, #73	; 0x49
 800309a:	5c9b      	ldrb	r3, [r3, r2]
 800309c:	3304      	adds	r3, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 800309e:	0018      	movs	r0, r3
 80030a0:	f7fe fff2 	bl	8002088 <__aeabi_i2d>
 80030a4:	0002      	movs	r2, r0
 80030a6:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80030a8:	0020      	movs	r0, r4
 80030aa:	0029      	movs	r1, r5
 80030ac:	f7fe fa22 	bl	80014f4 <__aeabi_dmul>
 80030b0:	0003      	movs	r3, r0
 80030b2:	000c      	movs	r4, r1
 80030b4:	623b      	str	r3, [r7, #32]
 80030b6:	627c      	str	r4, [r7, #36]	; 0x24
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 80030b8:	2200      	movs	r2, #0
 80030ba:	2300      	movs	r3, #0
 80030bc:	6a38      	ldr	r0, [r7, #32]
 80030be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030c0:	f7fd f9c2 	bl	8000448 <__aeabi_dcmpgt>
 80030c4:	1e03      	subs	r3, r0, #0
 80030c6:	d008      	beq.n	80030da <SX1276GetTimeOnAir+0x282>
 80030c8:	2200      	movs	r2, #0
 80030ca:	4b23      	ldr	r3, [pc, #140]	; (8003158 <SX1276GetTimeOnAir+0x300>)
 80030cc:	6a38      	ldr	r0, [r7, #32]
 80030ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030d0:	f7fd facc 	bl	800066c <__aeabi_dadd>
 80030d4:	0003      	movs	r3, r0
 80030d6:	000c      	movs	r4, r1
 80030d8:	e001      	b.n	80030de <SX1276GetTimeOnAir+0x286>
 80030da:	2300      	movs	r3, #0
 80030dc:	4c1e      	ldr	r4, [pc, #120]	; (8003158 <SX1276GetTimeOnAir+0x300>)
 80030de:	61bb      	str	r3, [r7, #24]
 80030e0:	61fc      	str	r4, [r7, #28]
            double tPayload = nPayload * ts;
 80030e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030e6:	69b8      	ldr	r0, [r7, #24]
 80030e8:	69f9      	ldr	r1, [r7, #28]
 80030ea:	f7fe fa03 	bl	80014f4 <__aeabi_dmul>
 80030ee:	0003      	movs	r3, r0
 80030f0:	000c      	movs	r4, r1
 80030f2:	613b      	str	r3, [r7, #16]
 80030f4:	617c      	str	r4, [r7, #20]
            // Time on air
            double tOnAir = tPreamble + tPayload;
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030fe:	f7fd fab5 	bl	800066c <__aeabi_dadd>
 8003102:	0003      	movs	r3, r0
 8003104:	000c      	movs	r4, r1
 8003106:	60bb      	str	r3, [r7, #8]
 8003108:	60fc      	str	r4, [r7, #12]
            // return ms secs
            airTime = floor( tOnAir * 1e3 + 0.999 );
 800310a:	2200      	movs	r2, #0
 800310c:	4b13      	ldr	r3, [pc, #76]	; (800315c <SX1276GetTimeOnAir+0x304>)
 800310e:	68b8      	ldr	r0, [r7, #8]
 8003110:	68f9      	ldr	r1, [r7, #12]
 8003112:	f7fe f9ef 	bl	80014f4 <__aeabi_dmul>
 8003116:	0003      	movs	r3, r0
 8003118:	000c      	movs	r4, r1
 800311a:	0018      	movs	r0, r3
 800311c:	0021      	movs	r1, r4
 800311e:	4a14      	ldr	r2, [pc, #80]	; (8003170 <SX1276GetTimeOnAir+0x318>)
 8003120:	4b14      	ldr	r3, [pc, #80]	; (8003174 <SX1276GetTimeOnAir+0x31c>)
 8003122:	f7fd faa3 	bl	800066c <__aeabi_dadd>
 8003126:	0003      	movs	r3, r0
 8003128:	000c      	movs	r4, r1
 800312a:	0018      	movs	r0, r3
 800312c:	0021      	movs	r1, r4
 800312e:	f007 fbff 	bl	800a930 <floor>
 8003132:	0003      	movs	r3, r0
 8003134:	000c      	movs	r4, r1
 8003136:	64bb      	str	r3, [r7, #72]	; 0x48
 8003138:	64fc      	str	r4, [r7, #76]	; 0x4c
        }
        break;
 800313a:	46c0      	nop			; (mov r8, r8)
    }
    return (uint32_t) airTime;
 800313c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800313e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003140:	f7fd f9b6 	bl	80004b0 <__aeabi_d2uiz>
 8003144:	0003      	movs	r3, r0
}
 8003146:	0018      	movs	r0, r3
 8003148:	46bd      	mov	sp, r7
 800314a:	b015      	add	sp, #84	; 0x54
 800314c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800314e:	46c0      	nop			; (mov r8, r8)
 8003150:	20000508 	.word	0x20000508
 8003154:	3ff00000 	.word	0x3ff00000
 8003158:	40200000 	.word	0x40200000
 800315c:	408f4000 	.word	0x408f4000
 8003160:	40fe8480 	.word	0x40fe8480
 8003164:	410e8480 	.word	0x410e8480
 8003168:	411e8480 	.word	0x411e8480
 800316c:	40110000 	.word	0x40110000
 8003170:	d916872b 	.word	0xd916872b
 8003174:	3feff7ce 	.word	0x3feff7ce

08003178 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	000a      	movs	r2, r1
 8003182:	1cfb      	adds	r3, r7, #3
 8003184:	701a      	strb	r2, [r3, #0]
    uint32_t txTimeout = 0;
 8003186:	2300      	movs	r3, #0
 8003188:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 800318a:	4b59      	ldr	r3, [pc, #356]	; (80032f0 <SX1276Send+0x178>)
 800318c:	795b      	ldrb	r3, [r3, #5]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <SX1276Send+0x20>
 8003192:	2b01      	cmp	r3, #1
 8003194:	d04c      	beq.n	8003230 <SX1276Send+0xb8>
 8003196:	e0a2      	b.n	80032de <SX1276Send+0x166>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8003198:	4b55      	ldr	r3, [pc, #340]	; (80032f0 <SX1276Send+0x178>)
 800319a:	2200      	movs	r2, #0
 800319c:	871a      	strh	r2, [r3, #56]	; 0x38
            SX1276.Settings.FskPacketHandler.Size = size;
 800319e:	1cfb      	adds	r3, r7, #3
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	4b52      	ldr	r3, [pc, #328]	; (80032f0 <SX1276Send+0x178>)
 80031a6:	86da      	strh	r2, [r3, #54]	; 0x36

            if( SX1276.Settings.Fsk.FixLen == false )
 80031a8:	4b51      	ldr	r3, [pc, #324]	; (80032f0 <SX1276Send+0x178>)
 80031aa:	2222      	movs	r2, #34	; 0x22
 80031ac:	5c9b      	ldrb	r3, [r3, r2]
 80031ae:	2201      	movs	r2, #1
 80031b0:	4053      	eors	r3, r2
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d005      	beq.n	80031c4 <SX1276Send+0x4c>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 80031b8:	1cfb      	adds	r3, r7, #3
 80031ba:	2101      	movs	r1, #1
 80031bc:	0018      	movs	r0, r3
 80031be:	f000 fd85 	bl	8003ccc <SX1276WriteFifo>
 80031c2:	e005      	b.n	80031d0 <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 80031c4:	1cfb      	adds	r3, r7, #3
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	0019      	movs	r1, r3
 80031ca:	2032      	movs	r0, #50	; 0x32
 80031cc:	f000 fcc9 	bl	8003b62 <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 80031d0:	1cfb      	adds	r3, r7, #3
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d009      	beq.n	80031ec <SX1276Send+0x74>
 80031d8:	1cfb      	adds	r3, r7, #3
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b40      	cmp	r3, #64	; 0x40
 80031de:	d805      	bhi.n	80031ec <SX1276Send+0x74>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 80031e0:	1cfb      	adds	r3, r7, #3
 80031e2:	7819      	ldrb	r1, [r3, #0]
 80031e4:	4b42      	ldr	r3, [pc, #264]	; (80032f0 <SX1276Send+0x178>)
 80031e6:	223b      	movs	r2, #59	; 0x3b
 80031e8:	5499      	strb	r1, [r3, r2]
 80031ea:	e00b      	b.n	8003204 <SX1276Send+0x8c>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
 80031ec:	1cfb      	adds	r3, r7, #3
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	4b3f      	ldr	r3, [pc, #252]	; (80032f4 <SX1276Send+0x17c>)
 80031f6:	0018      	movs	r0, r3
 80031f8:	f005 fc01 	bl	80089fe <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 80031fc:	4b3c      	ldr	r3, [pc, #240]	; (80032f0 <SX1276Send+0x178>)
 80031fe:	223b      	movs	r2, #59	; 0x3b
 8003200:	2120      	movs	r1, #32
 8003202:	5499      	strb	r1, [r3, r2]
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8003204:	4b3a      	ldr	r3, [pc, #232]	; (80032f0 <SX1276Send+0x178>)
 8003206:	223b      	movs	r2, #59	; 0x3b
 8003208:	5c9a      	ldrb	r2, [r3, r2]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	0011      	movs	r1, r2
 800320e:	0018      	movs	r0, r3
 8003210:	f000 fd5c 	bl	8003ccc <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8003214:	4b36      	ldr	r3, [pc, #216]	; (80032f0 <SX1276Send+0x178>)
 8003216:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8003218:	4b35      	ldr	r3, [pc, #212]	; (80032f0 <SX1276Send+0x178>)
 800321a:	213b      	movs	r1, #59	; 0x3b
 800321c:	5c5b      	ldrb	r3, [r3, r1]
 800321e:	b29b      	uxth	r3, r3
 8003220:	18d3      	adds	r3, r2, r3
 8003222:	b29a      	uxth	r2, r3
 8003224:	4b32      	ldr	r3, [pc, #200]	; (80032f0 <SX1276Send+0x178>)
 8003226:	871a      	strh	r2, [r3, #56]	; 0x38
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8003228:	4b31      	ldr	r3, [pc, #196]	; (80032f0 <SX1276Send+0x178>)
 800322a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800322e:	e056      	b.n	80032de <SX1276Send+0x166>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 8003230:	4b2f      	ldr	r3, [pc, #188]	; (80032f0 <SX1276Send+0x178>)
 8003232:	2251      	movs	r2, #81	; 0x51
 8003234:	5c9b      	ldrb	r3, [r3, r2]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d011      	beq.n	800325e <SX1276Send+0xe6>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 800323a:	2033      	movs	r0, #51	; 0x33
 800323c:	f000 fca5 	bl	8003b8a <SX1276Read>
 8003240:	0003      	movs	r3, r0
 8003242:	001a      	movs	r2, r3
 8003244:	2341      	movs	r3, #65	; 0x41
 8003246:	439a      	bics	r2, r3
 8003248:	0013      	movs	r3, r2
 800324a:	b2db      	uxtb	r3, r3
 800324c:	0019      	movs	r1, r3
 800324e:	2033      	movs	r0, #51	; 0x33
 8003250:	f000 fc87 	bl	8003b62 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8003254:	2119      	movs	r1, #25
 8003256:	203b      	movs	r0, #59	; 0x3b
 8003258:	f000 fc83 	bl	8003b62 <SX1276Write>
 800325c:	e013      	b.n	8003286 <SX1276Send+0x10e>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800325e:	2033      	movs	r0, #51	; 0x33
 8003260:	f000 fc93 	bl	8003b8a <SX1276Read>
 8003264:	0003      	movs	r3, r0
 8003266:	b25b      	sxtb	r3, r3
 8003268:	2241      	movs	r2, #65	; 0x41
 800326a:	4393      	bics	r3, r2
 800326c:	b25b      	sxtb	r3, r3
 800326e:	2201      	movs	r2, #1
 8003270:	4313      	orrs	r3, r2
 8003272:	b25b      	sxtb	r3, r3
 8003274:	b2db      	uxtb	r3, r3
 8003276:	0019      	movs	r1, r3
 8003278:	2033      	movs	r0, #51	; 0x33
 800327a:	f000 fc72 	bl	8003b62 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800327e:	211d      	movs	r1, #29
 8003280:	203b      	movs	r0, #59	; 0x3b
 8003282:	f000 fc6e 	bl	8003b62 <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 8003286:	1cfb      	adds	r3, r7, #3
 8003288:	7819      	ldrb	r1, [r3, #0]
 800328a:	4b19      	ldr	r3, [pc, #100]	; (80032f0 <SX1276Send+0x178>)
 800328c:	225c      	movs	r2, #92	; 0x5c
 800328e:	5499      	strb	r1, [r3, r2]

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8003290:	1cfb      	adds	r3, r7, #3
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	0019      	movs	r1, r3
 8003296:	2022      	movs	r0, #34	; 0x22
 8003298:	f000 fc63 	bl	8003b62 <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 800329c:	2100      	movs	r1, #0
 800329e:	200e      	movs	r0, #14
 80032a0:	f000 fc5f 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 80032a4:	2100      	movs	r1, #0
 80032a6:	200d      	movs	r0, #13
 80032a8:	f000 fc5b 	bl	8003b62 <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 80032ac:	2001      	movs	r0, #1
 80032ae:	f000 fc6c 	bl	8003b8a <SX1276Read>
 80032b2:	0003      	movs	r3, r0
 80032b4:	001a      	movs	r2, r3
 80032b6:	23f8      	movs	r3, #248	; 0xf8
 80032b8:	439a      	bics	r2, r3
 80032ba:	1e13      	subs	r3, r2, #0
 80032bc:	d104      	bne.n	80032c8 <SX1276Send+0x150>
            {
                SX1276SetStby( );
 80032be:	f000 f835 	bl	800332c <SX1276SetStby>
                DelayMs( 1 );
 80032c2:	2001      	movs	r0, #1
 80032c4:	f005 f93c 	bl	8008540 <DelayMs>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 80032c8:	1cfb      	adds	r3, r7, #3
 80032ca:	781a      	ldrb	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	0011      	movs	r1, r2
 80032d0:	0018      	movs	r0, r3
 80032d2:	f000 fcfb 	bl	8003ccc <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 80032d6:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <SX1276Send+0x178>)
 80032d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032da:	60fb      	str	r3, [r7, #12]
        }
        break;
 80032dc:	46c0      	nop			; (mov r8, r8)
    }

    SX1276SetTx( txTimeout );
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	0018      	movs	r0, r3
 80032e2:	f000 fa25 	bl	8003730 <SX1276SetTx>
}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	46bd      	mov	sp, r7
 80032ea:	b004      	add	sp, #16
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	46c0      	nop			; (mov r8, r8)
 80032f0:	20000508 	.word	0x20000508
 80032f4:	200000b4 	.word	0x200000b4

080032f8 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 80032fc:	4b08      	ldr	r3, [pc, #32]	; (8003320 <SX1276SetSleep+0x28>)
 80032fe:	0018      	movs	r0, r3
 8003300:	f005 faa0 	bl	8008844 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8003304:	4b07      	ldr	r3, [pc, #28]	; (8003324 <SX1276SetSleep+0x2c>)
 8003306:	0018      	movs	r0, r3
 8003308:	f005 fa9c 	bl	8008844 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800330c:	2000      	movs	r0, #0
 800330e:	f000 fb9d 	bl	8003a4c <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8003312:	4b05      	ldr	r3, [pc, #20]	; (8003328 <SX1276SetSleep+0x30>)
 8003314:	2200      	movs	r2, #0
 8003316:	711a      	strb	r2, [r3, #4]
}
 8003318:	46c0      	nop			; (mov r8, r8)
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	20000568 	.word	0x20000568
 8003324:	200004e0 	.word	0x200004e0
 8003328:	20000508 	.word	0x20000508

0800332c <SX1276SetStby>:

void SX1276SetStby( void )
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 8003330:	4b08      	ldr	r3, [pc, #32]	; (8003354 <SX1276SetStby+0x28>)
 8003332:	0018      	movs	r0, r3
 8003334:	f005 fa86 	bl	8008844 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8003338:	4b07      	ldr	r3, [pc, #28]	; (8003358 <SX1276SetStby+0x2c>)
 800333a:	0018      	movs	r0, r3
 800333c:	f005 fa82 	bl	8008844 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 8003340:	2001      	movs	r0, #1
 8003342:	f000 fb83 	bl	8003a4c <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8003346:	4b05      	ldr	r3, [pc, #20]	; (800335c <SX1276SetStby+0x30>)
 8003348:	2200      	movs	r2, #0
 800334a:	711a      	strb	r2, [r3, #4]
}
 800334c:	46c0      	nop			; (mov r8, r8)
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	20000568 	.word	0x20000568
 8003358:	200004e0 	.word	0x200004e0
 800335c:	20000508 	.word	0x20000508

08003360 <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 8003360:	b5b0      	push	{r4, r5, r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 8003368:	230f      	movs	r3, #15
 800336a:	18fb      	adds	r3, r7, r3
 800336c:	2200      	movs	r2, #0
 800336e:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.Modem )
 8003370:	4be0      	ldr	r3, [pc, #896]	; (80036f4 <SX1276SetRx+0x394>)
 8003372:	795b      	ldrb	r3, [r3, #5]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d002      	beq.n	800337e <SX1276SetRx+0x1e>
 8003378:	2b01      	cmp	r3, #1
 800337a:	d041      	beq.n	8003400 <SX1276SetRx+0xa0>
 800337c:	e128      	b.n	80035d0 <SX1276SetRx+0x270>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 800337e:	230f      	movs	r3, #15
 8003380:	18fb      	adds	r3, r7, r3
 8003382:	4adc      	ldr	r2, [pc, #880]	; (80036f4 <SX1276SetRx+0x394>)
 8003384:	2126      	movs	r1, #38	; 0x26
 8003386:	5c52      	ldrb	r2, [r2, r1]
 8003388:	701a      	strb	r2, [r3, #0]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800338a:	2040      	movs	r0, #64	; 0x40
 800338c:	f000 fbfd 	bl	8003b8a <SX1276Read>
 8003390:	0003      	movs	r3, r0
 8003392:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8003394:	2203      	movs	r2, #3
 8003396:	4013      	ands	r3, r2
 8003398:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 800339a:	220c      	movs	r2, #12
 800339c:	4313      	orrs	r3, r2
 800339e:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	0019      	movs	r1, r3
 80033a4:	2040      	movs	r0, #64	; 0x40
 80033a6:	f000 fbdc 	bl	8003b62 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 80033aa:	2041      	movs	r0, #65	; 0x41
 80033ac:	f000 fbed 	bl	8003b8a <SX1276Read>
 80033b0:	0003      	movs	r3, r0
 80033b2:	001a      	movs	r2, r3
 80033b4:	233f      	movs	r3, #63	; 0x3f
 80033b6:	425b      	negs	r3, r3
 80033b8:	4313      	orrs	r3, r2
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	0019      	movs	r1, r3
 80033be:	2041      	movs	r0, #65	; 0x41
 80033c0:	f000 fbcf 	bl	8003b62 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 80033c4:	2035      	movs	r0, #53	; 0x35
 80033c6:	f000 fbe0 	bl	8003b8a <SX1276Read>
 80033ca:	0003      	movs	r3, r0
 80033cc:	001a      	movs	r2, r3
 80033ce:	233f      	movs	r3, #63	; 0x3f
 80033d0:	4013      	ands	r3, r2
 80033d2:	b2d9      	uxtb	r1, r3
 80033d4:	4bc7      	ldr	r3, [pc, #796]	; (80036f4 <SX1276SetRx+0x394>)
 80033d6:	223a      	movs	r2, #58	; 0x3a
 80033d8:	5499      	strb	r1, [r3, r2]

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 80033da:	211e      	movs	r1, #30
 80033dc:	200d      	movs	r0, #13
 80033de:	f000 fbc0 	bl	8003b62 <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80033e2:	4bc4      	ldr	r3, [pc, #784]	; (80036f4 <SX1276SetRx+0x394>)
 80033e4:	222c      	movs	r2, #44	; 0x2c
 80033e6:	2100      	movs	r1, #0
 80033e8:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80033ea:	4bc2      	ldr	r3, [pc, #776]	; (80036f4 <SX1276SetRx+0x394>)
 80033ec:	222d      	movs	r2, #45	; 0x2d
 80033ee:	2100      	movs	r1, #0
 80033f0:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80033f2:	4bc0      	ldr	r3, [pc, #768]	; (80036f4 <SX1276SetRx+0x394>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	871a      	strh	r2, [r3, #56]	; 0x38
            SX1276.Settings.FskPacketHandler.Size = 0;
 80033f8:	4bbe      	ldr	r3, [pc, #760]	; (80036f4 <SX1276SetRx+0x394>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	86da      	strh	r2, [r3, #54]	; 0x36
        }
        break;
 80033fe:	e0e7      	b.n	80035d0 <SX1276SetRx+0x270>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 8003400:	4bbc      	ldr	r3, [pc, #752]	; (80036f4 <SX1276SetRx+0x394>)
 8003402:	2251      	movs	r2, #81	; 0x51
 8003404:	5c9b      	ldrb	r3, [r3, r2]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d010      	beq.n	800342c <SX1276SetRx+0xcc>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 800340a:	2033      	movs	r0, #51	; 0x33
 800340c:	f000 fbbd 	bl	8003b8a <SX1276Read>
 8003410:	0003      	movs	r3, r0
 8003412:	001a      	movs	r2, r3
 8003414:	2341      	movs	r3, #65	; 0x41
 8003416:	4313      	orrs	r3, r2
 8003418:	b2db      	uxtb	r3, r3
 800341a:	0019      	movs	r1, r3
 800341c:	2033      	movs	r0, #51	; 0x33
 800341e:	f000 fba0 	bl	8003b62 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8003422:	2119      	movs	r1, #25
 8003424:	203b      	movs	r0, #59	; 0x3b
 8003426:	f000 fb9c 	bl	8003b62 <SX1276Write>
 800342a:	e013      	b.n	8003454 <SX1276SetRx+0xf4>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800342c:	2033      	movs	r0, #51	; 0x33
 800342e:	f000 fbac 	bl	8003b8a <SX1276Read>
 8003432:	0003      	movs	r3, r0
 8003434:	b25b      	sxtb	r3, r3
 8003436:	2241      	movs	r2, #65	; 0x41
 8003438:	4393      	bics	r3, r2
 800343a:	b25b      	sxtb	r3, r3
 800343c:	2201      	movs	r2, #1
 800343e:	4313      	orrs	r3, r2
 8003440:	b25b      	sxtb	r3, r3
 8003442:	b2db      	uxtb	r3, r3
 8003444:	0019      	movs	r1, r3
 8003446:	2033      	movs	r0, #51	; 0x33
 8003448:	f000 fb8b 	bl	8003b62 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800344c:	211d      	movs	r1, #29
 800344e:	203b      	movs	r0, #59	; 0x3b
 8003450:	f000 fb87 	bl	8003b62 <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8003454:	4ba7      	ldr	r3, [pc, #668]	; (80036f4 <SX1276SetRx+0x394>)
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	2b08      	cmp	r3, #8
 800345a:	d900      	bls.n	800345e <SX1276SetRx+0xfe>
 800345c:	e076      	b.n	800354c <SX1276SetRx+0x1ec>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 800345e:	2031      	movs	r0, #49	; 0x31
 8003460:	f000 fb93 	bl	8003b8a <SX1276Read>
 8003464:	0003      	movs	r3, r0
 8003466:	001a      	movs	r2, r3
 8003468:	237f      	movs	r3, #127	; 0x7f
 800346a:	4013      	ands	r3, r2
 800346c:	b2db      	uxtb	r3, r3
 800346e:	0019      	movs	r1, r3
 8003470:	2031      	movs	r0, #49	; 0x31
 8003472:	f000 fb76 	bl	8003b62 <SX1276Write>
                SX1276Write( REG_LR_TEST30, 0x00 );
 8003476:	2100      	movs	r1, #0
 8003478:	2030      	movs	r0, #48	; 0x30
 800347a:	f000 fb72 	bl	8003b62 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 800347e:	4b9d      	ldr	r3, [pc, #628]	; (80036f4 <SX1276SetRx+0x394>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	2b08      	cmp	r3, #8
 8003484:	d86f      	bhi.n	8003566 <SX1276SetRx+0x206>
 8003486:	009a      	lsls	r2, r3, #2
 8003488:	4b9b      	ldr	r3, [pc, #620]	; (80036f8 <SX1276SetRx+0x398>)
 800348a:	18d3      	adds	r3, r2, r3
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	469f      	mov	pc, r3
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_TEST2F, 0x48 );
 8003490:	2148      	movs	r1, #72	; 0x48
 8003492:	202f      	movs	r0, #47	; 0x2f
 8003494:	f000 fb65 	bl	8003b62 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8003498:	4b96      	ldr	r3, [pc, #600]	; (80036f4 <SX1276SetRx+0x394>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	4a97      	ldr	r2, [pc, #604]	; (80036fc <SX1276SetRx+0x39c>)
 800349e:	4694      	mov	ip, r2
 80034a0:	4463      	add	r3, ip
 80034a2:	0018      	movs	r0, r3
 80034a4:	f7fe ff8a 	bl	80023bc <SX1276SetChannel>
                    break;
 80034a8:	e05d      	b.n	8003566 <SX1276SetRx+0x206>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 80034aa:	2144      	movs	r1, #68	; 0x44
 80034ac:	202f      	movs	r0, #47	; 0x2f
 80034ae:	f000 fb58 	bl	8003b62 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 80034b2:	4b90      	ldr	r3, [pc, #576]	; (80036f4 <SX1276SetRx+0x394>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	4a92      	ldr	r2, [pc, #584]	; (8003700 <SX1276SetRx+0x3a0>)
 80034b8:	4694      	mov	ip, r2
 80034ba:	4463      	add	r3, ip
 80034bc:	0018      	movs	r0, r3
 80034be:	f7fe ff7d 	bl	80023bc <SX1276SetChannel>
                    break;
 80034c2:	e050      	b.n	8003566 <SX1276SetRx+0x206>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 80034c4:	2144      	movs	r1, #68	; 0x44
 80034c6:	202f      	movs	r0, #47	; 0x2f
 80034c8:	f000 fb4b 	bl	8003b62 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 80034cc:	4b89      	ldr	r3, [pc, #548]	; (80036f4 <SX1276SetRx+0x394>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	4a8c      	ldr	r2, [pc, #560]	; (8003704 <SX1276SetRx+0x3a4>)
 80034d2:	4694      	mov	ip, r2
 80034d4:	4463      	add	r3, ip
 80034d6:	0018      	movs	r0, r3
 80034d8:	f7fe ff70 	bl	80023bc <SX1276SetChannel>
                    break;
 80034dc:	e043      	b.n	8003566 <SX1276SetRx+0x206>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 80034de:	2144      	movs	r1, #68	; 0x44
 80034e0:	202f      	movs	r0, #47	; 0x2f
 80034e2:	f000 fb3e 	bl	8003b62 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 80034e6:	4b83      	ldr	r3, [pc, #524]	; (80036f4 <SX1276SetRx+0x394>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	4a87      	ldr	r2, [pc, #540]	; (8003708 <SX1276SetRx+0x3a8>)
 80034ec:	4694      	mov	ip, r2
 80034ee:	4463      	add	r3, ip
 80034f0:	0018      	movs	r0, r3
 80034f2:	f7fe ff63 	bl	80023bc <SX1276SetChannel>
                    break;
 80034f6:	e036      	b.n	8003566 <SX1276SetRx+0x206>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 80034f8:	2144      	movs	r1, #68	; 0x44
 80034fa:	202f      	movs	r0, #47	; 0x2f
 80034fc:	f000 fb31 	bl	8003b62 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8003500:	4b7c      	ldr	r3, [pc, #496]	; (80036f4 <SX1276SetRx+0x394>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	4a81      	ldr	r2, [pc, #516]	; (800370c <SX1276SetRx+0x3ac>)
 8003506:	4694      	mov	ip, r2
 8003508:	4463      	add	r3, ip
 800350a:	0018      	movs	r0, r3
 800350c:	f7fe ff56 	bl	80023bc <SX1276SetChannel>
                    break;
 8003510:	e029      	b.n	8003566 <SX1276SetRx+0x206>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 8003512:	2144      	movs	r1, #68	; 0x44
 8003514:	202f      	movs	r0, #47	; 0x2f
 8003516:	f000 fb24 	bl	8003b62 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 800351a:	4b76      	ldr	r3, [pc, #472]	; (80036f4 <SX1276SetRx+0x394>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	4a7c      	ldr	r2, [pc, #496]	; (8003710 <SX1276SetRx+0x3b0>)
 8003520:	4694      	mov	ip, r2
 8003522:	4463      	add	r3, ip
 8003524:	0018      	movs	r0, r3
 8003526:	f7fe ff49 	bl	80023bc <SX1276SetChannel>
                    break;
 800352a:	e01c      	b.n	8003566 <SX1276SetRx+0x206>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 800352c:	2140      	movs	r1, #64	; 0x40
 800352e:	202f      	movs	r0, #47	; 0x2f
 8003530:	f000 fb17 	bl	8003b62 <SX1276Write>
                    break;
 8003534:	e017      	b.n	8003566 <SX1276SetRx+0x206>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 8003536:	2140      	movs	r1, #64	; 0x40
 8003538:	202f      	movs	r0, #47	; 0x2f
 800353a:	f000 fb12 	bl	8003b62 <SX1276Write>
                    break;
 800353e:	e012      	b.n	8003566 <SX1276SetRx+0x206>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 8003540:	2140      	movs	r1, #64	; 0x40
 8003542:	202f      	movs	r0, #47	; 0x2f
 8003544:	f000 fb0d 	bl	8003b62 <SX1276Write>
                    break;
 8003548:	46c0      	nop			; (mov r8, r8)
 800354a:	e00c      	b.n	8003566 <SX1276SetRx+0x206>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 800354c:	2031      	movs	r0, #49	; 0x31
 800354e:	f000 fb1c 	bl	8003b8a <SX1276Read>
 8003552:	0003      	movs	r3, r0
 8003554:	001a      	movs	r2, r3
 8003556:	2380      	movs	r3, #128	; 0x80
 8003558:	425b      	negs	r3, r3
 800355a:	4313      	orrs	r3, r2
 800355c:	b2db      	uxtb	r3, r3
 800355e:	0019      	movs	r1, r3
 8003560:	2031      	movs	r0, #49	; 0x31
 8003562:	f000 fafe 	bl	8003b62 <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8003566:	230f      	movs	r3, #15
 8003568:	18fb      	adds	r3, r7, r3
 800356a:	4a62      	ldr	r2, [pc, #392]	; (80036f4 <SX1276SetRx+0x394>)
 800356c:	2152      	movs	r1, #82	; 0x52
 800356e:	5c52      	ldrb	r2, [r2, r1]
 8003570:	701a      	strb	r2, [r3, #0]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003572:	4b60      	ldr	r3, [pc, #384]	; (80036f4 <SX1276SetRx+0x394>)
 8003574:	224f      	movs	r2, #79	; 0x4f
 8003576:	5c9b      	ldrb	r3, [r3, r2]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d010      	beq.n	800359e <SX1276SetRx+0x23e>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800357c:	211d      	movs	r1, #29
 800357e:	2011      	movs	r0, #17
 8003580:	f000 faef 	bl	8003b62 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8003584:	2040      	movs	r0, #64	; 0x40
 8003586:	f000 fb00 	bl	8003b8a <SX1276Read>
 800358a:	0003      	movs	r3, r0
 800358c:	001a      	movs	r2, r3
 800358e:	2333      	movs	r3, #51	; 0x33
 8003590:	4013      	ands	r3, r2
 8003592:	b2db      	uxtb	r3, r3
 8003594:	0019      	movs	r1, r3
 8003596:	2040      	movs	r0, #64	; 0x40
 8003598:	f000 fae3 	bl	8003b62 <SX1276Write>
 800359c:	e00f      	b.n	80035be <SX1276SetRx+0x25e>
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800359e:	211f      	movs	r1, #31
 80035a0:	2011      	movs	r0, #17
 80035a2:	f000 fade 	bl	8003b62 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 80035a6:	2040      	movs	r0, #64	; 0x40
 80035a8:	f000 faef 	bl	8003b8a <SX1276Read>
 80035ac:	0003      	movs	r3, r0
 80035ae:	001a      	movs	r2, r3
 80035b0:	233f      	movs	r3, #63	; 0x3f
 80035b2:	4013      	ands	r3, r2
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	0019      	movs	r1, r3
 80035b8:	2040      	movs	r0, #64	; 0x40
 80035ba:	f000 fad2 	bl	8003b62 <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 80035be:	2100      	movs	r1, #0
 80035c0:	200f      	movs	r0, #15
 80035c2:	f000 face 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 80035c6:	2100      	movs	r1, #0
 80035c8:	200d      	movs	r0, #13
 80035ca:	f000 faca 	bl	8003b62 <SX1276Write>
        }
        break;
 80035ce:	46c0      	nop			; (mov r8, r8)
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 80035d0:	2380      	movs	r3, #128	; 0x80
 80035d2:	005a      	lsls	r2, r3, #1
 80035d4:	4b4f      	ldr	r3, [pc, #316]	; (8003714 <SX1276SetRx+0x3b4>)
 80035d6:	2100      	movs	r1, #0
 80035d8:	0018      	movs	r0, r3
 80035da:	f006 fd04 	bl	8009fe6 <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 80035de:	4b45      	ldr	r3, [pc, #276]	; (80036f4 <SX1276SetRx+0x394>)
 80035e0:	2201      	movs	r2, #1
 80035e2:	711a      	strb	r2, [r3, #4]
    if( timeout != 0 )
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d009      	beq.n	80035fe <SX1276SetRx+0x29e>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	4b4a      	ldr	r3, [pc, #296]	; (8003718 <SX1276SetRx+0x3b8>)
 80035ee:	0011      	movs	r1, r2
 80035f0:	0018      	movs	r0, r3
 80035f2:	f005 f9bb 	bl	800896c <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 80035f6:	4b48      	ldr	r3, [pc, #288]	; (8003718 <SX1276SetRx+0x3b8>)
 80035f8:	0018      	movs	r0, r3
 80035fa:	f005 f80d 	bl	8008618 <TimerStart>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 80035fe:	4b3d      	ldr	r3, [pc, #244]	; (80036f4 <SX1276SetRx+0x394>)
 8003600:	795b      	ldrb	r3, [r3, #5]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d165      	bne.n	80036d2 <SX1276SetRx+0x372>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8003606:	2005      	movs	r0, #5
 8003608:	f000 fa20 	bl	8003a4c <SX1276SetOpMode>

        if( rxContinuous == false )
 800360c:	230f      	movs	r3, #15
 800360e:	18fb      	adds	r3, r7, r3
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2201      	movs	r2, #1
 8003614:	4053      	eors	r3, r2
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	d066      	beq.n	80036ea <SX1276SetRx+0x38a>
        {
            TimerSetValue( &RxTimeoutSyncWord, (uint32_t) ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 800361c:	4b35      	ldr	r3, [pc, #212]	; (80036f4 <SX1276SetRx+0x394>)
 800361e:	8c1b      	ldrh	r3, [r3, #32]
 8003620:	0018      	movs	r0, r3
 8003622:	f7fe fd31 	bl	8002088 <__aeabi_i2d>
 8003626:	0004      	movs	r4, r0
 8003628:	000d      	movs	r5, r1
                                                             ( ( SX1276Read( REG_SYNCCONFIG ) &
 800362a:	2027      	movs	r0, #39	; 0x27
 800362c:	f000 faad 	bl	8003b8a <SX1276Read>
 8003630:	0003      	movs	r3, r0
 8003632:	001a      	movs	r2, r3
 8003634:	23f8      	movs	r3, #248	; 0xf8
 8003636:	439a      	bics	r2, r3
 8003638:	0013      	movs	r3, r2
                                                                ~RF_SYNCCONFIG_SYNCSIZE_MASK ) +
 800363a:	0018      	movs	r0, r3
 800363c:	f7fe fd24 	bl	8002088 <__aeabi_i2d>
 8003640:	2200      	movs	r2, #0
 8003642:	4b36      	ldr	r3, [pc, #216]	; (800371c <SX1276SetRx+0x3bc>)
 8003644:	f7fd f812 	bl	800066c <__aeabi_dadd>
 8003648:	0002      	movs	r2, r0
 800364a:	000b      	movs	r3, r1
            TimerSetValue( &RxTimeoutSyncWord, (uint32_t) ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 800364c:	0020      	movs	r0, r4
 800364e:	0029      	movs	r1, r5
 8003650:	f7fd f80c 	bl	800066c <__aeabi_dadd>
 8003654:	0003      	movs	r3, r0
 8003656:	000c      	movs	r4, r1
 8003658:	0018      	movs	r0, r3
 800365a:	0021      	movs	r1, r4
                                                                1.0 ) + 10.0 ) /
 800365c:	2200      	movs	r2, #0
 800365e:	4b30      	ldr	r3, [pc, #192]	; (8003720 <SX1276SetRx+0x3c0>)
 8003660:	f7fd f804 	bl	800066c <__aeabi_dadd>
 8003664:	0003      	movs	r3, r0
 8003666:	000c      	movs	r4, r1
 8003668:	0018      	movs	r0, r3
 800366a:	0021      	movs	r1, r4
            TimerSetValue( &RxTimeoutSyncWord, (uint32_t) ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 800366c:	2200      	movs	r2, #0
 800366e:	4b2d      	ldr	r3, [pc, #180]	; (8003724 <SX1276SetRx+0x3c4>)
 8003670:	f7fd ff40 	bl	80014f4 <__aeabi_dmul>
 8003674:	0003      	movs	r3, r0
 8003676:	000c      	movs	r4, r1
 8003678:	0025      	movs	r5, r4
 800367a:	001c      	movs	r4, r3
                                                             ( double )SX1276.Settings.Fsk.Datarate ) * 1e3 ) + 4 );
 800367c:	4b1d      	ldr	r3, [pc, #116]	; (80036f4 <SX1276SetRx+0x394>)
 800367e:	69db      	ldr	r3, [r3, #28]
 8003680:	0018      	movs	r0, r3
 8003682:	f7fe fd43 	bl	800210c <__aeabi_ui2d>
 8003686:	0002      	movs	r2, r0
 8003688:	000b      	movs	r3, r1
                                                                1.0 ) + 10.0 ) /
 800368a:	0020      	movs	r0, r4
 800368c:	0029      	movs	r1, r5
 800368e:	f7fd fafd 	bl	8000c8c <__aeabi_ddiv>
 8003692:	0003      	movs	r3, r0
 8003694:	000c      	movs	r4, r1
 8003696:	0018      	movs	r0, r3
 8003698:	0021      	movs	r1, r4
            TimerSetValue( &RxTimeoutSyncWord, (uint32_t) ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 800369a:	2200      	movs	r2, #0
 800369c:	4b22      	ldr	r3, [pc, #136]	; (8003728 <SX1276SetRx+0x3c8>)
 800369e:	f7fd ff29 	bl	80014f4 <__aeabi_dmul>
 80036a2:	0003      	movs	r3, r0
 80036a4:	000c      	movs	r4, r1
 80036a6:	0018      	movs	r0, r3
 80036a8:	0021      	movs	r1, r4
 80036aa:	f007 f8bf 	bl	800a82c <ceil>
 80036ae:	0003      	movs	r3, r0
 80036b0:	000c      	movs	r4, r1
 80036b2:	0018      	movs	r0, r3
 80036b4:	0021      	movs	r1, r4
 80036b6:	f7fc fefb 	bl	80004b0 <__aeabi_d2uiz>
 80036ba:	0003      	movs	r3, r0
 80036bc:	1d1a      	adds	r2, r3, #4
 80036be:	4b1b      	ldr	r3, [pc, #108]	; (800372c <SX1276SetRx+0x3cc>)
 80036c0:	0011      	movs	r1, r2
 80036c2:	0018      	movs	r0, r3
 80036c4:	f005 f952 	bl	800896c <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 80036c8:	4b18      	ldr	r3, [pc, #96]	; (800372c <SX1276SetRx+0x3cc>)
 80036ca:	0018      	movs	r0, r3
 80036cc:	f004 ffa4 	bl	8008618 <TimerStart>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 80036d0:	e00b      	b.n	80036ea <SX1276SetRx+0x38a>
        if( rxContinuous == true )
 80036d2:	230f      	movs	r3, #15
 80036d4:	18fb      	adds	r3, r7, r3
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <SX1276SetRx+0x384>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 80036dc:	2005      	movs	r0, #5
 80036de:	f000 f9b5 	bl	8003a4c <SX1276SetOpMode>
}
 80036e2:	e002      	b.n	80036ea <SX1276SetRx+0x38a>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 80036e4:	2006      	movs	r0, #6
 80036e6:	f000 f9b1 	bl	8003a4c <SX1276SetOpMode>
}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b004      	add	sp, #16
 80036f0:	bdb0      	pop	{r4, r5, r7, pc}
 80036f2:	46c0      	nop			; (mov r8, r8)
 80036f4:	20000508 	.word	0x20000508
 80036f8:	0800abc8 	.word	0x0800abc8
 80036fc:	00001e82 	.word	0x00001e82
 8003700:	000028b4 	.word	0x000028b4
 8003704:	00003d04 	.word	0x00003d04
 8003708:	0000515e 	.word	0x0000515e
 800370c:	00007a12 	.word	0x00007a12
 8003710:	0000a2c6 	.word	0x0000a2c6
 8003714:	200000b4 	.word	0x200000b4
 8003718:	20000568 	.word	0x20000568
 800371c:	3ff00000 	.word	0x3ff00000
 8003720:	40240000 	.word	0x40240000
 8003724:	40200000 	.word	0x40200000
 8003728:	408f4000 	.word	0x408f4000
 800372c:	200004f4 	.word	0x200004f4

08003730 <SX1276SetTx>:

void SX1276SetTx( uint32_t timeout )
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
    TimerSetValue( &TxTimeoutTimer, timeout );
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	4b38      	ldr	r3, [pc, #224]	; (800381c <SX1276SetTx+0xec>)
 800373c:	0011      	movs	r1, r2
 800373e:	0018      	movs	r0, r3
 8003740:	f005 f914 	bl	800896c <TimerSetValue>

    switch( SX1276.Settings.Modem )
 8003744:	4b36      	ldr	r3, [pc, #216]	; (8003820 <SX1276SetTx+0xf0>)
 8003746:	795b      	ldrb	r3, [r3, #5]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <SX1276SetTx+0x22>
 800374c:	2b01      	cmp	r3, #1
 800374e:	d028      	beq.n	80037a2 <SX1276SetTx+0x72>
 8003750:	e056      	b.n	8003800 <SX1276SetTx+0xd0>
            // DIO1=FifoEmpty
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003752:	2040      	movs	r0, #64	; 0x40
 8003754:	f000 fa19 	bl	8003b8a <SX1276Read>
 8003758:	0003      	movs	r3, r0
 800375a:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 800375c:	2203      	movs	r2, #3
 800375e:	4013      	ands	r3, r2
 8003760:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
 8003762:	2210      	movs	r2, #16
 8003764:	4313      	orrs	r3, r2
 8003766:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003768:	b2db      	uxtb	r3, r3
 800376a:	0019      	movs	r1, r3
 800376c:	2040      	movs	r0, #64	; 0x40
 800376e:	f000 f9f8 	bl	8003b62 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_01 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8003772:	2041      	movs	r0, #65	; 0x41
 8003774:	f000 fa09 	bl	8003b8a <SX1276Read>
 8003778:	0003      	movs	r3, r0
 800377a:	001a      	movs	r2, r3
 800377c:	233e      	movs	r3, #62	; 0x3e
 800377e:	4013      	ands	r3, r2
 8003780:	b2db      	uxtb	r3, r3
 8003782:	0019      	movs	r1, r3
 8003784:	2041      	movs	r0, #65	; 0x41
 8003786:	f000 f9ec 	bl	8003b62 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800378a:	2035      	movs	r0, #53	; 0x35
 800378c:	f000 f9fd 	bl	8003b8a <SX1276Read>
 8003790:	0003      	movs	r3, r0
 8003792:	001a      	movs	r2, r3
 8003794:	233f      	movs	r3, #63	; 0x3f
 8003796:	4013      	ands	r3, r2
 8003798:	b2d9      	uxtb	r1, r3
 800379a:	4b21      	ldr	r3, [pc, #132]	; (8003820 <SX1276SetTx+0xf0>)
 800379c:	223a      	movs	r2, #58	; 0x3a
 800379e:	5499      	strb	r1, [r3, r2]
        }
        break;
 80037a0:	e02e      	b.n	8003800 <SX1276SetTx+0xd0>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80037a2:	4b1f      	ldr	r3, [pc, #124]	; (8003820 <SX1276SetTx+0xf0>)
 80037a4:	224f      	movs	r2, #79	; 0x4f
 80037a6:	5c9b      	ldrb	r3, [r3, r2]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d014      	beq.n	80037d6 <SX1276SetTx+0xa6>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80037ac:	21f5      	movs	r1, #245	; 0xf5
 80037ae:	2011      	movs	r0, #17
 80037b0:	f000 f9d7 	bl	8003b62 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 80037b4:	2040      	movs	r0, #64	; 0x40
 80037b6:	f000 f9e8 	bl	8003b8a <SX1276Read>
 80037ba:	0003      	movs	r3, r0
 80037bc:	b25b      	sxtb	r3, r3
 80037be:	2233      	movs	r2, #51	; 0x33
 80037c0:	4013      	ands	r3, r2
 80037c2:	b25b      	sxtb	r3, r3
 80037c4:	2240      	movs	r2, #64	; 0x40
 80037c6:	4313      	orrs	r3, r2
 80037c8:	b25b      	sxtb	r3, r3
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	0019      	movs	r1, r3
 80037ce:	2040      	movs	r0, #64	; 0x40
 80037d0:	f000 f9c7 	bl	8003b62 <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 80037d4:	e013      	b.n	80037fe <SX1276SetTx+0xce>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80037d6:	21f7      	movs	r1, #247	; 0xf7
 80037d8:	2011      	movs	r0, #17
 80037da:	f000 f9c2 	bl	8003b62 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 80037de:	2040      	movs	r0, #64	; 0x40
 80037e0:	f000 f9d3 	bl	8003b8a <SX1276Read>
 80037e4:	0003      	movs	r3, r0
 80037e6:	b25b      	sxtb	r3, r3
 80037e8:	223f      	movs	r2, #63	; 0x3f
 80037ea:	4013      	ands	r3, r2
 80037ec:	b25b      	sxtb	r3, r3
 80037ee:	2240      	movs	r2, #64	; 0x40
 80037f0:	4313      	orrs	r3, r2
 80037f2:	b25b      	sxtb	r3, r3
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	0019      	movs	r1, r3
 80037f8:	2040      	movs	r0, #64	; 0x40
 80037fa:	f000 f9b2 	bl	8003b62 <SX1276Write>
        break;
 80037fe:	46c0      	nop			; (mov r8, r8)
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 8003800:	4b07      	ldr	r3, [pc, #28]	; (8003820 <SX1276SetTx+0xf0>)
 8003802:	2202      	movs	r2, #2
 8003804:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8003806:	4b05      	ldr	r3, [pc, #20]	; (800381c <SX1276SetTx+0xec>)
 8003808:	0018      	movs	r0, r3
 800380a:	f004 ff05 	bl	8008618 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 800380e:	2003      	movs	r0, #3
 8003810:	f000 f91c 	bl	8003a4c <SX1276SetOpMode>
}
 8003814:	46c0      	nop			; (mov r8, r8)
 8003816:	46bd      	mov	sp, r7
 8003818:	b002      	add	sp, #8
 800381a:	bd80      	pop	{r7, pc}
 800381c:	200004e0 	.word	0x200004e0
 8003820:	20000508 	.word	0x20000508

08003824 <SX1276StartCad>:

void SX1276StartCad( void )
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 8003828:	4b11      	ldr	r3, [pc, #68]	; (8003870 <SX1276StartCad+0x4c>)
 800382a:	795b      	ldrb	r3, [r3, #5]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d01a      	beq.n	8003866 <SX1276StartCad+0x42>
 8003830:	2b01      	cmp	r3, #1
 8003832:	d000      	beq.n	8003836 <SX1276StartCad+0x12>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 8003834:	e018      	b.n	8003868 <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8003836:	21fa      	movs	r1, #250	; 0xfa
 8003838:	2011      	movs	r0, #17
 800383a:	f000 f992 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 800383e:	2040      	movs	r0, #64	; 0x40
 8003840:	f000 f9a3 	bl	8003b8a <SX1276Read>
 8003844:	0003      	movs	r3, r0
 8003846:	001a      	movs	r2, r3
 8003848:	2303      	movs	r3, #3
 800384a:	439a      	bics	r2, r3
 800384c:	0013      	movs	r3, r2
 800384e:	b2db      	uxtb	r3, r3
 8003850:	0019      	movs	r1, r3
 8003852:	2040      	movs	r0, #64	; 0x40
 8003854:	f000 f985 	bl	8003b62 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 8003858:	4b05      	ldr	r3, [pc, #20]	; (8003870 <SX1276StartCad+0x4c>)
 800385a:	2203      	movs	r2, #3
 800385c:	711a      	strb	r2, [r3, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 800385e:	2007      	movs	r0, #7
 8003860:	f000 f8f4 	bl	8003a4c <SX1276SetOpMode>
        break;
 8003864:	e000      	b.n	8003868 <SX1276StartCad+0x44>
        break;
 8003866:	46c0      	nop			; (mov r8, r8)
    }
}
 8003868:	46c0      	nop			; (mov r8, r8)
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	20000508 	.word	0x20000508

08003874 <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8003874:	b590      	push	{r4, r7, lr}
 8003876:	b08f      	sub	sp, #60	; 0x3c
 8003878:	af0a      	add	r7, sp, #40	; 0x28
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	0008      	movs	r0, r1
 800387e:	0011      	movs	r1, r2
 8003880:	1cfb      	adds	r3, r7, #3
 8003882:	1c02      	adds	r2, r0, #0
 8003884:	701a      	strb	r2, [r3, #0]
 8003886:	003b      	movs	r3, r7
 8003888:	1c0a      	adds	r2, r1, #0
 800388a:	801a      	strh	r2, [r3, #0]
    uint32_t timeout = ( uint32_t )( time * 1e3 );
 800388c:	003b      	movs	r3, r7
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	0018      	movs	r0, r3
 8003892:	f7fe fbf9 	bl	8002088 <__aeabi_i2d>
 8003896:	2200      	movs	r2, #0
 8003898:	4b29      	ldr	r3, [pc, #164]	; (8003940 <SX1276SetTxContinuousWave+0xcc>)
 800389a:	f7fd fe2b 	bl	80014f4 <__aeabi_dmul>
 800389e:	0003      	movs	r3, r0
 80038a0:	000c      	movs	r4, r1
 80038a2:	0018      	movs	r0, r3
 80038a4:	0021      	movs	r1, r4
 80038a6:	f7fc fe03 	bl	80004b0 <__aeabi_d2uiz>
 80038aa:	0003      	movs	r3, r0
 80038ac:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	0018      	movs	r0, r3
 80038b2:	f7fe fd83 	bl	80023bc <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 80038b6:	1cfb      	adds	r3, r7, #3
 80038b8:	2100      	movs	r1, #0
 80038ba:	5659      	ldrsb	r1, [r3, r1]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	9308      	str	r3, [sp, #32]
 80038c0:	2300      	movs	r3, #0
 80038c2:	9307      	str	r3, [sp, #28]
 80038c4:	2300      	movs	r3, #0
 80038c6:	9306      	str	r3, [sp, #24]
 80038c8:	2300      	movs	r3, #0
 80038ca:	9305      	str	r3, [sp, #20]
 80038cc:	2300      	movs	r3, #0
 80038ce:	9304      	str	r3, [sp, #16]
 80038d0:	2300      	movs	r3, #0
 80038d2:	9303      	str	r3, [sp, #12]
 80038d4:	2305      	movs	r3, #5
 80038d6:	9302      	str	r3, [sp, #8]
 80038d8:	2300      	movs	r3, #0
 80038da:	9301      	str	r3, [sp, #4]
 80038dc:	2396      	movs	r3, #150	; 0x96
 80038de:	015b      	lsls	r3, r3, #5
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	2300      	movs	r3, #0
 80038e4:	2200      	movs	r2, #0
 80038e6:	2000      	movs	r0, #0
 80038e8:	f7ff f8e6 	bl	8002ab8 <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 80038ec:	2031      	movs	r0, #49	; 0x31
 80038ee:	f000 f94c 	bl	8003b8a <SX1276Read>
 80038f2:	0003      	movs	r3, r0
 80038f4:	001a      	movs	r2, r3
 80038f6:	2340      	movs	r3, #64	; 0x40
 80038f8:	439a      	bics	r2, r3
 80038fa:	0013      	movs	r3, r2
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	0019      	movs	r1, r3
 8003900:	2031      	movs	r0, #49	; 0x31
 8003902:	f000 f92e 	bl	8003b62 <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8003906:	21f0      	movs	r1, #240	; 0xf0
 8003908:	2040      	movs	r0, #64	; 0x40
 800390a:	f000 f92a 	bl	8003b62 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 800390e:	21a0      	movs	r1, #160	; 0xa0
 8003910:	2041      	movs	r0, #65	; 0x41
 8003912:	f000 f926 	bl	8003b62 <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	4b0a      	ldr	r3, [pc, #40]	; (8003944 <SX1276SetTxContinuousWave+0xd0>)
 800391a:	0011      	movs	r1, r2
 800391c:	0018      	movs	r0, r3
 800391e:	f005 f825 	bl	800896c <TimerSetValue>

    SX1276.Settings.State = RF_TX_RUNNING;
 8003922:	4b09      	ldr	r3, [pc, #36]	; (8003948 <SX1276SetTxContinuousWave+0xd4>)
 8003924:	2202      	movs	r2, #2
 8003926:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8003928:	4b06      	ldr	r3, [pc, #24]	; (8003944 <SX1276SetTxContinuousWave+0xd0>)
 800392a:	0018      	movs	r0, r3
 800392c:	f004 fe74 	bl	8008618 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8003930:	2003      	movs	r0, #3
 8003932:	f000 f88b 	bl	8003a4c <SX1276SetOpMode>
}
 8003936:	46c0      	nop			; (mov r8, r8)
 8003938:	46bd      	mov	sp, r7
 800393a:	b005      	add	sp, #20
 800393c:	bd90      	pop	{r4, r7, pc}
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	408f4000 	.word	0x408f4000
 8003944:	200004e0 	.word	0x200004e0
 8003948:	20000508 	.word	0x20000508

0800394c <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	0002      	movs	r2, r0
 8003954:	1dfb      	adds	r3, r7, #7
 8003956:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 8003958:	230e      	movs	r3, #14
 800395a:	18fb      	adds	r3, r7, r3
 800395c:	2200      	movs	r2, #0
 800395e:	801a      	strh	r2, [r3, #0]

    switch( modem )
 8003960:	1dfb      	adds	r3, r7, #7
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <SX1276ReadRssi+0x22>
 8003968:	2b01      	cmp	r3, #1
 800396a:	d00d      	beq.n	8003988 <SX1276ReadRssi+0x3c>
 800396c:	e027      	b.n	80039be <SX1276ReadRssi+0x72>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800396e:	2011      	movs	r0, #17
 8003970:	f000 f90b 	bl	8003b8a <SX1276Read>
 8003974:	0003      	movs	r3, r0
 8003976:	085b      	lsrs	r3, r3, #1
 8003978:	b2db      	uxtb	r3, r3
 800397a:	b29b      	uxth	r3, r3
 800397c:	425b      	negs	r3, r3
 800397e:	b29a      	uxth	r2, r3
 8003980:	230e      	movs	r3, #14
 8003982:	18fb      	adds	r3, r7, r3
 8003984:	801a      	strh	r2, [r3, #0]
        break;
 8003986:	e020      	b.n	80039ca <SX1276ReadRssi+0x7e>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8003988:	4b14      	ldr	r3, [pc, #80]	; (80039dc <SX1276ReadRssi+0x90>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	4a14      	ldr	r2, [pc, #80]	; (80039e0 <SX1276ReadRssi+0x94>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d90a      	bls.n	80039a8 <SX1276ReadRssi+0x5c>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8003992:	201b      	movs	r0, #27
 8003994:	f000 f8f9 	bl	8003b8a <SX1276Read>
 8003998:	0003      	movs	r3, r0
 800399a:	b29b      	uxth	r3, r3
 800399c:	3b9d      	subs	r3, #157	; 0x9d
 800399e:	b29a      	uxth	r2, r3
 80039a0:	230e      	movs	r3, #14
 80039a2:	18fb      	adds	r3, r7, r3
 80039a4:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 80039a6:	e010      	b.n	80039ca <SX1276ReadRssi+0x7e>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 80039a8:	201b      	movs	r0, #27
 80039aa:	f000 f8ee 	bl	8003b8a <SX1276Read>
 80039ae:	0003      	movs	r3, r0
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	3ba4      	subs	r3, #164	; 0xa4
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	230e      	movs	r3, #14
 80039b8:	18fb      	adds	r3, r7, r3
 80039ba:	801a      	strh	r2, [r3, #0]
        break;
 80039bc:	e005      	b.n	80039ca <SX1276ReadRssi+0x7e>
    default:
        rssi = -1;
 80039be:	230e      	movs	r3, #14
 80039c0:	18fb      	adds	r3, r7, r3
 80039c2:	2201      	movs	r2, #1
 80039c4:	4252      	negs	r2, r2
 80039c6:	801a      	strh	r2, [r3, #0]
        break;
 80039c8:	46c0      	nop			; (mov r8, r8)
    }
    return rssi;
 80039ca:	230e      	movs	r3, #14
 80039cc:	18fb      	adds	r3, r7, r3
 80039ce:	2200      	movs	r2, #0
 80039d0:	5e9b      	ldrsh	r3, [r3, r2]
}
 80039d2:	0018      	movs	r0, r3
 80039d4:	46bd      	mov	sp, r7
 80039d6:	b004      	add	sp, #16
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	46c0      	nop			; (mov r8, r8)
 80039dc:	20000508 	.word	0x20000508
 80039e0:	1f4add40 	.word	0x1f4add40

080039e4 <SX1276Reset>:

void SX1276Reset( void )
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef initStruct={0};
 80039ea:	1d3b      	adds	r3, r7, #4
 80039ec:	0018      	movs	r0, r3
 80039ee:	2314      	movs	r3, #20
 80039f0:	001a      	movs	r2, r3
 80039f2:	2100      	movs	r1, #0
 80039f4:	f006 faf7 	bl	8009fe6 <memset>

    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 80039f8:	1d3b      	adds	r3, r7, #4
 80039fa:	2201      	movs	r2, #1
 80039fc:	605a      	str	r2, [r3, #4]
    initStruct.Pull = GPIO_NOPULL;
 80039fe:	1d3b      	adds	r3, r7, #4
 8003a00:	2200      	movs	r2, #0
 8003a02:	609a      	str	r2, [r3, #8]
    initStruct.Speed = GPIO_SPEED_HIGH;
 8003a04:	1d3b      	adds	r3, r7, #4
 8003a06:	2203      	movs	r2, #3
 8003a08:	60da      	str	r2, [r3, #12]

    // Set RESET pin to 0
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct);
 8003a0a:	1d3b      	adds	r3, r7, #4
 8003a0c:	480e      	ldr	r0, [pc, #56]	; (8003a48 <SX1276Reset+0x64>)
 8003a0e:	001a      	movs	r2, r3
 8003a10:	2101      	movs	r1, #1
 8003a12:	f005 f813 	bl	8008a3c <HW_GPIO_Init>
    HW_GPIO_Write( RADIO_RESET_PORT, RADIO_RESET_PIN, 0 );
 8003a16:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <SX1276Reset+0x64>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	f005 f8d9 	bl	8008bd4 <HW_GPIO_Write>


    // Wait 1 ms
    DelayMs( 1 );
 8003a22:	2001      	movs	r0, #1
 8003a24:	f004 fd8c 	bl	8008540 <DelayMs>

    // Configure RESET as input
    initStruct.Mode = GPIO_NOPULL;
 8003a28:	1d3b      	adds	r3, r7, #4
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	605a      	str	r2, [r3, #4]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct);
 8003a2e:	1d3b      	adds	r3, r7, #4
 8003a30:	4805      	ldr	r0, [pc, #20]	; (8003a48 <SX1276Reset+0x64>)
 8003a32:	001a      	movs	r2, r3
 8003a34:	2101      	movs	r1, #1
 8003a36:	f005 f801 	bl	8008a3c <HW_GPIO_Init>

    // Wait 6 ms
    DelayMs( 6 );
 8003a3a:	2006      	movs	r0, #6
 8003a3c:	f004 fd80 	bl	8008540 <DelayMs>
}
 8003a40:	46c0      	nop			; (mov r8, r8)
 8003a42:	46bd      	mov	sp, r7
 8003a44:	b006      	add	sp, #24
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	50000800 	.word	0x50000800

08003a4c <SX1276SetOpMode>:

void SX1276SetOpMode( uint8_t opMode )
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	0002      	movs	r2, r0
 8003a54:	1dfb      	adds	r3, r7, #7
 8003a56:	701a      	strb	r2, [r3, #0]
    if( opMode == RF_OPMODE_SLEEP )
 8003a58:	1dfb      	adds	r3, r7, #7
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d103      	bne.n	8003a68 <SX1276SetOpMode+0x1c>
    {
        SX1276SetAntSwLowPower( true );
 8003a60:	2001      	movs	r0, #1
 8003a62:	f000 ffb5 	bl	80049d0 <SX1276SetAntSwLowPower>
 8003a66:	e007      	b.n	8003a78 <SX1276SetOpMode+0x2c>
    }
    else
    {
        SX1276SetAntSwLowPower( false );
 8003a68:	2000      	movs	r0, #0
 8003a6a:	f000 ffb1 	bl	80049d0 <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
 8003a6e:	1dfb      	adds	r3, r7, #7
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	0018      	movs	r0, r3
 8003a74:	f001 f870 	bl	8004b58 <SX1276SetAntSw>
    }
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8003a78:	2001      	movs	r0, #1
 8003a7a:	f000 f886 	bl	8003b8a <SX1276Read>
 8003a7e:	0003      	movs	r3, r0
 8003a80:	b25b      	sxtb	r3, r3
 8003a82:	2207      	movs	r2, #7
 8003a84:	4393      	bics	r3, r2
 8003a86:	b25a      	sxtb	r2, r3
 8003a88:	1dfb      	adds	r3, r7, #7
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	b25b      	sxtb	r3, r3
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	b25b      	sxtb	r3, r3
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	0019      	movs	r1, r3
 8003a96:	2001      	movs	r0, #1
 8003a98:	f000 f863 	bl	8003b62 <SX1276Write>
}
 8003a9c:	46c0      	nop			; (mov r8, r8)
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	b002      	add	sp, #8
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	0002      	movs	r2, r0
 8003aac:	1dfb      	adds	r3, r7, #7
 8003aae:	701a      	strb	r2, [r3, #0]

    if( SX1276.Settings.Modem == modem )
 8003ab0:	4b21      	ldr	r3, [pc, #132]	; (8003b38 <SX1276SetModem+0x94>)
 8003ab2:	795b      	ldrb	r3, [r3, #5]
 8003ab4:	1dfa      	adds	r2, r7, #7
 8003ab6:	7812      	ldrb	r2, [r2, #0]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d039      	beq.n	8003b30 <SX1276SetModem+0x8c>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 8003abc:	4b1e      	ldr	r3, [pc, #120]	; (8003b38 <SX1276SetModem+0x94>)
 8003abe:	1dfa      	adds	r2, r7, #7
 8003ac0:	7812      	ldrb	r2, [r2, #0]
 8003ac2:	715a      	strb	r2, [r3, #5]
    switch( SX1276.Settings.Modem )
 8003ac4:	4b1c      	ldr	r3, [pc, #112]	; (8003b38 <SX1276SetModem+0x94>)
 8003ac6:	795b      	ldrb	r3, [r3, #5]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d017      	beq.n	8003afc <SX1276SetModem+0x58>
    {
    default:
    case MODEM_FSK:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8003acc:	2000      	movs	r0, #0
 8003ace:	f7ff ffbd 	bl	8003a4c <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8003ad2:	2001      	movs	r0, #1
 8003ad4:	f000 f859 	bl	8003b8a <SX1276Read>
 8003ad8:	0003      	movs	r3, r0
 8003ada:	001a      	movs	r2, r3
 8003adc:	237f      	movs	r3, #127	; 0x7f
 8003ade:	4013      	ands	r3, r2
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	0019      	movs	r1, r3
 8003ae4:	2001      	movs	r0, #1
 8003ae6:	f000 f83c 	bl	8003b62 <SX1276Write>
    
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8003aea:	2100      	movs	r1, #0
 8003aec:	2040      	movs	r0, #64	; 0x40
 8003aee:	f000 f838 	bl	8003b62 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8003af2:	2130      	movs	r1, #48	; 0x30
 8003af4:	2041      	movs	r0, #65	; 0x41
 8003af6:	f000 f834 	bl	8003b62 <SX1276Write>
        break;
 8003afa:	e01a      	b.n	8003b32 <SX1276SetModem+0x8e>
    case MODEM_LORA:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8003afc:	2000      	movs	r0, #0
 8003afe:	f7ff ffa5 	bl	8003a4c <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8003b02:	2001      	movs	r0, #1
 8003b04:	f000 f841 	bl	8003b8a <SX1276Read>
 8003b08:	0003      	movs	r3, r0
 8003b0a:	001a      	movs	r2, r3
 8003b0c:	2380      	movs	r3, #128	; 0x80
 8003b0e:	425b      	negs	r3, r3
 8003b10:	4313      	orrs	r3, r2
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	0019      	movs	r1, r3
 8003b16:	2001      	movs	r0, #1
 8003b18:	f000 f823 	bl	8003b62 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	2040      	movs	r0, #64	; 0x40
 8003b20:	f000 f81f 	bl	8003b62 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8003b24:	2100      	movs	r1, #0
 8003b26:	2041      	movs	r0, #65	; 0x41
 8003b28:	f000 f81b 	bl	8003b62 <SX1276Write>
        break;
 8003b2c:	46c0      	nop			; (mov r8, r8)
 8003b2e:	e000      	b.n	8003b32 <SX1276SetModem+0x8e>
        return;
 8003b30:	46c0      	nop			; (mov r8, r8)
    }
}
 8003b32:	46bd      	mov	sp, r7
 8003b34:	b002      	add	sp, #8
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	20000508 	.word	0x20000508

08003b3c <SX1276SetSyncWord>:

void SX1276SetSyncWord( uint8_t data )
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	0002      	movs	r2, r0
 8003b44:	1dfb      	adds	r3, r7, #7
 8003b46:	701a      	strb	r2, [r3, #0]
  SX1276SetModem( MODEM_LORA );
 8003b48:	2001      	movs	r0, #1
 8003b4a:	f7ff ffab 	bl	8003aa4 <SX1276SetModem>

  SX1276Write( REG_LR_SYNCWORD, data);
 8003b4e:	1dfb      	adds	r3, r7, #7
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	0019      	movs	r1, r3
 8003b54:	2039      	movs	r0, #57	; 0x39
 8003b56:	f000 f804 	bl	8003b62 <SX1276Write>
}
 8003b5a:	46c0      	nop			; (mov r8, r8)
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	b002      	add	sp, #8
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <SX1276Write>:


void SX1276Write( uint8_t addr, uint8_t data )
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b082      	sub	sp, #8
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	0002      	movs	r2, r0
 8003b6a:	1dfb      	adds	r3, r7, #7
 8003b6c:	701a      	strb	r2, [r3, #0]
 8003b6e:	1dbb      	adds	r3, r7, #6
 8003b70:	1c0a      	adds	r2, r1, #0
 8003b72:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( addr, &data, 1 );
 8003b74:	1db9      	adds	r1, r7, #6
 8003b76:	1dfb      	adds	r3, r7, #7
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	f000 f819 	bl	8003bb4 <SX1276WriteBuffer>
}
 8003b82:	46c0      	nop			; (mov r8, r8)
 8003b84:	46bd      	mov	sp, r7
 8003b86:	b002      	add	sp, #8
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <SX1276Read>:


uint8_t SX1276Read( uint8_t addr )
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b084      	sub	sp, #16
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	0002      	movs	r2, r0
 8003b92:	1dfb      	adds	r3, r7, #7
 8003b94:	701a      	strb	r2, [r3, #0]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 8003b96:	230f      	movs	r3, #15
 8003b98:	18f9      	adds	r1, r7, r3
 8003b9a:	1dfb      	adds	r3, r7, #7
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	f000 f84d 	bl	8003c40 <SX1276ReadBuffer>
    return data;
 8003ba6:	230f      	movs	r3, #15
 8003ba8:	18fb      	adds	r3, r7, r3
 8003baa:	781b      	ldrb	r3, [r3, #0]
}
 8003bac:	0018      	movs	r0, r3
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	b004      	add	sp, #16
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6039      	str	r1, [r7, #0]
 8003bbc:	0011      	movs	r1, r2
 8003bbe:	1dfb      	adds	r3, r7, #7
 8003bc0:	1c02      	adds	r2, r0, #0
 8003bc2:	701a      	strb	r2, [r3, #0]
 8003bc4:	1dbb      	adds	r3, r7, #6
 8003bc6:	1c0a      	adds	r2, r1, #0
 8003bc8:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8003bca:	2380      	movs	r3, #128	; 0x80
 8003bcc:	0219      	lsls	r1, r3, #8
 8003bce:	23a0      	movs	r3, #160	; 0xa0
 8003bd0:	05db      	lsls	r3, r3, #23
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	f004 fffd 	bl	8008bd4 <HW_GPIO_Write>

    HW_SPI_InOut( addr | 0x80 );
 8003bda:	1dfb      	adds	r3, r7, #7
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	2280      	movs	r2, #128	; 0x80
 8003be0:	4252      	negs	r2, r2
 8003be2:	4313      	orrs	r3, r2
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	0018      	movs	r0, r3
 8003bea:	f005 fc87 	bl	80094fc <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 8003bee:	230f      	movs	r3, #15
 8003bf0:	18fb      	adds	r3, r7, r3
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	701a      	strb	r2, [r3, #0]
 8003bf6:	e010      	b.n	8003c1a <SX1276WriteBuffer+0x66>
    {
          HW_SPI_InOut( buffer[i] );
 8003bf8:	230f      	movs	r3, #15
 8003bfa:	18fb      	adds	r3, r7, r3
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	18d3      	adds	r3, r2, r3
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	0018      	movs	r0, r3
 8003c08:	f005 fc78 	bl	80094fc <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 8003c0c:	230f      	movs	r3, #15
 8003c0e:	18fb      	adds	r3, r7, r3
 8003c10:	781a      	ldrb	r2, [r3, #0]
 8003c12:	230f      	movs	r3, #15
 8003c14:	18fb      	adds	r3, r7, r3
 8003c16:	3201      	adds	r2, #1
 8003c18:	701a      	strb	r2, [r3, #0]
 8003c1a:	230f      	movs	r3, #15
 8003c1c:	18fa      	adds	r2, r7, r3
 8003c1e:	1dbb      	adds	r3, r7, #6
 8003c20:	7812      	ldrb	r2, [r2, #0]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d3e7      	bcc.n	8003bf8 <SX1276WriteBuffer+0x44>
    }

    //NSS = 1;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8003c28:	2380      	movs	r3, #128	; 0x80
 8003c2a:	0219      	lsls	r1, r3, #8
 8003c2c:	23a0      	movs	r3, #160	; 0xa0
 8003c2e:	05db      	lsls	r3, r3, #23
 8003c30:	2201      	movs	r2, #1
 8003c32:	0018      	movs	r0, r3
 8003c34:	f004 ffce 	bl	8008bd4 <HW_GPIO_Write>
}
 8003c38:	46c0      	nop			; (mov r8, r8)
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	b004      	add	sp, #16
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
{
 8003c40:	b590      	push	{r4, r7, lr}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6039      	str	r1, [r7, #0]
 8003c48:	0011      	movs	r1, r2
 8003c4a:	1dfb      	adds	r3, r7, #7
 8003c4c:	1c02      	adds	r2, r0, #0
 8003c4e:	701a      	strb	r2, [r3, #0]
 8003c50:	1dbb      	adds	r3, r7, #6
 8003c52:	1c0a      	adds	r2, r1, #0
 8003c54:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8003c56:	2380      	movs	r3, #128	; 0x80
 8003c58:	0219      	lsls	r1, r3, #8
 8003c5a:	23a0      	movs	r3, #160	; 0xa0
 8003c5c:	05db      	lsls	r3, r3, #23
 8003c5e:	2200      	movs	r2, #0
 8003c60:	0018      	movs	r0, r3
 8003c62:	f004 ffb7 	bl	8008bd4 <HW_GPIO_Write>

    HW_SPI_InOut( addr & 0x7F );
 8003c66:	1dfb      	adds	r3, r7, #7
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	227f      	movs	r2, #127	; 0x7f
 8003c6e:	4013      	ands	r3, r2
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	0018      	movs	r0, r3
 8003c74:	f005 fc42 	bl	80094fc <HW_SPI_InOut>

    for( i = 0; i < size; i++ )
 8003c78:	230f      	movs	r3, #15
 8003c7a:	18fb      	adds	r3, r7, r3
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	701a      	strb	r2, [r3, #0]
 8003c80:	e011      	b.n	8003ca6 <SX1276ReadBuffer+0x66>
    {
          buffer[i] = HW_SPI_InOut( 0 );
 8003c82:	230f      	movs	r3, #15
 8003c84:	18fb      	adds	r3, r7, r3
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	18d4      	adds	r4, r2, r3
 8003c8c:	2000      	movs	r0, #0
 8003c8e:	f005 fc35 	bl	80094fc <HW_SPI_InOut>
 8003c92:	0003      	movs	r3, r0
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	7023      	strb	r3, [r4, #0]
    for( i = 0; i < size; i++ )
 8003c98:	230f      	movs	r3, #15
 8003c9a:	18fb      	adds	r3, r7, r3
 8003c9c:	781a      	ldrb	r2, [r3, #0]
 8003c9e:	230f      	movs	r3, #15
 8003ca0:	18fb      	adds	r3, r7, r3
 8003ca2:	3201      	adds	r2, #1
 8003ca4:	701a      	strb	r2, [r3, #0]
 8003ca6:	230f      	movs	r3, #15
 8003ca8:	18fa      	adds	r2, r7, r3
 8003caa:	1dbb      	adds	r3, r7, #6
 8003cac:	7812      	ldrb	r2, [r2, #0]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d3e6      	bcc.n	8003c82 <SX1276ReadBuffer+0x42>
    }

    //NSS = 1;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8003cb4:	2380      	movs	r3, #128	; 0x80
 8003cb6:	0219      	lsls	r1, r3, #8
 8003cb8:	23a0      	movs	r3, #160	; 0xa0
 8003cba:	05db      	lsls	r3, r3, #23
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	f004 ff88 	bl	8008bd4 <HW_GPIO_Write>
}
 8003cc4:	46c0      	nop			; (mov r8, r8)
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	b005      	add	sp, #20
 8003cca:	bd90      	pop	{r4, r7, pc}

08003ccc <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	000a      	movs	r2, r1
 8003cd6:	1cfb      	adds	r3, r7, #3
 8003cd8:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( 0, buffer, size );
 8003cda:	1cfb      	adds	r3, r7, #3
 8003cdc:	781a      	ldrb	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	0019      	movs	r1, r3
 8003ce2:	2000      	movs	r0, #0
 8003ce4:	f7ff ff66 	bl	8003bb4 <SX1276WriteBuffer>
}
 8003ce8:	46c0      	nop			; (mov r8, r8)
 8003cea:	46bd      	mov	sp, r7
 8003cec:	b002      	add	sp, #8
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	000a      	movs	r2, r1
 8003cfa:	1cfb      	adds	r3, r7, #3
 8003cfc:	701a      	strb	r2, [r3, #0]
    SX1276ReadBuffer( 0, buffer, size );
 8003cfe:	1cfb      	adds	r3, r7, #3
 8003d00:	781a      	ldrb	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	0019      	movs	r1, r3
 8003d06:	2000      	movs	r0, #0
 8003d08:	f7ff ff9a 	bl	8003c40 <SX1276ReadBuffer>
}
 8003d0c:	46c0      	nop			; (mov r8, r8)
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	b002      	add	sp, #8
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	0002      	movs	r2, r0
 8003d1c:	1dfb      	adds	r3, r7, #7
 8003d1e:	701a      	strb	r2, [r3, #0]
 8003d20:	1dbb      	adds	r3, r7, #6
 8003d22:	1c0a      	adds	r2, r1, #0
 8003d24:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 8003d26:	1dfb      	adds	r3, r7, #7
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f7ff feba 	bl	8003aa4 <SX1276SetModem>

    switch( modem )
 8003d30:	1dfb      	adds	r3, r7, #7
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <SX1276SetMaxPayloadLength+0x2a>
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d00f      	beq.n	8003d5c <SX1276SetMaxPayloadLength+0x48>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 8003d3c:	e016      	b.n	8003d6c <SX1276SetMaxPayloadLength+0x58>
        if( SX1276.Settings.Fsk.FixLen == false )
 8003d3e:	4b0d      	ldr	r3, [pc, #52]	; (8003d74 <SX1276SetMaxPayloadLength+0x60>)
 8003d40:	2222      	movs	r2, #34	; 0x22
 8003d42:	5c9b      	ldrb	r3, [r3, r2]
 8003d44:	2201      	movs	r2, #1
 8003d46:	4053      	eors	r3, r2
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00d      	beq.n	8003d6a <SX1276SetMaxPayloadLength+0x56>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8003d4e:	1dbb      	adds	r3, r7, #6
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	0019      	movs	r1, r3
 8003d54:	2032      	movs	r0, #50	; 0x32
 8003d56:	f7ff ff04 	bl	8003b62 <SX1276Write>
        break;
 8003d5a:	e006      	b.n	8003d6a <SX1276SetMaxPayloadLength+0x56>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8003d5c:	1dbb      	adds	r3, r7, #6
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	0019      	movs	r1, r3
 8003d62:	2023      	movs	r0, #35	; 0x23
 8003d64:	f7ff fefd 	bl	8003b62 <SX1276Write>
        break;
 8003d68:	e000      	b.n	8003d6c <SX1276SetMaxPayloadLength+0x58>
        break;
 8003d6a:	46c0      	nop			; (mov r8, r8)
}
 8003d6c:	46c0      	nop			; (mov r8, r8)
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	b002      	add	sp, #8
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	20000508 	.word	0x20000508

08003d78 <SX1276OnTimeoutIrq>:

void SX1276OnTimeoutIrq( void )
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 8003d7c:	4b31      	ldr	r3, [pc, #196]	; (8003e44 <SX1276OnTimeoutIrq+0xcc>)
 8003d7e:	791b      	ldrb	r3, [r3, #4]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d002      	beq.n	8003d8a <SX1276OnTimeoutIrq+0x12>
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d045      	beq.n	8003e14 <SX1276OnTimeoutIrq+0x9c>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 8003d88:	e058      	b.n	8003e3c <SX1276OnTimeoutIrq+0xc4>
        if( SX1276.Settings.Modem == MODEM_FSK )
 8003d8a:	4b2e      	ldr	r3, [pc, #184]	; (8003e44 <SX1276OnTimeoutIrq+0xcc>)
 8003d8c:	795b      	ldrb	r3, [r3, #5]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d132      	bne.n	8003df8 <SX1276OnTimeoutIrq+0x80>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8003d92:	4b2c      	ldr	r3, [pc, #176]	; (8003e44 <SX1276OnTimeoutIrq+0xcc>)
 8003d94:	222c      	movs	r2, #44	; 0x2c
 8003d96:	2100      	movs	r1, #0
 8003d98:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8003d9a:	4b2a      	ldr	r3, [pc, #168]	; (8003e44 <SX1276OnTimeoutIrq+0xcc>)
 8003d9c:	222d      	movs	r2, #45	; 0x2d
 8003d9e:	2100      	movs	r1, #0
 8003da0:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8003da2:	4b28      	ldr	r3, [pc, #160]	; (8003e44 <SX1276OnTimeoutIrq+0xcc>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	871a      	strh	r2, [r3, #56]	; 0x38
            SX1276.Settings.FskPacketHandler.Size = 0;
 8003da8:	4b26      	ldr	r3, [pc, #152]	; (8003e44 <SX1276OnTimeoutIrq+0xcc>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	86da      	strh	r2, [r3, #54]	; 0x36
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8003dae:	210b      	movs	r1, #11
 8003db0:	203e      	movs	r0, #62	; 0x3e
 8003db2:	f7ff fed6 	bl	8003b62 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8003db6:	2110      	movs	r1, #16
 8003db8:	203f      	movs	r0, #63	; 0x3f
 8003dba:	f7ff fed2 	bl	8003b62 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 8003dbe:	4b21      	ldr	r3, [pc, #132]	; (8003e44 <SX1276OnTimeoutIrq+0xcc>)
 8003dc0:	2226      	movs	r2, #38	; 0x26
 8003dc2:	5c9b      	ldrb	r3, [r3, r2]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d010      	beq.n	8003dea <SX1276OnTimeoutIrq+0x72>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8003dc8:	200d      	movs	r0, #13
 8003dca:	f7ff fede 	bl	8003b8a <SX1276Read>
 8003dce:	0003      	movs	r3, r0
 8003dd0:	001a      	movs	r2, r3
 8003dd2:	2340      	movs	r3, #64	; 0x40
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	0019      	movs	r1, r3
 8003dda:	200d      	movs	r0, #13
 8003ddc:	f7ff fec1 	bl	8003b62 <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 8003de0:	4b19      	ldr	r3, [pc, #100]	; (8003e48 <SX1276OnTimeoutIrq+0xd0>)
 8003de2:	0018      	movs	r0, r3
 8003de4:	f004 fc18 	bl	8008618 <TimerStart>
 8003de8:	e006      	b.n	8003df8 <SX1276OnTimeoutIrq+0x80>
                SX1276.Settings.State = RF_IDLE;
 8003dea:	4b16      	ldr	r3, [pc, #88]	; (8003e44 <SX1276OnTimeoutIrq+0xcc>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	711a      	strb	r2, [r3, #4]
                TimerStop( &RxTimeoutSyncWord );
 8003df0:	4b15      	ldr	r3, [pc, #84]	; (8003e48 <SX1276OnTimeoutIrq+0xd0>)
 8003df2:	0018      	movs	r0, r3
 8003df4:	f004 fd26 	bl	8008844 <TimerStop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8003df8:	4b14      	ldr	r3, [pc, #80]	; (8003e4c <SX1276OnTimeoutIrq+0xd4>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d01a      	beq.n	8003e36 <SX1276OnTimeoutIrq+0xbe>
 8003e00:	4b12      	ldr	r3, [pc, #72]	; (8003e4c <SX1276OnTimeoutIrq+0xd4>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d015      	beq.n	8003e36 <SX1276OnTimeoutIrq+0xbe>
            RadioEvents->RxTimeout( );
 8003e0a:	4b10      	ldr	r3, [pc, #64]	; (8003e4c <SX1276OnTimeoutIrq+0xd4>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	4798      	blx	r3
        break;
 8003e12:	e010      	b.n	8003e36 <SX1276OnTimeoutIrq+0xbe>
        SX1276.Settings.State = RF_IDLE;
 8003e14:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <SX1276OnTimeoutIrq+0xcc>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	711a      	strb	r2, [r3, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8003e1a:	4b0c      	ldr	r3, [pc, #48]	; (8003e4c <SX1276OnTimeoutIrq+0xd4>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00b      	beq.n	8003e3a <SX1276OnTimeoutIrq+0xc2>
 8003e22:	4b0a      	ldr	r3, [pc, #40]	; (8003e4c <SX1276OnTimeoutIrq+0xd4>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d006      	beq.n	8003e3a <SX1276OnTimeoutIrq+0xc2>
            RadioEvents->TxTimeout( );
 8003e2c:	4b07      	ldr	r3, [pc, #28]	; (8003e4c <SX1276OnTimeoutIrq+0xd4>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	4798      	blx	r3
        break;
 8003e34:	e001      	b.n	8003e3a <SX1276OnTimeoutIrq+0xc2>
        break;
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	e000      	b.n	8003e3c <SX1276OnTimeoutIrq+0xc4>
        break;
 8003e3a:	46c0      	nop			; (mov r8, r8)
    }
}
 8003e3c:	46c0      	nop			; (mov r8, r8)
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	20000508 	.word	0x20000508
 8003e48:	200004f4 	.word	0x200004f4
 8003e4c:	200000b0 	.word	0x200000b0

08003e50 <SX1276OnDio0Irq>:

void SX1276OnDio0Irq( void )
{
 8003e50:	b5b0      	push	{r4, r5, r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
    volatile uint8_t irqFlags = 0;
 8003e56:	1cfb      	adds	r3, r7, #3
 8003e58:	2200      	movs	r2, #0
 8003e5a:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.State )
 8003e5c:	4bd6      	ldr	r3, [pc, #856]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003e5e:	791b      	ldrb	r3, [r3, #4]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d003      	beq.n	8003e6c <SX1276OnDio0Irq+0x1c>
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d100      	bne.n	8003e6a <SX1276OnDio0Irq+0x1a>
 8003e68:	e201      	b.n	800426e <SX1276OnDio0Irq+0x41e>
                }
                break;
            }
            break;
        default:
            break;
 8003e6a:	e222      	b.n	80042b2 <SX1276OnDio0Irq+0x462>
            switch( SX1276.Settings.Modem )
 8003e6c:	4bd2      	ldr	r3, [pc, #840]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003e6e:	795b      	ldrb	r3, [r3, #5]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d003      	beq.n	8003e7c <SX1276OnDio0Irq+0x2c>
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d100      	bne.n	8003e7a <SX1276OnDio0Irq+0x2a>
 8003e78:	e0ea      	b.n	8004050 <SX1276OnDio0Irq+0x200>
                break;
 8003e7a:	e1f7      	b.n	800426c <SX1276OnDio0Irq+0x41c>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8003e7c:	4bce      	ldr	r3, [pc, #824]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003e7e:	2224      	movs	r2, #36	; 0x24
 8003e80:	5c9b      	ldrb	r3, [r3, r2]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d056      	beq.n	8003f34 <SX1276OnDio0Irq+0xe4>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 8003e86:	203f      	movs	r0, #63	; 0x3f
 8003e88:	f7ff fe7f 	bl	8003b8a <SX1276Read>
 8003e8c:	0003      	movs	r3, r0
 8003e8e:	001a      	movs	r2, r3
 8003e90:	1cfb      	adds	r3, r7, #3
 8003e92:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8003e94:	1cfb      	adds	r3, r7, #3
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	001a      	movs	r2, r3
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d047      	beq.n	8003f34 <SX1276OnDio0Irq+0xe4>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI | 
 8003ea4:	210b      	movs	r1, #11
 8003ea6:	203e      	movs	r0, #62	; 0x3e
 8003ea8:	f7ff fe5b 	bl	8003b62 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8003eac:	2110      	movs	r1, #16
 8003eae:	203f      	movs	r0, #63	; 0x3f
 8003eb0:	f7ff fe57 	bl	8003b62 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8003eb4:	4bc1      	ldr	r3, [pc, #772]	; (80041bc <SX1276OnDio0Irq+0x36c>)
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	f004 fcc4 	bl	8008844 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 8003ebc:	4bbe      	ldr	r3, [pc, #760]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003ebe:	2226      	movs	r2, #38	; 0x26
 8003ec0:	5c9b      	ldrb	r3, [r3, r2]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	4053      	eors	r3, r2
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d007      	beq.n	8003edc <SX1276OnDio0Irq+0x8c>
                            TimerStop( &RxTimeoutSyncWord );
 8003ecc:	4bbc      	ldr	r3, [pc, #752]	; (80041c0 <SX1276OnDio0Irq+0x370>)
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f004 fcb8 	bl	8008844 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 8003ed4:	4bb8      	ldr	r3, [pc, #736]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	711a      	strb	r2, [r3, #4]
 8003eda:	e00f      	b.n	8003efc <SX1276OnDio0Irq+0xac>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8003edc:	200d      	movs	r0, #13
 8003ede:	f7ff fe54 	bl	8003b8a <SX1276Read>
 8003ee2:	0003      	movs	r3, r0
 8003ee4:	001a      	movs	r2, r3
 8003ee6:	2340      	movs	r3, #64	; 0x40
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	0019      	movs	r1, r3
 8003eee:	200d      	movs	r0, #13
 8003ef0:	f7ff fe37 	bl	8003b62 <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 8003ef4:	4bb2      	ldr	r3, [pc, #712]	; (80041c0 <SX1276OnDio0Irq+0x370>)
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	f004 fb8e 	bl	8008618 <TimerStart>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8003efc:	4bb1      	ldr	r3, [pc, #708]	; (80041c4 <SX1276OnDio0Irq+0x374>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d008      	beq.n	8003f16 <SX1276OnDio0Irq+0xc6>
 8003f04:	4baf      	ldr	r3, [pc, #700]	; (80041c4 <SX1276OnDio0Irq+0x374>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <SX1276OnDio0Irq+0xc6>
                            RadioEvents->RxError( );
 8003f0e:	4bad      	ldr	r3, [pc, #692]	; (80041c4 <SX1276OnDio0Irq+0x374>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8003f16:	4ba8      	ldr	r3, [pc, #672]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003f18:	222c      	movs	r2, #44	; 0x2c
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8003f1e:	4ba6      	ldr	r3, [pc, #664]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003f20:	222d      	movs	r2, #45	; 0x2d
 8003f22:	2100      	movs	r1, #0
 8003f24:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8003f26:	4ba4      	ldr	r3, [pc, #656]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	871a      	strh	r2, [r3, #56]	; 0x38
                        SX1276.Settings.FskPacketHandler.Size = 0;
 8003f2c:	4ba2      	ldr	r3, [pc, #648]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	86da      	strh	r2, [r3, #54]	; 0x36
                        break;
 8003f32:	e19b      	b.n	800426c <SX1276OnDio0Irq+0x41c>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8003f34:	4ba0      	ldr	r3, [pc, #640]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003f36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d12d      	bne.n	8003f98 <SX1276OnDio0Irq+0x148>
 8003f3c:	4b9e      	ldr	r3, [pc, #632]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003f3e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d129      	bne.n	8003f98 <SX1276OnDio0Irq+0x148>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8003f44:	4b9c      	ldr	r3, [pc, #624]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003f46:	2222      	movs	r2, #34	; 0x22
 8003f48:	5c9b      	ldrb	r3, [r3, r2]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	4053      	eors	r3, r2
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d005      	beq.n	8003f60 <SX1276OnDio0Irq+0x110>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8003f54:	4b9c      	ldr	r3, [pc, #624]	; (80041c8 <SX1276OnDio0Irq+0x378>)
 8003f56:	2101      	movs	r1, #1
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f7ff fec9 	bl	8003cf0 <SX1276ReadFifo>
 8003f5e:	e006      	b.n	8003f6e <SX1276OnDio0Irq+0x11e>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8003f60:	2032      	movs	r0, #50	; 0x32
 8003f62:	f7ff fe12 	bl	8003b8a <SX1276Read>
 8003f66:	0003      	movs	r3, r0
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	4b93      	ldr	r3, [pc, #588]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003f6c:	86da      	strh	r2, [r3, #54]	; 0x36
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8003f6e:	4b92      	ldr	r3, [pc, #584]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003f70:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003f72:	001a      	movs	r2, r3
 8003f74:	4b95      	ldr	r3, [pc, #596]	; (80041cc <SX1276OnDio0Irq+0x37c>)
 8003f76:	18d0      	adds	r0, r2, r3
 8003f78:	4b8f      	ldr	r3, [pc, #572]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003f7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	4b8e      	ldr	r3, [pc, #568]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003f80:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	0019      	movs	r1, r3
 8003f8a:	f7ff feb1 	bl	8003cf0 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8003f8e:	4b8a      	ldr	r3, [pc, #552]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003f90:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8003f92:	4b89      	ldr	r3, [pc, #548]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003f94:	871a      	strh	r2, [r3, #56]	; 0x38
 8003f96:	e013      	b.n	8003fc0 <SX1276OnDio0Irq+0x170>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8003f98:	4b87      	ldr	r3, [pc, #540]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003f9a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003f9c:	001a      	movs	r2, r3
 8003f9e:	4b8b      	ldr	r3, [pc, #556]	; (80041cc <SX1276OnDio0Irq+0x37c>)
 8003fa0:	18d0      	adds	r0, r2, r3
 8003fa2:	4b85      	ldr	r3, [pc, #532]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003fa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	4b83      	ldr	r3, [pc, #524]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003faa:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	0019      	movs	r1, r3
 8003fb4:	f7ff fe9c 	bl	8003cf0 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8003fb8:	4b7f      	ldr	r3, [pc, #508]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003fba:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8003fbc:	4b7e      	ldr	r3, [pc, #504]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003fbe:	871a      	strh	r2, [r3, #56]	; 0x38
                TimerStop( &RxTimeoutTimer );
 8003fc0:	4b7e      	ldr	r3, [pc, #504]	; (80041bc <SX1276OnDio0Irq+0x36c>)
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	f004 fc3e 	bl	8008844 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8003fc8:	4b7b      	ldr	r3, [pc, #492]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003fca:	2226      	movs	r2, #38	; 0x26
 8003fcc:	5c9b      	ldrb	r3, [r3, r2]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	4053      	eors	r3, r2
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d007      	beq.n	8003fe8 <SX1276OnDio0Irq+0x198>
                    SX1276.Settings.State = RF_IDLE;
 8003fd8:	4b77      	ldr	r3, [pc, #476]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutSyncWord );
 8003fde:	4b78      	ldr	r3, [pc, #480]	; (80041c0 <SX1276OnDio0Irq+0x370>)
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	f004 fc2f 	bl	8008844 <TimerStop>
 8003fe6:	e00f      	b.n	8004008 <SX1276OnDio0Irq+0x1b8>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8003fe8:	200d      	movs	r0, #13
 8003fea:	f7ff fdce 	bl	8003b8a <SX1276Read>
 8003fee:	0003      	movs	r3, r0
 8003ff0:	001a      	movs	r2, r3
 8003ff2:	2340      	movs	r3, #64	; 0x40
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	0019      	movs	r1, r3
 8003ffa:	200d      	movs	r0, #13
 8003ffc:	f7ff fdb1 	bl	8003b62 <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
 8004000:	4b6f      	ldr	r3, [pc, #444]	; (80041c0 <SX1276OnDio0Irq+0x370>)
 8004002:	0018      	movs	r0, r3
 8004004:	f004 fb08 	bl	8008618 <TimerStart>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8004008:	4b6e      	ldr	r3, [pc, #440]	; (80041c4 <SX1276OnDio0Irq+0x374>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d010      	beq.n	8004032 <SX1276OnDio0Irq+0x1e2>
 8004010:	4b6c      	ldr	r3, [pc, #432]	; (80041c4 <SX1276OnDio0Irq+0x374>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00b      	beq.n	8004032 <SX1276OnDio0Irq+0x1e2>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 800401a:	4b6a      	ldr	r3, [pc, #424]	; (80041c4 <SX1276OnDio0Irq+0x374>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689c      	ldr	r4, [r3, #8]
 8004020:	4b65      	ldr	r3, [pc, #404]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8004022:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
 8004024:	4b64      	ldr	r3, [pc, #400]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8004026:	222e      	movs	r2, #46	; 0x2e
 8004028:	569b      	ldrsb	r3, [r3, r2]
 800402a:	b21a      	sxth	r2, r3
 800402c:	4867      	ldr	r0, [pc, #412]	; (80041cc <SX1276OnDio0Irq+0x37c>)
 800402e:	2300      	movs	r3, #0
 8004030:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8004032:	4b61      	ldr	r3, [pc, #388]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8004034:	222c      	movs	r2, #44	; 0x2c
 8004036:	2100      	movs	r1, #0
 8004038:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800403a:	4b5f      	ldr	r3, [pc, #380]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 800403c:	222d      	movs	r2, #45	; 0x2d
 800403e:	2100      	movs	r1, #0
 8004040:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8004042:	4b5d      	ldr	r3, [pc, #372]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8004044:	2200      	movs	r2, #0
 8004046:	871a      	strh	r2, [r3, #56]	; 0x38
                SX1276.Settings.FskPacketHandler.Size = 0;
 8004048:	4b5b      	ldr	r3, [pc, #364]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 800404a:	2200      	movs	r2, #0
 800404c:	86da      	strh	r2, [r3, #54]	; 0x36
                break;
 800404e:	e10d      	b.n	800426c <SX1276OnDio0Irq+0x41c>
                    int8_t snr = 0;
 8004050:	1dfb      	adds	r3, r7, #7
 8004052:	2200      	movs	r2, #0
 8004054:	701a      	strb	r2, [r3, #0]
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8004056:	2140      	movs	r1, #64	; 0x40
 8004058:	2012      	movs	r0, #18
 800405a:	f7ff fd82 	bl	8003b62 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 800405e:	2012      	movs	r0, #18
 8004060:	f7ff fd93 	bl	8003b8a <SX1276Read>
 8004064:	0003      	movs	r3, r0
 8004066:	001a      	movs	r2, r3
 8004068:	1cfb      	adds	r3, r7, #3
 800406a:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 800406c:	1cfb      	adds	r3, r7, #3
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	b2db      	uxtb	r3, r3
 8004072:	001a      	movs	r2, r3
 8004074:	2320      	movs	r3, #32
 8004076:	4013      	ands	r3, r2
 8004078:	2b20      	cmp	r3, #32
 800407a:	d122      	bne.n	80040c2 <SX1276OnDio0Irq+0x272>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 800407c:	2120      	movs	r1, #32
 800407e:	2012      	movs	r0, #18
 8004080:	f7ff fd6f 	bl	8003b62 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8004084:	4b4c      	ldr	r3, [pc, #304]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8004086:	2252      	movs	r2, #82	; 0x52
 8004088:	5c9b      	ldrb	r3, [r3, r2]
 800408a:	2201      	movs	r2, #1
 800408c:	4053      	eors	r3, r2
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <SX1276OnDio0Irq+0x24a>
                            SX1276.Settings.State = RF_IDLE;
 8004094:	4b48      	ldr	r3, [pc, #288]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8004096:	2200      	movs	r2, #0
 8004098:	711a      	strb	r2, [r3, #4]
                        TimerStop( &RxTimeoutTimer );
 800409a:	4b48      	ldr	r3, [pc, #288]	; (80041bc <SX1276OnDio0Irq+0x36c>)
 800409c:	0018      	movs	r0, r3
 800409e:	f004 fbd1 	bl	8008844 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80040a2:	4b48      	ldr	r3, [pc, #288]	; (80041c4 <SX1276OnDio0Irq+0x374>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d100      	bne.n	80040ac <SX1276OnDio0Irq+0x25c>
 80040aa:	e0dc      	b.n	8004266 <SX1276OnDio0Irq+0x416>
 80040ac:	4b45      	ldr	r3, [pc, #276]	; (80041c4 <SX1276OnDio0Irq+0x374>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d100      	bne.n	80040b8 <SX1276OnDio0Irq+0x268>
 80040b6:	e0d6      	b.n	8004266 <SX1276OnDio0Irq+0x416>
                            RadioEvents->RxError( );
 80040b8:	4b42      	ldr	r3, [pc, #264]	; (80041c4 <SX1276OnDio0Irq+0x374>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	4798      	blx	r3
                        break;
 80040c0:	e0d1      	b.n	8004266 <SX1276OnDio0Irq+0x416>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = SX1276Read( REG_LR_PKTSNRVALUE );
 80040c2:	2019      	movs	r0, #25
 80040c4:	f7ff fd61 	bl	8003b8a <SX1276Read>
 80040c8:	0003      	movs	r3, r0
 80040ca:	b259      	sxtb	r1, r3
 80040cc:	4b3a      	ldr	r3, [pc, #232]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 80040ce:	2258      	movs	r2, #88	; 0x58
 80040d0:	5499      	strb	r1, [r3, r2]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue & 0x80 ) // The SNR sign bit is 1
 80040d2:	4b39      	ldr	r3, [pc, #228]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 80040d4:	2258      	movs	r2, #88	; 0x58
 80040d6:	569b      	ldrsb	r3, [r3, r2]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	da10      	bge.n	80040fe <SX1276OnDio0Irq+0x2ae>
                        snr = ( ( ~SX1276.Settings.LoRaPacketHandler.SnrValue + 1 ) & 0xFF ) >> 2;
 80040dc:	4b36      	ldr	r3, [pc, #216]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 80040de:	2258      	movs	r2, #88	; 0x58
 80040e0:	569b      	ldrsb	r3, [r3, r2]
 80040e2:	425b      	negs	r3, r3
 80040e4:	109b      	asrs	r3, r3, #2
 80040e6:	b25a      	sxtb	r2, r3
 80040e8:	1dfb      	adds	r3, r7, #7
 80040ea:	213f      	movs	r1, #63	; 0x3f
 80040ec:	400a      	ands	r2, r1
 80040ee:	701a      	strb	r2, [r3, #0]
                        snr = -snr;
 80040f0:	1dfb      	adds	r3, r7, #7
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	425b      	negs	r3, r3
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	1dfb      	adds	r3, r7, #7
 80040fa:	701a      	strb	r2, [r3, #0]
 80040fc:	e008      	b.n	8004110 <SX1276OnDio0Irq+0x2c0>
                        snr = ( SX1276.Settings.LoRaPacketHandler.SnrValue & 0xFF ) >> 2;
 80040fe:	4b2e      	ldr	r3, [pc, #184]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8004100:	2258      	movs	r2, #88	; 0x58
 8004102:	569b      	ldrsb	r3, [r3, r2]
 8004104:	109b      	asrs	r3, r3, #2
 8004106:	b25a      	sxtb	r2, r3
 8004108:	1dfb      	adds	r3, r7, #7
 800410a:	213f      	movs	r1, #63	; 0x3f
 800410c:	400a      	ands	r2, r1
 800410e:	701a      	strb	r2, [r3, #0]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8004110:	201a      	movs	r0, #26
 8004112:	f7ff fd3a 	bl	8003b8a <SX1276Read>
 8004116:	0003      	movs	r3, r0
 8004118:	001a      	movs	r2, r3
 800411a:	1d3b      	adds	r3, r7, #4
 800411c:	801a      	strh	r2, [r3, #0]
                    if( snr < 0 )
 800411e:	1dfb      	adds	r3, r7, #7
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	2b7f      	cmp	r3, #127	; 0x7f
 8004124:	d932      	bls.n	800418c <SX1276OnDio0Irq+0x33c>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8004126:	4b24      	ldr	r3, [pc, #144]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	4a29      	ldr	r2, [pc, #164]	; (80041d0 <SX1276OnDio0Irq+0x380>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d916      	bls.n	800415e <SX1276OnDio0Irq+0x30e>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8004130:	1d3b      	adds	r3, r7, #4
 8004132:	2200      	movs	r2, #0
 8004134:	5e9b      	ldrsh	r3, [r3, r2]
 8004136:	111b      	asrs	r3, r3, #4
 8004138:	b21b      	sxth	r3, r3
 800413a:	b29a      	uxth	r2, r3
 800413c:	1d3b      	adds	r3, r7, #4
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	18d3      	adds	r3, r2, r3
 8004142:	b29a      	uxth	r2, r3
 8004144:	1dfb      	adds	r3, r7, #7
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	b25b      	sxtb	r3, r3
 800414a:	b29b      	uxth	r3, r3
 800414c:	18d3      	adds	r3, r2, r3
 800414e:	b29b      	uxth	r3, r3
 8004150:	3b9d      	subs	r3, #157	; 0x9d
 8004152:	b29b      	uxth	r3, r3
 8004154:	b219      	sxth	r1, r3
 8004156:	4b18      	ldr	r3, [pc, #96]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8004158:	225a      	movs	r2, #90	; 0x5a
 800415a:	5299      	strh	r1, [r3, r2]
 800415c:	e04a      	b.n	80041f4 <SX1276OnDio0Irq+0x3a4>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800415e:	1d3b      	adds	r3, r7, #4
 8004160:	2200      	movs	r2, #0
 8004162:	5e9b      	ldrsh	r3, [r3, r2]
 8004164:	111b      	asrs	r3, r3, #4
 8004166:	b21b      	sxth	r3, r3
 8004168:	b29a      	uxth	r2, r3
 800416a:	1d3b      	adds	r3, r7, #4
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	18d3      	adds	r3, r2, r3
 8004170:	b29a      	uxth	r2, r3
 8004172:	1dfb      	adds	r3, r7, #7
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	b25b      	sxtb	r3, r3
 8004178:	b29b      	uxth	r3, r3
 800417a:	18d3      	adds	r3, r2, r3
 800417c:	b29b      	uxth	r3, r3
 800417e:	3ba4      	subs	r3, #164	; 0xa4
 8004180:	b29b      	uxth	r3, r3
 8004182:	b219      	sxth	r1, r3
 8004184:	4b0c      	ldr	r3, [pc, #48]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 8004186:	225a      	movs	r2, #90	; 0x5a
 8004188:	5299      	strh	r1, [r3, r2]
 800418a:	e033      	b.n	80041f4 <SX1276OnDio0Irq+0x3a4>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800418c:	4b0a      	ldr	r3, [pc, #40]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	4a0f      	ldr	r2, [pc, #60]	; (80041d0 <SX1276OnDio0Irq+0x380>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d91e      	bls.n	80041d4 <SX1276OnDio0Irq+0x384>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8004196:	1d3b      	adds	r3, r7, #4
 8004198:	2200      	movs	r2, #0
 800419a:	5e9b      	ldrsh	r3, [r3, r2]
 800419c:	111b      	asrs	r3, r3, #4
 800419e:	b21b      	sxth	r3, r3
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	1d3b      	adds	r3, r7, #4
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	18d3      	adds	r3, r2, r3
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b9d      	subs	r3, #157	; 0x9d
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	b219      	sxth	r1, r3
 80041b0:	4b01      	ldr	r3, [pc, #4]	; (80041b8 <SX1276OnDio0Irq+0x368>)
 80041b2:	225a      	movs	r2, #90	; 0x5a
 80041b4:	5299      	strh	r1, [r3, r2]
 80041b6:	e01d      	b.n	80041f4 <SX1276OnDio0Irq+0x3a4>
 80041b8:	20000508 	.word	0x20000508
 80041bc:	20000568 	.word	0x20000568
 80041c0:	200004f4 	.word	0x200004f4
 80041c4:	200000b0 	.word	0x200000b0
 80041c8:	2000053e 	.word	0x2000053e
 80041cc:	200000b4 	.word	0x200000b4
 80041d0:	1f4add40 	.word	0x1f4add40
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 80041d4:	1d3b      	adds	r3, r7, #4
 80041d6:	2200      	movs	r2, #0
 80041d8:	5e9b      	ldrsh	r3, [r3, r2]
 80041da:	111b      	asrs	r3, r3, #4
 80041dc:	b21b      	sxth	r3, r3
 80041de:	b29a      	uxth	r2, r3
 80041e0:	1d3b      	adds	r3, r7, #4
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	18d3      	adds	r3, r2, r3
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	3ba4      	subs	r3, #164	; 0xa4
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	b219      	sxth	r1, r3
 80041ee:	4b33      	ldr	r3, [pc, #204]	; (80042bc <SX1276OnDio0Irq+0x46c>)
 80041f0:	225a      	movs	r2, #90	; 0x5a
 80041f2:	5299      	strh	r1, [r3, r2]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 80041f4:	2013      	movs	r0, #19
 80041f6:	f7ff fcc8 	bl	8003b8a <SX1276Read>
 80041fa:	0003      	movs	r3, r0
 80041fc:	0019      	movs	r1, r3
 80041fe:	4b2f      	ldr	r3, [pc, #188]	; (80042bc <SX1276OnDio0Irq+0x46c>)
 8004200:	225c      	movs	r2, #92	; 0x5c
 8004202:	5499      	strb	r1, [r3, r2]
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 8004204:	4b2d      	ldr	r3, [pc, #180]	; (80042bc <SX1276OnDio0Irq+0x46c>)
 8004206:	225c      	movs	r2, #92	; 0x5c
 8004208:	5c9a      	ldrb	r2, [r3, r2]
 800420a:	4b2d      	ldr	r3, [pc, #180]	; (80042c0 <SX1276OnDio0Irq+0x470>)
 800420c:	0011      	movs	r1, r2
 800420e:	0018      	movs	r0, r3
 8004210:	f7ff fd6e 	bl	8003cf0 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 8004214:	4b29      	ldr	r3, [pc, #164]	; (80042bc <SX1276OnDio0Irq+0x46c>)
 8004216:	2252      	movs	r2, #82	; 0x52
 8004218:	5c9b      	ldrb	r3, [r3, r2]
 800421a:	2201      	movs	r2, #1
 800421c:	4053      	eors	r3, r2
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <SX1276OnDio0Irq+0x3da>
                        SX1276.Settings.State = RF_IDLE;
 8004224:	4b25      	ldr	r3, [pc, #148]	; (80042bc <SX1276OnDio0Irq+0x46c>)
 8004226:	2200      	movs	r2, #0
 8004228:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutTimer );
 800422a:	4b26      	ldr	r3, [pc, #152]	; (80042c4 <SX1276OnDio0Irq+0x474>)
 800422c:	0018      	movs	r0, r3
 800422e:	f004 fb09 	bl	8008844 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8004232:	4b25      	ldr	r3, [pc, #148]	; (80042c8 <SX1276OnDio0Irq+0x478>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d017      	beq.n	800426a <SX1276OnDio0Irq+0x41a>
 800423a:	4b23      	ldr	r3, [pc, #140]	; (80042c8 <SX1276OnDio0Irq+0x478>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d012      	beq.n	800426a <SX1276OnDio0Irq+0x41a>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8004244:	4b20      	ldr	r3, [pc, #128]	; (80042c8 <SX1276OnDio0Irq+0x478>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689c      	ldr	r4, [r3, #8]
 800424a:	4b1c      	ldr	r3, [pc, #112]	; (80042bc <SX1276OnDio0Irq+0x46c>)
 800424c:	225c      	movs	r2, #92	; 0x5c
 800424e:	5c9b      	ldrb	r3, [r3, r2]
 8004250:	b299      	uxth	r1, r3
 8004252:	4b1a      	ldr	r3, [pc, #104]	; (80042bc <SX1276OnDio0Irq+0x46c>)
 8004254:	225a      	movs	r2, #90	; 0x5a
 8004256:	5e9d      	ldrsh	r5, [r3, r2]
 8004258:	4b18      	ldr	r3, [pc, #96]	; (80042bc <SX1276OnDio0Irq+0x46c>)
 800425a:	2258      	movs	r2, #88	; 0x58
 800425c:	569b      	ldrsb	r3, [r3, r2]
 800425e:	4818      	ldr	r0, [pc, #96]	; (80042c0 <SX1276OnDio0Irq+0x470>)
 8004260:	002a      	movs	r2, r5
 8004262:	47a0      	blx	r4
                break;
 8004264:	e001      	b.n	800426a <SX1276OnDio0Irq+0x41a>
                        break;
 8004266:	46c0      	nop			; (mov r8, r8)
 8004268:	e023      	b.n	80042b2 <SX1276OnDio0Irq+0x462>
                break;
 800426a:	46c0      	nop			; (mov r8, r8)
            break;
 800426c:	e021      	b.n	80042b2 <SX1276OnDio0Irq+0x462>
            TimerStop( &TxTimeoutTimer );
 800426e:	4b17      	ldr	r3, [pc, #92]	; (80042cc <SX1276OnDio0Irq+0x47c>)
 8004270:	0018      	movs	r0, r3
 8004272:	f004 fae7 	bl	8008844 <TimerStop>
            switch( SX1276.Settings.Modem )
 8004276:	4b11      	ldr	r3, [pc, #68]	; (80042bc <SX1276OnDio0Irq+0x46c>)
 8004278:	795b      	ldrb	r3, [r3, #5]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d103      	bne.n	8004286 <SX1276OnDio0Irq+0x436>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 800427e:	2108      	movs	r1, #8
 8004280:	2012      	movs	r0, #18
 8004282:	f7ff fc6e 	bl	8003b62 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8004286:	4b0d      	ldr	r3, [pc, #52]	; (80042bc <SX1276OnDio0Irq+0x46c>)
 8004288:	2200      	movs	r2, #0
 800428a:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800428c:	4b0e      	ldr	r3, [pc, #56]	; (80042c8 <SX1276OnDio0Irq+0x478>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00c      	beq.n	80042ae <SX1276OnDio0Irq+0x45e>
 8004294:	4b0c      	ldr	r3, [pc, #48]	; (80042c8 <SX1276OnDio0Irq+0x478>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d007      	beq.n	80042ae <SX1276OnDio0Irq+0x45e>
                    RadioEvents->TxDone( );
 800429e:	4b0a      	ldr	r3, [pc, #40]	; (80042c8 <SX1276OnDio0Irq+0x478>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4798      	blx	r3
                   PRINTF("txDone\n\r");
 80042a6:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <SX1276OnDio0Irq+0x480>)
 80042a8:	0018      	movs	r0, r3
 80042aa:	f005 fcf7 	bl	8009c9c <vcom_Send>
                break;
 80042ae:	46c0      	nop			; (mov r8, r8)
            break;
 80042b0:	46c0      	nop			; (mov r8, r8)
    }
}
 80042b2:	46c0      	nop			; (mov r8, r8)
 80042b4:	46bd      	mov	sp, r7
 80042b6:	b002      	add	sp, #8
 80042b8:	bdb0      	pop	{r4, r5, r7, pc}
 80042ba:	46c0      	nop			; (mov r8, r8)
 80042bc:	20000508 	.word	0x20000508
 80042c0:	200000b4 	.word	0x200000b4
 80042c4:	20000568 	.word	0x20000568
 80042c8:	200000b0 	.word	0x200000b0
 80042cc:	200004e0 	.word	0x200004e0
 80042d0:	0800abec 	.word	0x0800abec

080042d4 <SX1276OnDio1Irq>:

void SX1276OnDio1Irq( void )
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 80042d8:	4b60      	ldr	r3, [pc, #384]	; (800445c <SX1276OnDio1Irq+0x188>)
 80042da:	791b      	ldrb	r3, [r3, #4]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d003      	beq.n	80042e8 <SX1276OnDio1Irq+0x14>
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d100      	bne.n	80042e6 <SX1276OnDio1Irq+0x12>
 80042e4:	e078      	b.n	80043d8 <SX1276OnDio1Irq+0x104>
            default:
                break;
            }
            break;
        default:
            break;
 80042e6:	e0b6      	b.n	8004456 <SX1276OnDio1Irq+0x182>
            switch( SX1276.Settings.Modem )
 80042e8:	4b5c      	ldr	r3, [pc, #368]	; (800445c <SX1276OnDio1Irq+0x188>)
 80042ea:	795b      	ldrb	r3, [r3, #5]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <SX1276OnDio1Irq+0x22>
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d053      	beq.n	800439c <SX1276OnDio1Irq+0xc8>
                break;
 80042f4:	e06f      	b.n	80043d6 <SX1276OnDio1Irq+0x102>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80042f6:	4b59      	ldr	r3, [pc, #356]	; (800445c <SX1276OnDio1Irq+0x188>)
 80042f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d118      	bne.n	8004330 <SX1276OnDio1Irq+0x5c>
 80042fe:	4b57      	ldr	r3, [pc, #348]	; (800445c <SX1276OnDio1Irq+0x188>)
 8004300:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004302:	2b00      	cmp	r3, #0
 8004304:	d114      	bne.n	8004330 <SX1276OnDio1Irq+0x5c>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8004306:	4b55      	ldr	r3, [pc, #340]	; (800445c <SX1276OnDio1Irq+0x188>)
 8004308:	2222      	movs	r2, #34	; 0x22
 800430a:	5c9b      	ldrb	r3, [r3, r2]
 800430c:	2201      	movs	r2, #1
 800430e:	4053      	eors	r3, r2
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d005      	beq.n	8004322 <SX1276OnDio1Irq+0x4e>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8004316:	4b52      	ldr	r3, [pc, #328]	; (8004460 <SX1276OnDio1Irq+0x18c>)
 8004318:	2101      	movs	r1, #1
 800431a:	0018      	movs	r0, r3
 800431c:	f7ff fce8 	bl	8003cf0 <SX1276ReadFifo>
 8004320:	e006      	b.n	8004330 <SX1276OnDio1Irq+0x5c>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8004322:	2032      	movs	r0, #50	; 0x32
 8004324:	f7ff fc31 	bl	8003b8a <SX1276Read>
 8004328:	0003      	movs	r3, r0
 800432a:	b29a      	uxth	r2, r3
 800432c:	4b4b      	ldr	r3, [pc, #300]	; (800445c <SX1276OnDio1Irq+0x188>)
 800432e:	86da      	strh	r2, [r3, #54]	; 0x36
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.FifoThresh )
 8004330:	4b4a      	ldr	r3, [pc, #296]	; (800445c <SX1276OnDio1Irq+0x188>)
 8004332:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004334:	001a      	movs	r2, r3
 8004336:	4b49      	ldr	r3, [pc, #292]	; (800445c <SX1276OnDio1Irq+0x188>)
 8004338:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	4a47      	ldr	r2, [pc, #284]	; (800445c <SX1276OnDio1Irq+0x188>)
 800433e:	213a      	movs	r1, #58	; 0x3a
 8004340:	5c52      	ldrb	r2, [r2, r1]
 8004342:	4293      	cmp	r3, r2
 8004344:	dd15      	ble.n	8004372 <SX1276OnDio1Irq+0x9e>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh );
 8004346:	4b45      	ldr	r3, [pc, #276]	; (800445c <SX1276OnDio1Irq+0x188>)
 8004348:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800434a:	001a      	movs	r2, r3
 800434c:	4b45      	ldr	r3, [pc, #276]	; (8004464 <SX1276OnDio1Irq+0x190>)
 800434e:	18d0      	adds	r0, r2, r3
 8004350:	4b42      	ldr	r3, [pc, #264]	; (800445c <SX1276OnDio1Irq+0x188>)
 8004352:	223a      	movs	r2, #58	; 0x3a
 8004354:	5c9b      	ldrb	r3, [r3, r2]
 8004356:	0019      	movs	r1, r3
 8004358:	f7ff fcca 	bl	8003cf0 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh;
 800435c:	4b3f      	ldr	r3, [pc, #252]	; (800445c <SX1276OnDio1Irq+0x188>)
 800435e:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8004360:	4b3e      	ldr	r3, [pc, #248]	; (800445c <SX1276OnDio1Irq+0x188>)
 8004362:	213a      	movs	r1, #58	; 0x3a
 8004364:	5c5b      	ldrb	r3, [r3, r1]
 8004366:	b29b      	uxth	r3, r3
 8004368:	18d3      	adds	r3, r2, r3
 800436a:	b29a      	uxth	r2, r3
 800436c:	4b3b      	ldr	r3, [pc, #236]	; (800445c <SX1276OnDio1Irq+0x188>)
 800436e:	871a      	strh	r2, [r3, #56]	; 0x38
                break;
 8004370:	e031      	b.n	80043d6 <SX1276OnDio1Irq+0x102>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004372:	4b3a      	ldr	r3, [pc, #232]	; (800445c <SX1276OnDio1Irq+0x188>)
 8004374:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004376:	001a      	movs	r2, r3
 8004378:	4b3a      	ldr	r3, [pc, #232]	; (8004464 <SX1276OnDio1Irq+0x190>)
 800437a:	18d0      	adds	r0, r2, r3
 800437c:	4b37      	ldr	r3, [pc, #220]	; (800445c <SX1276OnDio1Irq+0x188>)
 800437e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004380:	b2da      	uxtb	r2, r3
 8004382:	4b36      	ldr	r3, [pc, #216]	; (800445c <SX1276OnDio1Irq+0x188>)
 8004384:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004386:	b2db      	uxtb	r3, r3
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	b2db      	uxtb	r3, r3
 800438c:	0019      	movs	r1, r3
 800438e:	f7ff fcaf 	bl	8003cf0 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004392:	4b32      	ldr	r3, [pc, #200]	; (800445c <SX1276OnDio1Irq+0x188>)
 8004394:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8004396:	4b31      	ldr	r3, [pc, #196]	; (800445c <SX1276OnDio1Irq+0x188>)
 8004398:	871a      	strh	r2, [r3, #56]	; 0x38
                break;
 800439a:	e01c      	b.n	80043d6 <SX1276OnDio1Irq+0x102>
                TimerStop( &RxTimeoutTimer );
 800439c:	4b32      	ldr	r3, [pc, #200]	; (8004468 <SX1276OnDio1Irq+0x194>)
 800439e:	0018      	movs	r0, r3
 80043a0:	f004 fa50 	bl	8008844 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 80043a4:	2180      	movs	r1, #128	; 0x80
 80043a6:	2012      	movs	r0, #18
 80043a8:	f7ff fbdb 	bl	8003b62 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 80043ac:	4b2b      	ldr	r3, [pc, #172]	; (800445c <SX1276OnDio1Irq+0x188>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80043b2:	4b2e      	ldr	r3, [pc, #184]	; (800446c <SX1276OnDio1Irq+0x198>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00c      	beq.n	80043d4 <SX1276OnDio1Irq+0x100>
 80043ba:	4b2c      	ldr	r3, [pc, #176]	; (800446c <SX1276OnDio1Irq+0x198>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d007      	beq.n	80043d4 <SX1276OnDio1Irq+0x100>
                    RadioEvents->RxTimeout( );
 80043c4:	4b29      	ldr	r3, [pc, #164]	; (800446c <SX1276OnDio1Irq+0x198>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	4798      	blx	r3
                    PRINTF("rxTimeOut\n\r");
 80043cc:	4b28      	ldr	r3, [pc, #160]	; (8004470 <SX1276OnDio1Irq+0x19c>)
 80043ce:	0018      	movs	r0, r3
 80043d0:	f005 fc64 	bl	8009c9c <vcom_Send>
                break;
 80043d4:	46c0      	nop			; (mov r8, r8)
            break;
 80043d6:	e03e      	b.n	8004456 <SX1276OnDio1Irq+0x182>
            switch( SX1276.Settings.Modem )
 80043d8:	4b20      	ldr	r3, [pc, #128]	; (800445c <SX1276OnDio1Irq+0x188>)
 80043da:	795b      	ldrb	r3, [r3, #5]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d002      	beq.n	80043e6 <SX1276OnDio1Irq+0x112>
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d036      	beq.n	8004452 <SX1276OnDio1Irq+0x17e>
                break;
 80043e4:	e036      	b.n	8004454 <SX1276OnDio1Irq+0x180>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 80043e6:	4b1d      	ldr	r3, [pc, #116]	; (800445c <SX1276OnDio1Irq+0x188>)
 80043e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043ea:	001a      	movs	r2, r3
 80043ec:	4b1b      	ldr	r3, [pc, #108]	; (800445c <SX1276OnDio1Irq+0x188>)
 80043ee:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	4a1a      	ldr	r2, [pc, #104]	; (800445c <SX1276OnDio1Irq+0x188>)
 80043f4:	213b      	movs	r1, #59	; 0x3b
 80043f6:	5c52      	ldrb	r2, [r2, r1]
 80043f8:	4293      	cmp	r3, r2
 80043fa:	dd15      	ble.n	8004428 <SX1276OnDio1Irq+0x154>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 80043fc:	4b17      	ldr	r3, [pc, #92]	; (800445c <SX1276OnDio1Irq+0x188>)
 80043fe:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004400:	001a      	movs	r2, r3
 8004402:	4b18      	ldr	r3, [pc, #96]	; (8004464 <SX1276OnDio1Irq+0x190>)
 8004404:	18d0      	adds	r0, r2, r3
 8004406:	4b15      	ldr	r3, [pc, #84]	; (800445c <SX1276OnDio1Irq+0x188>)
 8004408:	223b      	movs	r2, #59	; 0x3b
 800440a:	5c9b      	ldrb	r3, [r3, r2]
 800440c:	0019      	movs	r1, r3
 800440e:	f7ff fc5d 	bl	8003ccc <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8004412:	4b12      	ldr	r3, [pc, #72]	; (800445c <SX1276OnDio1Irq+0x188>)
 8004414:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8004416:	4b11      	ldr	r3, [pc, #68]	; (800445c <SX1276OnDio1Irq+0x188>)
 8004418:	213b      	movs	r1, #59	; 0x3b
 800441a:	5c5b      	ldrb	r3, [r3, r1]
 800441c:	b29b      	uxth	r3, r3
 800441e:	18d3      	adds	r3, r2, r3
 8004420:	b29a      	uxth	r2, r3
 8004422:	4b0e      	ldr	r3, [pc, #56]	; (800445c <SX1276OnDio1Irq+0x188>)
 8004424:	871a      	strh	r2, [r3, #56]	; 0x38
                break;
 8004426:	e015      	b.n	8004454 <SX1276OnDio1Irq+0x180>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004428:	4b0c      	ldr	r3, [pc, #48]	; (800445c <SX1276OnDio1Irq+0x188>)
 800442a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800442c:	001a      	movs	r2, r3
 800442e:	4b0d      	ldr	r3, [pc, #52]	; (8004464 <SX1276OnDio1Irq+0x190>)
 8004430:	18d0      	adds	r0, r2, r3
 8004432:	4b0a      	ldr	r3, [pc, #40]	; (800445c <SX1276OnDio1Irq+0x188>)
 8004434:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004436:	b2da      	uxtb	r2, r3
 8004438:	4b08      	ldr	r3, [pc, #32]	; (800445c <SX1276OnDio1Irq+0x188>)
 800443a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800443c:	b2db      	uxtb	r3, r3
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	b2db      	uxtb	r3, r3
 8004442:	0019      	movs	r1, r3
 8004444:	f7ff fc42 	bl	8003ccc <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8004448:	4b04      	ldr	r3, [pc, #16]	; (800445c <SX1276OnDio1Irq+0x188>)
 800444a:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800444c:	4b03      	ldr	r3, [pc, #12]	; (800445c <SX1276OnDio1Irq+0x188>)
 800444e:	871a      	strh	r2, [r3, #56]	; 0x38
                break;
 8004450:	e000      	b.n	8004454 <SX1276OnDio1Irq+0x180>
                break;
 8004452:	46c0      	nop			; (mov r8, r8)
            break;
 8004454:	46c0      	nop			; (mov r8, r8)
    }
}
 8004456:	46c0      	nop			; (mov r8, r8)
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	20000508 	.word	0x20000508
 8004460:	2000053e 	.word	0x2000053e
 8004464:	200000b4 	.word	0x200000b4
 8004468:	20000568 	.word	0x20000568
 800446c:	200000b0 	.word	0x200000b0
 8004470:	0800abf8 	.word	0x0800abf8

08004474 <SX1276OnDio2Irq>:

void SX1276OnDio2Irq( void )
{
 8004474:	b590      	push	{r4, r7, lr}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
    uint32_t afcChannel = 0;
 800447a:	2300      	movs	r3, #0
 800447c:	60fb      	str	r3, [r7, #12]
    
    switch( SX1276.Settings.State )
 800447e:	4b58      	ldr	r3, [pc, #352]	; (80045e0 <SX1276OnDio2Irq+0x16c>)
 8004480:	791b      	ldrb	r3, [r3, #4]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d003      	beq.n	800448e <SX1276OnDio2Irq+0x1a>
 8004486:	2b02      	cmp	r3, #2
 8004488:	d100      	bne.n	800448c <SX1276OnDio2Irq+0x18>
 800448a:	e079      	b.n	8004580 <SX1276OnDio2Irq+0x10c>
            default:
                break;
            }
            break;
        default:
            break;
 800448c:	e0a3      	b.n	80045d6 <SX1276OnDio2Irq+0x162>
            switch( SX1276.Settings.Modem )
 800448e:	4b54      	ldr	r3, [pc, #336]	; (80045e0 <SX1276OnDio2Irq+0x16c>)
 8004490:	795b      	ldrb	r3, [r3, #5]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d002      	beq.n	800449c <SX1276OnDio2Irq+0x28>
 8004496:	2b01      	cmp	r3, #1
 8004498:	d04e      	beq.n	8004538 <SX1276OnDio2Irq+0xc4>
                break;
 800449a:	e070      	b.n	800457e <SX1276OnDio2Irq+0x10a>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800449c:	4b50      	ldr	r3, [pc, #320]	; (80045e0 <SX1276OnDio2Irq+0x16c>)
 800449e:	222c      	movs	r2, #44	; 0x2c
 80044a0:	2101      	movs	r1, #1
 80044a2:	5499      	strb	r1, [r3, r2]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 80044a4:	4b4e      	ldr	r3, [pc, #312]	; (80045e0 <SX1276OnDio2Irq+0x16c>)
 80044a6:	222c      	movs	r2, #44	; 0x2c
 80044a8:	5c9b      	ldrb	r3, [r3, r2]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d164      	bne.n	8004578 <SX1276OnDio2Irq+0x104>
 80044ae:	4b4c      	ldr	r3, [pc, #304]	; (80045e0 <SX1276OnDio2Irq+0x16c>)
 80044b0:	222d      	movs	r2, #45	; 0x2d
 80044b2:	5c9b      	ldrb	r3, [r3, r2]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d15f      	bne.n	8004578 <SX1276OnDio2Irq+0x104>
                    TimerStop( &RxTimeoutSyncWord );
 80044b8:	4b4a      	ldr	r3, [pc, #296]	; (80045e4 <SX1276OnDio2Irq+0x170>)
 80044ba:	0018      	movs	r0, r3
 80044bc:	f004 f9c2 	bl	8008844 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 80044c0:	4b47      	ldr	r3, [pc, #284]	; (80045e0 <SX1276OnDio2Irq+0x16c>)
 80044c2:	222d      	movs	r2, #45	; 0x2d
 80044c4:	2101      	movs	r1, #1
 80044c6:	5499      	strb	r1, [r3, r2]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 80044c8:	2011      	movs	r0, #17
 80044ca:	f7ff fb5e 	bl	8003b8a <SX1276Read>
 80044ce:	0003      	movs	r3, r0
 80044d0:	085b      	lsrs	r3, r3, #1
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	425b      	negs	r3, r3
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	b259      	sxtb	r1, r3
 80044da:	4b41      	ldr	r3, [pc, #260]	; (80045e0 <SX1276OnDio2Irq+0x16c>)
 80044dc:	222e      	movs	r2, #46	; 0x2e
 80044de:	5499      	strb	r1, [r3, r2]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 80044e0:	201b      	movs	r0, #27
 80044e2:	f7ff fb52 	bl	8003b8a <SX1276Read>
 80044e6:	0003      	movs	r3, r0
 80044e8:	021c      	lsls	r4, r3, #8
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 80044ea:	201c      	movs	r0, #28
 80044ec:	f7ff fb4d 	bl	8003b8a <SX1276Read>
 80044f0:	0003      	movs	r3, r0
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 80044f2:	4323      	orrs	r3, r4
 80044f4:	60fb      	str	r3, [r7, #12]
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	0a1b      	lsrs	r3, r3, #8
 80044fa:	60bb      	str	r3, [r7, #8]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	021b      	lsls	r3, r3, #8
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	607b      	str	r3, [r7, #4]
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	4a37      	ldr	r2, [pc, #220]	; (80045e8 <SX1276OnDio2Irq+0x174>)
 800450a:	435a      	muls	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4936      	ldr	r1, [pc, #216]	; (80045e8 <SX1276OnDio2Irq+0x174>)
 8004510:	434b      	muls	r3, r1
 8004512:	3380      	adds	r3, #128	; 0x80
 8004514:	0a1b      	lsrs	r3, r3, #8
 8004516:	18d3      	adds	r3, r2, r3
 8004518:	001a      	movs	r2, r3
 800451a:	4b31      	ldr	r3, [pc, #196]	; (80045e0 <SX1276OnDio2Irq+0x16c>)
 800451c:	631a      	str	r2, [r3, #48]	; 0x30
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 800451e:	200c      	movs	r0, #12
 8004520:	f7ff fb33 	bl	8003b8a <SX1276Read>
 8004524:	0003      	movs	r3, r0
 8004526:	095b      	lsrs	r3, r3, #5
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2207      	movs	r2, #7
 800452c:	4013      	ands	r3, r2
 800452e:	b2d9      	uxtb	r1, r3
 8004530:	4b2b      	ldr	r3, [pc, #172]	; (80045e0 <SX1276OnDio2Irq+0x16c>)
 8004532:	2234      	movs	r2, #52	; 0x34
 8004534:	5499      	strb	r1, [r3, r2]
                break;
 8004536:	e01f      	b.n	8004578 <SX1276OnDio2Irq+0x104>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8004538:	4b29      	ldr	r3, [pc, #164]	; (80045e0 <SX1276OnDio2Irq+0x16c>)
 800453a:	224f      	movs	r2, #79	; 0x4f
 800453c:	5c9b      	ldrb	r3, [r3, r2]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d01c      	beq.n	800457c <SX1276OnDio2Irq+0x108>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8004542:	2102      	movs	r1, #2
 8004544:	2012      	movs	r0, #18
 8004546:	f7ff fb0c 	bl	8003b62 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 800454a:	4b28      	ldr	r3, [pc, #160]	; (80045ec <SX1276OnDio2Irq+0x178>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d014      	beq.n	800457c <SX1276OnDio2Irq+0x108>
 8004552:	4b26      	ldr	r3, [pc, #152]	; (80045ec <SX1276OnDio2Irq+0x178>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00f      	beq.n	800457c <SX1276OnDio2Irq+0x108>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800455c:	4b23      	ldr	r3, [pc, #140]	; (80045ec <SX1276OnDio2Irq+0x178>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	695c      	ldr	r4, [r3, #20]
 8004562:	201c      	movs	r0, #28
 8004564:	f7ff fb11 	bl	8003b8a <SX1276Read>
 8004568:	0003      	movs	r3, r0
 800456a:	001a      	movs	r2, r3
 800456c:	233f      	movs	r3, #63	; 0x3f
 800456e:	4013      	ands	r3, r2
 8004570:	b2db      	uxtb	r3, r3
 8004572:	0018      	movs	r0, r3
 8004574:	47a0      	blx	r4
                break;
 8004576:	e001      	b.n	800457c <SX1276OnDio2Irq+0x108>
                break;
 8004578:	46c0      	nop			; (mov r8, r8)
 800457a:	e02c      	b.n	80045d6 <SX1276OnDio2Irq+0x162>
                break;
 800457c:	46c0      	nop			; (mov r8, r8)
            break;
 800457e:	e02a      	b.n	80045d6 <SX1276OnDio2Irq+0x162>
            switch( SX1276.Settings.Modem )
 8004580:	4b17      	ldr	r3, [pc, #92]	; (80045e0 <SX1276OnDio2Irq+0x16c>)
 8004582:	795b      	ldrb	r3, [r3, #5]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d022      	beq.n	80045ce <SX1276OnDio2Irq+0x15a>
 8004588:	2b01      	cmp	r3, #1
 800458a:	d000      	beq.n	800458e <SX1276OnDio2Irq+0x11a>
                break;
 800458c:	e022      	b.n	80045d4 <SX1276OnDio2Irq+0x160>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800458e:	4b14      	ldr	r3, [pc, #80]	; (80045e0 <SX1276OnDio2Irq+0x16c>)
 8004590:	224f      	movs	r2, #79	; 0x4f
 8004592:	5c9b      	ldrb	r3, [r3, r2]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d01c      	beq.n	80045d2 <SX1276OnDio2Irq+0x15e>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8004598:	2102      	movs	r1, #2
 800459a:	2012      	movs	r0, #18
 800459c:	f7ff fae1 	bl	8003b62 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 80045a0:	4b12      	ldr	r3, [pc, #72]	; (80045ec <SX1276OnDio2Irq+0x178>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d014      	beq.n	80045d2 <SX1276OnDio2Irq+0x15e>
 80045a8:	4b10      	ldr	r3, [pc, #64]	; (80045ec <SX1276OnDio2Irq+0x178>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00f      	beq.n	80045d2 <SX1276OnDio2Irq+0x15e>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 80045b2:	4b0e      	ldr	r3, [pc, #56]	; (80045ec <SX1276OnDio2Irq+0x178>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	695c      	ldr	r4, [r3, #20]
 80045b8:	201c      	movs	r0, #28
 80045ba:	f7ff fae6 	bl	8003b8a <SX1276Read>
 80045be:	0003      	movs	r3, r0
 80045c0:	001a      	movs	r2, r3
 80045c2:	233f      	movs	r3, #63	; 0x3f
 80045c4:	4013      	ands	r3, r2
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	0018      	movs	r0, r3
 80045ca:	47a0      	blx	r4
                break;
 80045cc:	e001      	b.n	80045d2 <SX1276OnDio2Irq+0x15e>
                break;
 80045ce:	46c0      	nop			; (mov r8, r8)
 80045d0:	e000      	b.n	80045d4 <SX1276OnDio2Irq+0x160>
                break;
 80045d2:	46c0      	nop			; (mov r8, r8)
            break;
 80045d4:	46c0      	nop			; (mov r8, r8)
    }
}
 80045d6:	46c0      	nop			; (mov r8, r8)
 80045d8:	46bd      	mov	sp, r7
 80045da:	b005      	add	sp, #20
 80045dc:	bd90      	pop	{r4, r7, pc}
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	20000508 	.word	0x20000508
 80045e4:	200004f4 	.word	0x200004f4
 80045e8:	00003d09 	.word	0x00003d09
 80045ec:	200000b0 	.word	0x200000b0

080045f0 <SX1276OnDio3Irq>:

void SX1276OnDio3Irq( void )
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 80045f4:	4b1d      	ldr	r3, [pc, #116]	; (800466c <SX1276OnDio3Irq+0x7c>)
 80045f6:	795b      	ldrb	r3, [r3, #5]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d031      	beq.n	8004660 <SX1276OnDio3Irq+0x70>
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d000      	beq.n	8004602 <SX1276OnDio3Irq+0x12>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 8004600:	e031      	b.n	8004666 <SX1276OnDio3Irq+0x76>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8004602:	2012      	movs	r0, #18
 8004604:	f7ff fac1 	bl	8003b8a <SX1276Read>
 8004608:	0003      	movs	r3, r0
 800460a:	001a      	movs	r2, r3
 800460c:	2301      	movs	r3, #1
 800460e:	4013      	ands	r3, r2
 8004610:	2b01      	cmp	r3, #1
 8004612:	d112      	bne.n	800463a <SX1276OnDio3Irq+0x4a>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8004614:	2105      	movs	r1, #5
 8004616:	2012      	movs	r0, #18
 8004618:	f7ff faa3 	bl	8003b62 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800461c:	4b14      	ldr	r3, [pc, #80]	; (8004670 <SX1276OnDio3Irq+0x80>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d01f      	beq.n	8004664 <SX1276OnDio3Irq+0x74>
 8004624:	4b12      	ldr	r3, [pc, #72]	; (8004670 <SX1276OnDio3Irq+0x80>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d01a      	beq.n	8004664 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( true );
 800462e:	4b10      	ldr	r3, [pc, #64]	; (8004670 <SX1276OnDio3Irq+0x80>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	2001      	movs	r0, #1
 8004636:	4798      	blx	r3
        break;
 8004638:	e014      	b.n	8004664 <SX1276OnDio3Irq+0x74>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 800463a:	2104      	movs	r1, #4
 800463c:	2012      	movs	r0, #18
 800463e:	f7ff fa90 	bl	8003b62 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8004642:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <SX1276OnDio3Irq+0x80>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00c      	beq.n	8004664 <SX1276OnDio3Irq+0x74>
 800464a:	4b09      	ldr	r3, [pc, #36]	; (8004670 <SX1276OnDio3Irq+0x80>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d007      	beq.n	8004664 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( false );
 8004654:	4b06      	ldr	r3, [pc, #24]	; (8004670 <SX1276OnDio3Irq+0x80>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	2000      	movs	r0, #0
 800465c:	4798      	blx	r3
        break;
 800465e:	e001      	b.n	8004664 <SX1276OnDio3Irq+0x74>
        break;
 8004660:	46c0      	nop			; (mov r8, r8)
 8004662:	e000      	b.n	8004666 <SX1276OnDio3Irq+0x76>
        break;
 8004664:	46c0      	nop			; (mov r8, r8)
    }
}
 8004666:	46c0      	nop			; (mov r8, r8)
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	20000508 	.word	0x20000508
 8004670:	200000b0 	.word	0x200000b0

08004674 <SX1276OnDio4Irq>:

void SX1276OnDio4Irq( void )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 8004678:	4b0b      	ldr	r3, [pc, #44]	; (80046a8 <SX1276OnDio4Irq+0x34>)
 800467a:	795b      	ldrb	r3, [r3, #5]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <SX1276OnDio4Irq+0x12>
 8004680:	2b01      	cmp	r3, #1
 8004682:	d00a      	beq.n	800469a <SX1276OnDio4Irq+0x26>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 8004684:	e00c      	b.n	80046a0 <SX1276OnDio4Irq+0x2c>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8004686:	4b08      	ldr	r3, [pc, #32]	; (80046a8 <SX1276OnDio4Irq+0x34>)
 8004688:	222c      	movs	r2, #44	; 0x2c
 800468a:	5c9b      	ldrb	r3, [r3, r2]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d106      	bne.n	800469e <SX1276OnDio4Irq+0x2a>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8004690:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <SX1276OnDio4Irq+0x34>)
 8004692:	222c      	movs	r2, #44	; 0x2c
 8004694:	2101      	movs	r1, #1
 8004696:	5499      	strb	r1, [r3, r2]
        break;
 8004698:	e001      	b.n	800469e <SX1276OnDio4Irq+0x2a>
        break;
 800469a:	46c0      	nop			; (mov r8, r8)
 800469c:	e000      	b.n	80046a0 <SX1276OnDio4Irq+0x2c>
        break;
 800469e:	46c0      	nop			; (mov r8, r8)
    }
}
 80046a0:	46c0      	nop			; (mov r8, r8)
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	46c0      	nop			; (mov r8, r8)
 80046a8:	20000508 	.word	0x20000508

080046ac <SX1276IoInit>:
  SX1276SetMaxPayloadLength
};


void SX1276IoInit( void )
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 80046b2:	1d3b      	adds	r3, r7, #4
 80046b4:	0018      	movs	r0, r3
 80046b6:	2314      	movs	r3, #20
 80046b8:	001a      	movs	r2, r3
 80046ba:	2100      	movs	r1, #0
 80046bc:	f005 fc93 	bl	8009fe6 <memset>
  
  initStruct.Mode =GPIO_MODE_IT_RISING;
 80046c0:	1d3b      	adds	r3, r7, #4
 80046c2:	4a19      	ldr	r2, [pc, #100]	; (8004728 <SX1276IoInit+0x7c>)
 80046c4:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_PULLUP;
 80046c6:	1d3b      	adds	r3, r7, #4
 80046c8:	2201      	movs	r2, #1
 80046ca:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 80046cc:	1d3b      	adds	r3, r7, #4
 80046ce:	2203      	movs	r2, #3
 80046d0:	60da      	str	r2, [r3, #12]

  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80046d2:	1d3b      	adds	r3, r7, #4
 80046d4:	4815      	ldr	r0, [pc, #84]	; (800472c <SX1276IoInit+0x80>)
 80046d6:	001a      	movs	r2, r3
 80046d8:	2110      	movs	r1, #16
 80046da:	f004 f9af 	bl	8008a3c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 80046de:	1d3b      	adds	r3, r7, #4
 80046e0:	4812      	ldr	r0, [pc, #72]	; (800472c <SX1276IoInit+0x80>)
 80046e2:	001a      	movs	r2, r3
 80046e4:	2102      	movs	r1, #2
 80046e6:	f004 f9a9 	bl	8008a3c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 80046ea:	1d3b      	adds	r3, r7, #4
 80046ec:	480f      	ldr	r0, [pc, #60]	; (800472c <SX1276IoInit+0x80>)
 80046ee:	001a      	movs	r2, r3
 80046f0:	2101      	movs	r1, #1
 80046f2:	f004 f9a3 	bl	8008a3c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 80046f6:	1d3a      	adds	r2, r7, #4
 80046f8:	2380      	movs	r3, #128	; 0x80
 80046fa:	019b      	lsls	r3, r3, #6
 80046fc:	480c      	ldr	r0, [pc, #48]	; (8004730 <SX1276IoInit+0x84>)
 80046fe:	0019      	movs	r1, r3
 8004700:	f004 f99c 	bl	8008a3c <HW_GPIO_Init>
  
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8004704:	1d3b      	adds	r3, r7, #4
 8004706:	2201      	movs	r2, #1
 8004708:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;  
 800470a:	1d3b      	adds	r3, r7, #4
 800470c:	2200      	movs	r2, #0
 800470e:	609a      	str	r2, [r3, #8]
  HW_GPIO_Init( RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, &initStruct );
 8004710:	1d3a      	adds	r2, r7, #4
 8004712:	2380      	movs	r3, #128	; 0x80
 8004714:	0159      	lsls	r1, r3, #5
 8004716:	23a0      	movs	r3, #160	; 0xa0
 8004718:	05db      	lsls	r3, r3, #23
 800471a:	0018      	movs	r0, r3
 800471c:	f004 f98e 	bl	8008a3c <HW_GPIO_Init>
}
 8004720:	46c0      	nop			; (mov r8, r8)
 8004722:	46bd      	mov	sp, r7
 8004724:	b006      	add	sp, #24
 8004726:	bd80      	pop	{r7, pc}
 8004728:	10110000 	.word	0x10110000
 800472c:	50000400 	.word	0x50000400
 8004730:	50000800 	.word	0x50000800

08004734 <SX1276IoIrqInit>:

void SX1276IoIrqInit( DioIrqHandler **irqHandlers )
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4811      	ldr	r0, [pc, #68]	; (8004788 <SX1276IoIrqInit+0x54>)
 8004742:	2200      	movs	r2, #0
 8004744:	2110      	movs	r1, #16
 8004746:	f004 f9ed 	bl	8008b24 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3304      	adds	r3, #4
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	480d      	ldr	r0, [pc, #52]	; (8004788 <SX1276IoIrqInit+0x54>)
 8004752:	2200      	movs	r2, #0
 8004754:	2102      	movs	r1, #2
 8004756:	f004 f9e5 	bl	8008b24 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	3308      	adds	r3, #8
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4809      	ldr	r0, [pc, #36]	; (8004788 <SX1276IoIrqInit+0x54>)
 8004762:	2200      	movs	r2, #0
 8004764:	2101      	movs	r1, #1
 8004766:	f004 f9dd 	bl	8008b24 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	330c      	adds	r3, #12
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	2380      	movs	r3, #128	; 0x80
 8004772:	0199      	lsls	r1, r3, #6
 8004774:	4805      	ldr	r0, [pc, #20]	; (800478c <SX1276IoIrqInit+0x58>)
 8004776:	0013      	movs	r3, r2
 8004778:	2200      	movs	r2, #0
 800477a:	f004 f9d3 	bl	8008b24 <HW_GPIO_SetIrq>
}
 800477e:	46c0      	nop			; (mov r8, r8)
 8004780:	46bd      	mov	sp, r7
 8004782:	b002      	add	sp, #8
 8004784:	bd80      	pop	{r7, pc}
 8004786:	46c0      	nop			; (mov r8, r8)
 8004788:	50000400 	.word	0x50000400
 800478c:	50000800 	.word	0x50000800

08004790 <SX1276IoDeInit>:


void SX1276IoDeInit( void )
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 8004796:	1d3b      	adds	r3, r7, #4
 8004798:	0018      	movs	r0, r3
 800479a:	2314      	movs	r3, #20
 800479c:	001a      	movs	r2, r3
 800479e:	2100      	movs	r1, #0
 80047a0:	f005 fc21 	bl	8009fe6 <memset>

  initStruct.Mode = GPIO_MODE_IT_RISING ; //GPIO_MODE_ANALOG;
 80047a4:	1d3b      	adds	r3, r7, #4
 80047a6:	4a11      	ldr	r2, [pc, #68]	; (80047ec <SX1276IoDeInit+0x5c>)
 80047a8:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_PULLDOWN;
 80047aa:	1d3b      	adds	r3, r7, #4
 80047ac:	2202      	movs	r2, #2
 80047ae:	609a      	str	r2, [r3, #8]
  
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80047b0:	1d3b      	adds	r3, r7, #4
 80047b2:	480f      	ldr	r0, [pc, #60]	; (80047f0 <SX1276IoDeInit+0x60>)
 80047b4:	001a      	movs	r2, r3
 80047b6:	2110      	movs	r1, #16
 80047b8:	f004 f940 	bl	8008a3c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 80047bc:	1d3b      	adds	r3, r7, #4
 80047be:	480c      	ldr	r0, [pc, #48]	; (80047f0 <SX1276IoDeInit+0x60>)
 80047c0:	001a      	movs	r2, r3
 80047c2:	2102      	movs	r1, #2
 80047c4:	f004 f93a 	bl	8008a3c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 80047c8:	1d3b      	adds	r3, r7, #4
 80047ca:	4809      	ldr	r0, [pc, #36]	; (80047f0 <SX1276IoDeInit+0x60>)
 80047cc:	001a      	movs	r2, r3
 80047ce:	2101      	movs	r1, #1
 80047d0:	f004 f934 	bl	8008a3c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 80047d4:	1d3a      	adds	r2, r7, #4
 80047d6:	2380      	movs	r3, #128	; 0x80
 80047d8:	019b      	lsls	r3, r3, #6
 80047da:	4806      	ldr	r0, [pc, #24]	; (80047f4 <SX1276IoDeInit+0x64>)
 80047dc:	0019      	movs	r1, r3
 80047de:	f004 f92d 	bl	8008a3c <HW_GPIO_Init>
}
 80047e2:	46c0      	nop			; (mov r8, r8)
 80047e4:	46bd      	mov	sp, r7
 80047e6:	b006      	add	sp, #24
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	46c0      	nop			; (mov r8, r8)
 80047ec:	10110000 	.word	0x10110000
 80047f0:	50000400 	.word	0x50000400
 80047f4:	50000800 	.word	0x50000800

080047f8 <SX1276SetRfTxPower>:

void SX1276SetRfTxPower( int8_t power )
{
 80047f8:	b590      	push	{r4, r7, lr}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	0002      	movs	r2, r0
 8004800:	1dfb      	adds	r3, r7, #7
 8004802:	701a      	strb	r2, [r3, #0]
    uint8_t paConfig = 0;
 8004804:	230f      	movs	r3, #15
 8004806:	18fb      	adds	r3, r7, r3
 8004808:	2200      	movs	r2, #0
 800480a:	701a      	strb	r2, [r3, #0]
    uint8_t paDac = 0;
 800480c:	230e      	movs	r3, #14
 800480e:	18fb      	adds	r3, r7, r3
 8004810:	2200      	movs	r2, #0
 8004812:	701a      	strb	r2, [r3, #0]

    paConfig = SX1276Read( REG_PACONFIG );
 8004814:	230f      	movs	r3, #15
 8004816:	18fc      	adds	r4, r7, r3
 8004818:	2009      	movs	r0, #9
 800481a:	f7ff f9b6 	bl	8003b8a <SX1276Read>
 800481e:	0003      	movs	r3, r0
 8004820:	7023      	strb	r3, [r4, #0]
    paDac = SX1276Read( REG_PADAC );
 8004822:	230e      	movs	r3, #14
 8004824:	18fc      	adds	r4, r7, r3
 8004826:	204d      	movs	r0, #77	; 0x4d
 8004828:	f7ff f9af 	bl	8003b8a <SX1276Read>
 800482c:	0003      	movs	r3, r0
 800482e:	7023      	strb	r3, [r4, #0]

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( SX1276.Settings.Channel );
 8004830:	230f      	movs	r3, #15
 8004832:	18fb      	adds	r3, r7, r3
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	b25b      	sxtb	r3, r3
 8004838:	227f      	movs	r2, #127	; 0x7f
 800483a:	4013      	ands	r3, r2
 800483c:	b25c      	sxtb	r4, r3
 800483e:	4b5e      	ldr	r3, [pc, #376]	; (80049b8 <SX1276SetRfTxPower+0x1c0>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	0018      	movs	r0, r3
 8004844:	f000 f8ba 	bl	80049bc <SX1276GetPaSelect>
 8004848:	0003      	movs	r3, r0
 800484a:	b25b      	sxtb	r3, r3
 800484c:	4323      	orrs	r3, r4
 800484e:	b25a      	sxtb	r2, r3
 8004850:	230f      	movs	r3, #15
 8004852:	18fb      	adds	r3, r7, r3
 8004854:	701a      	strb	r2, [r3, #0]
    paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK ) | 0x70;
 8004856:	230f      	movs	r3, #15
 8004858:	18fb      	adds	r3, r7, r3
 800485a:	220f      	movs	r2, #15
 800485c:	18ba      	adds	r2, r7, r2
 800485e:	7812      	ldrb	r2, [r2, #0]
 8004860:	2170      	movs	r1, #112	; 0x70
 8004862:	430a      	orrs	r2, r1
 8004864:	701a      	strb	r2, [r3, #0]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8004866:	230f      	movs	r3, #15
 8004868:	18fb      	adds	r3, r7, r3
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	b25b      	sxtb	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	da6b      	bge.n	800494a <SX1276SetRfTxPower+0x152>
    {
        if( power > 17 )
 8004872:	1dfb      	adds	r3, r7, #7
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	b25b      	sxtb	r3, r3
 8004878:	2b11      	cmp	r3, #17
 800487a:	dd08      	ble.n	800488e <SX1276SetRfTxPower+0x96>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 800487c:	230e      	movs	r3, #14
 800487e:	18fb      	adds	r3, r7, r3
 8004880:	220e      	movs	r2, #14
 8004882:	18ba      	adds	r2, r7, r2
 8004884:	7812      	ldrb	r2, [r2, #0]
 8004886:	2107      	movs	r1, #7
 8004888:	430a      	orrs	r2, r1
 800488a:	701a      	strb	r2, [r3, #0]
 800488c:	e00c      	b.n	80048a8 <SX1276SetRfTxPower+0xb0>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 800488e:	230e      	movs	r3, #14
 8004890:	18fb      	adds	r3, r7, r3
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	b25b      	sxtb	r3, r3
 8004896:	2207      	movs	r2, #7
 8004898:	4393      	bics	r3, r2
 800489a:	b25b      	sxtb	r3, r3
 800489c:	2204      	movs	r2, #4
 800489e:	4313      	orrs	r3, r2
 80048a0:	b25a      	sxtb	r2, r3
 80048a2:	230e      	movs	r3, #14
 80048a4:	18fb      	adds	r3, r7, r3
 80048a6:	701a      	strb	r2, [r3, #0]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 80048a8:	230e      	movs	r3, #14
 80048aa:	18fb      	adds	r3, r7, r3
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	2207      	movs	r2, #7
 80048b0:	4013      	ands	r3, r2
 80048b2:	2b07      	cmp	r3, #7
 80048b4:	d124      	bne.n	8004900 <SX1276SetRfTxPower+0x108>
        {
            if( power < 5 )
 80048b6:	1dfb      	adds	r3, r7, #7
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	b25b      	sxtb	r3, r3
 80048bc:	2b04      	cmp	r3, #4
 80048be:	dc02      	bgt.n	80048c6 <SX1276SetRfTxPower+0xce>
            {
                power = 5;
 80048c0:	1dfb      	adds	r3, r7, #7
 80048c2:	2205      	movs	r2, #5
 80048c4:	701a      	strb	r2, [r3, #0]
            }
            if( power > 20 )
 80048c6:	1dfb      	adds	r3, r7, #7
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	b25b      	sxtb	r3, r3
 80048cc:	2b14      	cmp	r3, #20
 80048ce:	dd02      	ble.n	80048d6 <SX1276SetRfTxPower+0xde>
            {
                power = 20;
 80048d0:	1dfb      	adds	r3, r7, #7
 80048d2:	2214      	movs	r2, #20
 80048d4:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 80048d6:	230f      	movs	r3, #15
 80048d8:	18fb      	adds	r3, r7, r3
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	b25b      	sxtb	r3, r3
 80048de:	220f      	movs	r2, #15
 80048e0:	4393      	bics	r3, r2
 80048e2:	b25a      	sxtb	r2, r3
 80048e4:	1dfb      	adds	r3, r7, #7
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	3b05      	subs	r3, #5
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	b25b      	sxtb	r3, r3
 80048ee:	210f      	movs	r1, #15
 80048f0:	400b      	ands	r3, r1
 80048f2:	b25b      	sxtb	r3, r3
 80048f4:	4313      	orrs	r3, r2
 80048f6:	b25a      	sxtb	r2, r3
 80048f8:	230f      	movs	r3, #15
 80048fa:	18fb      	adds	r3, r7, r3
 80048fc:	701a      	strb	r2, [r3, #0]
 80048fe:	e048      	b.n	8004992 <SX1276SetRfTxPower+0x19a>
        }
        else
        {
            if( power < 2 )
 8004900:	1dfb      	adds	r3, r7, #7
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	b25b      	sxtb	r3, r3
 8004906:	2b01      	cmp	r3, #1
 8004908:	dc02      	bgt.n	8004910 <SX1276SetRfTxPower+0x118>
            {
                power = 2;
 800490a:	1dfb      	adds	r3, r7, #7
 800490c:	2202      	movs	r2, #2
 800490e:	701a      	strb	r2, [r3, #0]
            }
            if( power > 17 )
 8004910:	1dfb      	adds	r3, r7, #7
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	b25b      	sxtb	r3, r3
 8004916:	2b11      	cmp	r3, #17
 8004918:	dd02      	ble.n	8004920 <SX1276SetRfTxPower+0x128>
            {
                power = 17;
 800491a:	1dfb      	adds	r3, r7, #7
 800491c:	2211      	movs	r2, #17
 800491e:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8004920:	230f      	movs	r3, #15
 8004922:	18fb      	adds	r3, r7, r3
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	b25b      	sxtb	r3, r3
 8004928:	220f      	movs	r2, #15
 800492a:	4393      	bics	r3, r2
 800492c:	b25a      	sxtb	r2, r3
 800492e:	1dfb      	adds	r3, r7, #7
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	3b02      	subs	r3, #2
 8004934:	b2db      	uxtb	r3, r3
 8004936:	b25b      	sxtb	r3, r3
 8004938:	210f      	movs	r1, #15
 800493a:	400b      	ands	r3, r1
 800493c:	b25b      	sxtb	r3, r3
 800493e:	4313      	orrs	r3, r2
 8004940:	b25a      	sxtb	r2, r3
 8004942:	230f      	movs	r3, #15
 8004944:	18fb      	adds	r3, r7, r3
 8004946:	701a      	strb	r2, [r3, #0]
 8004948:	e023      	b.n	8004992 <SX1276SetRfTxPower+0x19a>
        }
    }
    else
    {
        if( power < -1 )
 800494a:	1dfb      	adds	r3, r7, #7
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	b25b      	sxtb	r3, r3
 8004950:	3301      	adds	r3, #1
 8004952:	da02      	bge.n	800495a <SX1276SetRfTxPower+0x162>
        {
            power = -1;
 8004954:	1dfb      	adds	r3, r7, #7
 8004956:	22ff      	movs	r2, #255	; 0xff
 8004958:	701a      	strb	r2, [r3, #0]
        }
        if( power > 14 )
 800495a:	1dfb      	adds	r3, r7, #7
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	b25b      	sxtb	r3, r3
 8004960:	2b0e      	cmp	r3, #14
 8004962:	dd02      	ble.n	800496a <SX1276SetRfTxPower+0x172>
        {
            power = 14;
 8004964:	1dfb      	adds	r3, r7, #7
 8004966:	220e      	movs	r2, #14
 8004968:	701a      	strb	r2, [r3, #0]
        }
        paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
 800496a:	230f      	movs	r3, #15
 800496c:	18fb      	adds	r3, r7, r3
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	b25b      	sxtb	r3, r3
 8004972:	220f      	movs	r2, #15
 8004974:	4393      	bics	r3, r2
 8004976:	b25a      	sxtb	r2, r3
 8004978:	1dfb      	adds	r3, r7, #7
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	3301      	adds	r3, #1
 800497e:	b2db      	uxtb	r3, r3
 8004980:	b25b      	sxtb	r3, r3
 8004982:	210f      	movs	r1, #15
 8004984:	400b      	ands	r3, r1
 8004986:	b25b      	sxtb	r3, r3
 8004988:	4313      	orrs	r3, r2
 800498a:	b25a      	sxtb	r2, r3
 800498c:	230f      	movs	r3, #15
 800498e:	18fb      	adds	r3, r7, r3
 8004990:	701a      	strb	r2, [r3, #0]
    }
    SX1276Write( REG_PACONFIG, paConfig );
 8004992:	230f      	movs	r3, #15
 8004994:	18fb      	adds	r3, r7, r3
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	0019      	movs	r1, r3
 800499a:	2009      	movs	r0, #9
 800499c:	f7ff f8e1 	bl	8003b62 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 80049a0:	230e      	movs	r3, #14
 80049a2:	18fb      	adds	r3, r7, r3
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	0019      	movs	r1, r3
 80049a8:	204d      	movs	r0, #77	; 0x4d
 80049aa:	f7ff f8da 	bl	8003b62 <SX1276Write>
}
 80049ae:	46c0      	nop			; (mov r8, r8)
 80049b0:	46bd      	mov	sp, r7
 80049b2:	b005      	add	sp, #20
 80049b4:	bd90      	pop	{r4, r7, pc}
 80049b6:	46c0      	nop			; (mov r8, r8)
 80049b8:	20000508 	.word	0x20000508

080049bc <SX1276GetPaSelect>:
uint8_t SX1276GetPaSelect( uint32_t channel )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
    return RF_PACONFIG_PASELECT_RFO;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	0018      	movs	r0, r3
 80049c8:	46bd      	mov	sp, r7
 80049ca:	b002      	add	sp, #8
 80049cc:	bd80      	pop	{r7, pc}
	...

080049d0 <SX1276SetAntSwLowPower>:



void SX1276SetAntSwLowPower( bool status )
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	0002      	movs	r2, r0
 80049d8:	1dfb      	adds	r3, r7, #7
 80049da:	701a      	strb	r2, [r3, #0]
  if( RadioIsActive != status )
 80049dc:	4b1b      	ldr	r3, [pc, #108]	; (8004a4c <SX1276SetAntSwLowPower+0x7c>)
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	1dfa      	adds	r2, r7, #7
 80049e2:	7812      	ldrb	r2, [r2, #0]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d02d      	beq.n	8004a44 <SX1276SetAntSwLowPower+0x74>
  {
    RadioIsActive = status;
 80049e8:	4b18      	ldr	r3, [pc, #96]	; (8004a4c <SX1276SetAntSwLowPower+0x7c>)
 80049ea:	1dfa      	adds	r2, r7, #7
 80049ec:	7812      	ldrb	r2, [r2, #0]
 80049ee:	701a      	strb	r2, [r3, #0]
    
    if( status == false )
 80049f0:	1dfb      	adds	r3, r7, #7
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	2201      	movs	r2, #1
 80049f6:	4053      	eors	r3, r2
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d011      	beq.n	8004a22 <SX1276SetAntSwLowPower+0x52>
    {
      TimerStop( &TcxoStopTimer );
 80049fe:	4b14      	ldr	r3, [pc, #80]	; (8004a50 <SX1276SetAntSwLowPower+0x80>)
 8004a00:	0018      	movs	r0, r3
 8004a02:	f003 ff1f 	bl	8008844 <TimerStop>
      
      MLM_TCXO_ON();  //TCXO ON
 8004a06:	2380      	movs	r3, #128	; 0x80
 8004a08:	0159      	lsls	r1, r3, #5
 8004a0a:	23a0      	movs	r3, #160	; 0xa0
 8004a0c:	05db      	lsls	r3, r3, #23
 8004a0e:	2201      	movs	r2, #1
 8004a10:	0018      	movs	r0, r3
 8004a12:	f004 f8df 	bl	8008bd4 <HW_GPIO_Write>
      
      DelayMs( BOARD_WAKEUP_TIME ); //start up time of TCXO
 8004a16:	2003      	movs	r0, #3
 8004a18:	f003 fd92 	bl	8008540 <DelayMs>
      
      SX1276AntSwInit( );
 8004a1c:	f000 f81c 	bl	8004a58 <SX1276AntSwInit>
      TimerSetValue( &TcxoStopTimer, TCXO_OFF_DELAY);
      
      TimerStart( &TcxoStopTimer );
    }
  }
}
 8004a20:	e010      	b.n	8004a44 <SX1276SetAntSwLowPower+0x74>
      SX1276AntSwDeInit( );
 8004a22:	f000 f859 	bl	8004ad8 <SX1276AntSwDeInit>
      TimerInit( &TcxoStopTimer, OnTcxoStopTimerEvent );
 8004a26:	4a0b      	ldr	r2, [pc, #44]	; (8004a54 <SX1276SetAntSwLowPower+0x84>)
 8004a28:	4b09      	ldr	r3, [pc, #36]	; (8004a50 <SX1276SetAntSwLowPower+0x80>)
 8004a2a:	0011      	movs	r1, r2
 8004a2c:	0018      	movs	r0, r3
 8004a2e:	f003 fddb 	bl	80085e8 <TimerInit>
      TimerSetValue( &TcxoStopTimer, TCXO_OFF_DELAY);
 8004a32:	4b07      	ldr	r3, [pc, #28]	; (8004a50 <SX1276SetAntSwLowPower+0x80>)
 8004a34:	2102      	movs	r1, #2
 8004a36:	0018      	movs	r0, r3
 8004a38:	f003 ff98 	bl	800896c <TimerSetValue>
      TimerStart( &TcxoStopTimer );
 8004a3c:	4b04      	ldr	r3, [pc, #16]	; (8004a50 <SX1276SetAntSwLowPower+0x80>)
 8004a3e:	0018      	movs	r0, r3
 8004a40:	f003 fdea 	bl	8008618 <TimerStart>
}
 8004a44:	46c0      	nop			; (mov r8, r8)
 8004a46:	46bd      	mov	sp, r7
 8004a48:	b002      	add	sp, #8
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	200001c8 	.word	0x200001c8
 8004a50:	200001b4 	.word	0x200001b4
 8004a54:	08004bd1 	.word	0x08004bd1

08004a58 <SX1276AntSwInit>:

static void SX1276AntSwInit( void )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 8004a5e:	1d3b      	adds	r3, r7, #4
 8004a60:	0018      	movs	r0, r3
 8004a62:	2314      	movs	r3, #20
 8004a64:	001a      	movs	r2, r3
 8004a66:	2100      	movs	r1, #0
 8004a68:	f005 fabd 	bl	8009fe6 <memset>

  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8004a6c:	1d3b      	adds	r3, r7, #4
 8004a6e:	2201      	movs	r2, #1
 8004a70:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL; //GPIO_PULLUP;
 8004a72:	1d3b      	adds	r3, r7, #4
 8004a74:	2200      	movs	r2, #0
 8004a76:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8004a78:	1d3b      	adds	r3, r7, #4
 8004a7a:	2203      	movs	r2, #3
 8004a7c:	60da      	str	r2, [r3, #12]
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, &initStruct  ); 
 8004a7e:	1d3a      	adds	r2, r7, #4
 8004a80:	23a0      	movs	r3, #160	; 0xa0
 8004a82:	05db      	lsls	r3, r3, #23
 8004a84:	2102      	movs	r1, #2
 8004a86:	0018      	movs	r0, r3
 8004a88:	f003 ffd8 	bl	8008a3c <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 0);
 8004a8c:	23a0      	movs	r3, #160	; 0xa0
 8004a8e:	05db      	lsls	r3, r3, #23
 8004a90:	2200      	movs	r2, #0
 8004a92:	2102      	movs	r1, #2
 8004a94:	0018      	movs	r0, r3
 8004a96:	f004 f89d 	bl	8008bd4 <HW_GPIO_Write>
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, &initStruct  ); 
 8004a9a:	1d3b      	adds	r3, r7, #4
 8004a9c:	480d      	ldr	r0, [pc, #52]	; (8004ad4 <SX1276AntSwInit+0x7c>)
 8004a9e:	001a      	movs	r2, r3
 8004aa0:	2102      	movs	r1, #2
 8004aa2:	f003 ffcb 	bl	8008a3c <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 0);
 8004aa6:	4b0b      	ldr	r3, [pc, #44]	; (8004ad4 <SX1276AntSwInit+0x7c>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	2102      	movs	r1, #2
 8004aac:	0018      	movs	r0, r3
 8004aae:	f004 f891 	bl	8008bd4 <HW_GPIO_Write>
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, &initStruct  ); 
 8004ab2:	1d3b      	adds	r3, r7, #4
 8004ab4:	4807      	ldr	r0, [pc, #28]	; (8004ad4 <SX1276AntSwInit+0x7c>)
 8004ab6:	001a      	movs	r2, r3
 8004ab8:	2104      	movs	r1, #4
 8004aba:	f003 ffbf 	bl	8008a3c <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 0);
 8004abe:	4b05      	ldr	r3, [pc, #20]	; (8004ad4 <SX1276AntSwInit+0x7c>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	2104      	movs	r1, #4
 8004ac4:	0018      	movs	r0, r3
 8004ac6:	f004 f885 	bl	8008bd4 <HW_GPIO_Write>
}
 8004aca:	46c0      	nop			; (mov r8, r8)
 8004acc:	46bd      	mov	sp, r7
 8004ace:	b006      	add	sp, #24
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	46c0      	nop			; (mov r8, r8)
 8004ad4:	50000800 	.word	0x50000800

08004ad8 <SX1276AntSwDeInit>:

static void SX1276AntSwDeInit( void )
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 8004ade:	1d3b      	adds	r3, r7, #4
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	2314      	movs	r3, #20
 8004ae4:	001a      	movs	r2, r3
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	f005 fa7d 	bl	8009fe6 <memset>

  initStruct.Mode = GPIO_MODE_ANALOG ;
 8004aec:	1d3b      	adds	r3, r7, #4
 8004aee:	2203      	movs	r2, #3
 8004af0:	605a      	str	r2, [r3, #4]
  
  initStruct.Pull = GPIO_NOPULL;
 8004af2:	1d3b      	adds	r3, r7, #4
 8004af4:	2200      	movs	r2, #0
 8004af6:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8004af8:	1d3b      	adds	r3, r7, #4
 8004afa:	2203      	movs	r2, #3
 8004afc:	60da      	str	r2, [r3, #12]

  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, &initStruct  ); 
 8004afe:	1d3a      	adds	r2, r7, #4
 8004b00:	23a0      	movs	r3, #160	; 0xa0
 8004b02:	05db      	lsls	r3, r3, #23
 8004b04:	2102      	movs	r1, #2
 8004b06:	0018      	movs	r0, r3
 8004b08:	f003 ff98 	bl	8008a3c <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 0);
 8004b0c:	23a0      	movs	r3, #160	; 0xa0
 8004b0e:	05db      	lsls	r3, r3, #23
 8004b10:	2200      	movs	r2, #0
 8004b12:	2102      	movs	r1, #2
 8004b14:	0018      	movs	r0, r3
 8004b16:	f004 f85d 	bl	8008bd4 <HW_GPIO_Write>
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, &initStruct  ); 
 8004b1a:	1d3b      	adds	r3, r7, #4
 8004b1c:	480d      	ldr	r0, [pc, #52]	; (8004b54 <SX1276AntSwDeInit+0x7c>)
 8004b1e:	001a      	movs	r2, r3
 8004b20:	2102      	movs	r1, #2
 8004b22:	f003 ff8b 	bl	8008a3c <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 0);
 8004b26:	4b0b      	ldr	r3, [pc, #44]	; (8004b54 <SX1276AntSwDeInit+0x7c>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	2102      	movs	r1, #2
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	f004 f851 	bl	8008bd4 <HW_GPIO_Write>
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, &initStruct  ); 
 8004b32:	1d3b      	adds	r3, r7, #4
 8004b34:	4807      	ldr	r0, [pc, #28]	; (8004b54 <SX1276AntSwDeInit+0x7c>)
 8004b36:	001a      	movs	r2, r3
 8004b38:	2104      	movs	r1, #4
 8004b3a:	f003 ff7f 	bl	8008a3c <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 0);
 8004b3e:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <SX1276AntSwDeInit+0x7c>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	2104      	movs	r1, #4
 8004b44:	0018      	movs	r0, r3
 8004b46:	f004 f845 	bl	8008bd4 <HW_GPIO_Write>
}
 8004b4a:	46c0      	nop			; (mov r8, r8)
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	b006      	add	sp, #24
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	46c0      	nop			; (mov r8, r8)
 8004b54:	50000800 	.word	0x50000800

08004b58 <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t opMode )
{
 8004b58:	b590      	push	{r4, r7, lr}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	0002      	movs	r2, r0
 8004b60:	1dfb      	adds	r3, r7, #7
 8004b62:	701a      	strb	r2, [r3, #0]
 uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 8004b64:	230f      	movs	r3, #15
 8004b66:	18fc      	adds	r4, r7, r3
 8004b68:	2009      	movs	r0, #9
 8004b6a:	f7ff f80e 	bl	8003b8a <SX1276Read>
 8004b6e:	0003      	movs	r3, r0
 8004b70:	7023      	strb	r3, [r4, #0]
      switch( opMode )
 8004b72:	1dfb      	adds	r3, r7, #7
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	2b03      	cmp	r3, #3
 8004b78:	d116      	bne.n	8004ba8 <SX1276SetAntSw+0x50>
    {
    case RFLR_OPMODE_TRANSMITTER:
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8004b7a:	230f      	movs	r3, #15
 8004b7c:	18fb      	adds	r3, r7, r3
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	b25b      	sxtb	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	da06      	bge.n	8004b94 <SX1276SetAntSw+0x3c>
      {
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 1 );
 8004b86:	4b10      	ldr	r3, [pc, #64]	; (8004bc8 <SX1276SetAntSw+0x70>)
 8004b88:	2201      	movs	r2, #1
 8004b8a:	2102      	movs	r1, #2
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	f004 f821 	bl	8008bd4 <HW_GPIO_Write>
 8004b92:	e005      	b.n	8004ba0 <SX1276SetAntSw+0x48>
      }
      else
      {
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 1 );
 8004b94:	4b0c      	ldr	r3, [pc, #48]	; (8004bc8 <SX1276SetAntSw+0x70>)
 8004b96:	2201      	movs	r2, #1
 8004b98:	2104      	movs	r1, #4
 8004b9a:	0018      	movs	r0, r3
 8004b9c:	f004 f81a 	bl	8008bd4 <HW_GPIO_Write>
      }
      SX1276.RxTx = 1;
 8004ba0:	4b0a      	ldr	r3, [pc, #40]	; (8004bcc <SX1276SetAntSw+0x74>)
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	701a      	strb	r2, [r3, #0]
	  break;
 8004ba6:	e00a      	b.n	8004bbe <SX1276SetAntSw+0x66>
    case RFLR_OPMODE_RECEIVER:
    case RFLR_OPMODE_RECEIVER_SINGLE:
    case RFLR_OPMODE_CAD:
    default:
    	SX1276.RxTx = 0;
 8004ba8:	4b08      	ldr	r3, [pc, #32]	; (8004bcc <SX1276SetAntSw+0x74>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	701a      	strb	r2, [r3, #0]
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 1 );
 8004bae:	23a0      	movs	r3, #160	; 0xa0
 8004bb0:	05db      	lsls	r3, r3, #23
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	2102      	movs	r1, #2
 8004bb6:	0018      	movs	r0, r3
 8004bb8:	f004 f80c 	bl	8008bd4 <HW_GPIO_Write>
        break;
 8004bbc:	46c0      	nop			; (mov r8, r8)
    }
  
}
 8004bbe:	46c0      	nop			; (mov r8, r8)
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	b005      	add	sp, #20
 8004bc4:	bd90      	pop	{r4, r7, pc}
 8004bc6:	46c0      	nop			; (mov r8, r8)
 8004bc8:	50000800 	.word	0x50000800
 8004bcc:	20000508 	.word	0x20000508

08004bd0 <OnTcxoStopTimerEvent>:

static void OnTcxoStopTimerEvent( void )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0
  TimerStop( &TcxoStopTimer );
 8004bd4:	4b07      	ldr	r3, [pc, #28]	; (8004bf4 <OnTcxoStopTimerEvent+0x24>)
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	f003 fe34 	bl	8008844 <TimerStop>

  MLM_TCXO_OFF();  //TCXO OFF
 8004bdc:	2380      	movs	r3, #128	; 0x80
 8004bde:	0159      	lsls	r1, r3, #5
 8004be0:	23a0      	movs	r3, #160	; 0xa0
 8004be2:	05db      	lsls	r3, r3, #23
 8004be4:	2200      	movs	r2, #0
 8004be6:	0018      	movs	r0, r3
 8004be8:	f003 fff4 	bl	8008bd4 <HW_GPIO_Write>
}
 8004bec:	46c0      	nop			; (mov r8, r8)
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	46c0      	nop			; (mov r8, r8)
 8004bf4:	200001b4 	.word	0x200001b4

08004bf8 <SX1276CheckRfFrequency>:



bool SX1276CheckRfFrequency( uint32_t frequency )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
    // Implement check. Currently all frequencies are supported
    return true;
 8004c00:	2301      	movs	r3, #1
}
 8004c02:	0018      	movs	r0, r3
 8004c04:	46bd      	mov	sp, r7
 8004c06:	b002      	add	sp, #8
 8004c08:	bd80      	pop	{r7, pc}
	...

08004c0c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	af00      	add	r7, sp, #0
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004c10:	4b0a      	ldr	r3, [pc, #40]	; (8004c3c <HAL_Init+0x30>)
 8004c12:	4a0a      	ldr	r2, [pc, #40]	; (8004c3c <HAL_Init+0x30>)
 8004c14:	6812      	ldr	r2, [r2, #0]
 8004c16:	2140      	movs	r1, #64	; 0x40
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	601a      	str	r2, [r3, #0]
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c1c:	4b07      	ldr	r3, [pc, #28]	; (8004c3c <HAL_Init+0x30>)
 8004c1e:	4a07      	ldr	r2, [pc, #28]	; (8004c3c <HAL_Init+0x30>)
 8004c20:	6812      	ldr	r2, [r2, #0]
 8004c22:	2102      	movs	r1, #2
 8004c24:	430a      	orrs	r2, r1
 8004c26:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004c28:	2003      	movs	r0, #3
 8004c2a:	f004 fd8b 	bl	8009744 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c2e:	f004 fd93 	bl	8009758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	0018      	movs	r0, r3
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	46c0      	nop			; (mov r8, r8)
 8004c3c:	40022000 	.word	0x40022000

08004c40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	af00      	add	r7, sp, #0
  uwTick++;
 8004c44:	4b03      	ldr	r3, [pc, #12]	; (8004c54 <HAL_IncTick+0x14>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	1c5a      	adds	r2, r3, #1
 8004c4a:	4b02      	ldr	r3, [pc, #8]	; (8004c54 <HAL_IncTick+0x14>)
 8004c4c:	601a      	str	r2, [r3, #0]
}
 8004c4e:	46c0      	nop			; (mov r8, r8)
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	2000057c 	.word	0x2000057c

08004c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8004c5c:	4b02      	ldr	r3, [pc, #8]	; (8004c68 <HAL_GetTick+0x10>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
}
 8004c60:	0018      	movs	r0, r3
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	46c0      	nop			; (mov r8, r8)
 8004c68:	2000057c 	.word	0x2000057c

08004c6c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e153      	b.n	8004f26 <HAL_ADC_Init+0x2ba>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10a      	bne.n	8004c9c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	65da      	str	r2, [r3, #92]	; 0x5c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2254      	movs	r2, #84	; 0x54
 8004c90:	2100      	movs	r1, #0
 8004c92:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	0018      	movs	r0, r3
 8004c98:	f000 f956 	bl	8004f48 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca0:	2210      	movs	r2, #16
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	d105      	bne.n	8004cb2 <HAL_ADC_Init+0x46>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	2204      	movs	r2, #4
 8004cae:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004cb0:	d00b      	beq.n	8004cca <HAL_ADC_Init+0x5e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb6:	2210      	movs	r2, #16
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	659a      	str	r2, [r3, #88]	; 0x58
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2254      	movs	r2, #84	; 0x54
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e12d      	b.n	8004f26 <HAL_ADC_Init+0x2ba>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cce:	4a98      	ldr	r2, [pc, #608]	; (8004f30 <HAL_ADC_Init+0x2c4>)
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	659a      	str	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	2203      	movs	r2, #3
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d108      	bne.n	8004cfa <HAL_ADC_Init+0x8e>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d101      	bne.n	8004cfa <HAL_ADC_Init+0x8e>
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e000      	b.n	8004cfc <HAL_ADC_Init+0x90>
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d149      	bne.n	8004d94 <HAL_ADC_Init+0x128>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	23c0      	movs	r3, #192	; 0xc0
 8004d06:	061b      	lsls	r3, r3, #24
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d00b      	beq.n	8004d24 <HAL_ADC_Init+0xb8>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	2380      	movs	r3, #128	; 0x80
 8004d12:	05db      	lsls	r3, r3, #23
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d005      	beq.n	8004d24 <HAL_ADC_Init+0xb8>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	2380      	movs	r3, #128	; 0x80
 8004d1e:	061b      	lsls	r3, r3, #24
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d111      	bne.n	8004d48 <HAL_ADC_Init+0xdc>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	6812      	ldr	r2, [r2, #0]
 8004d2c:	6912      	ldr	r2, [r2, #16]
 8004d2e:	0092      	lsls	r2, r2, #2
 8004d30:	0892      	lsrs	r2, r2, #2
 8004d32:	611a      	str	r2, [r3, #16]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	6812      	ldr	r2, [r2, #0]
 8004d3c:	6911      	ldr	r1, [r2, #16]
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	6852      	ldr	r2, [r2, #4]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	611a      	str	r2, [r3, #16]
 8004d46:	e014      	b.n	8004d72 <HAL_ADC_Init+0x106>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	6812      	ldr	r2, [r2, #0]
 8004d50:	6912      	ldr	r2, [r2, #16]
 8004d52:	0092      	lsls	r2, r2, #2
 8004d54:	0892      	lsrs	r2, r2, #2
 8004d56:	611a      	str	r2, [r3, #16]
 8004d58:	4b76      	ldr	r3, [pc, #472]	; (8004f34 <HAL_ADC_Init+0x2c8>)
 8004d5a:	4a76      	ldr	r2, [pc, #472]	; (8004f34 <HAL_ADC_Init+0x2c8>)
 8004d5c:	6812      	ldr	r2, [r2, #0]
 8004d5e:	4976      	ldr	r1, [pc, #472]	; (8004f38 <HAL_ADC_Init+0x2cc>)
 8004d60:	400a      	ands	r2, r1
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	4a73      	ldr	r2, [pc, #460]	; (8004f34 <HAL_ADC_Init+0x2c8>)
 8004d66:	4b73      	ldr	r3, [pc, #460]	; (8004f34 <HAL_ADC_Init+0x2c8>)
 8004d68:	6819      	ldr	r1, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	430b      	orrs	r3, r1
 8004d70:	6013      	str	r3, [r2, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	6812      	ldr	r2, [r2, #0]
 8004d7a:	68d2      	ldr	r2, [r2, #12]
 8004d7c:	2118      	movs	r1, #24
 8004d7e:	438a      	bics	r2, r1
 8004d80:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	6812      	ldr	r2, [r2, #0]
 8004d8a:	68d1      	ldr	r1, [r2, #12]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	6892      	ldr	r2, [r2, #8]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8004d94:	4b67      	ldr	r3, [pc, #412]	; (8004f34 <HAL_ADC_Init+0x2c8>)
 8004d96:	4a67      	ldr	r2, [pc, #412]	; (8004f34 <HAL_ADC_Init+0x2c8>)
 8004d98:	6812      	ldr	r2, [r2, #0]
 8004d9a:	4968      	ldr	r1, [pc, #416]	; (8004f3c <HAL_ADC_Init+0x2d0>)
 8004d9c:	400a      	ands	r2, r1
 8004d9e:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8004da0:	4a64      	ldr	r2, [pc, #400]	; (8004f34 <HAL_ADC_Init+0x2c8>)
 8004da2:	4b64      	ldr	r3, [pc, #400]	; (8004f34 <HAL_ADC_Init+0x2c8>)
 8004da4:	6819      	ldr	r1, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004daa:	065b      	lsls	r3, r3, #25
 8004dac:	430b      	orrs	r3, r1
 8004dae:	6013      	str	r3, [r2, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689a      	ldr	r2, [r3, #8]
 8004db6:	2380      	movs	r3, #128	; 0x80
 8004db8:	055b      	lsls	r3, r3, #21
 8004dba:	4013      	ands	r3, r2
 8004dbc:	d108      	bne.n	8004dd0 <HAL_ADC_Init+0x164>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	6812      	ldr	r2, [r2, #0]
 8004dc6:	6892      	ldr	r2, [r2, #8]
 8004dc8:	2180      	movs	r1, #128	; 0x80
 8004dca:	0549      	lsls	r1, r1, #21
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	6812      	ldr	r2, [r2, #0]
 8004dd8:	68d2      	ldr	r2, [r2, #12]
 8004dda:	4959      	ldr	r1, [pc, #356]	; (8004f40 <HAL_ADC_Init+0x2d4>)
 8004ddc:	400a      	ands	r2, r1
 8004dde:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6812      	ldr	r2, [r2, #0]
 8004de8:	68d1      	ldr	r1, [r2, #12]
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	68d0      	ldr	r0, [r2, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6912      	ldr	r2, [r2, #16]
 8004df2:	2a02      	cmp	r2, #2
 8004df4:	d101      	bne.n	8004dfa <HAL_ADC_Init+0x18e>
 8004df6:	2204      	movs	r2, #4
 8004df8:	e000      	b.n	8004dfc <HAL_ADC_Init+0x190>
 8004dfa:	2200      	movs	r2, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004dfc:	4310      	orrs	r0, r2
                            ADC_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6a12      	ldr	r2, [r2, #32]
 8004e02:	0352      	lsls	r2, r2, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004e04:	4310      	orrs	r0, r2
                            ADC_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e0a:	0052      	lsls	r2, r2, #1
                            ADC_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8004e0c:	4310      	orrs	r0, r2
                            hadc->Init.Overrun                               |
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	6b52      	ldr	r2, [r2, #52]	; 0x34
                            ADC_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 8004e12:	4310      	orrs	r0, r2
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	6992      	ldr	r2, [r2, #24]
 8004e18:	0392      	lsls	r2, r2, #14
                            hadc->Init.Overrun                               |
 8004e1a:	4310      	orrs	r0, r2
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	69d2      	ldr	r2, [r2, #28]
 8004e20:	03d2      	lsls	r2, r2, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004e22:	4302      	orrs	r2, r0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004e24:	430a      	orrs	r2, r1
 8004e26:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e2c:	23c2      	movs	r3, #194	; 0xc2
 8004e2e:	33ff      	adds	r3, #255	; 0xff
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d00b      	beq.n	8004e4c <HAL_ADC_Init+0x1e0>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	6812      	ldr	r2, [r2, #0]
 8004e3c:	68d1      	ldr	r1, [r2, #12]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	6a90      	ldr	r0, [r2, #40]	; 0x28
                             hadc->Init.ExternalTrigConvEdge;
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004e46:	4302      	orrs	r2, r0
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d119      	bne.n	8004e88 <HAL_ADC_Init+0x21c>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d109      	bne.n	8004e70 <HAL_ADC_Init+0x204>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	6812      	ldr	r2, [r2, #0]
 8004e64:	68d2      	ldr	r2, [r2, #12]
 8004e66:	2180      	movs	r1, #128	; 0x80
 8004e68:	0249      	lsls	r1, r1, #9
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	60da      	str	r2, [r3, #12]
 8004e6e:	e00b      	b.n	8004e88 <HAL_ADC_Init+0x21c>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e74:	2220      	movs	r2, #32
 8004e76:	431a      	orrs	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e80:	2201      	movs	r2, #1
 8004e82:	431a      	orrs	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	65da      	str	r2, [r3, #92]	; 0x5c
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d11f      	bne.n	8004ed0 <HAL_ADC_Init+0x264>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	6812      	ldr	r2, [r2, #0]
 8004e98:	6912      	ldr	r2, [r2, #16]
 8004e9a:	492a      	ldr	r1, [pc, #168]	; (8004f44 <HAL_ADC_Init+0x2d8>)
 8004e9c:	400a      	ands	r2, r1
 8004e9e:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6812      	ldr	r2, [r2, #0]
 8004ea8:	6911      	ldr	r1, [r2, #16]
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	6c50      	ldr	r0, [r2, #68]	; 0x44
                               hadc->Init.Oversample.RightBitShift             |
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6c92      	ldr	r2, [r2, #72]	; 0x48
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004eb2:	4310      	orrs	r0, r2
                               hadc->Init.Oversample.TriggeredMode );
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
                               hadc->Init.Oversample.RightBitShift             |
 8004eb8:	4302      	orrs	r2, r0
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	6812      	ldr	r2, [r2, #0]
 8004ec6:	6912      	ldr	r2, [r2, #16]
 8004ec8:	2101      	movs	r1, #1
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	611a      	str	r2, [r3, #16]
 8004ece:	e00d      	b.n	8004eec <HAL_ADC_Init+0x280>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	4013      	ands	r3, r2
 8004eda:	d007      	beq.n	8004eec <HAL_ADC_Init+0x280>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	6812      	ldr	r2, [r2, #0]
 8004ee4:	6912      	ldr	r2, [r2, #16]
 8004ee6:	2101      	movs	r1, #1
 8004ee8:	438a      	bics	r2, r1
 8004eea:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6812      	ldr	r2, [r2, #0]
 8004ef4:	6952      	ldr	r2, [r2, #20]
 8004ef6:	2107      	movs	r1, #7
 8004ef8:	438a      	bics	r2, r1
 8004efa:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	6812      	ldr	r2, [r2, #0]
 8004f04:	6951      	ldr	r1, [r2, #20]
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f18:	2203      	movs	r2, #3
 8004f1a:	4393      	bics	r3, r2
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	659a      	str	r2, [r3, #88]	; 0x58
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	0018      	movs	r0, r3
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	b002      	add	sp, #8
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	46c0      	nop			; (mov r8, r8)
 8004f30:	fffffefd 	.word	0xfffffefd
 8004f34:	40012708 	.word	0x40012708
 8004f38:	ffc3ffff 	.word	0xffc3ffff
 8004f3c:	fdffffff 	.word	0xfdffffff
 8004f40:	fffe0219 	.word	0xfffe0219
 8004f44:	fffffc03 	.word	0xfffffc03

08004f48 <HAL_ADC_MspInit>:
  * @brief  Initialize the ADC MSP.
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */ 
}
 8004f50:	46c0      	nop			; (mov r8, r8)
 8004f52:	46bd      	mov	sp, r7
 8004f54:	b002      	add	sp, #8
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	0002      	movs	r2, r0
 8004f60:	1dfb      	adds	r3, r7, #7
 8004f62:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004f64:	4b06      	ldr	r3, [pc, #24]	; (8004f80 <NVIC_EnableIRQ+0x28>)
 8004f66:	1dfa      	adds	r2, r7, #7
 8004f68:	7812      	ldrb	r2, [r2, #0]
 8004f6a:	0011      	movs	r1, r2
 8004f6c:	221f      	movs	r2, #31
 8004f6e:	400a      	ands	r2, r1
 8004f70:	2101      	movs	r1, #1
 8004f72:	4091      	lsls	r1, r2
 8004f74:	000a      	movs	r2, r1
 8004f76:	601a      	str	r2, [r3, #0]
}
 8004f78:	46c0      	nop			; (mov r8, r8)
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	b002      	add	sp, #8
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	e000e100 	.word	0xe000e100

08004f84 <NVIC_SetPendingIRQ>:
  \brief   Set Pending Interrupt
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	0002      	movs	r2, r0
 8004f8c:	1dfb      	adds	r3, r7, #7
 8004f8e:	701a      	strb	r2, [r3, #0]
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004f90:	4907      	ldr	r1, [pc, #28]	; (8004fb0 <NVIC_SetPendingIRQ+0x2c>)
 8004f92:	1dfb      	adds	r3, r7, #7
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	001a      	movs	r2, r3
 8004f98:	231f      	movs	r3, #31
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	409a      	lsls	r2, r3
 8004fa0:	2380      	movs	r3, #128	; 0x80
 8004fa2:	005b      	lsls	r3, r3, #1
 8004fa4:	50ca      	str	r2, [r1, r3]
}
 8004fa6:	46c0      	nop			; (mov r8, r8)
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	b002      	add	sp, #8
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	46c0      	nop			; (mov r8, r8)
 8004fb0:	e000e100 	.word	0xe000e100

08004fb4 <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	0002      	movs	r2, r0
 8004fbc:	1dfb      	adds	r3, r7, #7
 8004fbe:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004fc0:	4907      	ldr	r1, [pc, #28]	; (8004fe0 <NVIC_ClearPendingIRQ+0x2c>)
 8004fc2:	1dfb      	adds	r3, r7, #7
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	001a      	movs	r2, r3
 8004fc8:	231f      	movs	r3, #31
 8004fca:	4013      	ands	r3, r2
 8004fcc:	2201      	movs	r2, #1
 8004fce:	409a      	lsls	r2, r3
 8004fd0:	23c0      	movs	r3, #192	; 0xc0
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	50ca      	str	r2, [r1, r3]
}
 8004fd6:	46c0      	nop			; (mov r8, r8)
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	b002      	add	sp, #8
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	46c0      	nop			; (mov r8, r8)
 8004fe0:	e000e100 	.word	0xe000e100

08004fe4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fe4:	b5b0      	push	{r4, r5, r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	0002      	movs	r2, r0
 8004fec:	6039      	str	r1, [r7, #0]
 8004fee:	1dfb      	adds	r3, r7, #7
 8004ff0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8004ff2:	1dfb      	adds	r3, r7, #7
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	2b7f      	cmp	r3, #127	; 0x7f
 8004ff8:	d932      	bls.n	8005060 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ffa:	4c2f      	ldr	r4, [pc, #188]	; (80050b8 <NVIC_SetPriority+0xd4>)
 8004ffc:	1dfb      	adds	r3, r7, #7
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	001a      	movs	r2, r3
 8005002:	230f      	movs	r3, #15
 8005004:	4013      	ands	r3, r2
 8005006:	3b08      	subs	r3, #8
 8005008:	0899      	lsrs	r1, r3, #2
 800500a:	4a2b      	ldr	r2, [pc, #172]	; (80050b8 <NVIC_SetPriority+0xd4>)
 800500c:	1dfb      	adds	r3, r7, #7
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	0018      	movs	r0, r3
 8005012:	230f      	movs	r3, #15
 8005014:	4003      	ands	r3, r0
 8005016:	3b08      	subs	r3, #8
 8005018:	089b      	lsrs	r3, r3, #2
 800501a:	3306      	adds	r3, #6
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	18d3      	adds	r3, r2, r3
 8005020:	3304      	adds	r3, #4
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	1dfa      	adds	r2, r7, #7
 8005026:	7812      	ldrb	r2, [r2, #0]
 8005028:	0010      	movs	r0, r2
 800502a:	2203      	movs	r2, #3
 800502c:	4002      	ands	r2, r0
 800502e:	00d2      	lsls	r2, r2, #3
 8005030:	20ff      	movs	r0, #255	; 0xff
 8005032:	4090      	lsls	r0, r2
 8005034:	0002      	movs	r2, r0
 8005036:	43d2      	mvns	r2, r2
 8005038:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	019b      	lsls	r3, r3, #6
 800503e:	20ff      	movs	r0, #255	; 0xff
 8005040:	4018      	ands	r0, r3
 8005042:	1dfb      	adds	r3, r7, #7
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	001d      	movs	r5, r3
 8005048:	2303      	movs	r3, #3
 800504a:	402b      	ands	r3, r5
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	4098      	lsls	r0, r3
 8005050:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005052:	431a      	orrs	r2, r3
 8005054:	1d8b      	adds	r3, r1, #6
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	18e3      	adds	r3, r4, r3
 800505a:	3304      	adds	r3, #4
 800505c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800505e:	e027      	b.n	80050b0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005060:	4c16      	ldr	r4, [pc, #88]	; (80050bc <NVIC_SetPriority+0xd8>)
 8005062:	1dfb      	adds	r3, r7, #7
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	b25b      	sxtb	r3, r3
 8005068:	089b      	lsrs	r3, r3, #2
 800506a:	4914      	ldr	r1, [pc, #80]	; (80050bc <NVIC_SetPriority+0xd8>)
 800506c:	1dfa      	adds	r2, r7, #7
 800506e:	7812      	ldrb	r2, [r2, #0]
 8005070:	b252      	sxtb	r2, r2
 8005072:	0892      	lsrs	r2, r2, #2
 8005074:	32c0      	adds	r2, #192	; 0xc0
 8005076:	0092      	lsls	r2, r2, #2
 8005078:	5852      	ldr	r2, [r2, r1]
 800507a:	1df9      	adds	r1, r7, #7
 800507c:	7809      	ldrb	r1, [r1, #0]
 800507e:	0008      	movs	r0, r1
 8005080:	2103      	movs	r1, #3
 8005082:	4001      	ands	r1, r0
 8005084:	00c9      	lsls	r1, r1, #3
 8005086:	20ff      	movs	r0, #255	; 0xff
 8005088:	4088      	lsls	r0, r1
 800508a:	0001      	movs	r1, r0
 800508c:	43c9      	mvns	r1, r1
 800508e:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	0192      	lsls	r2, r2, #6
 8005094:	20ff      	movs	r0, #255	; 0xff
 8005096:	4010      	ands	r0, r2
 8005098:	1dfa      	adds	r2, r7, #7
 800509a:	7812      	ldrb	r2, [r2, #0]
 800509c:	0015      	movs	r5, r2
 800509e:	2203      	movs	r2, #3
 80050a0:	402a      	ands	r2, r5
 80050a2:	00d2      	lsls	r2, r2, #3
 80050a4:	4090      	lsls	r0, r2
 80050a6:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80050a8:	430a      	orrs	r2, r1
 80050aa:	33c0      	adds	r3, #192	; 0xc0
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	511a      	str	r2, [r3, r4]
}
 80050b0:	46c0      	nop			; (mov r8, r8)
 80050b2:	46bd      	mov	sp, r7
 80050b4:	b002      	add	sp, #8
 80050b6:	bdb0      	pop	{r4, r5, r7, pc}
 80050b8:	e000ed00 	.word	0xe000ed00
 80050bc:	e000e100 	.word	0xe000e100

080050c0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60b9      	str	r1, [r7, #8]
 80050c8:	607a      	str	r2, [r7, #4]
 80050ca:	230f      	movs	r3, #15
 80050cc:	18fb      	adds	r3, r7, r3
 80050ce:	1c02      	adds	r2, r0, #0
 80050d0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	230f      	movs	r3, #15
 80050d6:	18fb      	adds	r3, r7, r3
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	b25b      	sxtb	r3, r3
 80050dc:	0011      	movs	r1, r2
 80050de:	0018      	movs	r0, r3
 80050e0:	f7ff ff80 	bl	8004fe4 <NVIC_SetPriority>
}
 80050e4:	46c0      	nop			; (mov r8, r8)
 80050e6:	46bd      	mov	sp, r7
 80050e8:	b004      	add	sp, #16
 80050ea:	bd80      	pop	{r7, pc}

080050ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	0002      	movs	r2, r0
 80050f4:	1dfb      	adds	r3, r7, #7
 80050f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050f8:	1dfb      	adds	r3, r7, #7
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	b25b      	sxtb	r3, r3
 80050fe:	0018      	movs	r0, r3
 8005100:	f7ff ff2a 	bl	8004f58 <NVIC_EnableIRQ>
}
 8005104:	46c0      	nop			; (mov r8, r8)
 8005106:	46bd      	mov	sp, r7
 8005108:	b002      	add	sp, #8
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{ 
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	0002      	movs	r2, r0
 8005114:	1dfb      	adds	r3, r7, #7
 8005116:	701a      	strb	r2, [r3, #0]
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8005118:	1dfb      	adds	r3, r7, #7
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	b25b      	sxtb	r3, r3
 800511e:	0018      	movs	r0, r3
 8005120:	f7ff ff30 	bl	8004f84 <NVIC_SetPendingIRQ>
}
 8005124:	46c0      	nop			; (mov r8, r8)
 8005126:	46bd      	mov	sp, r7
 8005128:	b002      	add	sp, #8
 800512a:	bd80      	pop	{r7, pc}

0800512c <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	0002      	movs	r2, r0
 8005134:	1dfb      	adds	r3, r7, #7
 8005136:	701a      	strb	r2, [r3, #0]
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8005138:	1dfb      	adds	r3, r7, #7
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	b25b      	sxtb	r3, r3
 800513e:	0018      	movs	r0, r3
 8005140:	f7ff ff38 	bl	8004fb4 <NVIC_ClearPendingIRQ>
}
 8005144:	46c0      	nop			; (mov r8, r8)
 8005146:	46bd      	mov	sp, r7
 8005148:	b002      	add	sp, #8
 800514a:	bd80      	pop	{r7, pc}

0800514c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005156:	2300      	movs	r3, #0
 8005158:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800515a:	2300      	movs	r3, #0
 800515c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800515e:	2300      	movs	r3, #0
 8005160:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8005162:	e155      	b.n	8005410 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2101      	movs	r1, #1
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	4091      	lsls	r1, r2
 800516e:	000a      	movs	r2, r1
 8005170:	4013      	ands	r3, r2
 8005172:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d100      	bne.n	800517c <HAL_GPIO_Init+0x30>
 800517a:	e146      	b.n	800540a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	2b02      	cmp	r3, #2
 8005182:	d003      	beq.n	800518c <HAL_GPIO_Init+0x40>
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	2b12      	cmp	r3, #18
 800518a:	d123      	bne.n	80051d4 <HAL_GPIO_Init+0x88>
      {
        /* Check if the Alternate function is compliant with the GPIO in use */
        assert_param(IS_GPIO_AF_AVAILABLE(GPIOx,(GPIO_Init->Alternate)));
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	08da      	lsrs	r2, r3, #3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	3208      	adds	r2, #8
 8005194:	0092      	lsls	r2, r2, #2
 8005196:	58d3      	ldr	r3, [r2, r3]
 8005198:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	2207      	movs	r2, #7
 800519e:	4013      	ands	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	220f      	movs	r2, #15
 80051a4:	409a      	lsls	r2, r3
 80051a6:	0013      	movs	r3, r2
 80051a8:	43da      	mvns	r2, r3
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	4013      	ands	r3, r2
 80051ae:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	691a      	ldr	r2, [r3, #16]
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	2107      	movs	r1, #7
 80051b8:	400b      	ands	r3, r1
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	409a      	lsls	r2, r3
 80051be:	0013      	movs	r3, r2
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	08da      	lsrs	r2, r3, #3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	3208      	adds	r2, #8
 80051ce:	0092      	lsls	r2, r2, #2
 80051d0:	6939      	ldr	r1, [r7, #16]
 80051d2:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d00b      	beq.n	80051f4 <HAL_GPIO_Init+0xa8>
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d007      	beq.n	80051f4 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80051e8:	2b11      	cmp	r3, #17
 80051ea:	d003      	beq.n	80051f4 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	2b12      	cmp	r3, #18
 80051f2:	d130      	bne.n	8005256 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	005b      	lsls	r3, r3, #1
 80051fe:	2203      	movs	r2, #3
 8005200:	409a      	lsls	r2, r3
 8005202:	0013      	movs	r3, r2
 8005204:	43da      	mvns	r2, r3
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	4013      	ands	r3, r2
 800520a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	68da      	ldr	r2, [r3, #12]
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	409a      	lsls	r2, r3
 8005216:	0013      	movs	r3, r2
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	4313      	orrs	r3, r2
 800521c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800522a:	2201      	movs	r2, #1
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	409a      	lsls	r2, r3
 8005230:	0013      	movs	r3, r2
 8005232:	43da      	mvns	r2, r3
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	4013      	ands	r3, r2
 8005238:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	091b      	lsrs	r3, r3, #4
 8005240:	2201      	movs	r2, #1
 8005242:	401a      	ands	r2, r3
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	409a      	lsls	r2, r3
 8005248:	0013      	movs	r3, r2
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	4313      	orrs	r3, r2
 800524e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	005b      	lsls	r3, r3, #1
 8005260:	2203      	movs	r2, #3
 8005262:	409a      	lsls	r2, r3
 8005264:	0013      	movs	r3, r2
 8005266:	43da      	mvns	r2, r3
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	4013      	ands	r3, r2
 800526c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	2203      	movs	r2, #3
 8005274:	401a      	ands	r2, r3
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	409a      	lsls	r2, r3
 800527c:	0013      	movs	r3, r2
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	4313      	orrs	r3, r2
 8005282:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	2203      	movs	r2, #3
 8005296:	409a      	lsls	r2, r3
 8005298:	0013      	movs	r3, r2
 800529a:	43da      	mvns	r2, r3
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	4013      	ands	r3, r2
 80052a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	689a      	ldr	r2, [r3, #8]
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	005b      	lsls	r3, r3, #1
 80052aa:	409a      	lsls	r2, r3
 80052ac:	0013      	movs	r3, r2
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	2380      	movs	r3, #128	; 0x80
 80052c0:	055b      	lsls	r3, r3, #21
 80052c2:	4013      	ands	r3, r2
 80052c4:	d100      	bne.n	80052c8 <HAL_GPIO_Init+0x17c>
 80052c6:	e0a0      	b.n	800540a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052c8:	4b57      	ldr	r3, [pc, #348]	; (8005428 <HAL_GPIO_Init+0x2dc>)
 80052ca:	4a57      	ldr	r2, [pc, #348]	; (8005428 <HAL_GPIO_Init+0x2dc>)
 80052cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80052ce:	2101      	movs	r1, #1
 80052d0:	430a      	orrs	r2, r1
 80052d2:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 80052d4:	4a55      	ldr	r2, [pc, #340]	; (800542c <HAL_GPIO_Init+0x2e0>)
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	089b      	lsrs	r3, r3, #2
 80052da:	3302      	adds	r3, #2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	589b      	ldr	r3, [r3, r2]
 80052e0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	2203      	movs	r2, #3
 80052e6:	4013      	ands	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	220f      	movs	r2, #15
 80052ec:	409a      	lsls	r2, r3
 80052ee:	0013      	movs	r3, r2
 80052f0:	43da      	mvns	r2, r3
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	4013      	ands	r3, r2
 80052f6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	23a0      	movs	r3, #160	; 0xa0
 80052fc:	05db      	lsls	r3, r3, #23
 80052fe:	429a      	cmp	r2, r3
 8005300:	d01f      	beq.n	8005342 <HAL_GPIO_Init+0x1f6>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a4a      	ldr	r2, [pc, #296]	; (8005430 <HAL_GPIO_Init+0x2e4>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d019      	beq.n	800533e <HAL_GPIO_Init+0x1f2>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a49      	ldr	r2, [pc, #292]	; (8005434 <HAL_GPIO_Init+0x2e8>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d013      	beq.n	800533a <HAL_GPIO_Init+0x1ee>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a48      	ldr	r2, [pc, #288]	; (8005438 <HAL_GPIO_Init+0x2ec>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d00d      	beq.n	8005336 <HAL_GPIO_Init+0x1ea>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a47      	ldr	r2, [pc, #284]	; (800543c <HAL_GPIO_Init+0x2f0>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d007      	beq.n	8005332 <HAL_GPIO_Init+0x1e6>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a46      	ldr	r2, [pc, #280]	; (8005440 <HAL_GPIO_Init+0x2f4>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d101      	bne.n	800532e <HAL_GPIO_Init+0x1e2>
 800532a:	2305      	movs	r3, #5
 800532c:	e00a      	b.n	8005344 <HAL_GPIO_Init+0x1f8>
 800532e:	2306      	movs	r3, #6
 8005330:	e008      	b.n	8005344 <HAL_GPIO_Init+0x1f8>
 8005332:	2304      	movs	r3, #4
 8005334:	e006      	b.n	8005344 <HAL_GPIO_Init+0x1f8>
 8005336:	2303      	movs	r3, #3
 8005338:	e004      	b.n	8005344 <HAL_GPIO_Init+0x1f8>
 800533a:	2302      	movs	r3, #2
 800533c:	e002      	b.n	8005344 <HAL_GPIO_Init+0x1f8>
 800533e:	2301      	movs	r3, #1
 8005340:	e000      	b.n	8005344 <HAL_GPIO_Init+0x1f8>
 8005342:	2300      	movs	r3, #0
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	2103      	movs	r1, #3
 8005348:	400a      	ands	r2, r1
 800534a:	0092      	lsls	r2, r2, #2
 800534c:	4093      	lsls	r3, r2
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	4313      	orrs	r3, r2
 8005352:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005354:	4935      	ldr	r1, [pc, #212]	; (800542c <HAL_GPIO_Init+0x2e0>)
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	089b      	lsrs	r3, r3, #2
 800535a:	3302      	adds	r3, #2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005362:	4b38      	ldr	r3, [pc, #224]	; (8005444 <HAL_GPIO_Init+0x2f8>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	43da      	mvns	r2, r3
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	4013      	ands	r3, r2
 8005370:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	2380      	movs	r3, #128	; 0x80
 8005378:	025b      	lsls	r3, r3, #9
 800537a:	4013      	ands	r3, r2
 800537c:	d003      	beq.n	8005386 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4313      	orrs	r3, r2
 8005384:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005386:	4b2f      	ldr	r3, [pc, #188]	; (8005444 <HAL_GPIO_Init+0x2f8>)
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800538c:	4b2d      	ldr	r3, [pc, #180]	; (8005444 <HAL_GPIO_Init+0x2f8>)
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	43da      	mvns	r2, r3
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	4013      	ands	r3, r2
 800539a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685a      	ldr	r2, [r3, #4]
 80053a0:	2380      	movs	r3, #128	; 0x80
 80053a2:	029b      	lsls	r3, r3, #10
 80053a4:	4013      	ands	r3, r2
 80053a6:	d003      	beq.n	80053b0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80053b0:	4b24      	ldr	r3, [pc, #144]	; (8005444 <HAL_GPIO_Init+0x2f8>)
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053b6:	4b23      	ldr	r3, [pc, #140]	; (8005444 <HAL_GPIO_Init+0x2f8>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	43da      	mvns	r2, r3
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	4013      	ands	r3, r2
 80053c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	685a      	ldr	r2, [r3, #4]
 80053ca:	2380      	movs	r3, #128	; 0x80
 80053cc:	035b      	lsls	r3, r3, #13
 80053ce:	4013      	ands	r3, r2
 80053d0:	d003      	beq.n	80053da <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80053da:	4b1a      	ldr	r3, [pc, #104]	; (8005444 <HAL_GPIO_Init+0x2f8>)
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80053e0:	4b18      	ldr	r3, [pc, #96]	; (8005444 <HAL_GPIO_Init+0x2f8>)
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	43da      	mvns	r2, r3
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	4013      	ands	r3, r2
 80053ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	2380      	movs	r3, #128	; 0x80
 80053f6:	039b      	lsls	r3, r3, #14
 80053f8:	4013      	ands	r3, r2
 80053fa:	d003      	beq.n	8005404 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	4313      	orrs	r3, r2
 8005402:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005404:	4b0f      	ldr	r3, [pc, #60]	; (8005444 <HAL_GPIO_Init+0x2f8>)
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	3301      	adds	r3, #1
 800540e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	40da      	lsrs	r2, r3
 8005418:	1e13      	subs	r3, r2, #0
 800541a:	d000      	beq.n	800541e <HAL_GPIO_Init+0x2d2>
 800541c:	e6a2      	b.n	8005164 <HAL_GPIO_Init+0x18>
  }
}
 800541e:	46c0      	nop			; (mov r8, r8)
 8005420:	46bd      	mov	sp, r7
 8005422:	b006      	add	sp, #24
 8005424:	bd80      	pop	{r7, pc}
 8005426:	46c0      	nop			; (mov r8, r8)
 8005428:	40021000 	.word	0x40021000
 800542c:	40010000 	.word	0x40010000
 8005430:	50000400 	.word	0x50000400
 8005434:	50000800 	.word	0x50000800
 8005438:	50000c00 	.word	0x50000c00
 800543c:	50001000 	.word	0x50001000
 8005440:	50001c00 	.word	0x50001c00
 8005444:	40010400 	.word	0x40010400

08005448 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	0008      	movs	r0, r1
 8005452:	0011      	movs	r1, r2
 8005454:	1cbb      	adds	r3, r7, #2
 8005456:	1c02      	adds	r2, r0, #0
 8005458:	801a      	strh	r2, [r3, #0]
 800545a:	1c7b      	adds	r3, r7, #1
 800545c:	1c0a      	adds	r2, r1, #0
 800545e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8005460:	1c7b      	adds	r3, r7, #1
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d004      	beq.n	8005472 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005468:	1cbb      	adds	r3, r7, #2
 800546a:	881a      	ldrh	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8005470:	e003      	b.n	800547a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8005472:	1cbb      	adds	r3, r7, #2
 8005474:	881a      	ldrh	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	629a      	str	r2, [r3, #40]	; 0x28
}
 800547a:	46c0      	nop			; (mov r8, r8)
 800547c:	46bd      	mov	sp, r7
 800547e:	b002      	add	sp, #8
 8005480:	bd80      	pop	{r7, pc}
	...

08005484 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	0002      	movs	r2, r0
 800548c:	1dbb      	adds	r3, r7, #6
 800548e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8005490:	4b09      	ldr	r3, [pc, #36]	; (80054b8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	1dba      	adds	r2, r7, #6
 8005496:	8812      	ldrh	r2, [r2, #0]
 8005498:	4013      	ands	r3, r2
 800549a:	d008      	beq.n	80054ae <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800549c:	4b06      	ldr	r3, [pc, #24]	; (80054b8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800549e:	1dba      	adds	r2, r7, #6
 80054a0:	8812      	ldrh	r2, [r2, #0]
 80054a2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80054a4:	1dbb      	adds	r3, r7, #6
 80054a6:	881b      	ldrh	r3, [r3, #0]
 80054a8:	0018      	movs	r0, r3
 80054aa:	f004 f9bb 	bl	8009824 <HAL_GPIO_EXTI_Callback>
  }
}
 80054ae:	46c0      	nop			; (mov r8, r8)
 80054b0:	46bd      	mov	sp, r7
 80054b2:	b002      	add	sp, #8
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	46c0      	nop			; (mov r8, r8)
 80054b8:	40010400 	.word	0x40010400

080054bc <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	af00      	add	r7, sp, #0
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 80054c0:	4b04      	ldr	r3, [pc, #16]	; (80054d4 <HAL_PWR_DisablePVD+0x18>)
 80054c2:	4a04      	ldr	r2, [pc, #16]	; (80054d4 <HAL_PWR_DisablePVD+0x18>)
 80054c4:	6812      	ldr	r2, [r2, #0]
 80054c6:	2110      	movs	r1, #16
 80054c8:	438a      	bics	r2, r1
 80054ca:	601a      	str	r2, [r3, #0]
}
 80054cc:	46c0      	nop			; (mov r8, r8)
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	46c0      	nop			; (mov r8, r8)
 80054d4:	40007000 	.word	0x40007000

080054d8 <HAL_PWREx_EnableFastWakeUp>:
  *        Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when 
  *        exiting from low power mode.
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	af00      	add	r7, sp, #0
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 80054dc:	4b04      	ldr	r3, [pc, #16]	; (80054f0 <HAL_PWREx_EnableFastWakeUp+0x18>)
 80054de:	4a04      	ldr	r2, [pc, #16]	; (80054f0 <HAL_PWREx_EnableFastWakeUp+0x18>)
 80054e0:	6812      	ldr	r2, [r2, #0]
 80054e2:	2180      	movs	r1, #128	; 0x80
 80054e4:	00c9      	lsls	r1, r1, #3
 80054e6:	430a      	orrs	r2, r1
 80054e8:	601a      	str	r2, [r3, #0]
}
 80054ea:	46c0      	nop			; (mov r8, r8)
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	40007000 	.word	0x40007000

080054f4 <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	af00      	add	r7, sp, #0
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 80054f8:	4b04      	ldr	r3, [pc, #16]	; (800550c <HAL_PWREx_EnableUltraLowPower+0x18>)
 80054fa:	4a04      	ldr	r2, [pc, #16]	; (800550c <HAL_PWREx_EnableUltraLowPower+0x18>)
 80054fc:	6812      	ldr	r2, [r2, #0]
 80054fe:	2180      	movs	r1, #128	; 0x80
 8005500:	0089      	lsls	r1, r1, #2
 8005502:	430a      	orrs	r2, r1
 8005504:	601a      	str	r2, [r3, #0]
}
 8005506:	46c0      	nop			; (mov r8, r8)
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	40007000 	.word	0x40007000

08005510 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2201      	movs	r2, #1
 8005522:	4013      	ands	r3, r2
 8005524:	d100      	bne.n	8005528 <HAL_RCC_OscConfig+0x18>
 8005526:	e087      	b.n	8005638 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005528:	4bc0      	ldr	r3, [pc, #768]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	220c      	movs	r2, #12
 800552e:	4013      	ands	r3, r2
 8005530:	2b08      	cmp	r3, #8
 8005532:	d00e      	beq.n	8005552 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005534:	4bbd      	ldr	r3, [pc, #756]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	220c      	movs	r2, #12
 800553a:	4013      	ands	r3, r2
 800553c:	2b0c      	cmp	r3, #12
 800553e:	d116      	bne.n	800556e <HAL_RCC_OscConfig+0x5e>
 8005540:	4bba      	ldr	r3, [pc, #744]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 8005542:	68da      	ldr	r2, [r3, #12]
 8005544:	2380      	movs	r3, #128	; 0x80
 8005546:	025b      	lsls	r3, r3, #9
 8005548:	401a      	ands	r2, r3
 800554a:	2380      	movs	r3, #128	; 0x80
 800554c:	025b      	lsls	r3, r3, #9
 800554e:	429a      	cmp	r2, r3
 8005550:	d10d      	bne.n	800556e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005552:	4bb6      	ldr	r3, [pc, #728]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	2380      	movs	r3, #128	; 0x80
 8005558:	029b      	lsls	r3, r3, #10
 800555a:	4013      	ands	r3, r2
 800555c:	d100      	bne.n	8005560 <HAL_RCC_OscConfig+0x50>
 800555e:	e06a      	b.n	8005636 <HAL_RCC_OscConfig+0x126>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d166      	bne.n	8005636 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	f000 fb69 	bl	8005c40 <HAL_RCC_OscConfig+0x730>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	2380      	movs	r3, #128	; 0x80
 8005574:	025b      	lsls	r3, r3, #9
 8005576:	429a      	cmp	r2, r3
 8005578:	d107      	bne.n	800558a <HAL_RCC_OscConfig+0x7a>
 800557a:	4bac      	ldr	r3, [pc, #688]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 800557c:	4aab      	ldr	r2, [pc, #684]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 800557e:	6812      	ldr	r2, [r2, #0]
 8005580:	2180      	movs	r1, #128	; 0x80
 8005582:	0249      	lsls	r1, r1, #9
 8005584:	430a      	orrs	r2, r1
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	e027      	b.n	80055da <HAL_RCC_OscConfig+0xca>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	23a0      	movs	r3, #160	; 0xa0
 8005590:	02db      	lsls	r3, r3, #11
 8005592:	429a      	cmp	r2, r3
 8005594:	d10e      	bne.n	80055b4 <HAL_RCC_OscConfig+0xa4>
 8005596:	4ba5      	ldr	r3, [pc, #660]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 8005598:	4aa4      	ldr	r2, [pc, #656]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 800559a:	6812      	ldr	r2, [r2, #0]
 800559c:	2180      	movs	r1, #128	; 0x80
 800559e:	02c9      	lsls	r1, r1, #11
 80055a0:	430a      	orrs	r2, r1
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	4ba1      	ldr	r3, [pc, #644]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 80055a6:	4aa1      	ldr	r2, [pc, #644]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 80055a8:	6812      	ldr	r2, [r2, #0]
 80055aa:	2180      	movs	r1, #128	; 0x80
 80055ac:	0249      	lsls	r1, r1, #9
 80055ae:	430a      	orrs	r2, r1
 80055b0:	601a      	str	r2, [r3, #0]
 80055b2:	e012      	b.n	80055da <HAL_RCC_OscConfig+0xca>
 80055b4:	4b9d      	ldr	r3, [pc, #628]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 80055b6:	4a9d      	ldr	r2, [pc, #628]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 80055b8:	6812      	ldr	r2, [r2, #0]
 80055ba:	499d      	ldr	r1, [pc, #628]	; (8005830 <HAL_RCC_OscConfig+0x320>)
 80055bc:	400a      	ands	r2, r1
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	4b9a      	ldr	r3, [pc, #616]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	2380      	movs	r3, #128	; 0x80
 80055c6:	025b      	lsls	r3, r3, #9
 80055c8:	4013      	ands	r3, r2
 80055ca:	60fb      	str	r3, [r7, #12]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	4b97      	ldr	r3, [pc, #604]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 80055d0:	4a96      	ldr	r2, [pc, #600]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 80055d2:	6812      	ldr	r2, [r2, #0]
 80055d4:	4997      	ldr	r1, [pc, #604]	; (8005834 <HAL_RCC_OscConfig+0x324>)
 80055d6:	400a      	ands	r2, r1
 80055d8:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d014      	beq.n	800560c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e2:	f7ff fb39 	bl	8004c58 <HAL_GetTick>
 80055e6:	0003      	movs	r3, r0
 80055e8:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ea:	e008      	b.n	80055fe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055ec:	f7ff fb34 	bl	8004c58 <HAL_GetTick>
 80055f0:	0002      	movs	r2, r0
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b64      	cmp	r3, #100	; 0x64
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e320      	b.n	8005c40 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055fe:	4b8b      	ldr	r3, [pc, #556]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	2380      	movs	r3, #128	; 0x80
 8005604:	029b      	lsls	r3, r3, #10
 8005606:	4013      	ands	r3, r2
 8005608:	d0f0      	beq.n	80055ec <HAL_RCC_OscConfig+0xdc>
 800560a:	e015      	b.n	8005638 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800560c:	f7ff fb24 	bl	8004c58 <HAL_GetTick>
 8005610:	0003      	movs	r3, r0
 8005612:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005614:	e008      	b.n	8005628 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005616:	f7ff fb1f 	bl	8004c58 <HAL_GetTick>
 800561a:	0002      	movs	r2, r0
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	2b64      	cmp	r3, #100	; 0x64
 8005622:	d901      	bls.n	8005628 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e30b      	b.n	8005c40 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005628:	4b80      	ldr	r3, [pc, #512]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	2380      	movs	r3, #128	; 0x80
 800562e:	029b      	lsls	r3, r3, #10
 8005630:	4013      	ands	r3, r2
 8005632:	d1f0      	bne.n	8005616 <HAL_RCC_OscConfig+0x106>
 8005634:	e000      	b.n	8005638 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005636:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2202      	movs	r2, #2
 800563e:	4013      	ands	r3, r2
 8005640:	d100      	bne.n	8005644 <HAL_RCC_OscConfig+0x134>
 8005642:	e06c      	b.n	800571e <HAL_RCC_OscConfig+0x20e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005644:	4b79      	ldr	r3, [pc, #484]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	220c      	movs	r2, #12
 800564a:	4013      	ands	r3, r2
 800564c:	2b04      	cmp	r3, #4
 800564e:	d00b      	beq.n	8005668 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005650:	4b76      	ldr	r3, [pc, #472]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	220c      	movs	r2, #12
 8005656:	4013      	ands	r3, r2
 8005658:	2b0c      	cmp	r3, #12
 800565a:	d11b      	bne.n	8005694 <HAL_RCC_OscConfig+0x184>
 800565c:	4b73      	ldr	r3, [pc, #460]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 800565e:	68da      	ldr	r2, [r3, #12]
 8005660:	2380      	movs	r3, #128	; 0x80
 8005662:	025b      	lsls	r3, r3, #9
 8005664:	4013      	ands	r3, r2
 8005666:	d115      	bne.n	8005694 <HAL_RCC_OscConfig+0x184>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005668:	4b70      	ldr	r3, [pc, #448]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2204      	movs	r2, #4
 800566e:	4013      	ands	r3, r2
 8005670:	d005      	beq.n	800567e <HAL_RCC_OscConfig+0x16e>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d001      	beq.n	800567e <HAL_RCC_OscConfig+0x16e>
      {
        return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e2e0      	b.n	8005c40 <HAL_RCC_OscConfig+0x730>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800567e:	4a6b      	ldr	r2, [pc, #428]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 8005680:	4b6a      	ldr	r3, [pc, #424]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	496c      	ldr	r1, [pc, #432]	; (8005838 <HAL_RCC_OscConfig+0x328>)
 8005686:	4019      	ands	r1, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	021b      	lsls	r3, r3, #8
 800568e:	430b      	orrs	r3, r1
 8005690:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005692:	e044      	b.n	800571e <HAL_RCC_OscConfig+0x20e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d027      	beq.n	80056ec <HAL_RCC_OscConfig+0x1dc>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800569c:	4a63      	ldr	r2, [pc, #396]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 800569e:	4b63      	ldr	r3, [pc, #396]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2109      	movs	r1, #9
 80056a4:	438b      	bics	r3, r1
 80056a6:	0019      	movs	r1, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	430b      	orrs	r3, r1
 80056ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056b0:	f7ff fad2 	bl	8004c58 <HAL_GetTick>
 80056b4:	0003      	movs	r3, r0
 80056b6:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056b8:	e008      	b.n	80056cc <HAL_RCC_OscConfig+0x1bc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056ba:	f7ff facd 	bl	8004c58 <HAL_GetTick>
 80056be:	0002      	movs	r2, r0
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d901      	bls.n	80056cc <HAL_RCC_OscConfig+0x1bc>
          {
            return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e2b9      	b.n	8005c40 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056cc:	4b57      	ldr	r3, [pc, #348]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2204      	movs	r2, #4
 80056d2:	4013      	ands	r3, r2
 80056d4:	d0f1      	beq.n	80056ba <HAL_RCC_OscConfig+0x1aa>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056d6:	4a55      	ldr	r2, [pc, #340]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 80056d8:	4b54      	ldr	r3, [pc, #336]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	4956      	ldr	r1, [pc, #344]	; (8005838 <HAL_RCC_OscConfig+0x328>)
 80056de:	4019      	ands	r1, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	021b      	lsls	r3, r3, #8
 80056e6:	430b      	orrs	r3, r1
 80056e8:	6053      	str	r3, [r2, #4]
 80056ea:	e018      	b.n	800571e <HAL_RCC_OscConfig+0x20e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056ec:	4b4f      	ldr	r3, [pc, #316]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 80056ee:	4a4f      	ldr	r2, [pc, #316]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 80056f0:	6812      	ldr	r2, [r2, #0]
 80056f2:	2101      	movs	r1, #1
 80056f4:	438a      	bics	r2, r1
 80056f6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f8:	f7ff faae 	bl	8004c58 <HAL_GetTick>
 80056fc:	0003      	movs	r3, r0
 80056fe:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005700:	e008      	b.n	8005714 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005702:	f7ff faa9 	bl	8004c58 <HAL_GetTick>
 8005706:	0002      	movs	r2, r0
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	2b02      	cmp	r3, #2
 800570e:	d901      	bls.n	8005714 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e295      	b.n	8005c40 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005714:	4b45      	ldr	r3, [pc, #276]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2204      	movs	r2, #4
 800571a:	4013      	ands	r3, r2
 800571c:	d1f1      	bne.n	8005702 <HAL_RCC_OscConfig+0x1f2>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2210      	movs	r2, #16
 8005724:	4013      	ands	r3, r2
 8005726:	d100      	bne.n	800572a <HAL_RCC_OscConfig+0x21a>
 8005728:	e0c2      	b.n	80058b0 <HAL_RCC_OscConfig+0x3a0>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 800572a:	4b40      	ldr	r3, [pc, #256]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	220c      	movs	r2, #12
 8005730:	4013      	ands	r3, r2
 8005732:	d162      	bne.n	80057fa <HAL_RCC_OscConfig+0x2ea>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005734:	4b3d      	ldr	r3, [pc, #244]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	2380      	movs	r3, #128	; 0x80
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4013      	ands	r3, r2
 800573e:	d005      	beq.n	800574c <HAL_RCC_OscConfig+0x23c>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	69db      	ldr	r3, [r3, #28]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d101      	bne.n	800574c <HAL_RCC_OscConfig+0x23c>
      {
        return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e279      	b.n	8005c40 <HAL_RCC_OscConfig+0x730>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005750:	4b36      	ldr	r3, [pc, #216]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 8005752:	6859      	ldr	r1, [r3, #4]
 8005754:	23e0      	movs	r3, #224	; 0xe0
 8005756:	021b      	lsls	r3, r3, #8
 8005758:	400b      	ands	r3, r1
 800575a:	429a      	cmp	r2, r3
 800575c:	d91c      	bls.n	8005798 <HAL_RCC_OscConfig+0x288>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005762:	0018      	movs	r0, r3
 8005764:	f000 fc44 	bl	8005ff0 <RCC_SetFlashLatencyFromMSIRange>
 8005768:	1e03      	subs	r3, r0, #0
 800576a:	d001      	beq.n	8005770 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e267      	b.n	8005c40 <HAL_RCC_OscConfig+0x730>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005770:	4a2e      	ldr	r2, [pc, #184]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 8005772:	4b2e      	ldr	r3, [pc, #184]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	4931      	ldr	r1, [pc, #196]	; (800583c <HAL_RCC_OscConfig+0x32c>)
 8005778:	4019      	ands	r1, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	430b      	orrs	r3, r1
 8005780:	6053      	str	r3, [r2, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005782:	4a2a      	ldr	r2, [pc, #168]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 8005784:	4b29      	ldr	r3, [pc, #164]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	021b      	lsls	r3, r3, #8
 800578a:	0a19      	lsrs	r1, r3, #8
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	061b      	lsls	r3, r3, #24
 8005792:	430b      	orrs	r3, r1
 8005794:	6053      	str	r3, [r2, #4]
 8005796:	e01b      	b.n	80057d0 <HAL_RCC_OscConfig+0x2c0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005798:	4a24      	ldr	r2, [pc, #144]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 800579a:	4b24      	ldr	r3, [pc, #144]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	4927      	ldr	r1, [pc, #156]	; (800583c <HAL_RCC_OscConfig+0x32c>)
 80057a0:	4019      	ands	r1, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	430b      	orrs	r3, r1
 80057a8:	6053      	str	r3, [r2, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057aa:	4a20      	ldr	r2, [pc, #128]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 80057ac:	4b1f      	ldr	r3, [pc, #124]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	021b      	lsls	r3, r3, #8
 80057b2:	0a19      	lsrs	r1, r3, #8
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	061b      	lsls	r3, r3, #24
 80057ba:	430b      	orrs	r3, r1
 80057bc:	6053      	str	r3, [r2, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c2:	0018      	movs	r0, r3
 80057c4:	f000 fc14 	bl	8005ff0 <RCC_SetFlashLatencyFromMSIRange>
 80057c8:	1e03      	subs	r3, r0, #0
 80057ca:	d001      	beq.n	80057d0 <HAL_RCC_OscConfig+0x2c0>
          {
            return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e237      	b.n	8005c40 <HAL_RCC_OscConfig+0x730>
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	0b5b      	lsrs	r3, r3, #13
 80057d6:	3301      	adds	r3, #1
 80057d8:	2280      	movs	r2, #128	; 0x80
 80057da:	0212      	lsls	r2, r2, #8
 80057dc:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80057de:	4b13      	ldr	r3, [pc, #76]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	091b      	lsrs	r3, r3, #4
 80057e4:	210f      	movs	r1, #15
 80057e6:	400b      	ands	r3, r1
 80057e8:	4915      	ldr	r1, [pc, #84]	; (8005840 <HAL_RCC_OscConfig+0x330>)
 80057ea:	5ccb      	ldrb	r3, [r1, r3]
 80057ec:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80057ee:	4b15      	ldr	r3, [pc, #84]	; (8005844 <HAL_RCC_OscConfig+0x334>)
 80057f0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 80057f2:	2003      	movs	r0, #3
 80057f4:	f003 ffa6 	bl	8009744 <HAL_InitTick>
 80057f8:	e05a      	b.n	80058b0 <HAL_RCC_OscConfig+0x3a0>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d03c      	beq.n	800587c <HAL_RCC_OscConfig+0x36c>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005802:	4b0a      	ldr	r3, [pc, #40]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 8005804:	4a09      	ldr	r2, [pc, #36]	; (800582c <HAL_RCC_OscConfig+0x31c>)
 8005806:	6812      	ldr	r2, [r2, #0]
 8005808:	2180      	movs	r1, #128	; 0x80
 800580a:	0049      	lsls	r1, r1, #1
 800580c:	430a      	orrs	r2, r1
 800580e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005810:	f7ff fa22 	bl	8004c58 <HAL_GetTick>
 8005814:	0003      	movs	r3, r0
 8005816:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8005818:	e016      	b.n	8005848 <HAL_RCC_OscConfig+0x338>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800581a:	f7ff fa1d 	bl	8004c58 <HAL_GetTick>
 800581e:	0002      	movs	r2, r0
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d90f      	bls.n	8005848 <HAL_RCC_OscConfig+0x338>
          {
            return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e209      	b.n	8005c40 <HAL_RCC_OscConfig+0x730>
 800582c:	40021000 	.word	0x40021000
 8005830:	fffeffff 	.word	0xfffeffff
 8005834:	fffbffff 	.word	0xfffbffff
 8005838:	ffffe0ff 	.word	0xffffe0ff
 800583c:	ffff1fff 	.word	0xffff1fff
 8005840:	0800ad04 	.word	0x0800ad04
 8005844:	2000002c 	.word	0x2000002c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8005848:	4bc7      	ldr	r3, [pc, #796]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	2380      	movs	r3, #128	; 0x80
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4013      	ands	r3, r2
 8005852:	d0e2      	beq.n	800581a <HAL_RCC_OscConfig+0x30a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005854:	4ac4      	ldr	r2, [pc, #784]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 8005856:	4bc4      	ldr	r3, [pc, #784]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	49c4      	ldr	r1, [pc, #784]	; (8005b6c <HAL_RCC_OscConfig+0x65c>)
 800585c:	4019      	ands	r1, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005862:	430b      	orrs	r3, r1
 8005864:	6053      	str	r3, [r2, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005866:	4ac0      	ldr	r2, [pc, #768]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 8005868:	4bbf      	ldr	r3, [pc, #764]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	021b      	lsls	r3, r3, #8
 800586e:	0a19      	lsrs	r1, r3, #8
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	061b      	lsls	r3, r3, #24
 8005876:	430b      	orrs	r3, r1
 8005878:	6053      	str	r3, [r2, #4]
 800587a:	e019      	b.n	80058b0 <HAL_RCC_OscConfig+0x3a0>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800587c:	4bba      	ldr	r3, [pc, #744]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 800587e:	4aba      	ldr	r2, [pc, #744]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 8005880:	6812      	ldr	r2, [r2, #0]
 8005882:	49bb      	ldr	r1, [pc, #748]	; (8005b70 <HAL_RCC_OscConfig+0x660>)
 8005884:	400a      	ands	r2, r1
 8005886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005888:	f7ff f9e6 	bl	8004c58 <HAL_GetTick>
 800588c:	0003      	movs	r3, r0
 800588e:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8005890:	e008      	b.n	80058a4 <HAL_RCC_OscConfig+0x394>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005892:	f7ff f9e1 	bl	8004c58 <HAL_GetTick>
 8005896:	0002      	movs	r2, r0
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	2b02      	cmp	r3, #2
 800589e:	d901      	bls.n	80058a4 <HAL_RCC_OscConfig+0x394>
          {
            return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e1cd      	b.n	8005c40 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 80058a4:	4bb0      	ldr	r3, [pc, #704]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	2380      	movs	r3, #128	; 0x80
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4013      	ands	r3, r2
 80058ae:	d1f0      	bne.n	8005892 <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }  
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2208      	movs	r2, #8
 80058b6:	4013      	ands	r3, r2
 80058b8:	d036      	beq.n	8005928 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d019      	beq.n	80058f6 <HAL_RCC_OscConfig+0x3e6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058c2:	4ba9      	ldr	r3, [pc, #676]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 80058c4:	4aa8      	ldr	r2, [pc, #672]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 80058c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80058c8:	2101      	movs	r1, #1
 80058ca:	430a      	orrs	r2, r1
 80058cc:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058ce:	f7ff f9c3 	bl	8004c58 <HAL_GetTick>
 80058d2:	0003      	movs	r3, r0
 80058d4:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058d6:	e008      	b.n	80058ea <HAL_RCC_OscConfig+0x3da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058d8:	f7ff f9be 	bl	8004c58 <HAL_GetTick>
 80058dc:	0002      	movs	r2, r0
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d901      	bls.n	80058ea <HAL_RCC_OscConfig+0x3da>
        {
          return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e1aa      	b.n	8005c40 <HAL_RCC_OscConfig+0x730>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058ea:	4b9f      	ldr	r3, [pc, #636]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 80058ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ee:	2202      	movs	r2, #2
 80058f0:	4013      	ands	r3, r2
 80058f2:	d0f1      	beq.n	80058d8 <HAL_RCC_OscConfig+0x3c8>
 80058f4:	e018      	b.n	8005928 <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058f6:	4b9c      	ldr	r3, [pc, #624]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 80058f8:	4a9b      	ldr	r2, [pc, #620]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 80058fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80058fc:	2101      	movs	r1, #1
 80058fe:	438a      	bics	r2, r1
 8005900:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005902:	f7ff f9a9 	bl	8004c58 <HAL_GetTick>
 8005906:	0003      	movs	r3, r0
 8005908:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800590a:	e008      	b.n	800591e <HAL_RCC_OscConfig+0x40e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800590c:	f7ff f9a4 	bl	8004c58 <HAL_GetTick>
 8005910:	0002      	movs	r2, r0
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	2b02      	cmp	r3, #2
 8005918:	d901      	bls.n	800591e <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e190      	b.n	8005c40 <HAL_RCC_OscConfig+0x730>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800591e:	4b92      	ldr	r3, [pc, #584]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 8005920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005922:	2202      	movs	r2, #2
 8005924:	4013      	ands	r3, r2
 8005926:	d1f1      	bne.n	800590c <HAL_RCC_OscConfig+0x3fc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2204      	movs	r2, #4
 800592e:	4013      	ands	r3, r2
 8005930:	d100      	bne.n	8005934 <HAL_RCC_OscConfig+0x424>
 8005932:	e0af      	b.n	8005a94 <HAL_RCC_OscConfig+0x584>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005934:	2317      	movs	r3, #23
 8005936:	18fb      	adds	r3, r7, r3
 8005938:	2200      	movs	r2, #0
 800593a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800593c:	4b8a      	ldr	r3, [pc, #552]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 800593e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005940:	2380      	movs	r3, #128	; 0x80
 8005942:	055b      	lsls	r3, r3, #21
 8005944:	4013      	ands	r3, r2
 8005946:	d10a      	bne.n	800595e <HAL_RCC_OscConfig+0x44e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005948:	4b87      	ldr	r3, [pc, #540]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 800594a:	4a87      	ldr	r2, [pc, #540]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 800594c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800594e:	2180      	movs	r1, #128	; 0x80
 8005950:	0549      	lsls	r1, r1, #21
 8005952:	430a      	orrs	r2, r1
 8005954:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005956:	2317      	movs	r3, #23
 8005958:	18fb      	adds	r3, r7, r3
 800595a:	2201      	movs	r2, #1
 800595c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800595e:	4b85      	ldr	r3, [pc, #532]	; (8005b74 <HAL_RCC_OscConfig+0x664>)
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	2380      	movs	r3, #128	; 0x80
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	4013      	ands	r3, r2
 8005968:	d11a      	bne.n	80059a0 <HAL_RCC_OscConfig+0x490>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800596a:	4b82      	ldr	r3, [pc, #520]	; (8005b74 <HAL_RCC_OscConfig+0x664>)
 800596c:	4a81      	ldr	r2, [pc, #516]	; (8005b74 <HAL_RCC_OscConfig+0x664>)
 800596e:	6812      	ldr	r2, [r2, #0]
 8005970:	2180      	movs	r1, #128	; 0x80
 8005972:	0049      	lsls	r1, r1, #1
 8005974:	430a      	orrs	r2, r1
 8005976:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005978:	f7ff f96e 	bl	8004c58 <HAL_GetTick>
 800597c:	0003      	movs	r3, r0
 800597e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005980:	e008      	b.n	8005994 <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005982:	f7ff f969 	bl	8004c58 <HAL_GetTick>
 8005986:	0002      	movs	r2, r0
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	2b64      	cmp	r3, #100	; 0x64
 800598e:	d901      	bls.n	8005994 <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e155      	b.n	8005c40 <HAL_RCC_OscConfig+0x730>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005994:	4b77      	ldr	r3, [pc, #476]	; (8005b74 <HAL_RCC_OscConfig+0x664>)
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	2380      	movs	r3, #128	; 0x80
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	4013      	ands	r3, r2
 800599e:	d0f0      	beq.n	8005982 <HAL_RCC_OscConfig+0x472>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	689a      	ldr	r2, [r3, #8]
 80059a4:	2380      	movs	r3, #128	; 0x80
 80059a6:	005b      	lsls	r3, r3, #1
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d107      	bne.n	80059bc <HAL_RCC_OscConfig+0x4ac>
 80059ac:	4b6e      	ldr	r3, [pc, #440]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 80059ae:	4a6e      	ldr	r2, [pc, #440]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 80059b0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80059b2:	2180      	movs	r1, #128	; 0x80
 80059b4:	0049      	lsls	r1, r1, #1
 80059b6:	430a      	orrs	r2, r1
 80059b8:	651a      	str	r2, [r3, #80]	; 0x50
 80059ba:	e031      	b.n	8005a20 <HAL_RCC_OscConfig+0x510>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10c      	bne.n	80059de <HAL_RCC_OscConfig+0x4ce>
 80059c4:	4b68      	ldr	r3, [pc, #416]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 80059c6:	4a68      	ldr	r2, [pc, #416]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 80059c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80059ca:	4969      	ldr	r1, [pc, #420]	; (8005b70 <HAL_RCC_OscConfig+0x660>)
 80059cc:	400a      	ands	r2, r1
 80059ce:	651a      	str	r2, [r3, #80]	; 0x50
 80059d0:	4b65      	ldr	r3, [pc, #404]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 80059d2:	4a65      	ldr	r2, [pc, #404]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 80059d4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80059d6:	4968      	ldr	r1, [pc, #416]	; (8005b78 <HAL_RCC_OscConfig+0x668>)
 80059d8:	400a      	ands	r2, r1
 80059da:	651a      	str	r2, [r3, #80]	; 0x50
 80059dc:	e020      	b.n	8005a20 <HAL_RCC_OscConfig+0x510>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	689a      	ldr	r2, [r3, #8]
 80059e2:	23a0      	movs	r3, #160	; 0xa0
 80059e4:	00db      	lsls	r3, r3, #3
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d10e      	bne.n	8005a08 <HAL_RCC_OscConfig+0x4f8>
 80059ea:	4b5f      	ldr	r3, [pc, #380]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 80059ec:	4a5e      	ldr	r2, [pc, #376]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 80059ee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80059f0:	2180      	movs	r1, #128	; 0x80
 80059f2:	00c9      	lsls	r1, r1, #3
 80059f4:	430a      	orrs	r2, r1
 80059f6:	651a      	str	r2, [r3, #80]	; 0x50
 80059f8:	4b5b      	ldr	r3, [pc, #364]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 80059fa:	4a5b      	ldr	r2, [pc, #364]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 80059fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80059fe:	2180      	movs	r1, #128	; 0x80
 8005a00:	0049      	lsls	r1, r1, #1
 8005a02:	430a      	orrs	r2, r1
 8005a04:	651a      	str	r2, [r3, #80]	; 0x50
 8005a06:	e00b      	b.n	8005a20 <HAL_RCC_OscConfig+0x510>
 8005a08:	4b57      	ldr	r3, [pc, #348]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 8005a0a:	4a57      	ldr	r2, [pc, #348]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 8005a0c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005a0e:	4958      	ldr	r1, [pc, #352]	; (8005b70 <HAL_RCC_OscConfig+0x660>)
 8005a10:	400a      	ands	r2, r1
 8005a12:	651a      	str	r2, [r3, #80]	; 0x50
 8005a14:	4b54      	ldr	r3, [pc, #336]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 8005a16:	4a54      	ldr	r2, [pc, #336]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 8005a18:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005a1a:	4957      	ldr	r1, [pc, #348]	; (8005b78 <HAL_RCC_OscConfig+0x668>)
 8005a1c:	400a      	ands	r2, r1
 8005a1e:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d015      	beq.n	8005a54 <HAL_RCC_OscConfig+0x544>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a28:	f7ff f916 	bl	8004c58 <HAL_GetTick>
 8005a2c:	0003      	movs	r3, r0
 8005a2e:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a30:	e009      	b.n	8005a46 <HAL_RCC_OscConfig+0x536>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a32:	f7ff f911 	bl	8004c58 <HAL_GetTick>
 8005a36:	0002      	movs	r2, r0
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	4a4f      	ldr	r2, [pc, #316]	; (8005b7c <HAL_RCC_OscConfig+0x66c>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d901      	bls.n	8005a46 <HAL_RCC_OscConfig+0x536>
        {
          return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e0fc      	b.n	8005c40 <HAL_RCC_OscConfig+0x730>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a46:	4b48      	ldr	r3, [pc, #288]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 8005a48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a4a:	2380      	movs	r3, #128	; 0x80
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4013      	ands	r3, r2
 8005a50:	d0ef      	beq.n	8005a32 <HAL_RCC_OscConfig+0x522>
 8005a52:	e014      	b.n	8005a7e <HAL_RCC_OscConfig+0x56e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a54:	f7ff f900 	bl	8004c58 <HAL_GetTick>
 8005a58:	0003      	movs	r3, r0
 8005a5a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a5c:	e009      	b.n	8005a72 <HAL_RCC_OscConfig+0x562>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a5e:	f7ff f8fb 	bl	8004c58 <HAL_GetTick>
 8005a62:	0002      	movs	r2, r0
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	4a44      	ldr	r2, [pc, #272]	; (8005b7c <HAL_RCC_OscConfig+0x66c>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_OscConfig+0x562>
        {
          return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e0e6      	b.n	8005c40 <HAL_RCC_OscConfig+0x730>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a72:	4b3d      	ldr	r3, [pc, #244]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 8005a74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a76:	2380      	movs	r3, #128	; 0x80
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	d1ef      	bne.n	8005a5e <HAL_RCC_OscConfig+0x54e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005a7e:	2317      	movs	r3, #23
 8005a80:	18fb      	adds	r3, r7, r3
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d105      	bne.n	8005a94 <HAL_RCC_OscConfig+0x584>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a88:	4b37      	ldr	r3, [pc, #220]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 8005a8a:	4a37      	ldr	r2, [pc, #220]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 8005a8c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a8e:	493c      	ldr	r1, [pc, #240]	; (8005b80 <HAL_RCC_OscConfig+0x670>)
 8005a90:	400a      	ands	r2, r1
 8005a92:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2220      	movs	r2, #32
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	d049      	beq.n	8005b32 <HAL_RCC_OscConfig+0x622>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d026      	beq.n	8005af4 <HAL_RCC_OscConfig+0x5e4>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005aa6:	4b30      	ldr	r3, [pc, #192]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 8005aa8:	4a2f      	ldr	r2, [pc, #188]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 8005aaa:	6892      	ldr	r2, [r2, #8]
 8005aac:	2101      	movs	r1, #1
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	609a      	str	r2, [r3, #8]
 8005ab2:	4b2d      	ldr	r3, [pc, #180]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 8005ab4:	4a2c      	ldr	r2, [pc, #176]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 8005ab6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ab8:	2101      	movs	r1, #1
 8005aba:	430a      	orrs	r2, r1
 8005abc:	635a      	str	r2, [r3, #52]	; 0x34
 8005abe:	4b31      	ldr	r3, [pc, #196]	; (8005b84 <HAL_RCC_OscConfig+0x674>)
 8005ac0:	4a30      	ldr	r2, [pc, #192]	; (8005b84 <HAL_RCC_OscConfig+0x674>)
 8005ac2:	6a12      	ldr	r2, [r2, #32]
 8005ac4:	2180      	movs	r1, #128	; 0x80
 8005ac6:	0189      	lsls	r1, r1, #6
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005acc:	f7ff f8c4 	bl	8004c58 <HAL_GetTick>
 8005ad0:	0003      	movs	r3, r0
 8005ad2:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005ad4:	e008      	b.n	8005ae8 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ad6:	f7ff f8bf 	bl	8004c58 <HAL_GetTick>
 8005ada:	0002      	movs	r2, r0
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d901      	bls.n	8005ae8 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e0ab      	b.n	8005c40 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005ae8:	4b1f      	ldr	r3, [pc, #124]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	2202      	movs	r2, #2
 8005aee:	4013      	ands	r3, r2
 8005af0:	d0f1      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x5c6>
 8005af2:	e01e      	b.n	8005b32 <HAL_RCC_OscConfig+0x622>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005af4:	4b1c      	ldr	r3, [pc, #112]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 8005af6:	4a1c      	ldr	r2, [pc, #112]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 8005af8:	6892      	ldr	r2, [r2, #8]
 8005afa:	2101      	movs	r1, #1
 8005afc:	438a      	bics	r2, r1
 8005afe:	609a      	str	r2, [r3, #8]
 8005b00:	4b20      	ldr	r3, [pc, #128]	; (8005b84 <HAL_RCC_OscConfig+0x674>)
 8005b02:	4a20      	ldr	r2, [pc, #128]	; (8005b84 <HAL_RCC_OscConfig+0x674>)
 8005b04:	6a12      	ldr	r2, [r2, #32]
 8005b06:	4920      	ldr	r1, [pc, #128]	; (8005b88 <HAL_RCC_OscConfig+0x678>)
 8005b08:	400a      	ands	r2, r1
 8005b0a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b0c:	f7ff f8a4 	bl	8004c58 <HAL_GetTick>
 8005b10:	0003      	movs	r3, r0
 8005b12:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005b14:	e008      	b.n	8005b28 <HAL_RCC_OscConfig+0x618>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b16:	f7ff f89f 	bl	8004c58 <HAL_GetTick>
 8005b1a:	0002      	movs	r2, r0
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d901      	bls.n	8005b28 <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e08b      	b.n	8005c40 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005b28:	4b0f      	ldr	r3, [pc, #60]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	2202      	movs	r2, #2
 8005b2e:	4013      	ands	r3, r2
 8005b30:	d1f1      	bne.n	8005b16 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d100      	bne.n	8005b3c <HAL_RCC_OscConfig+0x62c>
 8005b3a:	e080      	b.n	8005c3e <HAL_RCC_OscConfig+0x72e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b3c:	4b0a      	ldr	r3, [pc, #40]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	220c      	movs	r2, #12
 8005b42:	4013      	ands	r3, r2
 8005b44:	2b0c      	cmp	r3, #12
 8005b46:	d100      	bne.n	8005b4a <HAL_RCC_OscConfig+0x63a>
 8005b48:	e077      	b.n	8005c3a <HAL_RCC_OscConfig+0x72a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d158      	bne.n	8005c04 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b52:	4b05      	ldr	r3, [pc, #20]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 8005b54:	4a04      	ldr	r2, [pc, #16]	; (8005b68 <HAL_RCC_OscConfig+0x658>)
 8005b56:	6812      	ldr	r2, [r2, #0]
 8005b58:	490c      	ldr	r1, [pc, #48]	; (8005b8c <HAL_RCC_OscConfig+0x67c>)
 8005b5a:	400a      	ands	r2, r1
 8005b5c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b5e:	f7ff f87b 	bl	8004c58 <HAL_GetTick>
 8005b62:	0003      	movs	r3, r0
 8005b64:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b66:	e01c      	b.n	8005ba2 <HAL_RCC_OscConfig+0x692>
 8005b68:	40021000 	.word	0x40021000
 8005b6c:	ffff1fff 	.word	0xffff1fff
 8005b70:	fffffeff 	.word	0xfffffeff
 8005b74:	40007000 	.word	0x40007000
 8005b78:	fffffbff 	.word	0xfffffbff
 8005b7c:	00001388 	.word	0x00001388
 8005b80:	efffffff 	.word	0xefffffff
 8005b84:	40010000 	.word	0x40010000
 8005b88:	ffffdfff 	.word	0xffffdfff
 8005b8c:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b90:	f7ff f862 	bl	8004c58 <HAL_GetTick>
 8005b94:	0002      	movs	r2, r0
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_OscConfig+0x692>
          {
            return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e04e      	b.n	8005c40 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ba2:	4b29      	ldr	r3, [pc, #164]	; (8005c48 <HAL_RCC_OscConfig+0x738>)
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	2380      	movs	r3, #128	; 0x80
 8005ba8:	049b      	lsls	r3, r3, #18
 8005baa:	4013      	ands	r3, r2
 8005bac:	d1f0      	bne.n	8005b90 <HAL_RCC_OscConfig+0x680>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bae:	4a26      	ldr	r2, [pc, #152]	; (8005c48 <HAL_RCC_OscConfig+0x738>)
 8005bb0:	4b25      	ldr	r3, [pc, #148]	; (8005c48 <HAL_RCC_OscConfig+0x738>)
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	4925      	ldr	r1, [pc, #148]	; (8005c4c <HAL_RCC_OscConfig+0x73c>)
 8005bb6:	4019      	ands	r1, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc0:	4318      	orrs	r0, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc6:	4303      	orrs	r3, r0
 8005bc8:	430b      	orrs	r3, r1
 8005bca:	60d3      	str	r3, [r2, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bcc:	4b1e      	ldr	r3, [pc, #120]	; (8005c48 <HAL_RCC_OscConfig+0x738>)
 8005bce:	4a1e      	ldr	r2, [pc, #120]	; (8005c48 <HAL_RCC_OscConfig+0x738>)
 8005bd0:	6812      	ldr	r2, [r2, #0]
 8005bd2:	2180      	movs	r1, #128	; 0x80
 8005bd4:	0449      	lsls	r1, r1, #17
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bda:	f7ff f83d 	bl	8004c58 <HAL_GetTick>
 8005bde:	0003      	movs	r3, r0
 8005be0:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005be2:	e008      	b.n	8005bf6 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005be4:	f7ff f838 	bl	8004c58 <HAL_GetTick>
 8005be8:	0002      	movs	r2, r0
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d901      	bls.n	8005bf6 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e024      	b.n	8005c40 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005bf6:	4b14      	ldr	r3, [pc, #80]	; (8005c48 <HAL_RCC_OscConfig+0x738>)
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	2380      	movs	r3, #128	; 0x80
 8005bfc:	049b      	lsls	r3, r3, #18
 8005bfe:	4013      	ands	r3, r2
 8005c00:	d0f0      	beq.n	8005be4 <HAL_RCC_OscConfig+0x6d4>
 8005c02:	e01c      	b.n	8005c3e <HAL_RCC_OscConfig+0x72e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c04:	4b10      	ldr	r3, [pc, #64]	; (8005c48 <HAL_RCC_OscConfig+0x738>)
 8005c06:	4a10      	ldr	r2, [pc, #64]	; (8005c48 <HAL_RCC_OscConfig+0x738>)
 8005c08:	6812      	ldr	r2, [r2, #0]
 8005c0a:	4911      	ldr	r1, [pc, #68]	; (8005c50 <HAL_RCC_OscConfig+0x740>)
 8005c0c:	400a      	ands	r2, r1
 8005c0e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c10:	f7ff f822 	bl	8004c58 <HAL_GetTick>
 8005c14:	0003      	movs	r3, r0
 8005c16:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c18:	e008      	b.n	8005c2c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c1a:	f7ff f81d 	bl	8004c58 <HAL_GetTick>
 8005c1e:	0002      	movs	r2, r0
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d901      	bls.n	8005c2c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e009      	b.n	8005c40 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c2c:	4b06      	ldr	r3, [pc, #24]	; (8005c48 <HAL_RCC_OscConfig+0x738>)
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	2380      	movs	r3, #128	; 0x80
 8005c32:	049b      	lsls	r3, r3, #18
 8005c34:	4013      	ands	r3, r2
 8005c36:	d1f0      	bne.n	8005c1a <HAL_RCC_OscConfig+0x70a>
 8005c38:	e001      	b.n	8005c3e <HAL_RCC_OscConfig+0x72e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e000      	b.n	8005c40 <HAL_RCC_OscConfig+0x730>
    }
  }
  
  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	0018      	movs	r0, r3
 8005c42:	46bd      	mov	sp, r7
 8005c44:	b006      	add	sp, #24
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	40021000 	.word	0x40021000
 8005c4c:	ff02ffff 	.word	0xff02ffff
 8005c50:	feffffff 	.word	0xfeffffff

08005c54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8005c62:	4b82      	ldr	r3, [pc, #520]	; (8005e6c <HAL_RCC_ClockConfig+0x218>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2201      	movs	r2, #1
 8005c68:	401a      	ands	r2, r3
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d211      	bcs.n	8005c94 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c70:	4b7e      	ldr	r3, [pc, #504]	; (8005e6c <HAL_RCC_ClockConfig+0x218>)
 8005c72:	4a7e      	ldr	r2, [pc, #504]	; (8005e6c <HAL_RCC_ClockConfig+0x218>)
 8005c74:	6812      	ldr	r2, [r2, #0]
 8005c76:	2101      	movs	r1, #1
 8005c78:	438a      	bics	r2, r1
 8005c7a:	0011      	movs	r1, r2
 8005c7c:	683a      	ldr	r2, [r7, #0]
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005c82:	4b7a      	ldr	r3, [pc, #488]	; (8005e6c <HAL_RCC_ClockConfig+0x218>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2201      	movs	r2, #1
 8005c88:	401a      	ands	r2, r3
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d001      	beq.n	8005c94 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e0e6      	b.n	8005e62 <HAL_RCC_ClockConfig+0x20e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2202      	movs	r2, #2
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	d009      	beq.n	8005cb2 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c9e:	4a74      	ldr	r2, [pc, #464]	; (8005e70 <HAL_RCC_ClockConfig+0x21c>)
 8005ca0:	4b73      	ldr	r3, [pc, #460]	; (8005e70 <HAL_RCC_ClockConfig+0x21c>)
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	21f0      	movs	r1, #240	; 0xf0
 8005ca6:	438b      	bics	r3, r1
 8005ca8:	0019      	movs	r1, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	430b      	orrs	r3, r1
 8005cb0:	60d3      	str	r3, [r2, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	4013      	ands	r3, r2
 8005cba:	d100      	bne.n	8005cbe <HAL_RCC_ClockConfig+0x6a>
 8005cbc:	e089      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d107      	bne.n	8005cd6 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cc6:	4b6a      	ldr	r3, [pc, #424]	; (8005e70 <HAL_RCC_ClockConfig+0x21c>)
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	2380      	movs	r3, #128	; 0x80
 8005ccc:	029b      	lsls	r3, r3, #10
 8005cce:	4013      	ands	r3, r2
 8005cd0:	d120      	bne.n	8005d14 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e0c5      	b.n	8005e62 <HAL_RCC_ClockConfig+0x20e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	2b03      	cmp	r3, #3
 8005cdc:	d107      	bne.n	8005cee <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cde:	4b64      	ldr	r3, [pc, #400]	; (8005e70 <HAL_RCC_ClockConfig+0x21c>)
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	2380      	movs	r3, #128	; 0x80
 8005ce4:	049b      	lsls	r3, r3, #18
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	d114      	bne.n	8005d14 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e0b9      	b.n	8005e62 <HAL_RCC_ClockConfig+0x20e>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d106      	bne.n	8005d04 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cf6:	4b5e      	ldr	r3, [pc, #376]	; (8005e70 <HAL_RCC_ClockConfig+0x21c>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2204      	movs	r2, #4
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	d109      	bne.n	8005d14 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e0ae      	b.n	8005e62 <HAL_RCC_ClockConfig+0x20e>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8005d04:	4b5a      	ldr	r3, [pc, #360]	; (8005e70 <HAL_RCC_ClockConfig+0x21c>)
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	2380      	movs	r3, #128	; 0x80
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	d101      	bne.n	8005d14 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e0a6      	b.n	8005e62 <HAL_RCC_ClockConfig+0x20e>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d14:	4a56      	ldr	r2, [pc, #344]	; (8005e70 <HAL_RCC_ClockConfig+0x21c>)
 8005d16:	4b56      	ldr	r3, [pc, #344]	; (8005e70 <HAL_RCC_ClockConfig+0x21c>)
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	2103      	movs	r1, #3
 8005d1c:	438b      	bics	r3, r1
 8005d1e:	0019      	movs	r1, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	430b      	orrs	r3, r1
 8005d26:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d28:	f7fe ff96 	bl	8004c58 <HAL_GetTick>
 8005d2c:	0003      	movs	r3, r0
 8005d2e:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d111      	bne.n	8005d5c <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d38:	e009      	b.n	8005d4e <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d3a:	f7fe ff8d 	bl	8004c58 <HAL_GetTick>
 8005d3e:	0002      	movs	r2, r0
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	4a4b      	ldr	r2, [pc, #300]	; (8005e74 <HAL_RCC_ClockConfig+0x220>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d901      	bls.n	8005d4e <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e089      	b.n	8005e62 <HAL_RCC_ClockConfig+0x20e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d4e:	4b48      	ldr	r3, [pc, #288]	; (8005e70 <HAL_RCC_ClockConfig+0x21c>)
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	220c      	movs	r2, #12
 8005d54:	4013      	ands	r3, r2
 8005d56:	2b08      	cmp	r3, #8
 8005d58:	d1ef      	bne.n	8005d3a <HAL_RCC_ClockConfig+0xe6>
 8005d5a:	e03a      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	2b03      	cmp	r3, #3
 8005d62:	d111      	bne.n	8005d88 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d64:	e009      	b.n	8005d7a <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d66:	f7fe ff77 	bl	8004c58 <HAL_GetTick>
 8005d6a:	0002      	movs	r2, r0
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	4a40      	ldr	r2, [pc, #256]	; (8005e74 <HAL_RCC_ClockConfig+0x220>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d901      	bls.n	8005d7a <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e073      	b.n	8005e62 <HAL_RCC_ClockConfig+0x20e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d7a:	4b3d      	ldr	r3, [pc, #244]	; (8005e70 <HAL_RCC_ClockConfig+0x21c>)
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	220c      	movs	r2, #12
 8005d80:	4013      	ands	r3, r2
 8005d82:	2b0c      	cmp	r3, #12
 8005d84:	d1ef      	bne.n	8005d66 <HAL_RCC_ClockConfig+0x112>
 8005d86:	e024      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d11b      	bne.n	8005dc8 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d90:	e009      	b.n	8005da6 <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d92:	f7fe ff61 	bl	8004c58 <HAL_GetTick>
 8005d96:	0002      	movs	r2, r0
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	4a35      	ldr	r2, [pc, #212]	; (8005e74 <HAL_RCC_ClockConfig+0x220>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d901      	bls.n	8005da6 <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e05d      	b.n	8005e62 <HAL_RCC_ClockConfig+0x20e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005da6:	4b32      	ldr	r3, [pc, #200]	; (8005e70 <HAL_RCC_ClockConfig+0x21c>)
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	220c      	movs	r2, #12
 8005dac:	4013      	ands	r3, r2
 8005dae:	2b04      	cmp	r3, #4
 8005db0:	d1ef      	bne.n	8005d92 <HAL_RCC_ClockConfig+0x13e>
 8005db2:	e00e      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x17e>
    }      
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005db4:	f7fe ff50 	bl	8004c58 <HAL_GetTick>
 8005db8:	0002      	movs	r2, r0
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	4a2d      	ldr	r2, [pc, #180]	; (8005e74 <HAL_RCC_ClockConfig+0x220>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d901      	bls.n	8005dc8 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e04c      	b.n	8005e62 <HAL_RCC_ClockConfig+0x20e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005dc8:	4b29      	ldr	r3, [pc, #164]	; (8005e70 <HAL_RCC_ClockConfig+0x21c>)
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	220c      	movs	r2, #12
 8005dce:	4013      	ands	r3, r2
 8005dd0:	d1f0      	bne.n	8005db4 <HAL_RCC_ClockConfig+0x160>
        }
      }
    }
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8005dd2:	4b26      	ldr	r3, [pc, #152]	; (8005e6c <HAL_RCC_ClockConfig+0x218>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	401a      	ands	r2, r3
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d911      	bls.n	8005e04 <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005de0:	4b22      	ldr	r3, [pc, #136]	; (8005e6c <HAL_RCC_ClockConfig+0x218>)
 8005de2:	4a22      	ldr	r2, [pc, #136]	; (8005e6c <HAL_RCC_ClockConfig+0x218>)
 8005de4:	6812      	ldr	r2, [r2, #0]
 8005de6:	2101      	movs	r1, #1
 8005de8:	438a      	bics	r2, r1
 8005dea:	0011      	movs	r1, r2
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	430a      	orrs	r2, r1
 8005df0:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005df2:	4b1e      	ldr	r3, [pc, #120]	; (8005e6c <HAL_RCC_ClockConfig+0x218>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2201      	movs	r2, #1
 8005df8:	401a      	ands	r2, r3
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d001      	beq.n	8005e04 <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e02e      	b.n	8005e62 <HAL_RCC_ClockConfig+0x20e>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2204      	movs	r2, #4
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	d008      	beq.n	8005e20 <HAL_RCC_ClockConfig+0x1cc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e0e:	4a18      	ldr	r2, [pc, #96]	; (8005e70 <HAL_RCC_ClockConfig+0x21c>)
 8005e10:	4b17      	ldr	r3, [pc, #92]	; (8005e70 <HAL_RCC_ClockConfig+0x21c>)
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	4918      	ldr	r1, [pc, #96]	; (8005e78 <HAL_RCC_ClockConfig+0x224>)
 8005e16:	4019      	ands	r1, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	430b      	orrs	r3, r1
 8005e1e:	60d3      	str	r3, [r2, #12]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2208      	movs	r2, #8
 8005e26:	4013      	ands	r3, r2
 8005e28:	d009      	beq.n	8005e3e <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e2a:	4a11      	ldr	r2, [pc, #68]	; (8005e70 <HAL_RCC_ClockConfig+0x21c>)
 8005e2c:	4b10      	ldr	r3, [pc, #64]	; (8005e70 <HAL_RCC_ClockConfig+0x21c>)
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	4912      	ldr	r1, [pc, #72]	; (8005e7c <HAL_RCC_ClockConfig+0x228>)
 8005e32:	4019      	ands	r1, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	00db      	lsls	r3, r3, #3
 8005e3a:	430b      	orrs	r3, r1
 8005e3c:	60d3      	str	r3, [r2, #12]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005e3e:	f000 f823 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 8005e42:	0001      	movs	r1, r0
 8005e44:	4b0a      	ldr	r3, [pc, #40]	; (8005e70 <HAL_RCC_ClockConfig+0x21c>)
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	091b      	lsrs	r3, r3, #4
 8005e4a:	220f      	movs	r2, #15
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	4a0c      	ldr	r2, [pc, #48]	; (8005e80 <HAL_RCC_ClockConfig+0x22c>)
 8005e50:	5cd3      	ldrb	r3, [r2, r3]
 8005e52:	000a      	movs	r2, r1
 8005e54:	40da      	lsrs	r2, r3
 8005e56:	4b0b      	ldr	r3, [pc, #44]	; (8005e84 <HAL_RCC_ClockConfig+0x230>)
 8005e58:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005e5a:	2003      	movs	r0, #3
 8005e5c:	f003 fc72 	bl	8009744 <HAL_InitTick>
  
  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	0018      	movs	r0, r3
 8005e64:	46bd      	mov	sp, r7
 8005e66:	b004      	add	sp, #16
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	46c0      	nop			; (mov r8, r8)
 8005e6c:	40022000 	.word	0x40022000
 8005e70:	40021000 	.word	0x40021000
 8005e74:	00001388 	.word	0x00001388
 8005e78:	fffff8ff 	.word	0xfffff8ff
 8005e7c:	ffffc7ff 	.word	0xffffc7ff
 8005e80:	0800ad04 	.word	0x0800ad04
 8005e84:	2000002c 	.word	0x2000002c

08005e88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b086      	sub	sp, #24
 8005e8c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0, pllm = 0, plld = 0, pllvco = 0, msiclkrange = 0;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	60fb      	str	r3, [r7, #12]
 8005e92:	2300      	movs	r3, #0
 8005e94:	60bb      	str	r3, [r7, #8]
 8005e96:	2300      	movs	r3, #0
 8005e98:	607b      	str	r3, [r7, #4]
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	617b      	str	r3, [r7, #20]
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005ea6:	4b32      	ldr	r3, [pc, #200]	; (8005f70 <HAL_RCC_GetSysClockFreq+0xe8>)
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	220c      	movs	r2, #12
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	2b08      	cmp	r3, #8
 8005eb4:	d00e      	beq.n	8005ed4 <HAL_RCC_GetSysClockFreq+0x4c>
 8005eb6:	2b0c      	cmp	r3, #12
 8005eb8:	d00f      	beq.n	8005eda <HAL_RCC_GetSysClockFreq+0x52>
 8005eba:	2b04      	cmp	r3, #4
 8005ebc:	d145      	bne.n	8005f4a <HAL_RCC_GetSysClockFreq+0xc2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 8005ebe:	4b2c      	ldr	r3, [pc, #176]	; (8005f70 <HAL_RCC_GetSysClockFreq+0xe8>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2210      	movs	r2, #16
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	d002      	beq.n	8005ece <HAL_RCC_GetSysClockFreq+0x46>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005ec8:	4b2a      	ldr	r3, [pc, #168]	; (8005f74 <HAL_RCC_GetSysClockFreq+0xec>)
 8005eca:	613b      	str	r3, [r7, #16]
      }
      else 
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005ecc:	e04b      	b.n	8005f66 <HAL_RCC_GetSysClockFreq+0xde>
        sysclockfreq =  HSI_VALUE;
 8005ece:	4b2a      	ldr	r3, [pc, #168]	; (8005f78 <HAL_RCC_GetSysClockFreq+0xf0>)
 8005ed0:	613b      	str	r3, [r7, #16]
      break;
 8005ed2:	e048      	b.n	8005f66 <HAL_RCC_GetSysClockFreq+0xde>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ed4:	4b29      	ldr	r3, [pc, #164]	; (8005f7c <HAL_RCC_GetSysClockFreq+0xf4>)
 8005ed6:	613b      	str	r3, [r7, #16]
      break;
 8005ed8:	e045      	b.n	8005f66 <HAL_RCC_GetSysClockFreq+0xde>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	0c9b      	lsrs	r3, r3, #18
 8005ede:	220f      	movs	r2, #15
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	4a27      	ldr	r2, [pc, #156]	; (8005f80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ee4:	5cd3      	ldrb	r3, [r2, r3]
 8005ee6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	0d9b      	lsrs	r3, r3, #22
 8005eec:	2203      	movs	r2, #3
 8005eee:	4013      	ands	r3, r2
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ef4:	4b1e      	ldr	r3, [pc, #120]	; (8005f70 <HAL_RCC_GetSysClockFreq+0xe8>)
 8005ef6:	68da      	ldr	r2, [r3, #12]
 8005ef8:	2380      	movs	r3, #128	; 0x80
 8005efa:	025b      	lsls	r3, r3, #9
 8005efc:	4013      	ands	r3, r2
 8005efe:	d009      	beq.n	8005f14 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	4a1e      	ldr	r2, [pc, #120]	; (8005f7c <HAL_RCC_GetSysClockFreq+0xf4>)
 8005f04:	4353      	muls	r3, r2
 8005f06:	6879      	ldr	r1, [r7, #4]
 8005f08:	0018      	movs	r0, r3
 8005f0a:	f7fa f8fd 	bl	8000108 <__udivsi3>
 8005f0e:	0003      	movs	r3, r0
 8005f10:	617b      	str	r3, [r7, #20]
 8005f12:	e017      	b.n	8005f44 <HAL_RCC_GetSysClockFreq+0xbc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 8005f14:	4b16      	ldr	r3, [pc, #88]	; (8005f70 <HAL_RCC_GetSysClockFreq+0xe8>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2210      	movs	r2, #16
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	d009      	beq.n	8005f32 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	4a14      	ldr	r2, [pc, #80]	; (8005f74 <HAL_RCC_GetSysClockFreq+0xec>)
 8005f22:	4353      	muls	r3, r2
 8005f24:	6879      	ldr	r1, [r7, #4]
 8005f26:	0018      	movs	r0, r3
 8005f28:	f7fa f8ee 	bl	8000108 <__udivsi3>
 8005f2c:	0003      	movs	r3, r0
 8005f2e:	617b      	str	r3, [r7, #20]
 8005f30:	e008      	b.n	8005f44 <HAL_RCC_GetSysClockFreq+0xbc>
        }
        else 
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	4a10      	ldr	r2, [pc, #64]	; (8005f78 <HAL_RCC_GetSysClockFreq+0xf0>)
 8005f36:	4353      	muls	r3, r2
 8005f38:	6879      	ldr	r1, [r7, #4]
 8005f3a:	0018      	movs	r0, r3
 8005f3c:	f7fa f8e4 	bl	8000108 <__udivsi3>
 8005f40:	0003      	movs	r3, r0
 8005f42:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	613b      	str	r3, [r7, #16]
      break;
 8005f48:	e00d      	b.n	8005f66 <HAL_RCC_GetSysClockFreq+0xde>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8005f4a:	4b09      	ldr	r3, [pc, #36]	; (8005f70 <HAL_RCC_GetSysClockFreq+0xe8>)
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	0b5b      	lsrs	r3, r3, #13
 8005f50:	2207      	movs	r2, #7
 8005f52:	4013      	ands	r3, r2
 8005f54:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	2280      	movs	r2, #128	; 0x80
 8005f5c:	0212      	lsls	r2, r2, #8
 8005f5e:	409a      	lsls	r2, r3
 8005f60:	0013      	movs	r3, r2
 8005f62:	613b      	str	r3, [r7, #16]
      break;
 8005f64:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005f66:	693b      	ldr	r3, [r7, #16]
}
 8005f68:	0018      	movs	r0, r3
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	b006      	add	sp, #24
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	40021000 	.word	0x40021000
 8005f74:	003d0900 	.word	0x003d0900
 8005f78:	00f42400 	.word	0x00f42400
 8005f7c:	007a1200 	.word	0x007a1200
 8005f80:	0800ad1c 	.word	0x0800ad1c

08005f84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f88:	4b02      	ldr	r3, [pc, #8]	; (8005f94 <HAL_RCC_GetHCLKFreq+0x10>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
}
 8005f8c:	0018      	movs	r0, r3
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	46c0      	nop			; (mov r8, r8)
 8005f94:	2000002c 	.word	0x2000002c

08005f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005f9c:	f7ff fff2 	bl	8005f84 <HAL_RCC_GetHCLKFreq>
 8005fa0:	0001      	movs	r1, r0
 8005fa2:	4b06      	ldr	r3, [pc, #24]	; (8005fbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	0a1b      	lsrs	r3, r3, #8
 8005fa8:	2207      	movs	r2, #7
 8005faa:	4013      	ands	r3, r2
 8005fac:	4a04      	ldr	r2, [pc, #16]	; (8005fc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005fae:	5cd3      	ldrb	r3, [r2, r3]
 8005fb0:	40d9      	lsrs	r1, r3
 8005fb2:	000b      	movs	r3, r1
}    
 8005fb4:	0018      	movs	r0, r3
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	46c0      	nop			; (mov r8, r8)
 8005fbc:	40021000 	.word	0x40021000
 8005fc0:	0800ad14 	.word	0x0800ad14

08005fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005fc8:	f7ff ffdc 	bl	8005f84 <HAL_RCC_GetHCLKFreq>
 8005fcc:	0001      	movs	r1, r0
 8005fce:	4b06      	ldr	r3, [pc, #24]	; (8005fe8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	0adb      	lsrs	r3, r3, #11
 8005fd4:	2207      	movs	r2, #7
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	4a04      	ldr	r2, [pc, #16]	; (8005fec <HAL_RCC_GetPCLK2Freq+0x28>)
 8005fda:	5cd3      	ldrb	r3, [r2, r3]
 8005fdc:	40d9      	lsrs	r1, r3
 8005fde:	000b      	movs	r3, r1
} 
 8005fe0:	0018      	movs	r0, r3
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	46c0      	nop			; (mov r8, r8)
 8005fe8:	40021000 	.word	0x40021000
 8005fec:	0800ad14 	.word	0x0800ad14

08005ff0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	60fb      	str	r3, [r7, #12]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	60bb      	str	r3, [r7, #8]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006000:	4b23      	ldr	r3, [pc, #140]	; (8006090 <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	22f0      	movs	r2, #240	; 0xf0
 8006006:	4013      	ands	r3, r2
 8006008:	d12b      	bne.n	8006062 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800600a:	4b21      	ldr	r3, [pc, #132]	; (8006090 <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 800600c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800600e:	2380      	movs	r3, #128	; 0x80
 8006010:	055b      	lsls	r3, r3, #21
 8006012:	4013      	ands	r3, r2
 8006014:	d006      	beq.n	8006024 <RCC_SetFlashLatencyFromMSIRange+0x34>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8006016:	4b1f      	ldr	r3, [pc, #124]	; (8006094 <RCC_SetFlashLatencyFromMSIRange+0xa4>)
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	23c0      	movs	r3, #192	; 0xc0
 800601c:	015b      	lsls	r3, r3, #5
 800601e:	4013      	ands	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]
 8006022:	e012      	b.n	800604a <RCC_SetFlashLatencyFromMSIRange+0x5a>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006024:	4b1a      	ldr	r3, [pc, #104]	; (8006090 <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8006026:	4a1a      	ldr	r2, [pc, #104]	; (8006090 <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8006028:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800602a:	2180      	movs	r1, #128	; 0x80
 800602c:	0549      	lsls	r1, r1, #21
 800602e:	430a      	orrs	r2, r1
 8006030:	639a      	str	r2, [r3, #56]	; 0x38
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8006032:	4b18      	ldr	r3, [pc, #96]	; (8006094 <RCC_SetFlashLatencyFromMSIRange+0xa4>)
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	23c0      	movs	r3, #192	; 0xc0
 8006038:	015b      	lsls	r3, r3, #5
 800603a:	4013      	ands	r3, r2
 800603c:	60fb      	str	r3, [r7, #12]
      __HAL_RCC_PWR_CLK_DISABLE();
 800603e:	4b14      	ldr	r3, [pc, #80]	; (8006090 <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8006040:	4a13      	ldr	r2, [pc, #76]	; (8006090 <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8006042:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006044:	4914      	ldr	r1, [pc, #80]	; (8006098 <RCC_SetFlashLatencyFromMSIRange+0xa8>)
 8006046:	400a      	ands	r2, r1
 8006048:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	23c0      	movs	r3, #192	; 0xc0
 800604e:	015b      	lsls	r3, r3, #5
 8006050:	429a      	cmp	r2, r3
 8006052:	d106      	bne.n	8006062 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	23c0      	movs	r3, #192	; 0xc0
 8006058:	021b      	lsls	r3, r3, #8
 800605a:	429a      	cmp	r2, r3
 800605c:	d101      	bne.n	8006062 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800605e:	2301      	movs	r3, #1
 8006060:	60bb      	str	r3, [r7, #8]
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 8006062:	4b0e      	ldr	r3, [pc, #56]	; (800609c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006064:	4a0d      	ldr	r2, [pc, #52]	; (800609c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006066:	6812      	ldr	r2, [r2, #0]
 8006068:	2101      	movs	r1, #1
 800606a:	438a      	bics	r2, r1
 800606c:	0011      	movs	r1, r2
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	430a      	orrs	r2, r1
 8006072:	601a      	str	r2, [r3, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8006074:	4b09      	ldr	r3, [pc, #36]	; (800609c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2201      	movs	r2, #1
 800607a:	401a      	ands	r2, r3
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	429a      	cmp	r2, r3
 8006080:	d001      	beq.n	8006086 <RCC_SetFlashLatencyFromMSIRange+0x96>
  {
    return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e000      	b.n	8006088 <RCC_SetFlashLatencyFromMSIRange+0x98>
  }
  
  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	0018      	movs	r0, r3
 800608a:	46bd      	mov	sp, r7
 800608c:	b004      	add	sp, #16
 800608e:	bd80      	pop	{r7, pc}
 8006090:	40021000 	.word	0x40021000
 8006094:	40007000 	.word	0x40007000
 8006098:	efffffff 	.word	0xefffffff
 800609c:	40022000 	.word	0x40022000

080060a0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80060ac:	2300      	movs	r3, #0
 80060ae:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2220      	movs	r2, #32
 80060b6:	4013      	ands	r3, r2
 80060b8:	d100      	bne.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80060ba:	e0c3      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80060bc:	2317      	movs	r3, #23
 80060be:	18fb      	adds	r3, r7, r3
 80060c0:	2200      	movs	r2, #0
 80060c2:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060c4:	4b94      	ldr	r3, [pc, #592]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80060c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060c8:	2380      	movs	r3, #128	; 0x80
 80060ca:	055b      	lsls	r3, r3, #21
 80060cc:	4013      	ands	r3, r2
 80060ce:	d10a      	bne.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060d0:	4b91      	ldr	r3, [pc, #580]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80060d2:	4a91      	ldr	r2, [pc, #580]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80060d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80060d6:	2180      	movs	r1, #128	; 0x80
 80060d8:	0549      	lsls	r1, r1, #21
 80060da:	430a      	orrs	r2, r1
 80060dc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80060de:	2317      	movs	r3, #23
 80060e0:	18fb      	adds	r3, r7, r3
 80060e2:	2201      	movs	r2, #1
 80060e4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060e6:	4b8d      	ldr	r3, [pc, #564]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	2380      	movs	r3, #128	; 0x80
 80060ec:	005b      	lsls	r3, r3, #1
 80060ee:	4013      	ands	r3, r2
 80060f0:	d11a      	bne.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060f2:	4b8a      	ldr	r3, [pc, #552]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80060f4:	4a89      	ldr	r2, [pc, #548]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80060f6:	6812      	ldr	r2, [r2, #0]
 80060f8:	2180      	movs	r1, #128	; 0x80
 80060fa:	0049      	lsls	r1, r1, #1
 80060fc:	430a      	orrs	r2, r1
 80060fe:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006100:	f7fe fdaa 	bl	8004c58 <HAL_GetTick>
 8006104:	0003      	movs	r3, r0
 8006106:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006108:	e008      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800610a:	f7fe fda5 	bl	8004c58 <HAL_GetTick>
 800610e:	0002      	movs	r2, r0
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	2b64      	cmp	r3, #100	; 0x64
 8006116:	d901      	bls.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x7c>
        {
          return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e0f9      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x270>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800611c:	4b7f      	ldr	r3, [pc, #508]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	2380      	movs	r3, #128	; 0x80
 8006122:	005b      	lsls	r3, r3, #1
 8006124:	4013      	ands	r3, r2
 8006126:	d0f0      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x6a>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */ 
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006128:	4b7b      	ldr	r3, [pc, #492]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	23c0      	movs	r3, #192	; 0xc0
 800612e:	039b      	lsls	r3, r3, #14
 8006130:	4013      	ands	r3, r2
 8006132:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685a      	ldr	r2, [r3, #4]
 8006138:	23c0      	movs	r3, #192	; 0xc0
 800613a:	039b      	lsls	r3, r3, #14
 800613c:	401a      	ands	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	429a      	cmp	r2, r3
 8006142:	d010      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xc6>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685a      	ldr	r2, [r3, #4]
 8006148:	23c0      	movs	r3, #192	; 0xc0
 800614a:	029b      	lsls	r3, r3, #10
 800614c:	401a      	ands	r2, r3
 800614e:	23c0      	movs	r3, #192	; 0xc0
 8006150:	029b      	lsls	r3, r3, #10
 8006152:	429a      	cmp	r2, r3
 8006154:	d107      	bne.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xc6>
 8006156:	4b70      	ldr	r3, [pc, #448]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	2380      	movs	r3, #128	; 0x80
 800615c:	029b      	lsls	r3, r3, #10
 800615e:	4013      	ands	r3, r2
 8006160:	d001      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xc6>
      {
        /* To update HSE divider, first switch-OFF HSE clock oscillator*/
        return HAL_ERROR; 
 8006162:	2301      	movs	r3, #1
 8006164:	e0d4      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x270>
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006166:	4b6c      	ldr	r3, [pc, #432]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006168:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800616a:	23c0      	movs	r3, #192	; 0xc0
 800616c:	029b      	lsls	r3, r3, #10
 800616e:	4013      	ands	r3, r2
 8006170:	60fb      	str	r3, [r7, #12]
    
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d03b      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	23c0      	movs	r3, #192	; 0xc0
 800617e:	029b      	lsls	r3, r3, #10
 8006180:	401a      	ands	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	429a      	cmp	r2, r3
 8006186:	d033      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2220      	movs	r2, #32
 800618e:	4013      	ands	r3, r2
 8006190:	d02e      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x150>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006192:	4b61      	ldr	r3, [pc, #388]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006196:	4a62      	ldr	r2, [pc, #392]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006198:	4013      	ands	r3, r2
 800619a:	60fb      	str	r3, [r7, #12]
      
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800619c:	4b5e      	ldr	r3, [pc, #376]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800619e:	4a5e      	ldr	r2, [pc, #376]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80061a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80061a2:	2180      	movs	r1, #128	; 0x80
 80061a4:	0309      	lsls	r1, r1, #12
 80061a6:	430a      	orrs	r2, r1
 80061a8:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061aa:	4b5b      	ldr	r3, [pc, #364]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80061ac:	4a5a      	ldr	r2, [pc, #360]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80061ae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80061b0:	495c      	ldr	r1, [pc, #368]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80061b2:	400a      	ands	r2, r1
 80061b4:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80061b6:	4b58      	ldr	r3, [pc, #352]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	651a      	str	r2, [r3, #80]	; 0x50
      
       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	2380      	movs	r3, #128	; 0x80
 80061c0:	005b      	lsls	r3, r3, #1
 80061c2:	4013      	ands	r3, r2
 80061c4:	d014      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061c6:	f7fe fd47 	bl	8004c58 <HAL_GetTick>
 80061ca:	0003      	movs	r3, r0
 80061cc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061ce:	e009      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061d0:	f7fe fd42 	bl	8004c58 <HAL_GetTick>
 80061d4:	0002      	movs	r2, r0
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	4a53      	ldr	r2, [pc, #332]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d901      	bls.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e095      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061e4:	4b4c      	ldr	r3, [pc, #304]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80061e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80061e8:	2380      	movs	r3, #128	; 0x80
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4013      	ands	r3, r2
 80061ee:	d0ef      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685a      	ldr	r2, [r3, #4]
 80061f4:	23c0      	movs	r3, #192	; 0xc0
 80061f6:	029b      	lsls	r3, r3, #10
 80061f8:	401a      	ands	r2, r3
 80061fa:	23c0      	movs	r3, #192	; 0xc0
 80061fc:	029b      	lsls	r3, r3, #10
 80061fe:	429a      	cmp	r2, r3
 8006200:	d10b      	bne.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006202:	4a45      	ldr	r2, [pc, #276]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006204:	4b44      	ldr	r3, [pc, #272]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4948      	ldr	r1, [pc, #288]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800620a:	4019      	ands	r1, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6858      	ldr	r0, [r3, #4]
 8006210:	23c0      	movs	r3, #192	; 0xc0
 8006212:	039b      	lsls	r3, r3, #14
 8006214:	4003      	ands	r3, r0
 8006216:	430b      	orrs	r3, r1
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	4a3f      	ldr	r2, [pc, #252]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800621c:	4b3e      	ldr	r3, [pc, #248]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800621e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6858      	ldr	r0, [r3, #4]
 8006224:	23c0      	movs	r3, #192	; 0xc0
 8006226:	029b      	lsls	r3, r3, #10
 8006228:	4003      	ands	r3, r0
 800622a:	430b      	orrs	r3, r1
 800622c:	6513      	str	r3, [r2, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800622e:	2317      	movs	r3, #23
 8006230:	18fb      	adds	r3, r7, r3
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d105      	bne.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006238:	4b37      	ldr	r3, [pc, #220]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800623a:	4a37      	ldr	r2, [pc, #220]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800623c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800623e:	493c      	ldr	r1, [pc, #240]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006240:	400a      	ands	r2, r1
 8006242:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  
#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2201      	movs	r2, #1
 800624a:	4013      	ands	r3, r2
 800624c:	d009      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800624e:	4a32      	ldr	r2, [pc, #200]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006250:	4b31      	ldr	r3, [pc, #196]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006254:	2103      	movs	r1, #3
 8006256:	438b      	bics	r3, r1
 8006258:	0019      	movs	r1, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	430b      	orrs	r3, r1
 8006260:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */
  
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2202      	movs	r2, #2
 8006268:	4013      	ands	r3, r2
 800626a:	d009      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800626c:	4a2a      	ldr	r2, [pc, #168]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800626e:	4b2a      	ldr	r3, [pc, #168]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006272:	210c      	movs	r1, #12
 8006274:	438b      	bics	r3, r1
 8006276:	0019      	movs	r1, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	430b      	orrs	r3, r1
 800627e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
  
  /*------------------------------ LPUART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2204      	movs	r2, #4
 8006286:	4013      	ands	r3, r2
 8006288:	d008      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
    
    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800628a:	4a23      	ldr	r2, [pc, #140]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800628c:	4b22      	ldr	r3, [pc, #136]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800628e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006290:	4928      	ldr	r1, [pc, #160]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006292:	4019      	ands	r1, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	430b      	orrs	r3, r1
 800629a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2208      	movs	r2, #8
 80062a2:	4013      	ands	r3, r2
 80062a4:	d008      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062a6:	4a1c      	ldr	r2, [pc, #112]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80062a8:	4b1b      	ldr	r3, [pc, #108]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80062aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062ac:	4922      	ldr	r1, [pc, #136]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80062ae:	4019      	ands	r1, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	430b      	orrs	r3, r1
 80062b6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	2380      	movs	r3, #128	; 0x80
 80062be:	005b      	lsls	r3, r3, #1
 80062c0:	4013      	ands	r3, r2
 80062c2:	d008      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80062c4:	4a14      	ldr	r2, [pc, #80]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80062c6:	4b14      	ldr	r3, [pc, #80]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80062c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062ca:	4915      	ldr	r1, [pc, #84]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062cc:	4019      	ands	r1, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	430b      	orrs	r3, r1
 80062d4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }  
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2240      	movs	r2, #64	; 0x40
 80062dc:	4013      	ands	r3, r2
 80062de:	d008      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062e0:	4a0d      	ldr	r2, [pc, #52]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80062e2:	4b0d      	ldr	r3, [pc, #52]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80062e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062e6:	4915      	ldr	r1, [pc, #84]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80062e8:	4019      	ands	r1, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	430b      	orrs	r3, r1
 80062f0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* USB */
  
  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2280      	movs	r2, #128	; 0x80
 80062f8:	4013      	ands	r3, r2
 80062fa:	d008      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80062fc:	4a06      	ldr	r2, [pc, #24]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80062fe:	4b06      	ldr	r3, [pc, #24]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006302:	490f      	ldr	r1, [pc, #60]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8006304:	4019      	ands	r1, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	69db      	ldr	r3, [r3, #28]
 800630a:	430b      	orrs	r3, r1
 800630c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	0018      	movs	r0, r3
 8006312:	46bd      	mov	sp, r7
 8006314:	b006      	add	sp, #24
 8006316:	bd80      	pop	{r7, pc}
 8006318:	40021000 	.word	0x40021000
 800631c:	40007000 	.word	0x40007000
 8006320:	fffcffff 	.word	0xfffcffff
 8006324:	fff7ffff 	.word	0xfff7ffff
 8006328:	00001388 	.word	0x00001388
 800632c:	ffcfffff 	.word	0xffcfffff
 8006330:	efffffff 	.word	0xefffffff
 8006334:	fffff3ff 	.word	0xfffff3ff
 8006338:	ffffcfff 	.word	0xffffcfff
 800633c:	fbffffff 	.word	0xfbffffff
 8006340:	fff3ffff 	.word	0xfff3ffff

08006344 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_I2C3     I2C3 peripheral clock (*)
  * @note   (*) means that this peripheral is not present on all the devices
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b08a      	sub	sp, #40	; 0x28
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  uint32_t temp_reg = 0U, clkprediv = 0U, frequency = 0U;
 800634c:	2300      	movs	r3, #0
 800634e:	61fb      	str	r3, [r7, #28]
 8006350:	2300      	movs	r3, #0
 8006352:	61bb      	str	r3, [r7, #24]
 8006354:	2300      	movs	r3, #0
 8006356:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t srcclk = 0U;
 8006358:	2300      	movs	r3, #0
 800635a:	617b      	str	r3, [r7, #20]
#if defined(USB)
    uint32_t pllmul = 0U, plldiv = 0U, pllvco = 0U;
 800635c:	2300      	movs	r3, #0
 800635e:	613b      	str	r3, [r7, #16]
 8006360:	2300      	movs	r3, #0
 8006362:	60fb      	str	r3, [r7, #12]
 8006364:	2300      	movs	r3, #0
 8006366:	623b      	str	r3, [r7, #32]
#endif /* USB */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b08      	cmp	r3, #8
 800636c:	d100      	bne.n	8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
 800636e:	e159      	b.n	8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8006370:	d809      	bhi.n	8006386 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006372:	2b02      	cmp	r3, #2
 8006374:	d100      	bne.n	8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
 8006376:	e0ec      	b.n	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006378:	2b04      	cmp	r3, #4
 800637a:	d100      	bne.n	800637e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800637c:	e11a      	b.n	80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
 800637e:	2b01      	cmp	r3, #1
 8006380:	d100      	bne.n	8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8006382:	e0b5      	b.n	80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      break;
    } 
#endif /* RCC_CCIPR_I2C3SEL */
  default: 
    {
      break;
 8006384:	e1c4      	b.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
  switch (PeriphClk)
 8006386:	2b20      	cmp	r3, #32
 8006388:	d00c      	beq.n	80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 800638a:	d803      	bhi.n	8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 800638c:	2b10      	cmp	r3, #16
 800638e:	d100      	bne.n	8006392 <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
 8006390:	e170      	b.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
      break;
 8006392:	e1bd      	b.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
  switch (PeriphClk)
 8006394:	2b40      	cmp	r3, #64	; 0x40
 8006396:	d058      	beq.n	800644a <HAL_RCCEx_GetPeriphCLKFreq+0x106>
 8006398:	2280      	movs	r2, #128	; 0x80
 800639a:	0052      	lsls	r2, r2, #1
 800639c:	4293      	cmp	r3, r2
 800639e:	d100      	bne.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 80063a0:	e18e      	b.n	80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
      break;
 80063a2:	e1b5      	b.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      temp_reg = RCC->CSR;
 80063a4:	4bbc      	ldr	r3, [pc, #752]	; (8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80063a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a8:	61fb      	str	r3, [r7, #28]
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80063aa:	4bbb      	ldr	r3, [pc, #748]	; (8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80063ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063ae:	23c0      	movs	r3, #192	; 0xc0
 80063b0:	029b      	lsls	r3, r3, #10
 80063b2:	4013      	ands	r3, r2
 80063b4:	617b      	str	r3, [r7, #20]
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	2380      	movs	r3, #128	; 0x80
 80063ba:	025b      	lsls	r3, r3, #9
 80063bc:	429a      	cmp	r2, r3
 80063be:	d108      	bne.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
 80063c0:	69fa      	ldr	r2, [r7, #28]
 80063c2:	2380      	movs	r3, #128	; 0x80
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4013      	ands	r3, r2
 80063c8:	d003      	beq.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
        frequency = LSE_VALUE;
 80063ca:	2380      	movs	r3, #128	; 0x80
 80063cc:	021b      	lsls	r3, r3, #8
 80063ce:	627b      	str	r3, [r7, #36]	; 0x24
 80063d0:	e03a      	b.n	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSIRDY)))
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	2380      	movs	r3, #128	; 0x80
 80063d6:	029b      	lsls	r3, r3, #10
 80063d8:	429a      	cmp	r2, r3
 80063da:	d106      	bne.n	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	2202      	movs	r2, #2
 80063e0:	4013      	ands	r3, r2
 80063e2:	d002      	beq.n	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
        frequency = LSI_VALUE;
 80063e4:	4bad      	ldr	r3, [pc, #692]	; (800669c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 80063e6:	627b      	str	r3, [r7, #36]	; 0x24
 80063e8:	e02e      	b.n	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
      else if ((srcclk == RCC_RTCCLKSOURCE_HSE_DIVX) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	23c0      	movs	r3, #192	; 0xc0
 80063ee:	029b      	lsls	r3, r3, #10
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d126      	bne.n	8006442 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80063f4:	4ba8      	ldr	r3, [pc, #672]	; (8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	2380      	movs	r3, #128	; 0x80
 80063fa:	029b      	lsls	r3, r3, #10
 80063fc:	4013      	ands	r3, r2
 80063fe:	d020      	beq.n	8006442 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        clkprediv = __HAL_RCC_GET_RTC_HSE_PRESCALER();
 8006400:	4ba5      	ldr	r3, [pc, #660]	; (8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	23c0      	movs	r3, #192	; 0xc0
 8006406:	039b      	lsls	r3, r3, #14
 8006408:	4013      	ands	r3, r2
 800640a:	61bb      	str	r3, [r7, #24]
        switch (clkprediv)
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	2280      	movs	r2, #128	; 0x80
 8006410:	0392      	lsls	r2, r2, #14
 8006412:	4293      	cmp	r3, r2
 8006414:	d00b      	beq.n	800642e <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 8006416:	22c0      	movs	r2, #192	; 0xc0
 8006418:	0392      	lsls	r2, r2, #14
 800641a:	4293      	cmp	r3, r2
 800641c:	d004      	beq.n	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800641e:	2280      	movs	r2, #128	; 0x80
 8006420:	0352      	lsls	r2, r2, #13
 8006422:	4293      	cmp	r3, r2
 8006424:	d006      	beq.n	8006434 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8006426:	e008      	b.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
            frequency = HSE_VALUE / 16U;
 8006428:	4b9d      	ldr	r3, [pc, #628]	; (80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 800642a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800642c:	e008      	b.n	8006440 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
            frequency = HSE_VALUE / 8U;
 800642e:	4b9d      	ldr	r3, [pc, #628]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8006430:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006432:	e005      	b.n	8006440 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
            frequency = HSE_VALUE / 4U;
 8006434:	4b9c      	ldr	r3, [pc, #624]	; (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8006436:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006438:	e002      	b.n	8006440 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
            frequency = HSE_VALUE / 2U;
 800643a:	4b9c      	ldr	r3, [pc, #624]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
 800643c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800643e:	46c0      	nop			; (mov r8, r8)
      }
 8006440:	e002      	b.n	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
        frequency = 0U;
 8006442:	2300      	movs	r3, #0
 8006444:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006446:	e163      	b.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006448:	e162      	b.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800644a:	4b93      	ldr	r3, [pc, #588]	; (8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800644c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800644e:	2380      	movs	r3, #128	; 0x80
 8006450:	04db      	lsls	r3, r3, #19
 8006452:	4013      	ands	r3, r2
 8006454:	617b      	str	r3, [r7, #20]
        if((srcclk == RCC_USBCLKSOURCE_PLL) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d138      	bne.n	80064ce <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 800645c:	4b8e      	ldr	r3, [pc, #568]	; (8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	2380      	movs	r3, #128	; 0x80
 8006462:	049b      	lsls	r3, r3, #18
 8006464:	4013      	ands	r3, r2
 8006466:	d032      	beq.n	80064ce <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
            pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8006468:	4b8b      	ldr	r3, [pc, #556]	; (8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800646a:	68da      	ldr	r2, [r3, #12]
 800646c:	23f0      	movs	r3, #240	; 0xf0
 800646e:	039b      	lsls	r3, r3, #14
 8006470:	4013      	ands	r3, r2
 8006472:	613b      	str	r3, [r7, #16]
            plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8006474:	4b88      	ldr	r3, [pc, #544]	; (8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006476:	68da      	ldr	r2, [r3, #12]
 8006478:	23c0      	movs	r3, #192	; 0xc0
 800647a:	041b      	lsls	r3, r3, #16
 800647c:	4013      	ands	r3, r2
 800647e:	60fb      	str	r3, [r7, #12]
            pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	0c9b      	lsrs	r3, r3, #18
 8006484:	4a8a      	ldr	r2, [pc, #552]	; (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8006486:	5cd3      	ldrb	r3, [r2, r3]
 8006488:	613b      	str	r3, [r7, #16]
            plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;   
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	0d9b      	lsrs	r3, r3, #22
 800648e:	3301      	adds	r3, #1
 8006490:	60fb      	str	r3, [r7, #12]
            if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)
 8006492:	4b81      	ldr	r3, [pc, #516]	; (8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006494:	68da      	ldr	r2, [r3, #12]
 8006496:	2380      	movs	r3, #128	; 0x80
 8006498:	025b      	lsls	r3, r3, #9
 800649a:	4013      	ands	r3, r2
 800649c:	d10a      	bne.n	80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
                if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 800649e:	4b7e      	ldr	r3, [pc, #504]	; (8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2210      	movs	r2, #16
 80064a4:	4013      	ands	r3, r2
 80064a6:	d002      	beq.n	80064ae <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
                    pllvco =  (HSI_VALUE >> 2U);
 80064a8:	4b80      	ldr	r3, [pc, #512]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
 80064aa:	623b      	str	r3, [r7, #32]
 80064ac:	e004      	b.n	80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
                    pllvco =  HSI_VALUE;
 80064ae:	4b81      	ldr	r3, [pc, #516]	; (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 80064b0:	623b      	str	r3, [r7, #32]
 80064b2:	e001      	b.n	80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
                pllvco = HSE_VALUE;
 80064b4:	4b80      	ldr	r3, [pc, #512]	; (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 80064b6:	623b      	str	r3, [r7, #32]
            pllvco = (pllvco * pllmul);
 80064b8:	6a3b      	ldr	r3, [r7, #32]
 80064ba:	693a      	ldr	r2, [r7, #16]
 80064bc:	4353      	muls	r3, r2
 80064be:	623b      	str	r3, [r7, #32]
            frequency = (pllvco/ plldiv);
 80064c0:	68f9      	ldr	r1, [r7, #12]
 80064c2:	6a38      	ldr	r0, [r7, #32]
 80064c4:	f7f9 fe20 	bl	8000108 <__udivsi3>
 80064c8:	0003      	movs	r3, r0
 80064ca:	627b      	str	r3, [r7, #36]	; 0x24
 80064cc:	e00f      	b.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
        else if((srcclk == RCC_USBCLKSOURCE_HSI48) && (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)))
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	2380      	movs	r3, #128	; 0x80
 80064d2:	04db      	lsls	r3, r3, #19
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d107      	bne.n	80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80064d8:	4b6f      	ldr	r3, [pc, #444]	; (8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	2202      	movs	r2, #2
 80064de:	4013      	ands	r3, r2
 80064e0:	d002      	beq.n	80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
            frequency = HSI48_VALUE;
 80064e2:	4b76      	ldr	r3, [pc, #472]	; (80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 80064e4:	627b      	str	r3, [r7, #36]	; 0x24
 80064e6:	e002      	b.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
            frequency = 0U;
 80064e8:	2300      	movs	r3, #0
 80064ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80064ec:	e110      	b.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80064ee:	e10f      	b.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80064f0:	4b69      	ldr	r3, [pc, #420]	; (8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80064f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064f4:	2203      	movs	r2, #3
 80064f6:	4013      	ands	r3, r2
 80064f8:	617b      	str	r3, [r7, #20]
      if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d104      	bne.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
        frequency = HAL_RCC_GetPCLK2Freq();
 8006500:	f7ff fd60 	bl	8005fc4 <HAL_RCC_GetPCLK2Freq>
 8006504:	0003      	movs	r3, r0
 8006506:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006508:	e102      	b.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      else if ((srcclk == RCC_USART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	2b02      	cmp	r3, #2
 800650e:	d107      	bne.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8006510:	4b61      	ldr	r3, [pc, #388]	; (8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2204      	movs	r2, #4
 8006516:	4013      	ands	r3, r2
 8006518:	d002      	beq.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
        frequency = HSI_VALUE;
 800651a:	4b66      	ldr	r3, [pc, #408]	; (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 800651c:	627b      	str	r3, [r7, #36]	; 0x24
 800651e:	e017      	b.n	8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
      else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	2b01      	cmp	r3, #1
 8006524:	d104      	bne.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        frequency = HAL_RCC_GetSysClockFreq();
 8006526:	f7ff fcaf 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 800652a:	0003      	movs	r3, r0
 800652c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800652e:	e0ef      	b.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      else if ((srcclk == RCC_USART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	2b03      	cmp	r3, #3
 8006534:	d109      	bne.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 8006536:	4b58      	ldr	r3, [pc, #352]	; (8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006538:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800653a:	2380      	movs	r3, #128	; 0x80
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4013      	ands	r3, r2
 8006540:	d003      	beq.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        frequency = LSE_VALUE;
 8006542:	2380      	movs	r3, #128	; 0x80
 8006544:	021b      	lsls	r3, r3, #8
 8006546:	627b      	str	r3, [r7, #36]	; 0x24
 8006548:	e002      	b.n	8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
        frequency = 0U;
 800654a:	2300      	movs	r3, #0
 800654c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800654e:	e0df      	b.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006550:	e0de      	b.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006552:	4b51      	ldr	r3, [pc, #324]	; (8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006556:	220c      	movs	r2, #12
 8006558:	4013      	ands	r3, r2
 800655a:	617b      	str	r3, [r7, #20]
      if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d104      	bne.n	800656c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006562:	f7ff fd19 	bl	8005f98 <HAL_RCC_GetPCLK1Freq>
 8006566:	0003      	movs	r3, r0
 8006568:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800656a:	e0d1      	b.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      else if ((srcclk == RCC_USART2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	2b08      	cmp	r3, #8
 8006570:	d107      	bne.n	8006582 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006572:	4b49      	ldr	r3, [pc, #292]	; (8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2204      	movs	r2, #4
 8006578:	4013      	ands	r3, r2
 800657a:	d002      	beq.n	8006582 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        frequency = HSI_VALUE;
 800657c:	4b4d      	ldr	r3, [pc, #308]	; (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 800657e:	627b      	str	r3, [r7, #36]	; 0x24
 8006580:	e017      	b.n	80065b2 <HAL_RCCEx_GetPeriphCLKFreq+0x26e>
      else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	2b04      	cmp	r3, #4
 8006586:	d104      	bne.n	8006592 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
        frequency = HAL_RCC_GetSysClockFreq();
 8006588:	f7ff fc7e 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 800658c:	0003      	movs	r3, r0
 800658e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006590:	e0be      	b.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      else if ((srcclk == RCC_USART2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	2b0c      	cmp	r3, #12
 8006596:	d109      	bne.n	80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x268>
 8006598:	4b3f      	ldr	r3, [pc, #252]	; (8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800659a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800659c:	2380      	movs	r3, #128	; 0x80
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4013      	ands	r3, r2
 80065a2:	d003      	beq.n	80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = LSE_VALUE;
 80065a4:	2380      	movs	r3, #128	; 0x80
 80065a6:	021b      	lsls	r3, r3, #8
 80065a8:	627b      	str	r3, [r7, #36]	; 0x24
 80065aa:	e002      	b.n	80065b2 <HAL_RCCEx_GetPeriphCLKFreq+0x26e>
        frequency = 0U;
 80065ac:	2300      	movs	r3, #0
 80065ae:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80065b0:	e0ae      	b.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80065b2:	e0ad      	b.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80065b4:	4b38      	ldr	r3, [pc, #224]	; (8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80065b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065b8:	23c0      	movs	r3, #192	; 0xc0
 80065ba:	011b      	lsls	r3, r3, #4
 80065bc:	4013      	ands	r3, r2
 80065be:	617b      	str	r3, [r7, #20]
      if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d104      	bne.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
        frequency = HAL_RCC_GetPCLK1Freq();
 80065c6:	f7ff fce7 	bl	8005f98 <HAL_RCC_GetPCLK1Freq>
 80065ca:	0003      	movs	r3, r0
 80065cc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80065ce:	e09f      	b.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      else if ((srcclk == RCC_LPUART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	2380      	movs	r3, #128	; 0x80
 80065d4:	011b      	lsls	r3, r3, #4
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d107      	bne.n	80065ea <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 80065da:	4b2f      	ldr	r3, [pc, #188]	; (8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2204      	movs	r2, #4
 80065e0:	4013      	ands	r3, r2
 80065e2:	d002      	beq.n	80065ea <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        frequency = HSI_VALUE;
 80065e4:	4b33      	ldr	r3, [pc, #204]	; (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 80065e6:	627b      	str	r3, [r7, #36]	; 0x24
 80065e8:	e01b      	b.n	8006622 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
      else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	2380      	movs	r3, #128	; 0x80
 80065ee:	00db      	lsls	r3, r3, #3
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d104      	bne.n	80065fe <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
        frequency = HAL_RCC_GetSysClockFreq();
 80065f4:	f7ff fc48 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 80065f8:	0003      	movs	r3, r0
 80065fa:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80065fc:	e088      	b.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      else if ((srcclk == RCC_LPUART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	23c0      	movs	r3, #192	; 0xc0
 8006602:	011b      	lsls	r3, r3, #4
 8006604:	429a      	cmp	r2, r3
 8006606:	d109      	bne.n	800661c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 8006608:	4b23      	ldr	r3, [pc, #140]	; (8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800660a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800660c:	2380      	movs	r3, #128	; 0x80
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4013      	ands	r3, r2
 8006612:	d003      	beq.n	800661c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
        frequency = LSE_VALUE;
 8006614:	2380      	movs	r3, #128	; 0x80
 8006616:	021b      	lsls	r3, r3, #8
 8006618:	627b      	str	r3, [r7, #36]	; 0x24
 800661a:	e002      	b.n	8006622 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
        frequency = 0U;
 800661c:	2300      	movs	r3, #0
 800661e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006620:	e076      	b.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006622:	e075      	b.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006624:	4b1c      	ldr	r3, [pc, #112]	; (8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006626:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006628:	23c0      	movs	r3, #192	; 0xc0
 800662a:	019b      	lsls	r3, r3, #6
 800662c:	4013      	ands	r3, r2
 800662e:	617b      	str	r3, [r7, #20]
      if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d104      	bne.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006636:	f7ff fcaf 	bl	8005f98 <HAL_RCC_GetPCLK1Freq>
 800663a:	0003      	movs	r3, r0
 800663c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800663e:	e067      	b.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      else if ((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	2380      	movs	r3, #128	; 0x80
 8006644:	019b      	lsls	r3, r3, #6
 8006646:	429a      	cmp	r2, r3
 8006648:	d107      	bne.n	800665a <HAL_RCCEx_GetPeriphCLKFreq+0x316>
 800664a:	4b13      	ldr	r3, [pc, #76]	; (8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2204      	movs	r2, #4
 8006650:	4013      	ands	r3, r2
 8006652:	d002      	beq.n	800665a <HAL_RCCEx_GetPeriphCLKFreq+0x316>
        frequency = HSI_VALUE;
 8006654:	4b17      	ldr	r3, [pc, #92]	; (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 8006656:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006658:	e05a      	b.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	2380      	movs	r3, #128	; 0x80
 800665e:	015b      	lsls	r3, r3, #5
 8006660:	429a      	cmp	r2, r3
 8006662:	d104      	bne.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
        frequency = HAL_RCC_GetSysClockFreq();
 8006664:	f7ff fc10 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 8006668:	0003      	movs	r3, r0
 800666a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800666c:	e050      	b.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
        frequency = 0U;
 800666e:	2300      	movs	r3, #0
 8006670:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006672:	e04d      	b.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      if (READ_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C2EN))==RCC_APB1ENR_I2C2EN)
 8006674:	4b08      	ldr	r3, [pc, #32]	; (8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006676:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006678:	2380      	movs	r3, #128	; 0x80
 800667a:	03db      	lsls	r3, r3, #15
 800667c:	401a      	ands	r2, r3
 800667e:	2380      	movs	r3, #128	; 0x80
 8006680:	03db      	lsls	r3, r3, #15
 8006682:	429a      	cmp	r2, r3
 8006684:	d104      	bne.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006686:	f7ff fc87 	bl	8005f98 <HAL_RCC_GetPCLK1Freq>
 800668a:	0003      	movs	r3, r0
 800668c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800668e:	e03f      	b.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
        frequency = 0U;
 8006690:	2300      	movs	r3, #0
 8006692:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006694:	e03c      	b.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006696:	46c0      	nop			; (mov r8, r8)
 8006698:	40021000 	.word	0x40021000
 800669c:	00009088 	.word	0x00009088
 80066a0:	0007a120 	.word	0x0007a120
 80066a4:	000f4240 	.word	0x000f4240
 80066a8:	001e8480 	.word	0x001e8480
 80066ac:	003d0900 	.word	0x003d0900
 80066b0:	0800ad1c 	.word	0x0800ad1c
 80066b4:	00f42400 	.word	0x00f42400
 80066b8:	007a1200 	.word	0x007a1200
 80066bc:	02dc6c00 	.word	0x02dc6c00
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80066c0:	4b16      	ldr	r3, [pc, #88]	; (800671c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>)
 80066c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066c4:	23c0      	movs	r3, #192	; 0xc0
 80066c6:	029b      	lsls	r3, r3, #10
 80066c8:	4013      	ands	r3, r2
 80066ca:	617b      	str	r3, [r7, #20]
      if (srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d104      	bne.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        frequency = HAL_RCC_GetPCLK1Freq();
 80066d2:	f7ff fc61 	bl	8005f98 <HAL_RCC_GetPCLK1Freq>
 80066d6:	0003      	movs	r3, r0
 80066d8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80066da:	e018      	b.n	800670e <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80066dc:	697a      	ldr	r2, [r7, #20]
 80066de:	2380      	movs	r3, #128	; 0x80
 80066e0:	029b      	lsls	r3, r3, #10
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d107      	bne.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80066e6:	4b0d      	ldr	r3, [pc, #52]	; (800671c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2204      	movs	r2, #4
 80066ec:	4013      	ands	r3, r2
 80066ee:	d002      	beq.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        frequency = HSI_VALUE;
 80066f0:	4b0b      	ldr	r3, [pc, #44]	; (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>)
 80066f2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80066f4:	e00b      	b.n	800670e <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
      else if (srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	2380      	movs	r3, #128	; 0x80
 80066fa:	025b      	lsls	r3, r3, #9
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d104      	bne.n	800670a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
        frequency = HAL_RCC_GetSysClockFreq();
 8006700:	f7ff fbc2 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 8006704:	0003      	movs	r3, r0
 8006706:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006708:	e001      	b.n	800670e <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
        frequency = 0U;
 800670a:	2300      	movs	r3, #0
 800670c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800670e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return(frequency);
 8006710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006712:	0018      	movs	r0, r3
 8006714:	46bd      	mov	sp, r7
 8006716:	b00a      	add	sp, #40	; 0x28
 8006718:	bd80      	pop	{r7, pc}
 800671a:	46c0      	nop			; (mov r8, r8)
 800671c:	40021000 	.word	0x40021000
 8006720:	00f42400 	.word	0x00f42400

08006724 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d101      	bne.n	8006736 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e074      	b.n	8006820 <HAL_RTC_Init+0xfc>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
  
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2221      	movs	r2, #33	; 0x21
 800673a:	5c9b      	ldrb	r3, [r3, r2]
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b00      	cmp	r3, #0
 8006740:	d107      	bne.n	8006752 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2220      	movs	r2, #32
 8006746:	2100      	movs	r1, #0
 8006748:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	0018      	movs	r0, r3
 800674e:	f003 f81d 	bl	800978c <HAL_RTC_MspInit>
  }

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2221      	movs	r2, #33	; 0x21
 8006756:	2102      	movs	r1, #2
 8006758:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	22ca      	movs	r2, #202	; 0xca
 8006760:	625a      	str	r2, [r3, #36]	; 0x24
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2253      	movs	r2, #83	; 0x53
 8006768:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	0018      	movs	r0, r3
 800676e:	f000 fd20 	bl	80071b2 <RTC_EnterInitMode>
 8006772:	1e03      	subs	r3, r0, #0
 8006774:	d009      	beq.n	800678a <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	22ff      	movs	r2, #255	; 0xff
 800677c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2221      	movs	r2, #33	; 0x21
 8006782:	2104      	movs	r1, #4
 8006784:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e04a      	b.n	8006820 <HAL_RTC_Init+0xfc>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	6812      	ldr	r2, [r2, #0]
 8006792:	6892      	ldr	r2, [r2, #8]
 8006794:	4924      	ldr	r1, [pc, #144]	; (8006828 <HAL_RTC_Init+0x104>)
 8006796:	400a      	ands	r2, r1
 8006798:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	6812      	ldr	r2, [r2, #0]
 80067a2:	6891      	ldr	r1, [r2, #8]
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	6850      	ldr	r0, [r2, #4]
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	6912      	ldr	r2, [r2, #16]
 80067ac:	4310      	orrs	r0, r2
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	6992      	ldr	r2, [r2, #24]
 80067b2:	4302      	orrs	r2, r0
 80067b4:	430a      	orrs	r2, r1
 80067b6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	68d2      	ldr	r2, [r2, #12]
 80067c0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	6812      	ldr	r2, [r2, #0]
 80067ca:	6911      	ldr	r1, [r2, #16]
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	6892      	ldr	r2, [r2, #8]
 80067d0:	0412      	lsls	r2, r2, #16
 80067d2:	430a      	orrs	r2, r1
 80067d4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	6812      	ldr	r2, [r2, #0]
 80067de:	68d2      	ldr	r2, [r2, #12]
 80067e0:	2180      	movs	r1, #128	; 0x80
 80067e2:	438a      	bics	r2, r1
 80067e4:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	6812      	ldr	r2, [r2, #0]
 80067ee:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80067f0:	2103      	movs	r1, #3
 80067f2:	438a      	bics	r2, r1
 80067f4:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	6812      	ldr	r2, [r2, #0]
 80067fe:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	69d0      	ldr	r0, [r2, #28]
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	6952      	ldr	r2, [r2, #20]
 8006808:	4302      	orrs	r2, r0
 800680a:	430a      	orrs	r2, r1
 800680c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	22ff      	movs	r2, #255	; 0xff
 8006814:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2221      	movs	r2, #33	; 0x21
 800681a:	2101      	movs	r1, #1
 800681c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800681e:	2300      	movs	r3, #0
  }
}
 8006820:	0018      	movs	r0, r3
 8006822:	46bd      	mov	sp, r7
 8006824:	b002      	add	sp, #8
 8006826:	bd80      	pop	{r7, pc}
 8006828:	ff8fffbf 	.word	0xff8fffbf

0800682c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800682c:	b590      	push	{r4, r7, lr}
 800682e:	b087      	sub	sp, #28
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006838:	2300      	movs	r3, #0
 800683a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2220      	movs	r2, #32
 8006840:	5c9b      	ldrb	r3, [r3, r2]
 8006842:	2b01      	cmp	r3, #1
 8006844:	d101      	bne.n	800684a <HAL_RTC_SetTime+0x1e>
 8006846:	2302      	movs	r3, #2
 8006848:	e0b5      	b.n	80069b6 <HAL_RTC_SetTime+0x18a>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2220      	movs	r2, #32
 800684e:	2101      	movs	r1, #1
 8006850:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2221      	movs	r2, #33	; 0x21
 8006856:	2102      	movs	r1, #2
 8006858:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d125      	bne.n	80068ac <HAL_RTC_SetTime+0x80>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	2240      	movs	r2, #64	; 0x40
 8006868:	4013      	ands	r3, r2
 800686a:	d102      	bne.n	8006872 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	2200      	movs	r2, #0
 8006870:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	0018      	movs	r0, r3
 8006878:	f000 fcc7 	bl	800720a <RTC_ByteToBcd2>
 800687c:	0003      	movs	r3, r0
 800687e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	785b      	ldrb	r3, [r3, #1]
 8006884:	0018      	movs	r0, r3
 8006886:	f000 fcc0 	bl	800720a <RTC_ByteToBcd2>
 800688a:	0003      	movs	r3, r0
 800688c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800688e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	789b      	ldrb	r3, [r3, #2]
 8006894:	0018      	movs	r0, r3
 8006896:	f000 fcb8 	bl	800720a <RTC_ByteToBcd2>
 800689a:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800689c:	0022      	movs	r2, r4
 800689e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	78db      	ldrb	r3, [r3, #3]
 80068a4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80068a6:	4313      	orrs	r3, r2
 80068a8:	617b      	str	r3, [r7, #20]
 80068aa:	e01f      	b.n	80068ec <HAL_RTC_SetTime+0xc0>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	2240      	movs	r2, #64	; 0x40
 80068b4:	4013      	ands	r3, r2
 80068b6:	d007      	beq.n	80068c8 <HAL_RTC_SetTime+0x9c>
    {
      tmpreg = RTC_Bcd2ToByte(sTime->Hours);
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	0018      	movs	r0, r3
 80068be:	f000 fcc5 	bl	800724c <RTC_Bcd2ToByte>
 80068c2:	0003      	movs	r3, r0
 80068c4:	617b      	str	r3, [r7, #20]
 80068c6:	e002      	b.n	80068ce <HAL_RTC_SetTime+0xa2>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2200      	movs	r2, #0
 80068cc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	785b      	ldrb	r3, [r3, #1]
 80068d8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80068da:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80068dc:	68ba      	ldr	r2, [r7, #8]
 80068de:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80068e0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	78db      	ldrb	r3, [r3, #3]
 80068e6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80068e8:	4313      	orrs	r3, r2
 80068ea:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	22ca      	movs	r2, #202	; 0xca
 80068f2:	625a      	str	r2, [r3, #36]	; 0x24
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2253      	movs	r2, #83	; 0x53
 80068fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	0018      	movs	r0, r3
 8006900:	f000 fc57 	bl	80071b2 <RTC_EnterInitMode>
 8006904:	1e03      	subs	r3, r0, #0
 8006906:	d00d      	beq.n	8006924 <HAL_RTC_SetTime+0xf8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	22ff      	movs	r2, #255	; 0xff
 800690e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2221      	movs	r2, #33	; 0x21
 8006914:	2104      	movs	r1, #4
 8006916:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2220      	movs	r2, #32
 800691c:	2100      	movs	r1, #0
 800691e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e048      	b.n	80069b6 <HAL_RTC_SetTime+0x18a>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	697a      	ldr	r2, [r7, #20]
 800692a:	4925      	ldr	r1, [pc, #148]	; (80069c0 <HAL_RTC_SetTime+0x194>)
 800692c:	400a      	ands	r2, r1
 800692e:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	6812      	ldr	r2, [r2, #0]
 8006938:	6892      	ldr	r2, [r2, #8]
 800693a:	4922      	ldr	r1, [pc, #136]	; (80069c4 <HAL_RTC_SetTime+0x198>)
 800693c:	400a      	ands	r2, r1
 800693e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	6812      	ldr	r2, [r2, #0]
 8006948:	6891      	ldr	r1, [r2, #8]
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	68d0      	ldr	r0, [r2, #12]
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	6912      	ldr	r2, [r2, #16]
 8006952:	4302      	orrs	r2, r0
 8006954:	430a      	orrs	r2, r1
 8006956:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	6812      	ldr	r2, [r2, #0]
 8006960:	68d2      	ldr	r2, [r2, #12]
 8006962:	2180      	movs	r1, #128	; 0x80
 8006964:	438a      	bics	r2, r1
 8006966:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	2220      	movs	r2, #32
 8006970:	4013      	ands	r3, r2
 8006972:	d113      	bne.n	800699c <HAL_RTC_SetTime+0x170>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	0018      	movs	r0, r3
 8006978:	f000 fbf2 	bl	8007160 <HAL_RTC_WaitForSynchro>
 800697c:	1e03      	subs	r3, r0, #0
 800697e:	d00d      	beq.n	800699c <HAL_RTC_SetTime+0x170>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	22ff      	movs	r2, #255	; 0xff
 8006986:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2221      	movs	r2, #33	; 0x21
 800698c:	2104      	movs	r1, #4
 800698e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2220      	movs	r2, #32
 8006994:	2100      	movs	r1, #0
 8006996:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e00c      	b.n	80069b6 <HAL_RTC_SetTime+0x18a>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	22ff      	movs	r2, #255	; 0xff
 80069a2:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2221      	movs	r2, #33	; 0x21
 80069a8:	2101      	movs	r1, #1
 80069aa:	5499      	strb	r1, [r3, r2]

   __HAL_UNLOCK(hrtc); 
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2220      	movs	r2, #32
 80069b0:	2100      	movs	r1, #0
 80069b2:	5499      	strb	r1, [r3, r2]

   return HAL_OK;
 80069b4:	2300      	movs	r3, #0
  }
}
 80069b6:	0018      	movs	r0, r3
 80069b8:	46bd      	mov	sp, r7
 80069ba:	b007      	add	sp, #28
 80069bc:	bd90      	pop	{r4, r7, pc}
 80069be:	46c0      	nop			; (mov r8, r8)
 80069c0:	007f7f7f 	.word	0x007f7f7f
 80069c4:	fffbffff 	.word	0xfffbffff

080069c8 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80069d4:	2300      	movs	r3, #0
 80069d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	045b      	lsls	r3, r3, #17
 80069ea:	0c5a      	lsrs	r2, r3, #17
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	609a      	str	r2, [r3, #8]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a22      	ldr	r2, [pc, #136]	; (8006a80 <HAL_RTC_GetTime+0xb8>)
 80069f8:	4013      	ands	r3, r2
 80069fa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	0c1b      	lsrs	r3, r3, #16
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	223f      	movs	r2, #63	; 0x3f
 8006a04:	4013      	ands	r3, r2
 8006a06:	b2da      	uxtb	r2, r3
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	0a1b      	lsrs	r3, r3, #8
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	227f      	movs	r2, #127	; 0x7f
 8006a14:	4013      	ands	r3, r2
 8006a16:	b2da      	uxtb	r2, r3
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	227f      	movs	r2, #127	; 0x7f
 8006a22:	4013      	ands	r3, r2
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	0c1b      	lsrs	r3, r3, #16
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	2240      	movs	r2, #64	; 0x40
 8006a32:	4013      	ands	r3, r2
 8006a34:	b2da      	uxtb	r2, r3
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d11a      	bne.n	8006a76 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	0018      	movs	r0, r3
 8006a46:	f000 fc01 	bl	800724c <RTC_Bcd2ToByte>
 8006a4a:	0003      	movs	r3, r0
 8006a4c:	001a      	movs	r2, r3
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	785b      	ldrb	r3, [r3, #1]
 8006a56:	0018      	movs	r0, r3
 8006a58:	f000 fbf8 	bl	800724c <RTC_Bcd2ToByte>
 8006a5c:	0003      	movs	r3, r0
 8006a5e:	001a      	movs	r2, r3
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	789b      	ldrb	r3, [r3, #2]
 8006a68:	0018      	movs	r0, r3
 8006a6a:	f000 fbef 	bl	800724c <RTC_Bcd2ToByte>
 8006a6e:	0003      	movs	r3, r0
 8006a70:	001a      	movs	r2, r3
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	0018      	movs	r0, r3
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	b006      	add	sp, #24
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	007f7f7f 	.word	0x007f7f7f

08006a84 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006a84:	b590      	push	{r4, r7, lr}
 8006a86:	b087      	sub	sp, #28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006a90:	2300      	movs	r3, #0
 8006a92:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2220      	movs	r2, #32
 8006a98:	5c9b      	ldrb	r3, [r3, r2]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d101      	bne.n	8006aa2 <HAL_RTC_SetDate+0x1e>
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	e0a7      	b.n	8006bf2 <HAL_RTC_SetDate+0x16e>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	2101      	movs	r1, #1
 8006aa8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2221      	movs	r2, #33	; 0x21
 8006aae:	2102      	movs	r1, #2
 8006ab0:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d10e      	bne.n	8006ad6 <HAL_RTC_SetDate+0x52>
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	785b      	ldrb	r3, [r3, #1]
 8006abc:	001a      	movs	r2, r3
 8006abe:	2310      	movs	r3, #16
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	d008      	beq.n	8006ad6 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	785b      	ldrb	r3, [r3, #1]
 8006ac8:	2210      	movs	r2, #16
 8006aca:	4393      	bics	r3, r2
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	330a      	adds	r3, #10
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d11c      	bne.n	8006b16 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	78db      	ldrb	r3, [r3, #3]
 8006ae0:	0018      	movs	r0, r3
 8006ae2:	f000 fb92 	bl	800720a <RTC_ByteToBcd2>
 8006ae6:	0003      	movs	r3, r0
 8006ae8:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	785b      	ldrb	r3, [r3, #1]
 8006aee:	0018      	movs	r0, r3
 8006af0:	f000 fb8b 	bl	800720a <RTC_ByteToBcd2>
 8006af4:	0003      	movs	r3, r0
 8006af6:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006af8:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	789b      	ldrb	r3, [r3, #2]
 8006afe:	0018      	movs	r0, r3
 8006b00:	f000 fb83 	bl	800720a <RTC_ByteToBcd2>
 8006b04:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006b06:	0022      	movs	r2, r4
 8006b08:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006b10:	4313      	orrs	r3, r2
 8006b12:	617b      	str	r3, [r7, #20]
 8006b14:	e01c      	b.n	8006b50 <HAL_RTC_SetDate+0xcc>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	785b      	ldrb	r3, [r3, #1]
 8006b1a:	0018      	movs	r0, r3
 8006b1c:	f000 fb96 	bl	800724c <RTC_Bcd2ToByte>
 8006b20:	0003      	movs	r3, r0
 8006b22:	617b      	str	r3, [r7, #20]
    assert_param(IS_RTC_MONTH(datetmpreg));
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	789b      	ldrb	r3, [r3, #2]
 8006b28:	0018      	movs	r0, r3
 8006b2a:	f000 fb8f 	bl	800724c <RTC_Bcd2ToByte>
 8006b2e:	0003      	movs	r3, r0
 8006b30:	617b      	str	r3, [r7, #20]
    assert_param(IS_RTC_DATE(datetmpreg));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	78db      	ldrb	r3, [r3, #3]
 8006b36:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	785b      	ldrb	r3, [r3, #1]
 8006b3c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006b3e:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006b40:	68ba      	ldr	r2, [r7, #8]
 8006b42:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8006b44:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	22ca      	movs	r2, #202	; 0xca
 8006b56:	625a      	str	r2, [r3, #36]	; 0x24
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2253      	movs	r2, #83	; 0x53
 8006b5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	0018      	movs	r0, r3
 8006b64:	f000 fb25 	bl	80071b2 <RTC_EnterInitMode>
 8006b68:	1e03      	subs	r3, r0, #0
 8006b6a:	d00d      	beq.n	8006b88 <HAL_RTC_SetDate+0x104>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	22ff      	movs	r2, #255	; 0xff
 8006b72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2221      	movs	r2, #33	; 0x21
 8006b78:	2104      	movs	r1, #4
 8006b7a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2220      	movs	r2, #32
 8006b80:	2100      	movs	r1, #0
 8006b82:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e034      	b.n	8006bf2 <HAL_RTC_SetDate+0x16e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	697a      	ldr	r2, [r7, #20]
 8006b8e:	491b      	ldr	r1, [pc, #108]	; (8006bfc <HAL_RTC_SetDate+0x178>)
 8006b90:	400a      	ands	r2, r1
 8006b92:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	6812      	ldr	r2, [r2, #0]
 8006b9c:	68d2      	ldr	r2, [r2, #12]
 8006b9e:	2180      	movs	r1, #128	; 0x80
 8006ba0:	438a      	bics	r2, r1
 8006ba2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	2220      	movs	r2, #32
 8006bac:	4013      	ands	r3, r2
 8006bae:	d113      	bne.n	8006bd8 <HAL_RTC_SetDate+0x154>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	0018      	movs	r0, r3
 8006bb4:	f000 fad4 	bl	8007160 <HAL_RTC_WaitForSynchro>
 8006bb8:	1e03      	subs	r3, r0, #0
 8006bba:	d00d      	beq.n	8006bd8 <HAL_RTC_SetDate+0x154>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	22ff      	movs	r2, #255	; 0xff
 8006bc2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2221      	movs	r2, #33	; 0x21
 8006bc8:	2104      	movs	r1, #4
 8006bca:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2220      	movs	r2, #32
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e00c      	b.n	8006bf2 <HAL_RTC_SetDate+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	22ff      	movs	r2, #255	; 0xff
 8006bde:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2221      	movs	r2, #33	; 0x21
 8006be4:	2101      	movs	r1, #1
 8006be6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2220      	movs	r2, #32
 8006bec:	2100      	movs	r1, #0
 8006bee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
  }
}
 8006bf2:	0018      	movs	r0, r3
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	b007      	add	sp, #28
 8006bf8:	bd90      	pop	{r4, r7, pc}
 8006bfa:	46c0      	nop			; (mov r8, r8)
 8006bfc:	00ffff3f 	.word	0x00ffff3f

08006c00 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b086      	sub	sp, #24
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	4a21      	ldr	r2, [pc, #132]	; (8006c9c <HAL_RTC_GetDate+0x9c>)
 8006c18:	4013      	ands	r3, r2
 8006c1a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	0c1b      	lsrs	r3, r3, #16
 8006c20:	b2da      	uxtb	r2, r3
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	0a1b      	lsrs	r3, r3, #8
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	221f      	movs	r2, #31
 8006c2e:	4013      	ands	r3, r2
 8006c30:	b2da      	uxtb	r2, r3
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	223f      	movs	r2, #63	; 0x3f
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	b2da      	uxtb	r2, r3
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	0b5b      	lsrs	r3, r3, #13
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2207      	movs	r2, #7
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	b2da      	uxtb	r2, r3
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d11a      	bne.n	8006c90 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	78db      	ldrb	r3, [r3, #3]
 8006c5e:	0018      	movs	r0, r3
 8006c60:	f000 faf4 	bl	800724c <RTC_Bcd2ToByte>
 8006c64:	0003      	movs	r3, r0
 8006c66:	001a      	movs	r2, r3
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	785b      	ldrb	r3, [r3, #1]
 8006c70:	0018      	movs	r0, r3
 8006c72:	f000 faeb 	bl	800724c <RTC_Bcd2ToByte>
 8006c76:	0003      	movs	r3, r0
 8006c78:	001a      	movs	r2, r3
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	789b      	ldrb	r3, [r3, #2]
 8006c82:	0018      	movs	r0, r3
 8006c84:	f000 fae2 	bl	800724c <RTC_Bcd2ToByte>
 8006c88:	0003      	movs	r3, r0
 8006c8a:	001a      	movs	r2, r3
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	0018      	movs	r0, r3
 8006c94:	46bd      	mov	sp, r7
 8006c96:	b006      	add	sp, #24
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	46c0      	nop			; (mov r8, r8)
 8006c9c:	00ffff3f 	.word	0x00ffff3f

08006ca0 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).   
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006ca0:	b590      	push	{r4, r7, lr}
 8006ca2:	b089      	sub	sp, #36	; 0x24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8006cac:	2300      	movs	r3, #0
 8006cae:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	61fb      	str	r3, [r7, #28]
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2220      	movs	r2, #32
 8006cbc:	5c9b      	ldrb	r3, [r3, r2]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d101      	bne.n	8006cc6 <HAL_RTC_SetAlarm_IT+0x26>
 8006cc2:	2302      	movs	r3, #2
 8006cc4:	e14d      	b.n	8006f62 <HAL_RTC_SetAlarm_IT+0x2c2>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2220      	movs	r2, #32
 8006cca:	2101      	movs	r1, #1
 8006ccc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2221      	movs	r2, #33	; 0x21
 8006cd2:	2102      	movs	r1, #2
 8006cd4:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d136      	bne.n	8006d4a <HAL_RTC_SetAlarm_IT+0xaa>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	2240      	movs	r2, #64	; 0x40
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	d102      	bne.n	8006cee <HAL_RTC_SetAlarm_IT+0x4e>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	2200      	movs	r2, #0
 8006cec:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	0018      	movs	r0, r3
 8006cf4:	f000 fa89 	bl	800720a <RTC_ByteToBcd2>
 8006cf8:	0003      	movs	r3, r0
 8006cfa:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	785b      	ldrb	r3, [r3, #1]
 8006d00:	0018      	movs	r0, r3
 8006d02:	f000 fa82 	bl	800720a <RTC_ByteToBcd2>
 8006d06:	0003      	movs	r3, r0
 8006d08:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006d0a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	789b      	ldrb	r3, [r3, #2]
 8006d10:	0018      	movs	r0, r3
 8006d12:	f000 fa7a 	bl	800720a <RTC_ByteToBcd2>
 8006d16:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006d18:	0022      	movs	r2, r4
 8006d1a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	78db      	ldrb	r3, [r3, #3]
 8006d20:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006d22:	431a      	orrs	r2, r3
 8006d24:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	2220      	movs	r2, #32
 8006d2a:	5c9b      	ldrb	r3, [r3, r2]
 8006d2c:	0018      	movs	r0, r3
 8006d2e:	f000 fa6c 	bl	800720a <RTC_ByteToBcd2>
 8006d32:	0003      	movs	r3, r0
 8006d34:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006d36:	0022      	movs	r2, r4
 8006d38:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006d3e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006d44:	4313      	orrs	r3, r2
 8006d46:	61fb      	str	r3, [r7, #28]
 8006d48:	e03f      	b.n	8006dca <HAL_RTC_SetAlarm_IT+0x12a>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	2240      	movs	r2, #64	; 0x40
 8006d52:	4013      	ands	r3, r2
 8006d54:	d007      	beq.n	8006d66 <HAL_RTC_SetAlarm_IT+0xc6>
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	0018      	movs	r0, r3
 8006d5c:	f000 fa76 	bl	800724c <RTC_Bcd2ToByte>
 8006d60:	0003      	movs	r3, r0
 8006d62:	61fb      	str	r3, [r7, #28]
 8006d64:	e002      	b.n	8006d6c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    } 
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	70da      	strb	r2, [r3, #3]
    }

    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
    
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	69db      	ldr	r3, [r3, #28]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d108      	bne.n	8006d86 <HAL_RTC_SetAlarm_IT+0xe6>
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	2220      	movs	r2, #32
 8006d78:	5c9b      	ldrb	r3, [r3, r2]
 8006d7a:	0018      	movs	r0, r3
 8006d7c:	f000 fa66 	bl	800724c <RTC_Bcd2ToByte>
 8006d80:	0003      	movs	r3, r0
 8006d82:	61fb      	str	r3, [r7, #28]
 8006d84:	e007      	b.n	8006d96 <HAL_RTC_SetAlarm_IT+0xf6>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));
    }
    else
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	2220      	movs	r2, #32
 8006d8a:	5c9b      	ldrb	r3, [r3, r2]
 8006d8c:	0018      	movs	r0, r3
 8006d8e:	f000 fa5d 	bl	800724c <RTC_Bcd2ToByte>
 8006d92:	0003      	movs	r3, r0
 8006d94:	61fb      	str	r3, [r7, #28]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	785b      	ldrb	r3, [r3, #1]
 8006da0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006da2:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006da4:	68ba      	ldr	r2, [r7, #8]
 8006da6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006da8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	78db      	ldrb	r3, [r3, #3]
 8006dae:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006db0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	2120      	movs	r1, #32
 8006db6:	5c5b      	ldrb	r3, [r3, r1]
 8006db8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006dba:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006dc0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));     
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	685a      	ldr	r2, [r3, #4]
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	699b      	ldr	r3, [r3, #24]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	22ca      	movs	r2, #202	; 0xca
 8006ddc:	625a      	str	r2, [r3, #36]	; 0x24
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2253      	movs	r2, #83	; 0x53
 8006de4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006dea:	2380      	movs	r3, #128	; 0x80
 8006dec:	005b      	lsls	r3, r3, #1
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d14e      	bne.n	8006e90 <HAL_RTC_SetAlarm_IT+0x1f0>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	6812      	ldr	r2, [r2, #0]
 8006dfa:	6892      	ldr	r2, [r2, #8]
 8006dfc:	495b      	ldr	r1, [pc, #364]	; (8006f6c <HAL_RTC_SetAlarm_IT+0x2cc>)
 8006dfe:	400a      	ands	r2, r1
 8006e00:	609a      	str	r2, [r3, #8]
    
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	6812      	ldr	r2, [r2, #0]
 8006e0a:	68d2      	ldr	r2, [r2, #12]
 8006e0c:	21ff      	movs	r1, #255	; 0xff
 8006e0e:	400a      	ands	r2, r1
 8006e10:	4957      	ldr	r1, [pc, #348]	; (8006f70 <HAL_RTC_SetAlarm_IT+0x2d0>)
 8006e12:	430a      	orrs	r2, r1
 8006e14:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006e16:	f7fd ff1f 	bl	8004c58 <HAL_GetTick>
 8006e1a:	0003      	movs	r3, r0
 8006e1c:	61bb      	str	r3, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8006e1e:	e016      	b.n	8006e4e <HAL_RTC_SetAlarm_IT+0x1ae>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006e20:	f7fd ff1a 	bl	8004c58 <HAL_GetTick>
 8006e24:	0002      	movs	r2, r0
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	1ad2      	subs	r2, r2, r3
 8006e2a:	23fa      	movs	r3, #250	; 0xfa
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d90d      	bls.n	8006e4e <HAL_RTC_SetAlarm_IT+0x1ae>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	22ff      	movs	r2, #255	; 0xff
 8006e38:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2221      	movs	r2, #33	; 0x21
 8006e3e:	2103      	movs	r1, #3
 8006e40:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2220      	movs	r2, #32
 8006e46:	2100      	movs	r1, #0
 8006e48:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e089      	b.n	8006f62 <HAL_RTC_SetAlarm_IT+0x2c2>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	2201      	movs	r2, #1
 8006e56:	4013      	ands	r3, r2
 8006e58:	d0e2      	beq.n	8006e20 <HAL_RTC_SetAlarm_IT+0x180>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	69fa      	ldr	r2, [r7, #28]
 8006e60:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	6812      	ldr	r2, [r2, #0]
 8006e72:	6892      	ldr	r2, [r2, #8]
 8006e74:	2180      	movs	r1, #128	; 0x80
 8006e76:	0049      	lsls	r1, r1, #1
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	6812      	ldr	r2, [r2, #0]
 8006e84:	6892      	ldr	r2, [r2, #8]
 8006e86:	2180      	movs	r1, #128	; 0x80
 8006e88:	0149      	lsls	r1, r1, #5
 8006e8a:	430a      	orrs	r2, r1
 8006e8c:	609a      	str	r2, [r3, #8]
 8006e8e:	e04d      	b.n	8006f2c <HAL_RTC_SetAlarm_IT+0x28c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	6812      	ldr	r2, [r2, #0]
 8006e98:	6892      	ldr	r2, [r2, #8]
 8006e9a:	4936      	ldr	r1, [pc, #216]	; (8006f74 <HAL_RTC_SetAlarm_IT+0x2d4>)
 8006e9c:	400a      	ands	r2, r1
 8006e9e:	609a      	str	r2, [r3, #8]
    
    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	6812      	ldr	r2, [r2, #0]
 8006ea8:	68d2      	ldr	r2, [r2, #12]
 8006eaa:	21ff      	movs	r1, #255	; 0xff
 8006eac:	400a      	ands	r2, r1
 8006eae:	4932      	ldr	r1, [pc, #200]	; (8006f78 <HAL_RTC_SetAlarm_IT+0x2d8>)
 8006eb0:	430a      	orrs	r2, r1
 8006eb2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006eb4:	f7fd fed0 	bl	8004c58 <HAL_GetTick>
 8006eb8:	0003      	movs	r3, r0
 8006eba:	61bb      	str	r3, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8006ebc:	e016      	b.n	8006eec <HAL_RTC_SetAlarm_IT+0x24c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006ebe:	f7fd fecb 	bl	8004c58 <HAL_GetTick>
 8006ec2:	0002      	movs	r2, r0
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	1ad2      	subs	r2, r2, r3
 8006ec8:	23fa      	movs	r3, #250	; 0xfa
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d90d      	bls.n	8006eec <HAL_RTC_SetAlarm_IT+0x24c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	22ff      	movs	r2, #255	; 0xff
 8006ed6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2221      	movs	r2, #33	; 0x21
 8006edc:	2103      	movs	r1, #3
 8006ede:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2220      	movs	r2, #32
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e03a      	b.n	8006f62 <HAL_RTC_SetAlarm_IT+0x2c2>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	2202      	movs	r2, #2
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	d0e2      	beq.n	8006ebe <HAL_RTC_SetAlarm_IT+0x21e>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	69fa      	ldr	r2, [r7, #28]
 8006efe:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	6812      	ldr	r2, [r2, #0]
 8006f10:	6892      	ldr	r2, [r2, #8]
 8006f12:	2180      	movs	r1, #128	; 0x80
 8006f14:	0089      	lsls	r1, r1, #2
 8006f16:	430a      	orrs	r2, r1
 8006f18:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	6812      	ldr	r2, [r2, #0]
 8006f22:	6892      	ldr	r2, [r2, #8]
 8006f24:	2180      	movs	r1, #128	; 0x80
 8006f26:	0189      	lsls	r1, r1, #6
 8006f28:	430a      	orrs	r2, r1
 8006f2a:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006f2c:	4b13      	ldr	r3, [pc, #76]	; (8006f7c <HAL_RTC_SetAlarm_IT+0x2dc>)
 8006f2e:	4a13      	ldr	r2, [pc, #76]	; (8006f7c <HAL_RTC_SetAlarm_IT+0x2dc>)
 8006f30:	6812      	ldr	r2, [r2, #0]
 8006f32:	2180      	movs	r1, #128	; 0x80
 8006f34:	0289      	lsls	r1, r1, #10
 8006f36:	430a      	orrs	r2, r1
 8006f38:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006f3a:	4b10      	ldr	r3, [pc, #64]	; (8006f7c <HAL_RTC_SetAlarm_IT+0x2dc>)
 8006f3c:	4a0f      	ldr	r2, [pc, #60]	; (8006f7c <HAL_RTC_SetAlarm_IT+0x2dc>)
 8006f3e:	6892      	ldr	r2, [r2, #8]
 8006f40:	2180      	movs	r1, #128	; 0x80
 8006f42:	0289      	lsls	r1, r1, #10
 8006f44:	430a      	orrs	r2, r1
 8006f46:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	22ff      	movs	r2, #255	; 0xff
 8006f4e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY; 
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2221      	movs	r2, #33	; 0x21
 8006f54:	2101      	movs	r1, #1
 8006f56:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2220      	movs	r2, #32
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	0018      	movs	r0, r3
 8006f64:	46bd      	mov	sp, r7
 8006f66:	b009      	add	sp, #36	; 0x24
 8006f68:	bd90      	pop	{r4, r7, pc}
 8006f6a:	46c0      	nop			; (mov r8, r8)
 8006f6c:	fffffeff 	.word	0xfffffeff
 8006f70:	fffffe7f 	.word	0xfffffe7f
 8006f74:	fffffdff 	.word	0xfffffdff
 8006f78:	fffffd7f 	.word	0xfffffd7f
 8006f7c:	40010400 	.word	0x40010400

08006f80 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2220      	movs	r2, #32
 8006f92:	5c9b      	ldrb	r3, [r3, r2]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d101      	bne.n	8006f9c <HAL_RTC_DeactivateAlarm+0x1c>
 8006f98:	2302      	movs	r3, #2
 8006f9a:	e086      	b.n	80070aa <HAL_RTC_DeactivateAlarm+0x12a>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2220      	movs	r2, #32
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2221      	movs	r2, #33	; 0x21
 8006fa8:	2102      	movs	r1, #2
 8006faa:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	22ca      	movs	r2, #202	; 0xca
 8006fb2:	625a      	str	r2, [r3, #36]	; 0x24
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2253      	movs	r2, #83	; 0x53
 8006fba:	625a      	str	r2, [r3, #36]	; 0x24

  if(Alarm == RTC_ALARM_A)
 8006fbc:	683a      	ldr	r2, [r7, #0]
 8006fbe:	2380      	movs	r3, #128	; 0x80
 8006fc0:	005b      	lsls	r3, r3, #1
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d132      	bne.n	800702c <HAL_RTC_DeactivateAlarm+0xac>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	6812      	ldr	r2, [r2, #0]
 8006fce:	6892      	ldr	r2, [r2, #8]
 8006fd0:	4938      	ldr	r1, [pc, #224]	; (80070b4 <HAL_RTC_DeactivateAlarm+0x134>)
 8006fd2:	400a      	ands	r2, r1
 8006fd4:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	6812      	ldr	r2, [r2, #0]
 8006fde:	6892      	ldr	r2, [r2, #8]
 8006fe0:	4935      	ldr	r1, [pc, #212]	; (80070b8 <HAL_RTC_DeactivateAlarm+0x138>)
 8006fe2:	400a      	ands	r2, r1
 8006fe4:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8006fe6:	f7fd fe37 	bl	8004c58 <HAL_GetTick>
 8006fea:	0003      	movs	r3, r0
 8006fec:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8006fee:	e016      	b.n	800701e <HAL_RTC_DeactivateAlarm+0x9e>
    {
      if( (HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8006ff0:	f7fd fe32 	bl	8004c58 <HAL_GetTick>
 8006ff4:	0002      	movs	r2, r0
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	1ad2      	subs	r2, r2, r3
 8006ffa:	23fa      	movs	r3, #250	; 0xfa
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d90d      	bls.n	800701e <HAL_RTC_DeactivateAlarm+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	22ff      	movs	r2, #255	; 0xff
 8007008:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2221      	movs	r2, #33	; 0x21
 800700e:	2103      	movs	r1, #3
 8007010:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2220      	movs	r2, #32
 8007016:	2100      	movs	r1, #0
 8007018:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e045      	b.n	80070aa <HAL_RTC_DeactivateAlarm+0x12a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	2201      	movs	r2, #1
 8007026:	4013      	ands	r3, r2
 8007028:	d0e2      	beq.n	8006ff0 <HAL_RTC_DeactivateAlarm+0x70>
 800702a:	e031      	b.n	8007090 <HAL_RTC_DeactivateAlarm+0x110>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	6812      	ldr	r2, [r2, #0]
 8007034:	6892      	ldr	r2, [r2, #8]
 8007036:	4921      	ldr	r1, [pc, #132]	; (80070bc <HAL_RTC_DeactivateAlarm+0x13c>)
 8007038:	400a      	ands	r2, r1
 800703a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	6812      	ldr	r2, [r2, #0]
 8007044:	6892      	ldr	r2, [r2, #8]
 8007046:	491e      	ldr	r1, [pc, #120]	; (80070c0 <HAL_RTC_DeactivateAlarm+0x140>)
 8007048:	400a      	ands	r2, r1
 800704a:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800704c:	f7fd fe04 	bl	8004c58 <HAL_GetTick>
 8007050:	0003      	movs	r3, r0
 8007052:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007054:	e016      	b.n	8007084 <HAL_RTC_DeactivateAlarm+0x104>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007056:	f7fd fdff 	bl	8004c58 <HAL_GetTick>
 800705a:	0002      	movs	r2, r0
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	1ad2      	subs	r2, r2, r3
 8007060:	23fa      	movs	r3, #250	; 0xfa
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	429a      	cmp	r2, r3
 8007066:	d90d      	bls.n	8007084 <HAL_RTC_DeactivateAlarm+0x104>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	22ff      	movs	r2, #255	; 0xff
 800706e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2221      	movs	r2, #33	; 0x21
 8007074:	2103      	movs	r1, #3
 8007076:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2220      	movs	r2, #32
 800707c:	2100      	movs	r1, #0
 800707e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007080:	2303      	movs	r3, #3
 8007082:	e012      	b.n	80070aa <HAL_RTC_DeactivateAlarm+0x12a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	2202      	movs	r2, #2
 800708c:	4013      	ands	r3, r2
 800708e:	d0e2      	beq.n	8007056 <HAL_RTC_DeactivateAlarm+0xd6>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	22ff      	movs	r2, #255	; 0xff
 8007096:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2221      	movs	r2, #33	; 0x21
 800709c:	2101      	movs	r1, #1
 800709e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2220      	movs	r2, #32
 80070a4:	2100      	movs	r1, #0
 80070a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK; 
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	0018      	movs	r0, r3
 80070ac:	46bd      	mov	sp, r7
 80070ae:	b004      	add	sp, #16
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	46c0      	nop			; (mov r8, r8)
 80070b4:	fffffeff 	.word	0xfffffeff
 80070b8:	ffffefff 	.word	0xffffefff
 80070bc:	fffffdff 	.word	0xfffffdff
 80070c0:	ffffdfff 	.word	0xffffdfff

080070c4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	689a      	ldr	r2, [r3, #8]
 80070d2:	2380      	movs	r3, #128	; 0x80
 80070d4:	015b      	lsls	r3, r3, #5
 80070d6:	4013      	ands	r3, r2
 80070d8:	d014      	beq.n	8007104 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68da      	ldr	r2, [r3, #12]
 80070e0:	2380      	movs	r3, #128	; 0x80
 80070e2:	005b      	lsls	r3, r3, #1
 80070e4:	4013      	ands	r3, r2
 80070e6:	d00d      	beq.n	8007104 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	0018      	movs	r0, r3
 80070ec:	f002 fb90 	bl	8009810 <HAL_RTC_AlarmAEventCallback>

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	6812      	ldr	r2, [r2, #0]
 80070f8:	68d2      	ldr	r2, [r2, #12]
 80070fa:	21ff      	movs	r1, #255	; 0xff
 80070fc:	400a      	ands	r2, r1
 80070fe:	4915      	ldr	r1, [pc, #84]	; (8007154 <HAL_RTC_AlarmIRQHandler+0x90>)
 8007100:	430a      	orrs	r2, r1
 8007102:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != RESET)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	689a      	ldr	r2, [r3, #8]
 800710a:	2380      	movs	r3, #128	; 0x80
 800710c:	019b      	lsls	r3, r3, #6
 800710e:	4013      	ands	r3, r2
 8007110:	d014      	beq.n	800713c <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68da      	ldr	r2, [r3, #12]
 8007118:	2380      	movs	r3, #128	; 0x80
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	4013      	ands	r3, r2
 800711e:	d00d      	beq.n	800713c <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	0018      	movs	r0, r3
 8007124:	f000 f8e5 	bl	80072f2 <HAL_RTCEx_AlarmBEventCallback>

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	6812      	ldr	r2, [r2, #0]
 8007130:	68d2      	ldr	r2, [r2, #12]
 8007132:	21ff      	movs	r1, #255	; 0xff
 8007134:	400a      	ands	r2, r1
 8007136:	4908      	ldr	r1, [pc, #32]	; (8007158 <HAL_RTC_AlarmIRQHandler+0x94>)
 8007138:	430a      	orrs	r2, r1
 800713a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800713c:	4b07      	ldr	r3, [pc, #28]	; (800715c <HAL_RTC_AlarmIRQHandler+0x98>)
 800713e:	2280      	movs	r2, #128	; 0x80
 8007140:	0292      	lsls	r2, r2, #10
 8007142:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2221      	movs	r2, #33	; 0x21
 8007148:	2101      	movs	r1, #1
 800714a:	5499      	strb	r1, [r3, r2]
}
 800714c:	46c0      	nop			; (mov r8, r8)
 800714e:	46bd      	mov	sp, r7
 8007150:	b002      	add	sp, #8
 8007152:	bd80      	pop	{r7, pc}
 8007154:	fffffe7f 	.word	0xfffffe7f
 8007158:	fffffd7f 	.word	0xfffffd7f
 800715c:	40010400 	.word	0x40010400

08007160 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007168:	2300      	movs	r3, #0
 800716a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	6812      	ldr	r2, [r2, #0]
 8007174:	68d2      	ldr	r2, [r2, #12]
 8007176:	21a0      	movs	r1, #160	; 0xa0
 8007178:	438a      	bics	r2, r1
 800717a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800717c:	f7fd fd6c 	bl	8004c58 <HAL_GetTick>
 8007180:	0003      	movs	r3, r0
 8007182:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007184:	e00a      	b.n	800719c <HAL_RTC_WaitForSynchro+0x3c>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007186:	f7fd fd67 	bl	8004c58 <HAL_GetTick>
 800718a:	0002      	movs	r2, r0
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	1ad2      	subs	r2, r2, r3
 8007190:	23fa      	movs	r3, #250	; 0xfa
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	429a      	cmp	r2, r3
 8007196:	d901      	bls.n	800719c <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e006      	b.n	80071aa <HAL_RTC_WaitForSynchro+0x4a>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	2220      	movs	r2, #32
 80071a4:	4013      	ands	r3, r2
 80071a6:	d0ee      	beq.n	8007186 <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	0018      	movs	r0, r3
 80071ac:	46bd      	mov	sp, r7
 80071ae:	b004      	add	sp, #16
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b084      	sub	sp, #16
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80071ba:	2300      	movs	r3, #0
 80071bc:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	2240      	movs	r2, #64	; 0x40
 80071c6:	4013      	ands	r3, r2
 80071c8:	d11a      	bne.n	8007200 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2201      	movs	r2, #1
 80071d0:	4252      	negs	r2, r2
 80071d2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80071d4:	f7fd fd40 	bl	8004c58 <HAL_GetTick>
 80071d8:	0003      	movs	r3, r0
 80071da:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80071dc:	e00a      	b.n	80071f4 <RTC_EnterInitMode+0x42>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80071de:	f7fd fd3b 	bl	8004c58 <HAL_GetTick>
 80071e2:	0002      	movs	r2, r0
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	1ad2      	subs	r2, r2, r3
 80071e8:	23fa      	movs	r3, #250	; 0xfa
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d901      	bls.n	80071f4 <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e006      	b.n	8007202 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	2240      	movs	r2, #64	; 0x40
 80071fc:	4013      	ands	r3, r2
 80071fe:	d0ee      	beq.n	80071de <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007200:	2300      	movs	r3, #0
}
 8007202:	0018      	movs	r0, r3
 8007204:	46bd      	mov	sp, r7
 8007206:	b004      	add	sp, #16
 8007208:	bd80      	pop	{r7, pc}

0800720a <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b084      	sub	sp, #16
 800720e:	af00      	add	r7, sp, #0
 8007210:	0002      	movs	r2, r0
 8007212:	1dfb      	adds	r3, r7, #7
 8007214:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8007216:	2300      	movs	r3, #0
 8007218:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800721a:	e007      	b.n	800722c <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	3301      	adds	r3, #1
 8007220:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8007222:	1dfb      	adds	r3, r7, #7
 8007224:	1dfa      	adds	r2, r7, #7
 8007226:	7812      	ldrb	r2, [r2, #0]
 8007228:	3a0a      	subs	r2, #10
 800722a:	701a      	strb	r2, [r3, #0]
  while(Value >= 10U)
 800722c:	1dfb      	adds	r3, r7, #7
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	2b09      	cmp	r3, #9
 8007232:	d8f3      	bhi.n	800721c <RTC_ByteToBcd2+0x12>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	b2db      	uxtb	r3, r3
 8007238:	011b      	lsls	r3, r3, #4
 800723a:	b2da      	uxtb	r2, r3
 800723c:	1dfb      	adds	r3, r7, #7
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	4313      	orrs	r3, r2
 8007242:	b2db      	uxtb	r3, r3
}
 8007244:	0018      	movs	r0, r3
 8007246:	46bd      	mov	sp, r7
 8007248:	b004      	add	sp, #16
 800724a:	bd80      	pop	{r7, pc}

0800724c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	0002      	movs	r2, r0
 8007254:	1dfb      	adds	r3, r7, #7
 8007256:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0U;
 8007258:	2300      	movs	r3, #0
 800725a:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 800725c:	1dfb      	adds	r3, r7, #7
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	091b      	lsrs	r3, r3, #4
 8007262:	b2db      	uxtb	r3, r3
 8007264:	001a      	movs	r2, r3
 8007266:	0013      	movs	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	189b      	adds	r3, r3, r2
 800726c:	005b      	lsls	r3, r3, #1
 800726e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8007270:	1dfb      	adds	r3, r7, #7
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	220f      	movs	r2, #15
 8007276:	4013      	ands	r3, r2
 8007278:	b2da      	uxtb	r2, r3
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	b2db      	uxtb	r3, r3
 800727e:	18d3      	adds	r3, r2, r3
 8007280:	b2db      	uxtb	r3, r3
}
 8007282:	0018      	movs	r0, r3
 8007284:	46bd      	mov	sp, r7
 8007286:	b004      	add	sp, #16
 8007288:	bd80      	pop	{r7, pc}

0800728a <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b082      	sub	sp, #8
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2220      	movs	r2, #32
 8007296:	5c9b      	ldrb	r3, [r3, r2]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d101      	bne.n	80072a0 <HAL_RTCEx_EnableBypassShadow+0x16>
 800729c:	2302      	movs	r3, #2
 800729e:	e024      	b.n	80072ea <HAL_RTCEx_EnableBypassShadow+0x60>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2220      	movs	r2, #32
 80072a4:	2101      	movs	r1, #1
 80072a6:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2221      	movs	r2, #33	; 0x21
 80072ac:	2102      	movs	r1, #2
 80072ae:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	22ca      	movs	r2, #202	; 0xca
 80072b6:	625a      	str	r2, [r3, #36]	; 0x24
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2253      	movs	r2, #83	; 0x53
 80072be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	6812      	ldr	r2, [r2, #0]
 80072c8:	6892      	ldr	r2, [r2, #8]
 80072ca:	2120      	movs	r1, #32
 80072cc:	430a      	orrs	r2, r1
 80072ce:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	22ff      	movs	r2, #255	; 0xff
 80072d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2221      	movs	r2, #33	; 0x21
 80072dc:	2101      	movs	r1, #1
 80072de:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2220      	movs	r2, #32
 80072e4:	2100      	movs	r1, #0
 80072e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	0018      	movs	r0, r3
 80072ec:	46bd      	mov	sp, r7
 80072ee:	b002      	add	sp, #8
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc: RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b082      	sub	sp, #8
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80072fa:	46c0      	nop			; (mov r8, r8)
 80072fc:	46bd      	mov	sp, r7
 80072fe:	b002      	add	sp, #8
 8007300:	bd80      	pop	{r7, pc}
	...

08007304 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d101      	bne.n	8007316 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e059      	b.n	80073ca <HAL_SPI_Init+0xc6>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));

  if(hspi->State == HAL_SPI_STATE_RESET)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2251      	movs	r2, #81	; 0x51
 800731a:	5c9b      	ldrb	r3, [r3, r2]
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b00      	cmp	r3, #0
 8007320:	d107      	bne.n	8007332 <HAL_SPI_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2250      	movs	r2, #80	; 0x50
 8007326:	2100      	movs	r1, #0
 8007328:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	0018      	movs	r0, r3
 800732e:	f000 f853 	bl	80073d8 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2251      	movs	r2, #81	; 0x51
 8007336:	2102      	movs	r1, #2
 8007338:	5499      	strb	r1, [r3, r2]

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	6812      	ldr	r2, [r2, #0]
 8007342:	6812      	ldr	r2, [r2, #0]
 8007344:	2140      	movs	r1, #64	; 0x40
 8007346:	438a      	bics	r2, r1
 8007348:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	6851      	ldr	r1, [r2, #4]
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	6892      	ldr	r2, [r2, #8]
 8007356:	4311      	orrs	r1, r2
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	68d2      	ldr	r2, [r2, #12]
 800735c:	4311      	orrs	r1, r2
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	6912      	ldr	r2, [r2, #16]
 8007362:	4311      	orrs	r1, r2
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	6952      	ldr	r2, [r2, #20]
 8007368:	4311      	orrs	r1, r2
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	6990      	ldr	r0, [r2, #24]
 800736e:	2280      	movs	r2, #128	; 0x80
 8007370:	0092      	lsls	r2, r2, #2
 8007372:	4002      	ands	r2, r0
 8007374:	4311      	orrs	r1, r2
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	69d2      	ldr	r2, [r2, #28]
 800737a:	4311      	orrs	r1, r2
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	6a12      	ldr	r2, [r2, #32]
 8007380:	4311      	orrs	r1, r2
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007386:	430a      	orrs	r2, r1
 8007388:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	6992      	ldr	r2, [r2, #24]
 8007392:	0c12      	lsrs	r2, r2, #16
 8007394:	2104      	movs	r1, #4
 8007396:	4011      	ands	r1, r2
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800739c:	430a      	orrs	r2, r1
 800739e:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80073a8:	611a      	str	r2, [r3, #16]
  
#if !defined(STM32L011xx) && !defined(STM32L021xx) && !defined(STM32L031xx) && !defined(STM32L041xx)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	6812      	ldr	r2, [r2, #0]
 80073b2:	69d2      	ldr	r2, [r2, #28]
 80073b4:	4907      	ldr	r1, [pc, #28]	; (80073d4 <HAL_SPI_Init+0xd0>)
 80073b6:	400a      	ands	r2, r1
 80073b8:	61da      	str	r2, [r3, #28]
#endif
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2251      	movs	r2, #81	; 0x51
 80073c4:	2101      	movs	r1, #1
 80073c6:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	0018      	movs	r0, r3
 80073cc:	46bd      	mov	sp, r7
 80073ce:	b002      	add	sp, #8
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	46c0      	nop			; (mov r8, r8)
 80073d4:	fffff7ff 	.word	0xfffff7ff

080073d8 <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
 __weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
 {
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function Should not be modified, when the callback is needed,
             the HAL_SPI_MspInit could be implenetd in the user file
  */
}
 80073e0:	46c0      	nop			; (mov r8, r8)
 80073e2:	46bd      	mov	sp, r7
 80073e4:	b002      	add	sp, #8
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b086      	sub	sp, #24
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
 80073f4:	001a      	movs	r2, r3
 80073f6:	1cbb      	adds	r3, r7, #2
 80073f8:	801a      	strh	r2, [r3, #0]
  __IO uint16_t tmpreg = 0U;
 80073fa:	2316      	movs	r3, #22
 80073fc:	18fb      	adds	r3, r7, r3
 80073fe:	2200      	movs	r2, #0
 8007400:	801a      	strh	r2, [r3, #0]

  if((hspi->State == HAL_SPI_STATE_READY) || (hspi->State == HAL_SPI_STATE_BUSY_RX))
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2251      	movs	r2, #81	; 0x51
 8007406:	5c9b      	ldrb	r3, [r3, r2]
 8007408:	b2db      	uxtb	r3, r3
 800740a:	2b01      	cmp	r3, #1
 800740c:	d006      	beq.n	800741c <HAL_SPI_TransmitReceive+0x34>
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2251      	movs	r2, #81	; 0x51
 8007412:	5c9b      	ldrb	r3, [r3, r2]
 8007414:	b2db      	uxtb	r3, r3
 8007416:	2b22      	cmp	r3, #34	; 0x22
 8007418:	d000      	beq.n	800741c <HAL_SPI_TransmitReceive+0x34>
 800741a:	e256      	b.n	80078ca <HAL_SPI_TransmitReceive+0x4e2>
  {
    if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0U))
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d006      	beq.n	8007430 <HAL_SPI_TransmitReceive+0x48>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d003      	beq.n	8007430 <HAL_SPI_TransmitReceive+0x48>
 8007428:	1cbb      	adds	r3, r7, #2
 800742a:	881b      	ldrh	r3, [r3, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d101      	bne.n	8007434 <HAL_SPI_TransmitReceive+0x4c>
    {
      return  HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	e24b      	b.n	80078cc <HAL_SPI_TransmitReceive+0x4e4>

    /* Check the parameters */
    assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

    /* Process Locked */
    __HAL_LOCK(hspi);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2250      	movs	r2, #80	; 0x50
 8007438:	5c9b      	ldrb	r3, [r3, r2]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d101      	bne.n	8007442 <HAL_SPI_TransmitReceive+0x5a>
 800743e:	2302      	movs	r3, #2
 8007440:	e244      	b.n	80078cc <HAL_SPI_TransmitReceive+0x4e4>
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2250      	movs	r2, #80	; 0x50
 8007446:	2101      	movs	r1, #1
 8007448:	5499      	strb	r1, [r3, r2]
 
    /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
    if(hspi->State == HAL_SPI_STATE_READY)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2251      	movs	r2, #81	; 0x51
 800744e:	5c9b      	ldrb	r3, [r3, r2]
 8007450:	b2db      	uxtb	r3, r3
 8007452:	2b01      	cmp	r3, #1
 8007454:	d103      	bne.n	800745e <HAL_SPI_TransmitReceive+0x76>
    {
      hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2251      	movs	r2, #81	; 0x51
 800745a:	2132      	movs	r1, #50	; 0x32
 800745c:	5499      	strb	r1, [r3, r2]
    }

     /* Configure communication */   
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	655a      	str	r2, [r3, #84]	; 0x54

    hspi->pRxBuffPtr  = pRxData;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->RxXferSize  = Size;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	1cba      	adds	r2, r7, #2
 800746e:	8812      	ldrh	r2, [r2, #0]
 8007470:	879a      	strh	r2, [r3, #60]	; 0x3c
    hspi->RxXferCount = Size;  
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	1cba      	adds	r2, r7, #2
 8007476:	8812      	ldrh	r2, [r2, #0]
 8007478:	87da      	strh	r2, [r3, #62]	; 0x3e
    
    hspi->pTxBuffPtr  = pTxData;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->TxXferSize  = Size; 
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	1cba      	adds	r2, r7, #2
 8007484:	8812      	ldrh	r2, [r2, #0]
 8007486:	869a      	strh	r2, [r3, #52]	; 0x34
    hspi->TxXferCount = Size;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	1cba      	adds	r2, r7, #2
 800748c:	8812      	ldrh	r2, [r2, #0]
 800748e:	86da      	strh	r2, [r3, #54]	; 0x36

    /*Init field not used in handle to zero */
    hspi->RxISR = 0U;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2200      	movs	r2, #0
 8007494:	649a      	str	r2, [r3, #72]	; 0x48
    hspi->TxISR = 0U;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Reset CRC Calculation */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074a0:	2380      	movs	r3, #128	; 0x80
 80074a2:	019b      	lsls	r3, r3, #6
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d110      	bne.n	80074ca <HAL_SPI_TransmitReceive+0xe2>
    {
      SPI_RESET_CRC(hspi);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	6812      	ldr	r2, [r2, #0]
 80074b0:	6812      	ldr	r2, [r2, #0]
 80074b2:	49ca      	ldr	r1, [pc, #808]	; (80077dc <HAL_SPI_TransmitReceive+0x3f4>)
 80074b4:	400a      	ands	r2, r1
 80074b6:	601a      	str	r2, [r3, #0]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	6812      	ldr	r2, [r2, #0]
 80074c0:	6812      	ldr	r2, [r2, #0]
 80074c2:	2180      	movs	r1, #128	; 0x80
 80074c4:	0189      	lsls	r1, r1, #6
 80074c6:	430a      	orrs	r2, r1
 80074c8:	601a      	str	r2, [r3, #0]
    }

    /* Check if the SPI is already enabled */ 
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2240      	movs	r2, #64	; 0x40
 80074d2:	4013      	ands	r3, r2
 80074d4:	2b40      	cmp	r3, #64	; 0x40
 80074d6:	d007      	beq.n	80074e8 <HAL_SPI_TransmitReceive+0x100>
    {
      /* Enable SPI peripheral */
      __HAL_SPI_ENABLE(hspi);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	6812      	ldr	r2, [r2, #0]
 80074e0:	6812      	ldr	r2, [r2, #0]
 80074e2:	2140      	movs	r1, #64	; 0x40
 80074e4:	430a      	orrs	r2, r1
 80074e6:	601a      	str	r2, [r3, #0]
    }

    /* Transmit and Receive data in 16 Bit mode */
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	68da      	ldr	r2, [r3, #12]
 80074ec:	2380      	movs	r3, #128	; 0x80
 80074ee:	011b      	lsls	r3, r3, #4
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d000      	beq.n	80074f6 <HAL_SPI_TransmitReceive+0x10e>
 80074f4:	e0c8      	b.n	8007688 <HAL_SPI_TransmitReceive+0x2a0>
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01U)))
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00a      	beq.n	8007514 <HAL_SPI_TransmitReceive+0x12c>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	685a      	ldr	r2, [r3, #4]
 8007502:	2382      	movs	r3, #130	; 0x82
 8007504:	005b      	lsls	r3, r3, #1
 8007506:	429a      	cmp	r2, r3
 8007508:	d116      	bne.n	8007538 <HAL_SPI_TransmitReceive+0x150>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800750e:	b29b      	uxth	r3, r3
 8007510:	2b01      	cmp	r3, #1
 8007512:	d111      	bne.n	8007538 <HAL_SPI_TransmitReceive+0x150>
      {
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68fa      	ldr	r2, [r7, #12]
 800751a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800751c:	8812      	ldrh	r2, [r2, #0]
 800751e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr+=2U;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007524:	1c9a      	adds	r2, r3, #2
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800752e:	b29b      	uxth	r3, r3
 8007530:	3b01      	subs	r3, #1
 8007532:	b29a      	uxth	r2, r3
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	86da      	strh	r2, [r3, #54]	; 0x36
      }
      if(hspi->TxXferCount == 0U)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800753c:	b29b      	uxth	r3, r3
 800753e:	2b00      	cmp	r3, #0
 8007540:	d000      	beq.n	8007544 <HAL_SPI_TransmitReceive+0x15c>
 8007542:	e079      	b.n	8007638 <HAL_SPI_TransmitReceive+0x250>
      {
        /* Enable CRC Transmission */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007548:	2380      	movs	r3, #128	; 0x80
 800754a:	019b      	lsls	r3, r3, #6
 800754c:	429a      	cmp	r2, r3
 800754e:	d108      	bne.n	8007562 <HAL_SPI_TransmitReceive+0x17a>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	6812      	ldr	r2, [r2, #0]
 8007558:	6812      	ldr	r2, [r2, #0]
 800755a:	2180      	movs	r1, #128	; 0x80
 800755c:	0149      	lsls	r1, r1, #5
 800755e:	430a      	orrs	r2, r1
 8007560:	601a      	str	r2, [r3, #0]
        }

        /* Wait until RXNE flag is set */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8007562:	6a3b      	ldr	r3, [r7, #32]
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	2200      	movs	r2, #0
 8007568:	2101      	movs	r1, #1
 800756a:	f000 f9b5 	bl	80078d8 <SPI_WaitOnFlagUntilTimeout>
 800756e:	1e03      	subs	r3, r0, #0
 8007570:	d001      	beq.n	8007576 <HAL_SPI_TransmitReceive+0x18e>
        { 
          return HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	e1aa      	b.n	80078cc <HAL_SPI_TransmitReceive+0x4e4>
        }

        *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	b29b      	uxth	r3, r3
 8007582:	8013      	strh	r3, [r2, #0]
        hspi->pRxBuffPtr+=2U;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007588:	1c9a      	adds	r2, r3, #2
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007592:	b29b      	uxth	r3, r3
 8007594:	3b01      	subs	r3, #1
 8007596:	b29a      	uxth	r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800759c:	e131      	b.n	8007802 <HAL_SPI_TransmitReceive+0x41a>
      else
      {
        while(hspi->TxXferCount > 0U)
        {
          /* Wait until TXE flag is set to send data */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 800759e:	6a3b      	ldr	r3, [r7, #32]
 80075a0:	68f8      	ldr	r0, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	2102      	movs	r1, #2
 80075a6:	f000 f997 	bl	80078d8 <SPI_WaitOnFlagUntilTimeout>
 80075aa:	1e03      	subs	r3, r0, #0
 80075ac:	d001      	beq.n	80075b2 <HAL_SPI_TransmitReceive+0x1ca>
          { 
            return HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e18c      	b.n	80078cc <HAL_SPI_TransmitReceive+0x4e4>
          }

          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80075ba:	8812      	ldrh	r2, [r2, #0]
 80075bc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr+=2U;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c2:	1c9a      	adds	r2, r3, #2
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	631a      	str	r2, [r3, #48]	; 0x30
          hspi->TxXferCount--;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	3b01      	subs	r3, #1
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	86da      	strh	r2, [r3, #54]	; 0x36

          /* Enable CRC Transmission */
          if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075da:	b29b      	uxth	r3, r3
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d10e      	bne.n	80075fe <HAL_SPI_TransmitReceive+0x216>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075e4:	2380      	movs	r3, #128	; 0x80
 80075e6:	019b      	lsls	r3, r3, #6
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d108      	bne.n	80075fe <HAL_SPI_TransmitReceive+0x216>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	6812      	ldr	r2, [r2, #0]
 80075f4:	6812      	ldr	r2, [r2, #0]
 80075f6:	2180      	movs	r1, #128	; 0x80
 80075f8:	0149      	lsls	r1, r1, #5
 80075fa:	430a      	orrs	r2, r1
 80075fc:	601a      	str	r2, [r3, #0]
          }

          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80075fe:	6a3b      	ldr	r3, [r7, #32]
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	2101      	movs	r1, #1
 8007606:	f000 f967 	bl	80078d8 <SPI_WaitOnFlagUntilTimeout>
 800760a:	1e03      	subs	r3, r0, #0
 800760c:	d001      	beq.n	8007612 <HAL_SPI_TransmitReceive+0x22a>
          { 
            return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e15c      	b.n	80078cc <HAL_SPI_TransmitReceive+0x4e4>
          }

          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	b29b      	uxth	r3, r3
 800761e:	8013      	strh	r3, [r2, #0]
          hspi->pRxBuffPtr+=2U;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007624:	1c9a      	adds	r2, r3, #2
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->RxXferCount--;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800762e:	b29b      	uxth	r3, r3
 8007630:	3b01      	subs	r3, #1
 8007632:	b29a      	uxth	r2, r3
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	87da      	strh	r2, [r3, #62]	; 0x3e
        while(hspi->TxXferCount > 0U)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800763c:	b29b      	uxth	r3, r3
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1ad      	bne.n	800759e <HAL_SPI_TransmitReceive+0x1b6>
        }
        /* Receive the last byte */
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d000      	beq.n	800764c <HAL_SPI_TransmitReceive+0x264>
 800764a:	e0da      	b.n	8007802 <HAL_SPI_TransmitReceive+0x41a>
        {
          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800764c:	6a3b      	ldr	r3, [r7, #32]
 800764e:	68f8      	ldr	r0, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	2101      	movs	r1, #1
 8007654:	f000 f940 	bl	80078d8 <SPI_WaitOnFlagUntilTimeout>
 8007658:	1e03      	subs	r3, r0, #0
 800765a:	d001      	beq.n	8007660 <HAL_SPI_TransmitReceive+0x278>
          {
            return HAL_TIMEOUT;
 800765c:	2303      	movs	r3, #3
 800765e:	e135      	b.n	80078cc <HAL_SPI_TransmitReceive+0x4e4>
          }
          
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	b29b      	uxth	r3, r3
 800766c:	8013      	strh	r3, [r2, #0]
          hspi->pRxBuffPtr+=2U;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007672:	1c9a      	adds	r2, r3, #2
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->RxXferCount--;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800767c:	b29b      	uxth	r3, r3
 800767e:	3b01      	subs	r3, #1
 8007680:	b29a      	uxth	r2, r3
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007686:	e0bc      	b.n	8007802 <HAL_SPI_TransmitReceive+0x41a>
      }
    }
    /* Transmit and Receive data in 8 Bit mode */
    else
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01U)))
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00a      	beq.n	80076a6 <HAL_SPI_TransmitReceive+0x2be>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	685a      	ldr	r2, [r3, #4]
 8007694:	2382      	movs	r3, #130	; 0x82
 8007696:	005b      	lsls	r3, r3, #1
 8007698:	429a      	cmp	r2, r3
 800769a:	d114      	bne.n	80076c6 <HAL_SPI_TransmitReceive+0x2de>
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d10f      	bne.n	80076c6 <HAL_SPI_TransmitReceive+0x2de>
      {
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80076ae:	1c50      	adds	r0, r2, #1
 80076b0:	68f9      	ldr	r1, [r7, #12]
 80076b2:	6308      	str	r0, [r1, #48]	; 0x30
 80076b4:	7812      	ldrb	r2, [r2, #0]
 80076b6:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076bc:	b29b      	uxth	r3, r3
 80076be:	3b01      	subs	r3, #1
 80076c0:	b29a      	uxth	r2, r3
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	86da      	strh	r2, [r3, #54]	; 0x36
      }
      if(hspi->TxXferCount == 0U)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d000      	beq.n	80076d2 <HAL_SPI_TransmitReceive+0x2ea>
 80076d0:	e070      	b.n	80077b4 <HAL_SPI_TransmitReceive+0x3cc>
      {
        /* Enable CRC Transmission */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076d6:	2380      	movs	r3, #128	; 0x80
 80076d8:	019b      	lsls	r3, r3, #6
 80076da:	429a      	cmp	r2, r3
 80076dc:	d108      	bne.n	80076f0 <HAL_SPI_TransmitReceive+0x308>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	6812      	ldr	r2, [r2, #0]
 80076e6:	6812      	ldr	r2, [r2, #0]
 80076e8:	2180      	movs	r1, #128	; 0x80
 80076ea:	0149      	lsls	r1, r1, #5
 80076ec:	430a      	orrs	r2, r1
 80076ee:	601a      	str	r2, [r3, #0]
        }

        /* Wait until RXNE flag is set */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80076f0:	6a3b      	ldr	r3, [r7, #32]
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	2101      	movs	r1, #1
 80076f8:	f000 f8ee 	bl	80078d8 <SPI_WaitOnFlagUntilTimeout>
 80076fc:	1e03      	subs	r3, r0, #0
 80076fe:	d001      	beq.n	8007704 <HAL_SPI_TransmitReceive+0x31c>
        {
          return HAL_TIMEOUT;
 8007700:	2303      	movs	r3, #3
 8007702:	e0e3      	b.n	80078cc <HAL_SPI_TransmitReceive+0x4e4>
        }

        (*hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	b2db      	uxtb	r3, r3
 8007710:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007716:	b29b      	uxth	r3, r3
 8007718:	3b01      	subs	r3, #1
 800771a:	b29a      	uxth	r2, r3
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007720:	e06f      	b.n	8007802 <HAL_SPI_TransmitReceive+0x41a>
      else
      {
        while(hspi->TxXferCount > 0U)
        {
          /* Wait until TXE flag is set to send data */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8007722:	6a3b      	ldr	r3, [r7, #32]
 8007724:	68f8      	ldr	r0, [r7, #12]
 8007726:	2200      	movs	r2, #0
 8007728:	2102      	movs	r1, #2
 800772a:	f000 f8d5 	bl	80078d8 <SPI_WaitOnFlagUntilTimeout>
 800772e:	1e03      	subs	r3, r0, #0
 8007730:	d001      	beq.n	8007736 <HAL_SPI_TransmitReceive+0x34e>
          {
            return HAL_TIMEOUT;
 8007732:	2303      	movs	r3, #3
 8007734:	e0ca      	b.n	80078cc <HAL_SPI_TransmitReceive+0x4e4>
          }

          hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800773e:	1c50      	adds	r0, r2, #1
 8007740:	68f9      	ldr	r1, [r7, #12]
 8007742:	6308      	str	r0, [r1, #48]	; 0x30
 8007744:	7812      	ldrb	r2, [r2, #0]
 8007746:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800774c:	b29b      	uxth	r3, r3
 800774e:	3b01      	subs	r3, #1
 8007750:	b29a      	uxth	r2, r3
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	86da      	strh	r2, [r3, #54]	; 0x36

          /* Enable CRC Transmission */
          if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800775a:	b29b      	uxth	r3, r3
 800775c:	2b00      	cmp	r3, #0
 800775e:	d10e      	bne.n	800777e <HAL_SPI_TransmitReceive+0x396>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007764:	2380      	movs	r3, #128	; 0x80
 8007766:	019b      	lsls	r3, r3, #6
 8007768:	429a      	cmp	r2, r3
 800776a:	d108      	bne.n	800777e <HAL_SPI_TransmitReceive+0x396>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	6812      	ldr	r2, [r2, #0]
 8007774:	6812      	ldr	r2, [r2, #0]
 8007776:	2180      	movs	r1, #128	; 0x80
 8007778:	0149      	lsls	r1, r1, #5
 800777a:	430a      	orrs	r2, r1
 800777c:	601a      	str	r2, [r3, #0]
          }

          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800777e:	6a3b      	ldr	r3, [r7, #32]
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	2101      	movs	r1, #1
 8007786:	f000 f8a7 	bl	80078d8 <SPI_WaitOnFlagUntilTimeout>
 800778a:	1e03      	subs	r3, r0, #0
 800778c:	d001      	beq.n	8007792 <HAL_SPI_TransmitReceive+0x3aa>
          {
            return HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	e09c      	b.n	80078cc <HAL_SPI_TransmitReceive+0x4e4>
          }

          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007796:	1c59      	adds	r1, r3, #1
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	6391      	str	r1, [r2, #56]	; 0x38
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	6812      	ldr	r2, [r2, #0]
 80077a0:	68d2      	ldr	r2, [r2, #12]
 80077a2:	b2d2      	uxtb	r2, r2
 80077a4:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	3b01      	subs	r3, #1
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        while(hspi->TxXferCount > 0U)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1b1      	bne.n	8007722 <HAL_SPI_TransmitReceive+0x33a>
        }
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d11d      	bne.n	8007802 <HAL_SPI_TransmitReceive+0x41a>
        {
          /* Wait until RXNE flag is set */
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80077c6:	6a3b      	ldr	r3, [r7, #32]
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	2200      	movs	r2, #0
 80077cc:	2101      	movs	r1, #1
 80077ce:	f000 f883 	bl	80078d8 <SPI_WaitOnFlagUntilTimeout>
 80077d2:	1e03      	subs	r3, r0, #0
 80077d4:	d004      	beq.n	80077e0 <HAL_SPI_TransmitReceive+0x3f8>
          {
            return HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e078      	b.n	80078cc <HAL_SPI_TransmitReceive+0x4e4>
 80077da:	46c0      	nop			; (mov r8, r8)
 80077dc:	ffffdfff 	.word	0xffffdfff
          }
          
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e4:	1c59      	adds	r1, r3, #1
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	6391      	str	r1, [r2, #56]	; 0x38
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	6812      	ldr	r2, [r2, #0]
 80077ee:	68d2      	ldr	r2, [r2, #12]
 80077f0:	b2d2      	uxtb	r2, r2
 80077f2:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	3b01      	subs	r3, #1
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
      }
    }

    /* Read CRC from DR to close CRC calculation process */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007806:	2380      	movs	r3, #128	; 0x80
 8007808:	019b      	lsls	r3, r3, #6
 800780a:	429a      	cmp	r2, r3
 800780c:	d119      	bne.n	8007842 <HAL_SPI_TransmitReceive+0x45a>
    {
      /* Wait until RXNE flag is set */
      if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800780e:	6a3b      	ldr	r3, [r7, #32]
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	2101      	movs	r1, #1
 8007816:	f000 f85f 	bl	80078d8 <SPI_WaitOnFlagUntilTimeout>
 800781a:	1e03      	subs	r3, r0, #0
 800781c:	d007      	beq.n	800782e <HAL_SPI_TransmitReceive+0x446>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007822:	2202      	movs	r2, #2
 8007824:	431a      	orrs	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800782a:	2303      	movs	r3, #3
 800782c:	e04e      	b.n	80078cc <HAL_SPI_TransmitReceive+0x4e4>
      }
      /* Read CRC */
      tmpreg = hspi->Instance->DR;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	b29a      	uxth	r2, r3
 8007836:	2316      	movs	r3, #22
 8007838:	18fb      	adds	r3, r7, r3
 800783a:	801a      	strh	r2, [r3, #0]
      UNUSED(tmpreg);		/* avoid warning on tmpreg affectation with stupid compiler */
 800783c:	2316      	movs	r3, #22
 800783e:	18fb      	adds	r3, r7, r3
 8007840:	881b      	ldrh	r3, [r3, #0]
    }

    /* Wait until Busy flag is reset before disabling SPI */
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 8007842:	6a3b      	ldr	r3, [r7, #32]
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	2201      	movs	r2, #1
 8007848:	2180      	movs	r1, #128	; 0x80
 800784a:	f000 f845 	bl	80078d8 <SPI_WaitOnFlagUntilTimeout>
 800784e:	1e03      	subs	r3, r0, #0
 8007850:	d007      	beq.n	8007862 <HAL_SPI_TransmitReceive+0x47a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007856:	2220      	movs	r2, #32
 8007858:	431a      	orrs	r2, r3
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	e034      	b.n	80078cc <HAL_SPI_TransmitReceive+0x4e4>
    }
    
    hspi->State = HAL_SPI_STATE_READY;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2251      	movs	r2, #81	; 0x51
 8007866:	2101      	movs	r1, #1
 8007868:	5499      	strb	r1, [r3, r2]

    /* Check if CRC error occurred */
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800786e:	2380      	movs	r3, #128	; 0x80
 8007870:	019b      	lsls	r3, r3, #6
 8007872:	429a      	cmp	r2, r3
 8007874:	d123      	bne.n	80078be <HAL_SPI_TransmitReceive+0x4d6>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	2210      	movs	r2, #16
 800787e:	4013      	ands	r3, r2
 8007880:	2b10      	cmp	r3, #16
 8007882:	d11c      	bne.n	80078be <HAL_SPI_TransmitReceive+0x4d6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007888:	2202      	movs	r2, #2
 800788a:	431a      	orrs	r2, r3
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	655a      	str	r2, [r3, #84]	; 0x54

      SPI_RESET_CRC(hspi);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	6812      	ldr	r2, [r2, #0]
 8007898:	6812      	ldr	r2, [r2, #0]
 800789a:	490e      	ldr	r1, [pc, #56]	; (80078d4 <HAL_SPI_TransmitReceive+0x4ec>)
 800789c:	400a      	ands	r2, r1
 800789e:	601a      	str	r2, [r3, #0]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	68fa      	ldr	r2, [r7, #12]
 80078a6:	6812      	ldr	r2, [r2, #0]
 80078a8:	6812      	ldr	r2, [r2, #0]
 80078aa:	2180      	movs	r1, #128	; 0x80
 80078ac:	0189      	lsls	r1, r1, #6
 80078ae:	430a      	orrs	r2, r1
 80078b0:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hspi);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2250      	movs	r2, #80	; 0x50
 80078b6:	2100      	movs	r1, #0
 80078b8:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR; 
 80078ba:	2301      	movs	r3, #1
 80078bc:	e006      	b.n	80078cc <HAL_SPI_TransmitReceive+0x4e4>
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2250      	movs	r2, #80	; 0x50
 80078c2:	2100      	movs	r1, #0
 80078c4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80078c6:	2300      	movs	r3, #0
 80078c8:	e000      	b.n	80078cc <HAL_SPI_TransmitReceive+0x4e4>
  }
  else
  {
    return HAL_BUSY;
 80078ca:	2302      	movs	r3, #2
  }
}
 80078cc:	0018      	movs	r0, r3
 80078ce:	46bd      	mov	sp, r7
 80078d0:	b006      	add	sp, #24
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	ffffdfff 	.word	0xffffdfff

080078d8 <SPI_WaitOnFlagUntilTimeout>:
  * @param  Status: Flag status to check: RESET or set
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b086      	sub	sp, #24
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	603b      	str	r3, [r7, #0]
 80078e4:	1dfb      	adds	r3, r7, #7
 80078e6:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80078e8:	2300      	movs	r3, #0
 80078ea:	617b      	str	r3, [r7, #20]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80078ec:	f7fd f9b4 	bl	8004c58 <HAL_GetTick>
 80078f0:	0003      	movs	r3, r0
 80078f2:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set */
  if(Status == RESET)
 80078f4:	1dfb      	adds	r3, r7, #7
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d000      	beq.n	80078fe <SPI_WaitOnFlagUntilTimeout+0x26>
 80078fc:	e087      	b.n	8007a0e <SPI_WaitOnFlagUntilTimeout+0x136>
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 80078fe:	e03e      	b.n	800797e <SPI_WaitOnFlagUntilTimeout+0xa6>
    {
      if(Timeout != HAL_MAX_DELAY)
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	3301      	adds	r3, #1
 8007904:	d03b      	beq.n	800797e <SPI_WaitOnFlagUntilTimeout+0xa6>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d007      	beq.n	800791c <SPI_WaitOnFlagUntilTimeout+0x44>
 800790c:	f7fd f9a4 	bl	8004c58 <HAL_GetTick>
 8007910:	0002      	movs	r2, r0
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	1ad2      	subs	r2, r2, r3
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	429a      	cmp	r2, r3
 800791a:	d930      	bls.n	800797e <SPI_WaitOnFlagUntilTimeout+0xa6>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (uint32_t)(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68fa      	ldr	r2, [r7, #12]
 8007922:	6812      	ldr	r2, [r2, #0]
 8007924:	6852      	ldr	r2, [r2, #4]
 8007926:	21e0      	movs	r1, #224	; 0xe0
 8007928:	438a      	bics	r2, r1
 800792a:	605a      	str	r2, [r3, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	6812      	ldr	r2, [r2, #0]
 8007934:	6812      	ldr	r2, [r2, #0]
 8007936:	2140      	movs	r1, #64	; 0x40
 8007938:	438a      	bics	r2, r1
 800793a:	601a      	str	r2, [r3, #0]

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007940:	2380      	movs	r3, #128	; 0x80
 8007942:	019b      	lsls	r3, r3, #6
 8007944:	429a      	cmp	r2, r3
 8007946:	d110      	bne.n	800796a <SPI_WaitOnFlagUntilTimeout+0x92>
          {
            SPI_RESET_CRC(hspi);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	6812      	ldr	r2, [r2, #0]
 8007950:	6812      	ldr	r2, [r2, #0]
 8007952:	4935      	ldr	r1, [pc, #212]	; (8007a28 <SPI_WaitOnFlagUntilTimeout+0x150>)
 8007954:	400a      	ands	r2, r1
 8007956:	601a      	str	r2, [r3, #0]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	6812      	ldr	r2, [r2, #0]
 8007960:	6812      	ldr	r2, [r2, #0]
 8007962:	2180      	movs	r1, #128	; 0x80
 8007964:	0189      	lsls	r1, r1, #6
 8007966:	430a      	orrs	r2, r1
 8007968:	601a      	str	r2, [r3, #0]
          }

          hspi->State= HAL_SPI_STATE_READY;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2251      	movs	r2, #81	; 0x51
 800796e:	2101      	movs	r1, #1
 8007970:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2250      	movs	r2, #80	; 0x50
 8007976:	2100      	movs	r1, #0
 8007978:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800797a:	2303      	movs	r3, #3
 800797c:	e050      	b.n	8007a20 <SPI_WaitOnFlagUntilTimeout+0x148>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	68ba      	ldr	r2, [r7, #8]
 8007986:	401a      	ands	r2, r3
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	429a      	cmp	r2, r3
 800798c:	d1b8      	bne.n	8007900 <SPI_WaitOnFlagUntilTimeout+0x28>
 800798e:	e046      	b.n	8007a1e <SPI_WaitOnFlagUntilTimeout+0x146>
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
    {
      if(Timeout != HAL_MAX_DELAY)
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	3301      	adds	r3, #1
 8007994:	d03b      	beq.n	8007a0e <SPI_WaitOnFlagUntilTimeout+0x136>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d007      	beq.n	80079ac <SPI_WaitOnFlagUntilTimeout+0xd4>
 800799c:	f7fd f95c 	bl	8004c58 <HAL_GetTick>
 80079a0:	0002      	movs	r2, r0
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	1ad2      	subs	r2, r2, r3
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d930      	bls.n	8007a0e <SPI_WaitOnFlagUntilTimeout+0x136>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (uint32_t)(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	6812      	ldr	r2, [r2, #0]
 80079b4:	6852      	ldr	r2, [r2, #4]
 80079b6:	21e0      	movs	r1, #224	; 0xe0
 80079b8:	438a      	bics	r2, r1
 80079ba:	605a      	str	r2, [r3, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	6812      	ldr	r2, [r2, #0]
 80079c4:	6812      	ldr	r2, [r2, #0]
 80079c6:	2140      	movs	r1, #64	; 0x40
 80079c8:	438a      	bics	r2, r1
 80079ca:	601a      	str	r2, [r3, #0]

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80079d0:	2380      	movs	r3, #128	; 0x80
 80079d2:	019b      	lsls	r3, r3, #6
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d110      	bne.n	80079fa <SPI_WaitOnFlagUntilTimeout+0x122>
          {
            SPI_RESET_CRC(hspi);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	6812      	ldr	r2, [r2, #0]
 80079e0:	6812      	ldr	r2, [r2, #0]
 80079e2:	4911      	ldr	r1, [pc, #68]	; (8007a28 <SPI_WaitOnFlagUntilTimeout+0x150>)
 80079e4:	400a      	ands	r2, r1
 80079e6:	601a      	str	r2, [r3, #0]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	6812      	ldr	r2, [r2, #0]
 80079f0:	6812      	ldr	r2, [r2, #0]
 80079f2:	2180      	movs	r1, #128	; 0x80
 80079f4:	0189      	lsls	r1, r1, #6
 80079f6:	430a      	orrs	r2, r1
 80079f8:	601a      	str	r2, [r3, #0]
          }

          hspi->State= HAL_SPI_STATE_READY;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2251      	movs	r2, #81	; 0x51
 80079fe:	2101      	movs	r1, #1
 8007a00:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2250      	movs	r2, #80	; 0x50
 8007a06:	2100      	movs	r1, #0
 8007a08:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	e008      	b.n	8007a20 <SPI_WaitOnFlagUntilTimeout+0x148>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	68ba      	ldr	r2, [r7, #8]
 8007a16:	401a      	ands	r2, r3
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d0b8      	beq.n	8007990 <SPI_WaitOnFlagUntilTimeout+0xb8>
        }
      }
    }
  }
  return HAL_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	0018      	movs	r0, r3
 8007a22:	46bd      	mov	sp, r7
 8007a24:	b006      	add	sp, #24
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	ffffdfff 	.word	0xffffdfff

08007a2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d101      	bne.n	8007a3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e047      	b.n	8007ace <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2269      	movs	r2, #105	; 0x69
 8007a42:	5c9b      	ldrb	r3, [r3, r2]
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d107      	bne.n	8007a5a <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2268      	movs	r2, #104	; 0x68
 8007a4e:	2100      	movs	r1, #0
 8007a50:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	0018      	movs	r0, r3
 8007a56:	f002 f9ff 	bl	8009e58 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2269      	movs	r2, #105	; 0x69
 8007a5e:	2124      	movs	r1, #36	; 0x24
 8007a60:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	6812      	ldr	r2, [r2, #0]
 8007a6a:	6812      	ldr	r2, [r2, #0]
 8007a6c:	2101      	movs	r1, #1
 8007a6e:	438a      	bics	r2, r1
 8007a70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d003      	beq.n	8007a82 <HAL_UART_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	0018      	movs	r0, r3
 8007a7e:	f000 fc1d 	bl	80082bc <UART_AdvFeatureConfig>
  }

  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	0018      	movs	r0, r3
 8007a86:	f000 f8cb 	bl	8007c20 <UART_SetConfig>
 8007a8a:	0003      	movs	r3, r0
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d101      	bne.n	8007a94 <HAL_UART_Init+0x68>
  {
    return HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	e01c      	b.n	8007ace <HAL_UART_Init+0xa2>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	6812      	ldr	r2, [r2, #0]
 8007a9c:	6852      	ldr	r2, [r2, #4]
 8007a9e:	490e      	ldr	r1, [pc, #56]	; (8007ad8 <HAL_UART_Init+0xac>)
 8007aa0:	400a      	ands	r2, r1
 8007aa2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	6812      	ldr	r2, [r2, #0]
 8007aac:	6892      	ldr	r2, [r2, #8]
 8007aae:	212a      	movs	r1, #42	; 0x2a
 8007ab0:	438a      	bics	r2, r1
 8007ab2:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	6812      	ldr	r2, [r2, #0]
 8007abc:	6812      	ldr	r2, [r2, #0]
 8007abe:	2101      	movs	r1, #1
 8007ac0:	430a      	orrs	r2, r1
 8007ac2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	0018      	movs	r0, r3
 8007ac8:	f000 fca4 	bl	8008414 <UART_CheckIdleState>
 8007acc:	0003      	movs	r3, r0
}
 8007ace:	0018      	movs	r0, r3
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	b002      	add	sp, #8
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	46c0      	nop			; (mov r8, r8)
 8007ad8:	ffffb7ff 	.word	0xffffb7ff

08007adc <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b088      	sub	sp, #32
 8007ae0:	af02      	add	r7, sp, #8
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	603b      	str	r3, [r7, #0]
 8007ae8:	1dbb      	adds	r3, r7, #6
 8007aea:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint32_t tickstart = 0;
 8007aec:	2300      	movs	r3, #0
 8007aee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2269      	movs	r2, #105	; 0x69
 8007af4:	5c9b      	ldrb	r3, [r3, r2]
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	2b20      	cmp	r3, #32
 8007afa:	d000      	beq.n	8007afe <HAL_UART_Transmit+0x22>
 8007afc:	e08a      	b.n	8007c14 <HAL_UART_Transmit+0x138>
  {
    if((pData == NULL ) || (Size == 0U))
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d003      	beq.n	8007b0c <HAL_UART_Transmit+0x30>
 8007b04:	1dbb      	adds	r3, r7, #6
 8007b06:	881b      	ldrh	r3, [r3, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d101      	bne.n	8007b10 <HAL_UART_Transmit+0x34>
    {
      return  HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e082      	b.n	8007c16 <HAL_UART_Transmit+0x13a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	689a      	ldr	r2, [r3, #8]
 8007b14:	2380      	movs	r3, #128	; 0x80
 8007b16:	015b      	lsls	r3, r3, #5
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d109      	bne.n	8007b30 <HAL_UART_Transmit+0x54>
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d105      	bne.n	8007b30 <HAL_UART_Transmit+0x54>
    {
      if((((uint32_t)pData)&1) != 0)
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	2201      	movs	r2, #1
 8007b28:	4013      	ands	r3, r2
 8007b2a:	d001      	beq.n	8007b30 <HAL_UART_Transmit+0x54>
      {
        return  HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e072      	b.n	8007c16 <HAL_UART_Transmit+0x13a>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2268      	movs	r2, #104	; 0x68
 8007b34:	5c9b      	ldrb	r3, [r3, r2]
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d101      	bne.n	8007b3e <HAL_UART_Transmit+0x62>
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	e06b      	b.n	8007c16 <HAL_UART_Transmit+0x13a>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2268      	movs	r2, #104	; 0x68
 8007b42:	2101      	movs	r1, #1
 8007b44:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2269      	movs	r2, #105	; 0x69
 8007b50:	2121      	movs	r1, #33	; 0x21
 8007b52:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007b54:	f7fd f880 	bl	8004c58 <HAL_GetTick>
 8007b58:	0003      	movs	r3, r0
 8007b5a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	1dba      	adds	r2, r7, #6
 8007b60:	2150      	movs	r1, #80	; 0x50
 8007b62:	8812      	ldrh	r2, [r2, #0]
 8007b64:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	1dba      	adds	r2, r7, #6
 8007b6a:	2152      	movs	r1, #82	; 0x52
 8007b6c:	8812      	ldrh	r2, [r2, #0]
 8007b6e:	525a      	strh	r2, [r3, r1]
    while(huart->TxXferCount > 0U)
 8007b70:	e033      	b.n	8007bda <HAL_UART_Transmit+0xfe>
    {
      huart->TxXferCount--;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2252      	movs	r2, #82	; 0x52
 8007b76:	5a9b      	ldrh	r3, [r3, r2]
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	b299      	uxth	r1, r3
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2252      	movs	r2, #82	; 0x52
 8007b82:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b84:	697a      	ldr	r2, [r7, #20]
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	9300      	str	r3, [sp, #0]
 8007b8c:	0013      	movs	r3, r2
 8007b8e:	2200      	movs	r2, #0
 8007b90:	2180      	movs	r1, #128	; 0x80
 8007b92:	f000 fc89 	bl	80084a8 <UART_WaitOnFlagUntilTimeout>
 8007b96:	1e03      	subs	r3, r0, #0
 8007b98:	d001      	beq.n	8007b9e <HAL_UART_Transmit+0xc2>
      {
        return HAL_TIMEOUT;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	e03b      	b.n	8007c16 <HAL_UART_Transmit+0x13a>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	689a      	ldr	r2, [r3, #8]
 8007ba2:	2380      	movs	r3, #128	; 0x80
 8007ba4:	015b      	lsls	r3, r3, #5
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d110      	bne.n	8007bcc <HAL_UART_Transmit+0xf0>
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d10c      	bne.n	8007bcc <HAL_UART_Transmit+0xf0>
      {
        tmp = (uint16_t*) pData;
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	693a      	ldr	r2, [r7, #16]
 8007bbc:	8812      	ldrh	r2, [r2, #0]
 8007bbe:	05d2      	lsls	r2, r2, #23
 8007bc0:	0dd2      	lsrs	r2, r2, #23
 8007bc2:	629a      	str	r2, [r3, #40]	; 0x28
        pData += 2U;
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	3302      	adds	r3, #2
 8007bc8:	60bb      	str	r3, [r7, #8]
 8007bca:	e006      	b.n	8007bda <HAL_UART_Transmit+0xfe>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68ba      	ldr	r2, [r7, #8]
 8007bd2:	1c51      	adds	r1, r2, #1
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	7812      	ldrb	r2, [r2, #0]
 8007bd8:	629a      	str	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2252      	movs	r2, #82	; 0x52
 8007bde:	5a9b      	ldrh	r3, [r3, r2]
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1c5      	bne.n	8007b72 <HAL_UART_Transmit+0x96>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007be6:	697a      	ldr	r2, [r7, #20]
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	0013      	movs	r3, r2
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	2140      	movs	r1, #64	; 0x40
 8007bf4:	f000 fc58 	bl	80084a8 <UART_WaitOnFlagUntilTimeout>
 8007bf8:	1e03      	subs	r3, r0, #0
 8007bfa:	d001      	beq.n	8007c00 <HAL_UART_Transmit+0x124>
    {
      return HAL_TIMEOUT;
 8007bfc:	2303      	movs	r3, #3
 8007bfe:	e00a      	b.n	8007c16 <HAL_UART_Transmit+0x13a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2269      	movs	r2, #105	; 0x69
 8007c04:	2120      	movs	r1, #32
 8007c06:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2268      	movs	r2, #104	; 0x68
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007c10:	2300      	movs	r3, #0
 8007c12:	e000      	b.n	8007c16 <HAL_UART_Transmit+0x13a>
  }
  else
  {
    return HAL_BUSY;
 8007c14:	2302      	movs	r3, #2
  }
}
 8007c16:	0018      	movs	r0, r3
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	b006      	add	sp, #24
 8007c1c:	bd80      	pop	{r7, pc}
	...

08007c20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c20:	b5b0      	push	{r4, r5, r7, lr}
 8007c22:	b08c      	sub	sp, #48	; 0x30
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg                     = 0x00000000U;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8007c2c:	2313      	movs	r3, #19
 8007c2e:	2218      	movs	r2, #24
 8007c30:	4694      	mov	ip, r2
 8007c32:	44bc      	add	ip, r7
 8007c34:	4463      	add	r3, ip
 8007c36:	2210      	movs	r2, #16
 8007c38:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8007c3a:	230c      	movs	r3, #12
 8007c3c:	2218      	movs	r2, #24
 8007c3e:	4694      	mov	ip, r2
 8007c40:	44bc      	add	ip, r7
 8007c42:	4463      	add	r3, ip
 8007c44:	2200      	movs	r2, #0
 8007c46:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8007c48:	2310      	movs	r3, #16
 8007c4a:	2218      	movs	r2, #24
 8007c4c:	4694      	mov	ip, r2
 8007c4e:	44bc      	add	ip, r7
 8007c50:	4463      	add	r3, ip
 8007c52:	2200      	movs	r2, #0
 8007c54:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c56:	230f      	movs	r3, #15
 8007c58:	2218      	movs	r2, #24
 8007c5a:	4694      	mov	ip, r2
 8007c5c:	44bc      	add	ip, r7
 8007c5e:	4463      	add	r3, ip
 8007c60:	2200      	movs	r2, #0
 8007c62:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	689a      	ldr	r2, [r3, #8]
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	431a      	orrs	r2, r3
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	695b      	ldr	r3, [r3, #20]
 8007c72:	431a      	orrs	r2, r3
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	69db      	ldr	r3, [r3, #28]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	69fa      	ldr	r2, [r7, #28]
 8007c82:	6812      	ldr	r2, [r2, #0]
 8007c84:	6812      	ldr	r2, [r2, #0]
 8007c86:	49c7      	ldr	r1, [pc, #796]	; (8007fa4 <UART_SetConfig+0x384>)
 8007c88:	4011      	ands	r1, r2
 8007c8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c8c:	430a      	orrs	r2, r1
 8007c8e:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	69fa      	ldr	r2, [r7, #28]
 8007c96:	6812      	ldr	r2, [r2, #0]
 8007c98:	6852      	ldr	r2, [r2, #4]
 8007c9a:	49c3      	ldr	r1, [pc, #780]	; (8007fa8 <UART_SetConfig+0x388>)
 8007c9c:	4011      	ands	r1, r2
 8007c9e:	69fa      	ldr	r2, [r7, #28]
 8007ca0:	68d2      	ldr	r2, [r2, #12]
 8007ca2:	430a      	orrs	r2, r1
 8007ca4:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	699b      	ldr	r3, [r3, #24]
 8007caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4abe      	ldr	r2, [pc, #760]	; (8007fac <UART_SetConfig+0x38c>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d004      	beq.n	8007cc0 <UART_SetConfig+0xa0>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	6a1b      	ldr	r3, [r3, #32]
 8007cba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	69fa      	ldr	r2, [r7, #28]
 8007cc6:	6812      	ldr	r2, [r2, #0]
 8007cc8:	6892      	ldr	r2, [r2, #8]
 8007cca:	49b9      	ldr	r1, [pc, #740]	; (8007fb0 <UART_SetConfig+0x390>)
 8007ccc:	4011      	ands	r1, r2
 8007cce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cd0:	430a      	orrs	r2, r1
 8007cd2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4ab6      	ldr	r2, [pc, #728]	; (8007fb4 <UART_SetConfig+0x394>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d134      	bne.n	8007d48 <UART_SetConfig+0x128>
 8007cde:	4bb6      	ldr	r3, [pc, #728]	; (8007fb8 <UART_SetConfig+0x398>)
 8007ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ce2:	2203      	movs	r2, #3
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d015      	beq.n	8007d16 <UART_SetConfig+0xf6>
 8007cea:	d304      	bcc.n	8007cf6 <UART_SetConfig+0xd6>
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	d00a      	beq.n	8007d06 <UART_SetConfig+0xe6>
 8007cf0:	2b03      	cmp	r3, #3
 8007cf2:	d018      	beq.n	8007d26 <UART_SetConfig+0x106>
 8007cf4:	e01f      	b.n	8007d36 <UART_SetConfig+0x116>
 8007cf6:	2313      	movs	r3, #19
 8007cf8:	2218      	movs	r2, #24
 8007cfa:	4694      	mov	ip, r2
 8007cfc:	44bc      	add	ip, r7
 8007cfe:	4463      	add	r3, ip
 8007d00:	2201      	movs	r2, #1
 8007d02:	701a      	strb	r2, [r3, #0]
 8007d04:	e0bc      	b.n	8007e80 <UART_SetConfig+0x260>
 8007d06:	2313      	movs	r3, #19
 8007d08:	2218      	movs	r2, #24
 8007d0a:	4694      	mov	ip, r2
 8007d0c:	44bc      	add	ip, r7
 8007d0e:	4463      	add	r3, ip
 8007d10:	2202      	movs	r2, #2
 8007d12:	701a      	strb	r2, [r3, #0]
 8007d14:	e0b4      	b.n	8007e80 <UART_SetConfig+0x260>
 8007d16:	2313      	movs	r3, #19
 8007d18:	2218      	movs	r2, #24
 8007d1a:	4694      	mov	ip, r2
 8007d1c:	44bc      	add	ip, r7
 8007d1e:	4463      	add	r3, ip
 8007d20:	2204      	movs	r2, #4
 8007d22:	701a      	strb	r2, [r3, #0]
 8007d24:	e0ac      	b.n	8007e80 <UART_SetConfig+0x260>
 8007d26:	2313      	movs	r3, #19
 8007d28:	2218      	movs	r2, #24
 8007d2a:	4694      	mov	ip, r2
 8007d2c:	44bc      	add	ip, r7
 8007d2e:	4463      	add	r3, ip
 8007d30:	2208      	movs	r2, #8
 8007d32:	701a      	strb	r2, [r3, #0]
 8007d34:	e0a4      	b.n	8007e80 <UART_SetConfig+0x260>
 8007d36:	2313      	movs	r3, #19
 8007d38:	2218      	movs	r2, #24
 8007d3a:	4694      	mov	ip, r2
 8007d3c:	44bc      	add	ip, r7
 8007d3e:	4463      	add	r3, ip
 8007d40:	2210      	movs	r2, #16
 8007d42:	701a      	strb	r2, [r3, #0]
 8007d44:	46c0      	nop			; (mov r8, r8)
 8007d46:	e09b      	b.n	8007e80 <UART_SetConfig+0x260>
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a9b      	ldr	r2, [pc, #620]	; (8007fbc <UART_SetConfig+0x39c>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d137      	bne.n	8007dc2 <UART_SetConfig+0x1a2>
 8007d52:	4b99      	ldr	r3, [pc, #612]	; (8007fb8 <UART_SetConfig+0x398>)
 8007d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d56:	220c      	movs	r2, #12
 8007d58:	4013      	ands	r3, r2
 8007d5a:	2b04      	cmp	r3, #4
 8007d5c:	d018      	beq.n	8007d90 <UART_SetConfig+0x170>
 8007d5e:	d802      	bhi.n	8007d66 <UART_SetConfig+0x146>
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d005      	beq.n	8007d70 <UART_SetConfig+0x150>
 8007d64:	e024      	b.n	8007db0 <UART_SetConfig+0x190>
 8007d66:	2b08      	cmp	r3, #8
 8007d68:	d00a      	beq.n	8007d80 <UART_SetConfig+0x160>
 8007d6a:	2b0c      	cmp	r3, #12
 8007d6c:	d018      	beq.n	8007da0 <UART_SetConfig+0x180>
 8007d6e:	e01f      	b.n	8007db0 <UART_SetConfig+0x190>
 8007d70:	2313      	movs	r3, #19
 8007d72:	2218      	movs	r2, #24
 8007d74:	4694      	mov	ip, r2
 8007d76:	44bc      	add	ip, r7
 8007d78:	4463      	add	r3, ip
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	701a      	strb	r2, [r3, #0]
 8007d7e:	e07f      	b.n	8007e80 <UART_SetConfig+0x260>
 8007d80:	2313      	movs	r3, #19
 8007d82:	2218      	movs	r2, #24
 8007d84:	4694      	mov	ip, r2
 8007d86:	44bc      	add	ip, r7
 8007d88:	4463      	add	r3, ip
 8007d8a:	2202      	movs	r2, #2
 8007d8c:	701a      	strb	r2, [r3, #0]
 8007d8e:	e077      	b.n	8007e80 <UART_SetConfig+0x260>
 8007d90:	2313      	movs	r3, #19
 8007d92:	2218      	movs	r2, #24
 8007d94:	4694      	mov	ip, r2
 8007d96:	44bc      	add	ip, r7
 8007d98:	4463      	add	r3, ip
 8007d9a:	2204      	movs	r2, #4
 8007d9c:	701a      	strb	r2, [r3, #0]
 8007d9e:	e06f      	b.n	8007e80 <UART_SetConfig+0x260>
 8007da0:	2313      	movs	r3, #19
 8007da2:	2218      	movs	r2, #24
 8007da4:	4694      	mov	ip, r2
 8007da6:	44bc      	add	ip, r7
 8007da8:	4463      	add	r3, ip
 8007daa:	2208      	movs	r2, #8
 8007dac:	701a      	strb	r2, [r3, #0]
 8007dae:	e067      	b.n	8007e80 <UART_SetConfig+0x260>
 8007db0:	2313      	movs	r3, #19
 8007db2:	2218      	movs	r2, #24
 8007db4:	4694      	mov	ip, r2
 8007db6:	44bc      	add	ip, r7
 8007db8:	4463      	add	r3, ip
 8007dba:	2210      	movs	r2, #16
 8007dbc:	701a      	strb	r2, [r3, #0]
 8007dbe:	46c0      	nop			; (mov r8, r8)
 8007dc0:	e05e      	b.n	8007e80 <UART_SetConfig+0x260>
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a7e      	ldr	r2, [pc, #504]	; (8007fc0 <UART_SetConfig+0x3a0>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d107      	bne.n	8007ddc <UART_SetConfig+0x1bc>
 8007dcc:	2313      	movs	r3, #19
 8007dce:	2218      	movs	r2, #24
 8007dd0:	4694      	mov	ip, r2
 8007dd2:	44bc      	add	ip, r7
 8007dd4:	4463      	add	r3, ip
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	701a      	strb	r2, [r3, #0]
 8007dda:	e052      	b.n	8007e82 <UART_SetConfig+0x262>
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a78      	ldr	r2, [pc, #480]	; (8007fc4 <UART_SetConfig+0x3a4>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d107      	bne.n	8007df6 <UART_SetConfig+0x1d6>
 8007de6:	2313      	movs	r3, #19
 8007de8:	2218      	movs	r2, #24
 8007dea:	4694      	mov	ip, r2
 8007dec:	44bc      	add	ip, r7
 8007dee:	4463      	add	r3, ip
 8007df0:	2200      	movs	r2, #0
 8007df2:	701a      	strb	r2, [r3, #0]
 8007df4:	e045      	b.n	8007e82 <UART_SetConfig+0x262>
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a6c      	ldr	r2, [pc, #432]	; (8007fac <UART_SetConfig+0x38c>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d140      	bne.n	8007e82 <UART_SetConfig+0x262>
 8007e00:	4b6d      	ldr	r3, [pc, #436]	; (8007fb8 <UART_SetConfig+0x398>)
 8007e02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e04:	23c0      	movs	r3, #192	; 0xc0
 8007e06:	011b      	lsls	r3, r3, #4
 8007e08:	4013      	ands	r3, r2
 8007e0a:	2280      	movs	r2, #128	; 0x80
 8007e0c:	00d2      	lsls	r2, r2, #3
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d01f      	beq.n	8007e52 <UART_SetConfig+0x232>
 8007e12:	2280      	movs	r2, #128	; 0x80
 8007e14:	00d2      	lsls	r2, r2, #3
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d802      	bhi.n	8007e20 <UART_SetConfig+0x200>
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d009      	beq.n	8007e32 <UART_SetConfig+0x212>
 8007e1e:	e028      	b.n	8007e72 <UART_SetConfig+0x252>
 8007e20:	2280      	movs	r2, #128	; 0x80
 8007e22:	0112      	lsls	r2, r2, #4
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d00c      	beq.n	8007e42 <UART_SetConfig+0x222>
 8007e28:	22c0      	movs	r2, #192	; 0xc0
 8007e2a:	0112      	lsls	r2, r2, #4
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d018      	beq.n	8007e62 <UART_SetConfig+0x242>
 8007e30:	e01f      	b.n	8007e72 <UART_SetConfig+0x252>
 8007e32:	2313      	movs	r3, #19
 8007e34:	2218      	movs	r2, #24
 8007e36:	4694      	mov	ip, r2
 8007e38:	44bc      	add	ip, r7
 8007e3a:	4463      	add	r3, ip
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	701a      	strb	r2, [r3, #0]
 8007e40:	e01e      	b.n	8007e80 <UART_SetConfig+0x260>
 8007e42:	2313      	movs	r3, #19
 8007e44:	2218      	movs	r2, #24
 8007e46:	4694      	mov	ip, r2
 8007e48:	44bc      	add	ip, r7
 8007e4a:	4463      	add	r3, ip
 8007e4c:	2202      	movs	r2, #2
 8007e4e:	701a      	strb	r2, [r3, #0]
 8007e50:	e016      	b.n	8007e80 <UART_SetConfig+0x260>
 8007e52:	2313      	movs	r3, #19
 8007e54:	2218      	movs	r2, #24
 8007e56:	4694      	mov	ip, r2
 8007e58:	44bc      	add	ip, r7
 8007e5a:	4463      	add	r3, ip
 8007e5c:	2204      	movs	r2, #4
 8007e5e:	701a      	strb	r2, [r3, #0]
 8007e60:	e00e      	b.n	8007e80 <UART_SetConfig+0x260>
 8007e62:	2313      	movs	r3, #19
 8007e64:	2218      	movs	r2, #24
 8007e66:	4694      	mov	ip, r2
 8007e68:	44bc      	add	ip, r7
 8007e6a:	4463      	add	r3, ip
 8007e6c:	2208      	movs	r2, #8
 8007e6e:	701a      	strb	r2, [r3, #0]
 8007e70:	e006      	b.n	8007e80 <UART_SetConfig+0x260>
 8007e72:	2313      	movs	r3, #19
 8007e74:	2218      	movs	r2, #24
 8007e76:	4694      	mov	ip, r2
 8007e78:	44bc      	add	ip, r7
 8007e7a:	4463      	add	r3, ip
 8007e7c:	2210      	movs	r2, #16
 8007e7e:	701a      	strb	r2, [r3, #0]
 8007e80:	46c0      	nop			; (mov r8, r8)
  uint32_t frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_USART2);
 8007e82:	2002      	movs	r0, #2
 8007e84:	f7fe fa5e 	bl	8006344 <HAL_RCCEx_GetPeriphCLKFreq>
 8007e88:	0003      	movs	r3, r0
 8007e8a:	623b      	str	r3, [r7, #32]

  /* Check LPUART instance */
  if(UART_INSTANCE_LOWPOWER(huart))
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a46      	ldr	r2, [pc, #280]	; (8007fac <UART_SetConfig+0x38c>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d000      	beq.n	8007e98 <UART_SetConfig+0x278>
 8007e96:	e09f      	b.n	8007fd8 <UART_SetConfig+0x3b8>
  {
    /* Retrieve frequency clock */
    tmpreg = 0;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (clocksource)
 8007e9c:	2313      	movs	r3, #19
 8007e9e:	2218      	movs	r2, #24
 8007ea0:	4694      	mov	ip, r2
 8007ea2:	44bc      	add	ip, r7
 8007ea4:	4463      	add	r3, ip
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	d00d      	beq.n	8007ec8 <UART_SetConfig+0x2a8>
 8007eac:	dc02      	bgt.n	8007eb4 <UART_SetConfig+0x294>
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d005      	beq.n	8007ebe <UART_SetConfig+0x29e>
 8007eb2:	e01d      	b.n	8007ef0 <UART_SetConfig+0x2d0>
 8007eb4:	2b04      	cmp	r3, #4
 8007eb6:	d012      	beq.n	8007ede <UART_SetConfig+0x2be>
 8007eb8:	2b08      	cmp	r3, #8
 8007eba:	d015      	beq.n	8007ee8 <UART_SetConfig+0x2c8>
 8007ebc:	e018      	b.n	8007ef0 <UART_SetConfig+0x2d0>
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
 8007ebe:	f7fe f86b 	bl	8005f98 <HAL_RCC_GetPCLK1Freq>
 8007ec2:	0003      	movs	r3, r0
 8007ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8007ec6:	e01b      	b.n	8007f00 <UART_SetConfig+0x2e0>
    case UART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ec8:	4b3b      	ldr	r3, [pc, #236]	; (8007fb8 <UART_SetConfig+0x398>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2210      	movs	r2, #16
 8007ece:	4013      	ands	r3, r2
 8007ed0:	d002      	beq.n	8007ed8 <UART_SetConfig+0x2b8>
      {
        tmpreg = (uint32_t) (HSI_VALUE >> 2U);
 8007ed2:	4b3d      	ldr	r3, [pc, #244]	; (8007fc8 <UART_SetConfig+0x3a8>)
 8007ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      else
      {
        tmpreg = (uint32_t) HSI_VALUE;
      }
      break;
 8007ed6:	e013      	b.n	8007f00 <UART_SetConfig+0x2e0>
        tmpreg = (uint32_t) HSI_VALUE;
 8007ed8:	4b3c      	ldr	r3, [pc, #240]	; (8007fcc <UART_SetConfig+0x3ac>)
 8007eda:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8007edc:	e010      	b.n	8007f00 <UART_SetConfig+0x2e0>
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
 8007ede:	f7fd ffd3 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 8007ee2:	0003      	movs	r3, r0
 8007ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8007ee6:	e00b      	b.n	8007f00 <UART_SetConfig+0x2e0>
    case UART_CLOCKSOURCE_LSE:
      tmpreg = (uint32_t) LSE_VALUE;
 8007ee8:	2380      	movs	r3, #128	; 0x80
 8007eea:	021b      	lsls	r3, r3, #8
 8007eec:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8007eee:	e007      	b.n	8007f00 <UART_SetConfig+0x2e0>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8007ef0:	230f      	movs	r3, #15
 8007ef2:	2218      	movs	r2, #24
 8007ef4:	4694      	mov	ip, r2
 8007ef6:	44bc      	add	ip, r7
 8007ef8:	4463      	add	r3, ip
 8007efa:	2201      	movs	r2, #1
 8007efc:	701a      	strb	r2, [r3, #0]
      break;
 8007efe:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (tmpreg != 0)
 8007f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d100      	bne.n	8007f08 <UART_SetConfig+0x2e8>
 8007f06:	e1c0      	b.n	800828a <UART_SetConfig+0x66a>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	685a      	ldr	r2, [r3, #4]
 8007f0c:	0013      	movs	r3, r2
 8007f0e:	005b      	lsls	r3, r3, #1
 8007f10:	189a      	adds	r2, r3, r2
 8007f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d805      	bhi.n	8007f24 <UART_SetConfig+0x304>
           (tmpreg > (4096 * huart->Init.BaudRate) ))
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	031a      	lsls	r2, r3, #12
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8007f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d207      	bcs.n	8007f34 <UART_SetConfig+0x314>
      {
        ret = HAL_ERROR;
 8007f24:	230f      	movs	r3, #15
 8007f26:	2218      	movs	r2, #24
 8007f28:	4694      	mov	ip, r2
 8007f2a:	44bc      	add	ip, r7
 8007f2c:	4463      	add	r3, ip
 8007f2e:	2201      	movs	r2, #1
 8007f30:	701a      	strb	r2, [r3, #0]
 8007f32:	e1aa      	b.n	800828a <UART_SetConfig+0x66a>
      }
      else
      {
        tmpreg = (uint32_t)(UART_DIV_LPUART(tmpreg, huart->Init.BaudRate));
 8007f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f36:	613b      	str	r3, [r7, #16]
 8007f38:	2300      	movs	r3, #0
 8007f3a:	617b      	str	r3, [r7, #20]
 8007f3c:	6939      	ldr	r1, [r7, #16]
 8007f3e:	697a      	ldr	r2, [r7, #20]
 8007f40:	000b      	movs	r3, r1
 8007f42:	0e1b      	lsrs	r3, r3, #24
 8007f44:	0010      	movs	r0, r2
 8007f46:	0205      	lsls	r5, r0, #8
 8007f48:	431d      	orrs	r5, r3
 8007f4a:	000b      	movs	r3, r1
 8007f4c:	021c      	lsls	r4, r3, #8
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	085b      	lsrs	r3, r3, #1
 8007f54:	60bb      	str	r3, [r7, #8]
 8007f56:	2300      	movs	r3, #0
 8007f58:	60fb      	str	r3, [r7, #12]
 8007f5a:	68b8      	ldr	r0, [r7, #8]
 8007f5c:	68f9      	ldr	r1, [r7, #12]
 8007f5e:	1900      	adds	r0, r0, r4
 8007f60:	4169      	adcs	r1, r5
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	603b      	str	r3, [r7, #0]
 8007f68:	2300      	movs	r3, #0
 8007f6a:	607b      	str	r3, [r7, #4]
 8007f6c:	683a      	ldr	r2, [r7, #0]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f7f8 fa7e 	bl	8000470 <__aeabi_uldivmod>
 8007f74:	0003      	movs	r3, r0
 8007f76:	000c      	movs	r4, r1
 8007f78:	62fb      	str	r3, [r7, #44]	; 0x2c
   
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8007f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7c:	4a14      	ldr	r2, [pc, #80]	; (8007fd0 <UART_SetConfig+0x3b0>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d908      	bls.n	8007f94 <UART_SetConfig+0x374>
 8007f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f84:	4a13      	ldr	r2, [pc, #76]	; (8007fd4 <UART_SetConfig+0x3b4>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d804      	bhi.n	8007f94 <UART_SetConfig+0x374>
        {
           huart->Instance->BRR = tmpreg;
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f90:	60da      	str	r2, [r3, #12]
 8007f92:	e17a      	b.n	800828a <UART_SetConfig+0x66a>
        }
        else
        {
          ret = HAL_ERROR;
 8007f94:	230f      	movs	r3, #15
 8007f96:	2218      	movs	r2, #24
 8007f98:	4694      	mov	ip, r2
 8007f9a:	44bc      	add	ip, r7
 8007f9c:	4463      	add	r3, ip
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	701a      	strb	r2, [r3, #0]
 8007fa2:	e172      	b.n	800828a <UART_SetConfig+0x66a>
 8007fa4:	efff69f3 	.word	0xefff69f3
 8007fa8:	ffffcfff 	.word	0xffffcfff
 8007fac:	40004800 	.word	0x40004800
 8007fb0:	fffff4ff 	.word	0xfffff4ff
 8007fb4:	40013800 	.word	0x40013800
 8007fb8:	40021000 	.word	0x40021000
 8007fbc:	40004400 	.word	0x40004400
 8007fc0:	40004c00 	.word	0x40004c00
 8007fc4:	40005000 	.word	0x40005000
 8007fc8:	003d0900 	.word	0x003d0900
 8007fcc:	00f42400 	.word	0x00f42400
 8007fd0:	000002ff 	.word	0x000002ff
 8007fd4:	000fffff 	.word	0x000fffff
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	69da      	ldr	r2, [r3, #28]
 8007fdc:	2380      	movs	r3, #128	; 0x80
 8007fde:	021b      	lsls	r3, r3, #8
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d000      	beq.n	8007fe6 <UART_SetConfig+0x3c6>
 8007fe4:	e0ca      	b.n	800817c <UART_SetConfig+0x55c>
  {
    switch (clocksource)
 8007fe6:	2313      	movs	r3, #19
 8007fe8:	2218      	movs	r2, #24
 8007fea:	4694      	mov	ip, r2
 8007fec:	44bc      	add	ip, r7
 8007fee:	4463      	add	r3, ip
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	2b08      	cmp	r3, #8
 8007ff4:	d900      	bls.n	8007ff8 <UART_SetConfig+0x3d8>
 8007ff6:	e089      	b.n	800810c <UART_SetConfig+0x4ec>
 8007ff8:	009a      	lsls	r2, r3, #2
 8007ffa:	4ba9      	ldr	r3, [pc, #676]	; (80082a0 <UART_SetConfig+0x680>)
 8007ffc:	18d3      	adds	r3, r2, r3
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	469f      	mov	pc, r3
    {
    case UART_CLOCKSOURCE_PCLK1:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(frequency, huart->Init.BaudRate));
 8008002:	6a3b      	ldr	r3, [r7, #32]
 8008004:	005a      	lsls	r2, r3, #1
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	085b      	lsrs	r3, r3, #1
 800800c:	18d2      	adds	r2, r2, r3
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	0019      	movs	r1, r3
 8008014:	0010      	movs	r0, r2
 8008016:	f7f8 f877 	bl	8000108 <__udivsi3>
 800801a:	0003      	movs	r3, r0
 800801c:	001a      	movs	r2, r3
 800801e:	2310      	movs	r3, #16
 8008020:	2118      	movs	r1, #24
 8008022:	468c      	mov	ip, r1
 8008024:	44bc      	add	ip, r7
 8008026:	4463      	add	r3, ip
 8008028:	801a      	strh	r2, [r3, #0]
      break;
 800802a:	e077      	b.n	800811c <UART_SetConfig+0x4fc>
    case UART_CLOCKSOURCE_PCLK2:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800802c:	f7fd ffca 	bl	8005fc4 <HAL_RCC_GetPCLK2Freq>
 8008030:	0003      	movs	r3, r0
 8008032:	005a      	lsls	r2, r3, #1
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	085b      	lsrs	r3, r3, #1
 800803a:	18d2      	adds	r2, r2, r3
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	0019      	movs	r1, r3
 8008042:	0010      	movs	r0, r2
 8008044:	f7f8 f860 	bl	8000108 <__udivsi3>
 8008048:	0003      	movs	r3, r0
 800804a:	001a      	movs	r2, r3
 800804c:	2310      	movs	r3, #16
 800804e:	2118      	movs	r1, #24
 8008050:	468c      	mov	ip, r1
 8008052:	44bc      	add	ip, r7
 8008054:	4463      	add	r3, ip
 8008056:	801a      	strh	r2, [r3, #0]
      break;
 8008058:	e060      	b.n	800811c <UART_SetConfig+0x4fc>
    case UART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800805a:	4b92      	ldr	r3, [pc, #584]	; (80082a4 <UART_SetConfig+0x684>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2210      	movs	r2, #16
 8008060:	4013      	ands	r3, r2
 8008062:	d013      	beq.n	800808c <UART_SetConfig+0x46c>
      {
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	085b      	lsrs	r3, r3, #1
 800806a:	4a8f      	ldr	r2, [pc, #572]	; (80082a8 <UART_SetConfig+0x688>)
 800806c:	189a      	adds	r2, r3, r2
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	0019      	movs	r1, r3
 8008074:	0010      	movs	r0, r2
 8008076:	f7f8 f847 	bl	8000108 <__udivsi3>
 800807a:	0003      	movs	r3, r0
 800807c:	001a      	movs	r2, r3
 800807e:	2310      	movs	r3, #16
 8008080:	2118      	movs	r1, #24
 8008082:	468c      	mov	ip, r1
 8008084:	44bc      	add	ip, r7
 8008086:	4463      	add	r3, ip
 8008088:	801a      	strh	r2, [r3, #0]
      }
      else
      {
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate)); 
      }
      break;
 800808a:	e047      	b.n	800811c <UART_SetConfig+0x4fc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate)); 
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	085b      	lsrs	r3, r3, #1
 8008092:	4a86      	ldr	r2, [pc, #536]	; (80082ac <UART_SetConfig+0x68c>)
 8008094:	189a      	adds	r2, r3, r2
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	0019      	movs	r1, r3
 800809c:	0010      	movs	r0, r2
 800809e:	f7f8 f833 	bl	8000108 <__udivsi3>
 80080a2:	0003      	movs	r3, r0
 80080a4:	001a      	movs	r2, r3
 80080a6:	2310      	movs	r3, #16
 80080a8:	2118      	movs	r1, #24
 80080aa:	468c      	mov	ip, r1
 80080ac:	44bc      	add	ip, r7
 80080ae:	4463      	add	r3, ip
 80080b0:	801a      	strh	r2, [r3, #0]
      break;
 80080b2:	e033      	b.n	800811c <UART_SetConfig+0x4fc>
    case UART_CLOCKSOURCE_SYSCLK:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80080b4:	f7fd fee8 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 80080b8:	0003      	movs	r3, r0
 80080ba:	005a      	lsls	r2, r3, #1
 80080bc:	69fb      	ldr	r3, [r7, #28]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	085b      	lsrs	r3, r3, #1
 80080c2:	18d2      	adds	r2, r2, r3
 80080c4:	69fb      	ldr	r3, [r7, #28]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	0019      	movs	r1, r3
 80080ca:	0010      	movs	r0, r2
 80080cc:	f7f8 f81c 	bl	8000108 <__udivsi3>
 80080d0:	0003      	movs	r3, r0
 80080d2:	001a      	movs	r2, r3
 80080d4:	2310      	movs	r3, #16
 80080d6:	2118      	movs	r1, #24
 80080d8:	468c      	mov	ip, r1
 80080da:	44bc      	add	ip, r7
 80080dc:	4463      	add	r3, ip
 80080de:	801a      	strh	r2, [r3, #0]
      break;
 80080e0:	e01c      	b.n	800811c <UART_SetConfig+0x4fc>
    case UART_CLOCKSOURCE_LSE:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	085b      	lsrs	r3, r3, #1
 80080e8:	2280      	movs	r2, #128	; 0x80
 80080ea:	0252      	lsls	r2, r2, #9
 80080ec:	189a      	adds	r2, r3, r2
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	0019      	movs	r1, r3
 80080f4:	0010      	movs	r0, r2
 80080f6:	f7f8 f807 	bl	8000108 <__udivsi3>
 80080fa:	0003      	movs	r3, r0
 80080fc:	001a      	movs	r2, r3
 80080fe:	2310      	movs	r3, #16
 8008100:	2118      	movs	r1, #24
 8008102:	468c      	mov	ip, r1
 8008104:	44bc      	add	ip, r7
 8008106:	4463      	add	r3, ip
 8008108:	801a      	strh	r2, [r3, #0]
      break;
 800810a:	e007      	b.n	800811c <UART_SetConfig+0x4fc>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 800810c:	230f      	movs	r3, #15
 800810e:	2218      	movs	r2, #24
 8008110:	4694      	mov	ip, r2
 8008112:	44bc      	add	ip, r7
 8008114:	4463      	add	r3, ip
 8008116:	2201      	movs	r2, #1
 8008118:	701a      	strb	r2, [r3, #0]
      break;
 800811a:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 800811c:	230c      	movs	r3, #12
 800811e:	2218      	movs	r2, #24
 8008120:	4694      	mov	ip, r2
 8008122:	44bc      	add	ip, r7
 8008124:	4463      	add	r3, ip
 8008126:	2210      	movs	r2, #16
 8008128:	2118      	movs	r1, #24
 800812a:	468c      	mov	ip, r1
 800812c:	44bc      	add	ip, r7
 800812e:	4462      	add	r2, ip
 8008130:	8812      	ldrh	r2, [r2, #0]
 8008132:	210f      	movs	r1, #15
 8008134:	438a      	bics	r2, r1
 8008136:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((uint16_t)(usartdiv & (uint16_t)0x000FU) >> (uint16_t)1U);
 8008138:	2310      	movs	r3, #16
 800813a:	2218      	movs	r2, #24
 800813c:	4694      	mov	ip, r2
 800813e:	44bc      	add	ip, r7
 8008140:	4463      	add	r3, ip
 8008142:	881b      	ldrh	r3, [r3, #0]
 8008144:	105b      	asrs	r3, r3, #1
 8008146:	b29b      	uxth	r3, r3
 8008148:	2207      	movs	r2, #7
 800814a:	4013      	ands	r3, r2
 800814c:	b299      	uxth	r1, r3
 800814e:	230c      	movs	r3, #12
 8008150:	2218      	movs	r2, #24
 8008152:	4694      	mov	ip, r2
 8008154:	44bc      	add	ip, r7
 8008156:	4463      	add	r3, ip
 8008158:	220c      	movs	r2, #12
 800815a:	2018      	movs	r0, #24
 800815c:	4684      	mov	ip, r0
 800815e:	44bc      	add	ip, r7
 8008160:	4462      	add	r2, ip
 8008162:	8812      	ldrh	r2, [r2, #0]
 8008164:	430a      	orrs	r2, r1
 8008166:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	220c      	movs	r2, #12
 800816e:	2118      	movs	r1, #24
 8008170:	468c      	mov	ip, r1
 8008172:	44bc      	add	ip, r7
 8008174:	4462      	add	r2, ip
 8008176:	8812      	ldrh	r2, [r2, #0]
 8008178:	60da      	str	r2, [r3, #12]
 800817a:	e086      	b.n	800828a <UART_SetConfig+0x66a>
  }
  else
  {
    switch (clocksource)
 800817c:	2313      	movs	r3, #19
 800817e:	2218      	movs	r2, #24
 8008180:	4694      	mov	ip, r2
 8008182:	44bc      	add	ip, r7
 8008184:	4463      	add	r3, ip
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	2b08      	cmp	r3, #8
 800818a:	d876      	bhi.n	800827a <UART_SetConfig+0x65a>
 800818c:	009a      	lsls	r2, r3, #2
 800818e:	4b48      	ldr	r3, [pc, #288]	; (80082b0 <UART_SetConfig+0x690>)
 8008190:	18d3      	adds	r3, r2, r3
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	469f      	mov	pc, r3
    {
    case UART_CLOCKSOURCE_PCLK1:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	681c      	ldr	r4, [r3, #0]
 800819a:	f7fd fefd 	bl	8005f98 <HAL_RCC_GetPCLK1Freq>
 800819e:	0002      	movs	r2, r0
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	085b      	lsrs	r3, r3, #1
 80081a6:	18d2      	adds	r2, r2, r3
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	0019      	movs	r1, r3
 80081ae:	0010      	movs	r0, r2
 80081b0:	f7f7 ffaa 	bl	8000108 <__udivsi3>
 80081b4:	0003      	movs	r3, r0
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	60e3      	str	r3, [r4, #12]
      break;
 80081ba:	e066      	b.n	800828a <UART_SetConfig+0x66a>
    case UART_CLOCKSOURCE_PCLK2:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	681c      	ldr	r4, [r3, #0]
 80081c0:	f7fd ff00 	bl	8005fc4 <HAL_RCC_GetPCLK2Freq>
 80081c4:	0002      	movs	r2, r0
 80081c6:	69fb      	ldr	r3, [r7, #28]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	085b      	lsrs	r3, r3, #1
 80081cc:	18d2      	adds	r2, r2, r3
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	0019      	movs	r1, r3
 80081d4:	0010      	movs	r0, r2
 80081d6:	f7f7 ff97 	bl	8000108 <__udivsi3>
 80081da:	0003      	movs	r3, r0
 80081dc:	b29b      	uxth	r3, r3
 80081de:	60e3      	str	r3, [r4, #12]
      break;
 80081e0:	e053      	b.n	800828a <UART_SetConfig+0x66a>
    case UART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081e2:	4b30      	ldr	r3, [pc, #192]	; (80082a4 <UART_SetConfig+0x684>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	2210      	movs	r2, #16
 80081e8:	4013      	ands	r3, r2
 80081ea:	d010      	beq.n	800820e <UART_SetConfig+0x5ee>
      {
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	681c      	ldr	r4, [r3, #0]
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	085b      	lsrs	r3, r3, #1
 80081f6:	4a2f      	ldr	r2, [pc, #188]	; (80082b4 <UART_SetConfig+0x694>)
 80081f8:	189a      	adds	r2, r3, r2
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	0019      	movs	r1, r3
 8008200:	0010      	movs	r0, r2
 8008202:	f7f7 ff81 	bl	8000108 <__udivsi3>
 8008206:	0003      	movs	r3, r0
 8008208:	b29b      	uxth	r3, r3
 800820a:	60e3      	str	r3, [r4, #12]
      }
      else
      {
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
      }
      break;
 800820c:	e03d      	b.n	800828a <UART_SetConfig+0x66a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	681c      	ldr	r4, [r3, #0]
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	085b      	lsrs	r3, r3, #1
 8008218:	4a27      	ldr	r2, [pc, #156]	; (80082b8 <UART_SetConfig+0x698>)
 800821a:	189a      	adds	r2, r3, r2
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	0019      	movs	r1, r3
 8008222:	0010      	movs	r0, r2
 8008224:	f7f7 ff70 	bl	8000108 <__udivsi3>
 8008228:	0003      	movs	r3, r0
 800822a:	b29b      	uxth	r3, r3
 800822c:	60e3      	str	r3, [r4, #12]
      break;
 800822e:	e02c      	b.n	800828a <UART_SetConfig+0x66a>
    case UART_CLOCKSOURCE_SYSCLK:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8008230:	69fb      	ldr	r3, [r7, #28]
 8008232:	681c      	ldr	r4, [r3, #0]
 8008234:	f7fd fe28 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 8008238:	0002      	movs	r2, r0
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	085b      	lsrs	r3, r3, #1
 8008240:	18d2      	adds	r2, r2, r3
 8008242:	69fb      	ldr	r3, [r7, #28]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	0019      	movs	r1, r3
 8008248:	0010      	movs	r0, r2
 800824a:	f7f7 ff5d 	bl	8000108 <__udivsi3>
 800824e:	0003      	movs	r3, r0
 8008250:	b29b      	uxth	r3, r3
 8008252:	60e3      	str	r3, [r4, #12]
      break;
 8008254:	e019      	b.n	800828a <UART_SetConfig+0x66a>
    case UART_CLOCKSOURCE_LSE:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	681c      	ldr	r4, [r3, #0]
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	085b      	lsrs	r3, r3, #1
 8008260:	2280      	movs	r2, #128	; 0x80
 8008262:	0212      	lsls	r2, r2, #8
 8008264:	189a      	adds	r2, r3, r2
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	0019      	movs	r1, r3
 800826c:	0010      	movs	r0, r2
 800826e:	f7f7 ff4b 	bl	8000108 <__udivsi3>
 8008272:	0003      	movs	r3, r0
 8008274:	b29b      	uxth	r3, r3
 8008276:	60e3      	str	r3, [r4, #12]
      break;
 8008278:	e007      	b.n	800828a <UART_SetConfig+0x66a>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 800827a:	230f      	movs	r3, #15
 800827c:	2218      	movs	r2, #24
 800827e:	4694      	mov	ip, r2
 8008280:	44bc      	add	ip, r7
 8008282:	4463      	add	r3, ip
 8008284:	2201      	movs	r2, #1
 8008286:	701a      	strb	r2, [r3, #0]
      break;
 8008288:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 800828a:	230f      	movs	r3, #15
 800828c:	2218      	movs	r2, #24
 800828e:	4694      	mov	ip, r2
 8008290:	44bc      	add	ip, r7
 8008292:	4463      	add	r3, ip
 8008294:	781b      	ldrb	r3, [r3, #0]

}
 8008296:	0018      	movs	r0, r3
 8008298:	46bd      	mov	sp, r7
 800829a:	b00c      	add	sp, #48	; 0x30
 800829c:	bdb0      	pop	{r4, r5, r7, pc}
 800829e:	46c0      	nop			; (mov r8, r8)
 80082a0:	0800ac68 	.word	0x0800ac68
 80082a4:	40021000 	.word	0x40021000
 80082a8:	007a1200 	.word	0x007a1200
 80082ac:	01e84800 	.word	0x01e84800
 80082b0:	0800ac8c 	.word	0x0800ac8c
 80082b4:	003d0900 	.word	0x003d0900
 80082b8:	00f42400 	.word	0x00f42400

080082bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c8:	2201      	movs	r2, #1
 80082ca:	4013      	ands	r3, r2
 80082cc:	d00a      	beq.n	80082e4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	6812      	ldr	r2, [r2, #0]
 80082d6:	6852      	ldr	r2, [r2, #4]
 80082d8:	4945      	ldr	r1, [pc, #276]	; (80083f0 <UART_AdvFeatureConfig+0x134>)
 80082da:	4011      	ands	r1, r2
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80082e0:	430a      	orrs	r2, r1
 80082e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e8:	2202      	movs	r2, #2
 80082ea:	4013      	ands	r3, r2
 80082ec:	d00a      	beq.n	8008304 <UART_AdvFeatureConfig+0x48>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	6812      	ldr	r2, [r2, #0]
 80082f6:	6852      	ldr	r2, [r2, #4]
 80082f8:	493e      	ldr	r1, [pc, #248]	; (80083f4 <UART_AdvFeatureConfig+0x138>)
 80082fa:	4011      	ands	r1, r2
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008300:	430a      	orrs	r2, r1
 8008302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008308:	2204      	movs	r2, #4
 800830a:	4013      	ands	r3, r2
 800830c:	d00a      	beq.n	8008324 <UART_AdvFeatureConfig+0x68>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	6812      	ldr	r2, [r2, #0]
 8008316:	6852      	ldr	r2, [r2, #4]
 8008318:	4937      	ldr	r1, [pc, #220]	; (80083f8 <UART_AdvFeatureConfig+0x13c>)
 800831a:	4011      	ands	r1, r2
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008320:	430a      	orrs	r2, r1
 8008322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008328:	2208      	movs	r2, #8
 800832a:	4013      	ands	r3, r2
 800832c:	d00a      	beq.n	8008344 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	6812      	ldr	r2, [r2, #0]
 8008336:	6852      	ldr	r2, [r2, #4]
 8008338:	4930      	ldr	r1, [pc, #192]	; (80083fc <UART_AdvFeatureConfig+0x140>)
 800833a:	4011      	ands	r1, r2
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008340:	430a      	orrs	r2, r1
 8008342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008348:	2210      	movs	r2, #16
 800834a:	4013      	ands	r3, r2
 800834c:	d00a      	beq.n	8008364 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	6812      	ldr	r2, [r2, #0]
 8008356:	6892      	ldr	r2, [r2, #8]
 8008358:	4929      	ldr	r1, [pc, #164]	; (8008400 <UART_AdvFeatureConfig+0x144>)
 800835a:	4011      	ands	r1, r2
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008360:	430a      	orrs	r2, r1
 8008362:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008368:	2220      	movs	r2, #32
 800836a:	4013      	ands	r3, r2
 800836c:	d00a      	beq.n	8008384 <UART_AdvFeatureConfig+0xc8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	6812      	ldr	r2, [r2, #0]
 8008376:	6892      	ldr	r2, [r2, #8]
 8008378:	4922      	ldr	r1, [pc, #136]	; (8008404 <UART_AdvFeatureConfig+0x148>)
 800837a:	4011      	ands	r1, r2
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008380:	430a      	orrs	r2, r1
 8008382:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008388:	2240      	movs	r2, #64	; 0x40
 800838a:	4013      	ands	r3, r2
 800838c:	d01b      	beq.n	80083c6 <UART_AdvFeatureConfig+0x10a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	6812      	ldr	r2, [r2, #0]
 8008396:	6852      	ldr	r2, [r2, #4]
 8008398:	491b      	ldr	r1, [pc, #108]	; (8008408 <UART_AdvFeatureConfig+0x14c>)
 800839a:	4011      	ands	r1, r2
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80083a0:	430a      	orrs	r2, r1
 80083a2:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083a8:	2380      	movs	r3, #128	; 0x80
 80083aa:	035b      	lsls	r3, r3, #13
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d10a      	bne.n	80083c6 <UART_AdvFeatureConfig+0x10a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	6812      	ldr	r2, [r2, #0]
 80083b8:	6852      	ldr	r2, [r2, #4]
 80083ba:	4914      	ldr	r1, [pc, #80]	; (800840c <UART_AdvFeatureConfig+0x150>)
 80083bc:	4011      	ands	r1, r2
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80083c2:	430a      	orrs	r2, r1
 80083c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ca:	2280      	movs	r2, #128	; 0x80
 80083cc:	4013      	ands	r3, r2
 80083ce:	d00a      	beq.n	80083e6 <UART_AdvFeatureConfig+0x12a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	6812      	ldr	r2, [r2, #0]
 80083d8:	6852      	ldr	r2, [r2, #4]
 80083da:	490d      	ldr	r1, [pc, #52]	; (8008410 <UART_AdvFeatureConfig+0x154>)
 80083dc:	4011      	ands	r1, r2
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80083e2:	430a      	orrs	r2, r1
 80083e4:	605a      	str	r2, [r3, #4]
  }
}
 80083e6:	46c0      	nop			; (mov r8, r8)
 80083e8:	46bd      	mov	sp, r7
 80083ea:	b002      	add	sp, #8
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	46c0      	nop			; (mov r8, r8)
 80083f0:	fffdffff 	.word	0xfffdffff
 80083f4:	fffeffff 	.word	0xfffeffff
 80083f8:	fffbffff 	.word	0xfffbffff
 80083fc:	ffff7fff 	.word	0xffff7fff
 8008400:	ffffefff 	.word	0xffffefff
 8008404:	ffffdfff 	.word	0xffffdfff
 8008408:	ffefffff 	.word	0xffefffff
 800840c:	ff9fffff 	.word	0xff9fffff
 8008410:	fff7ffff 	.word	0xfff7ffff

08008414 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af02      	add	r7, sp, #8
 800841a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800841c:	2300      	movs	r3, #0
 800841e:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008426:	f7fc fc17 	bl	8004c58 <HAL_GetTick>
 800842a:	0003      	movs	r3, r0
 800842c:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2208      	movs	r2, #8
 8008436:	4013      	ands	r3, r2
 8008438:	2b08      	cmp	r3, #8
 800843a:	d10d      	bne.n	8008458 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800843c:	68fa      	ldr	r2, [r7, #12]
 800843e:	2380      	movs	r3, #128	; 0x80
 8008440:	0399      	lsls	r1, r3, #14
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	4b17      	ldr	r3, [pc, #92]	; (80084a4 <UART_CheckIdleState+0x90>)
 8008446:	9300      	str	r3, [sp, #0]
 8008448:	0013      	movs	r3, r2
 800844a:	2200      	movs	r2, #0
 800844c:	f000 f82c 	bl	80084a8 <UART_WaitOnFlagUntilTimeout>
 8008450:	1e03      	subs	r3, r0, #0
 8008452:	d001      	beq.n	8008458 <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008454:	2303      	movs	r3, #3
 8008456:	e021      	b.n	800849c <UART_CheckIdleState+0x88>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2204      	movs	r2, #4
 8008460:	4013      	ands	r3, r2
 8008462:	2b04      	cmp	r3, #4
 8008464:	d10d      	bne.n	8008482 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	2380      	movs	r3, #128	; 0x80
 800846a:	03d9      	lsls	r1, r3, #15
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	4b0d      	ldr	r3, [pc, #52]	; (80084a4 <UART_CheckIdleState+0x90>)
 8008470:	9300      	str	r3, [sp, #0]
 8008472:	0013      	movs	r3, r2
 8008474:	2200      	movs	r2, #0
 8008476:	f000 f817 	bl	80084a8 <UART_WaitOnFlagUntilTimeout>
 800847a:	1e03      	subs	r3, r0, #0
 800847c:	d001      	beq.n	8008482 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800847e:	2303      	movs	r3, #3
 8008480:	e00c      	b.n	800849c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2269      	movs	r2, #105	; 0x69
 8008486:	2120      	movs	r1, #32
 8008488:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	226a      	movs	r2, #106	; 0x6a
 800848e:	2120      	movs	r1, #32
 8008490:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2268      	movs	r2, #104	; 0x68
 8008496:	2100      	movs	r1, #0
 8008498:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800849a:	2300      	movs	r3, #0
}
 800849c:	0018      	movs	r0, r3
 800849e:	46bd      	mov	sp, r7
 80084a0:	b004      	add	sp, #16
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	01ffffff 	.word	0x01ffffff

080084a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	603b      	str	r3, [r7, #0]
 80084b4:	1dfb      	adds	r3, r7, #7
 80084b6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084b8:	e02b      	b.n	8008512 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80084ba:	69bb      	ldr	r3, [r7, #24]
 80084bc:	3301      	adds	r3, #1
 80084be:	d028      	beq.n	8008512 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d007      	beq.n	80084d6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80084c6:	f7fc fbc7 	bl	8004c58 <HAL_GetTick>
 80084ca:	0002      	movs	r2, r0
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	1ad2      	subs	r2, r2, r3
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d91d      	bls.n	8008512 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	6812      	ldr	r2, [r2, #0]
 80084de:	6812      	ldr	r2, [r2, #0]
 80084e0:	4916      	ldr	r1, [pc, #88]	; (800853c <UART_WaitOnFlagUntilTimeout+0x94>)
 80084e2:	400a      	ands	r2, r1
 80084e4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	6812      	ldr	r2, [r2, #0]
 80084ee:	6892      	ldr	r2, [r2, #8]
 80084f0:	2101      	movs	r1, #1
 80084f2:	438a      	bics	r2, r1
 80084f4:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2269      	movs	r2, #105	; 0x69
 80084fa:	2120      	movs	r1, #32
 80084fc:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	226a      	movs	r2, #106	; 0x6a
 8008502:	2120      	movs	r1, #32
 8008504:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2268      	movs	r2, #104	; 0x68
 800850a:	2100      	movs	r1, #0
 800850c:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 800850e:	2303      	movs	r3, #3
 8008510:	e00f      	b.n	8008532 <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	69db      	ldr	r3, [r3, #28]
 8008518:	68ba      	ldr	r2, [r7, #8]
 800851a:	401a      	ands	r2, r3
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	1ad3      	subs	r3, r2, r3
 8008520:	425a      	negs	r2, r3
 8008522:	4153      	adcs	r3, r2
 8008524:	b2db      	uxtb	r3, r3
 8008526:	001a      	movs	r2, r3
 8008528:	1dfb      	adds	r3, r7, #7
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	429a      	cmp	r2, r3
 800852e:	d0c4      	beq.n	80084ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	0018      	movs	r0, r3
 8008534:	46bd      	mov	sp, r7
 8008536:	b004      	add	sp, #16
 8008538:	bd80      	pop	{r7, pc}
 800853a:	46c0      	nop			; (mov r8, r8)
 800853c:	fffffe5f 	.word	0xfffffe5f

08008540 <DelayMs>:
/* Includes ------------------------------------------------------------------*/
#include "hw.h"
#include "timeServer.h"

void DelayMs( uint32_t ms )
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  HW_RTC_DelayMs( ms );
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	0018      	movs	r0, r3
 800854c:	f000 fcc6 	bl	8008edc <HW_RTC_DelayMs>

}
 8008550:	46c0      	nop			; (mov r8, r8)
 8008552:	46bd      	mov	sp, r7
 8008554:	b002      	add	sp, #8
 8008556:	bd80      	pop	{r7, pc}

08008558 <LowPower_Disable>:
 * \brief API to set flag allowing power mode
 *
 * \param [IN] enum e_LOW_POWER_State_Id_t  
 */
void LowPower_Disable( e_LOW_POWER_State_Id_t state )
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b086      	sub	sp, #24
 800855c:	af00      	add	r7, sp, #0
 800855e:	0002      	movs	r2, r0
 8008560:	1dfb      	adds	r3, r7, #7
 8008562:	701a      	strb	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008564:	f3ef 8310 	mrs	r3, PRIMASK
 8008568:	60fb      	str	r3, [r7, #12]
  return(result);
 800856a:	68fb      	ldr	r3, [r7, #12]
  BACKUP_PRIMASK();
 800856c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800856e:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  
  LowPower_State |= state;
 8008570:	1dfb      	adds	r3, r7, #7
 8008572:	781a      	ldrb	r2, [r3, #0]
 8008574:	4b06      	ldr	r3, [pc, #24]	; (8008590 <LowPower_Disable+0x38>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	431a      	orrs	r2, r3
 800857a:	4b05      	ldr	r3, [pc, #20]	; (8008590 <LowPower_Disable+0x38>)
 800857c:	601a      	str	r2, [r3, #0]
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	f383 8810 	msr	PRIMASK, r3

  RESTORE_PRIMASK( );
}
 8008588:	46c0      	nop			; (mov r8, r8)
 800858a:	46bd      	mov	sp, r7
 800858c:	b006      	add	sp, #24
 800858e:	bd80      	pop	{r7, pc}
 8008590:	200001cc 	.word	0x200001cc

08008594 <LowPower_Enable>:
 * \brief API to reset flag allowing power mode
 *
 * \param [IN] enum e_LOW_POWER_State_Id_t 
 */
void LowPower_Enable( e_LOW_POWER_State_Id_t state )
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b086      	sub	sp, #24
 8008598:	af00      	add	r7, sp, #0
 800859a:	0002      	movs	r2, r0
 800859c:	1dfb      	adds	r3, r7, #7
 800859e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80085a0:	f3ef 8310 	mrs	r3, PRIMASK
 80085a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80085a6:	68fb      	ldr	r3, [r7, #12]
  BACKUP_PRIMASK();
 80085a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80085aa:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  
  LowPower_State &= ~state;
 80085ac:	1dfb      	adds	r3, r7, #7
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	43db      	mvns	r3, r3
 80085b2:	001a      	movs	r2, r3
 80085b4:	4b06      	ldr	r3, [pc, #24]	; (80085d0 <LowPower_Enable+0x3c>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	401a      	ands	r2, r3
 80085ba:	4b05      	ldr	r3, [pc, #20]	; (80085d0 <LowPower_Enable+0x3c>)
 80085bc:	601a      	str	r2, [r3, #0]
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	f383 8810 	msr	PRIMASK, r3
  
  RESTORE_PRIMASK( );
}
 80085c8:	46c0      	nop			; (mov r8, r8)
 80085ca:	46bd      	mov	sp, r7
 80085cc:	b006      	add	sp, #24
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	200001cc 	.word	0x200001cc

080085d4 <LowPower_GetState>:
 * \note When flag is 0, low power mode is allowed
 * \param [IN] state
 * \retval flag state 
 */
uint32_t LowPower_GetState( void )
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	af00      	add	r7, sp, #0
  return LowPower_State;
 80085d8:	4b02      	ldr	r3, [pc, #8]	; (80085e4 <LowPower_GetState+0x10>)
 80085da:	681b      	ldr	r3, [r3, #0]
}
 80085dc:	0018      	movs	r0, r3
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	46c0      	nop			; (mov r8, r8)
 80085e4:	200001cc 	.word	0x200001cc

080085e8 <TimerInit>:
static bool TimerExists( TimerEvent_t *obj );



void TimerInit( TimerEvent_t *obj, void ( *callback )( void ) )
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  obj->Timestamp = 0;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	601a      	str	r2, [r3, #0]
  obj->ReloadValue = 0;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	605a      	str	r2, [r3, #4]
  obj->IsRunning = false;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	721a      	strb	r2, [r3, #8]
  obj->Callback = callback;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	683a      	ldr	r2, [r7, #0]
 8008608:	60da      	str	r2, [r3, #12]
  obj->Next = NULL;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	611a      	str	r2, [r3, #16]
}
 8008610:	46c0      	nop			; (mov r8, r8)
 8008612:	46bd      	mov	sp, r7
 8008614:	b002      	add	sp, #8
 8008616:	bd80      	pop	{r7, pc}

08008618 <TimerStart>:

void TimerStart( TimerEvent_t *obj )
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b088      	sub	sp, #32
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  uint32_t elapsedTime = 0;
 8008620:	2300      	movs	r3, #0
 8008622:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008624:	f3ef 8310 	mrs	r3, PRIMASK
 8008628:	617b      	str	r3, [r7, #20]
  return(result);
 800862a:	697b      	ldr	r3, [r7, #20]
  
  BACKUP_PRIMASK();
 800862c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800862e:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  

  if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d005      	beq.n	8008642 <TimerStart+0x2a>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	0018      	movs	r0, r3
 800863a:	f000 f97b 	bl	8008934 <TimerExists>
 800863e:	1e03      	subs	r3, r0, #0
 8008640:	d005      	beq.n	800864e <TimerStart+0x36>
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK( );
    return;
 800864c:	e030      	b.n	80086b0 <TimerStart+0x98>
  }
  obj->Timestamp = obj->ReloadValue;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	685a      	ldr	r2, [r3, #4]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	601a      	str	r2, [r3, #0]
  obj->IsRunning = false;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	721a      	strb	r2, [r3, #8]

  if( TimerListHead == NULL )
 800865c:	4b16      	ldr	r3, [pc, #88]	; (80086b8 <TimerStart+0xa0>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d106      	bne.n	8008672 <TimerStart+0x5a>
  {
    HW_RTC_SetTimerContext( );
 8008664:	f000 fc5a 	bl	8008f1c <HW_RTC_SetTimerContext>
    TimerInsertNewHeadTimer( obj ); // insert a timeout at now+obj->Timestamp
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	0018      	movs	r0, r3
 800866c:	f000 f854 	bl	8008718 <TimerInsertNewHeadTimer>
 8008670:	e019      	b.n	80086a6 <TimerStart+0x8e>
  }
  else 
  {
    elapsedTime = HW_RTC_GetTimerElapsedTime( );
 8008672:	f000 fbcf 	bl	8008e14 <HW_RTC_GetTimerElapsedTime>
 8008676:	0003      	movs	r3, r0
 8008678:	61fb      	str	r3, [r7, #28]
    obj->Timestamp += elapsedTime;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	18d2      	adds	r2, r2, r3
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	601a      	str	r2, [r3, #0]
  
    if( obj->Timestamp < TimerListHead->Timestamp )
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	4b0b      	ldr	r3, [pc, #44]	; (80086b8 <TimerStart+0xa0>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	429a      	cmp	r2, r3
 8008692:	d204      	bcs.n	800869e <TimerStart+0x86>
    {
      TimerInsertNewHeadTimer( obj);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	0018      	movs	r0, r3
 8008698:	f000 f83e 	bl	8008718 <TimerInsertNewHeadTimer>
 800869c:	e003      	b.n	80086a6 <TimerStart+0x8e>
    }
    else
    {
      TimerInsertTimer( obj);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	0018      	movs	r0, r3
 80086a2:	f000 f80b 	bl	80086bc <TimerInsertTimer>
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	60fb      	str	r3, [r7, #12]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f383 8810 	msr	PRIMASK, r3
    }
  }
  RESTORE_PRIMASK( );
}
 80086b0:	46bd      	mov	sp, r7
 80086b2:	b008      	add	sp, #32
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	46c0      	nop			; (mov r8, r8)
 80086b8:	200001d0 	.word	0x200001d0

080086bc <TimerInsertTimer>:

static void TimerInsertTimer( TimerEvent_t *obj)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 80086c4:	4b13      	ldr	r3, [pc, #76]	; (8008714 <TimerInsertTimer+0x58>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	60fb      	str	r3, [r7, #12]
  TimerEvent_t* next = TimerListHead->Next;
 80086ca:	4b12      	ldr	r3, [pc, #72]	; (8008714 <TimerInsertTimer+0x58>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 80086d2:	e012      	b.n	80086fa <TimerInsertTimer+0x3e>
  {  
    if( obj->Timestamp  > next->Timestamp )
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d905      	bls.n	80086ec <TimerInsertTimer+0x30>
    {
        cur = next;
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	691b      	ldr	r3, [r3, #16]
 80086e8:	60bb      	str	r3, [r7, #8]
 80086ea:	e006      	b.n	80086fa <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = obj;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	611a      	str	r2, [r3, #16]
        obj->Next = next;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	68ba      	ldr	r2, [r7, #8]
 80086f6:	611a      	str	r2, [r3, #16]
        return;
 80086f8:	e009      	b.n	800870e <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d1e8      	bne.n	80086d4 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = obj;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	611a      	str	r2, [r3, #16]
  obj->Next = NULL;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	611a      	str	r2, [r3, #16]
}
 800870e:	46bd      	mov	sp, r7
 8008710:	b004      	add	sp, #16
 8008712:	bd80      	pop	{r7, pc}
 8008714:	200001d0 	.word	0x200001d0

08008718 <TimerInsertNewHeadTimer>:

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 8008720:	4b0b      	ldr	r3, [pc, #44]	; (8008750 <TimerInsertNewHeadTimer+0x38>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d002      	beq.n	8008732 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsRunning = false;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2200      	movs	r2, #0
 8008730:	721a      	strb	r2, [r3, #8]
  }

  obj->Next = cur;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	68fa      	ldr	r2, [r7, #12]
 8008736:	611a      	str	r2, [r3, #16]
  TimerListHead = obj;
 8008738:	4b05      	ldr	r3, [pc, #20]	; (8008750 <TimerInsertNewHeadTimer+0x38>)
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	601a      	str	r2, [r3, #0]
  TimerSetTimeout( TimerListHead );
 800873e:	4b04      	ldr	r3, [pc, #16]	; (8008750 <TimerInsertNewHeadTimer+0x38>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	0018      	movs	r0, r3
 8008744:	f000 f937 	bl	80089b6 <TimerSetTimeout>
}
 8008748:	46c0      	nop			; (mov r8, r8)
 800874a:	46bd      	mov	sp, r7
 800874c:	b004      	add	sp, #16
 800874e:	bd80      	pop	{r7, pc}
 8008750:	200001d0 	.word	0x200001d0

08008754 <TimerIrqHandler>:

void TimerIrqHandler( void )
{
 8008754:	b590      	push	{r4, r7, lr}
 8008756:	b087      	sub	sp, #28
 8008758:	af00      	add	r7, sp, #0
  TimerEvent_t* cur;
  TimerEvent_t* next;
  

  
  uint32_t old =  HW_RTC_GetTimerContext( );
 800875a:	f000 fbf5 	bl	8008f48 <HW_RTC_GetTimerContext>
 800875e:	0003      	movs	r3, r0
 8008760:	613b      	str	r3, [r7, #16]
  uint32_t now =  HW_RTC_SetTimerContext( );
 8008762:	f000 fbdb 	bl	8008f1c <HW_RTC_SetTimerContext>
 8008766:	0003      	movs	r3, r0
 8008768:	60fb      	str	r3, [r7, #12]
  uint32_t DeltaContext = now - old; //intentionnal wrap around
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	1ad3      	subs	r3, r2, r3
 8008770:	60bb      	str	r3, [r7, #8]
  
  /* update timeStamp based upon new Time Reference*/
  /* beacuse delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 8008772:	4b33      	ldr	r3, [pc, #204]	; (8008840 <TimerIrqHandler+0xec>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d01c      	beq.n	80087b4 <TimerIrqHandler+0x60>
  {
    for (cur=TimerListHead; cur->Next != NULL; cur= cur->Next)
 800877a:	4b31      	ldr	r3, [pc, #196]	; (8008840 <TimerIrqHandler+0xec>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	617b      	str	r3, [r7, #20]
 8008780:	e014      	b.n	80087ac <TimerIrqHandler+0x58>
    {
      next =cur->Next;
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	607b      	str	r3, [r7, #4]
      if (next->Timestamp > DeltaContext)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	429a      	cmp	r2, r3
 8008790:	d906      	bls.n	80087a0 <TimerIrqHandler+0x4c>
      {
        next->Timestamp -= DeltaContext;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	1ad2      	subs	r2, r2, r3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	601a      	str	r2, [r3, #0]
 800879e:	e002      	b.n	80087a6 <TimerIrqHandler+0x52>
      }
      else
      {
        next->Timestamp = 0 ;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	601a      	str	r2, [r3, #0]
    for (cur=TimerListHead; cur->Next != NULL; cur= cur->Next)
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	691b      	ldr	r3, [r3, #16]
 80087aa:	617b      	str	r3, [r7, #20]
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d1e6      	bne.n	8008782 <TimerIrqHandler+0x2e>
      }
    }
  }
  
  /* execute imediately the alarm callback */
  if ( TimerListHead != NULL )
 80087b4:	4b22      	ldr	r3, [pc, #136]	; (8008840 <TimerIrqHandler+0xec>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d020      	beq.n	80087fe <TimerIrqHandler+0xaa>
  {
    cur = TimerListHead;
 80087bc:	4b20      	ldr	r3, [pc, #128]	; (8008840 <TimerIrqHandler+0xec>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	617b      	str	r3, [r7, #20]
    TimerListHead = TimerListHead->Next;
 80087c2:	4b1f      	ldr	r3, [pc, #124]	; (8008840 <TimerIrqHandler+0xec>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	691a      	ldr	r2, [r3, #16]
 80087c8:	4b1d      	ldr	r3, [pc, #116]	; (8008840 <TimerIrqHandler+0xec>)
 80087ca:	601a      	str	r2, [r3, #0]
    exec_cb( cur->Callback );
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d100      	bne.n	80087d6 <TimerIrqHandler+0x82>
 80087d4:	e7fe      	b.n	80087d4 <TimerIrqHandler+0x80>
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	4798      	blx	r3
  }


  // remove all the expired object from the list
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 80087dc:	e00f      	b.n	80087fe <TimerIrqHandler+0xaa>
  {
   cur = TimerListHead;
 80087de:	4b18      	ldr	r3, [pc, #96]	; (8008840 <TimerIrqHandler+0xec>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	617b      	str	r3, [r7, #20]
   TimerListHead = TimerListHead->Next;
 80087e4:	4b16      	ldr	r3, [pc, #88]	; (8008840 <TimerIrqHandler+0xec>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	691a      	ldr	r2, [r3, #16]
 80087ea:	4b15      	ldr	r3, [pc, #84]	; (8008840 <TimerIrqHandler+0xec>)
 80087ec:	601a      	str	r2, [r3, #0]
   exec_cb( cur->Callback );
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d100      	bne.n	80087f8 <TimerIrqHandler+0xa4>
 80087f6:	e7fe      	b.n	80087f6 <TimerIrqHandler+0xa2>
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	4798      	blx	r3
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 80087fe:	4b10      	ldr	r3, [pc, #64]	; (8008840 <TimerIrqHandler+0xec>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d007      	beq.n	8008816 <TimerIrqHandler+0xc2>
 8008806:	4b0e      	ldr	r3, [pc, #56]	; (8008840 <TimerIrqHandler+0xec>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	681c      	ldr	r4, [r3, #0]
 800880c:	f000 fb02 	bl	8008e14 <HW_RTC_GetTimerElapsedTime>
 8008810:	0003      	movs	r3, r0
 8008812:	429c      	cmp	r4, r3
 8008814:	d3e3      	bcc.n	80087de <TimerIrqHandler+0x8a>
  }

  /* start the next TimerListHead if it exists AND NOT running */
  if(( TimerListHead != NULL ) && (TimerListHead->IsRunning == false))
 8008816:	4b0a      	ldr	r3, [pc, #40]	; (8008840 <TimerIrqHandler+0xec>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00c      	beq.n	8008838 <TimerIrqHandler+0xe4>
 800881e:	4b08      	ldr	r3, [pc, #32]	; (8008840 <TimerIrqHandler+0xec>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	7a1b      	ldrb	r3, [r3, #8]
 8008824:	2201      	movs	r2, #1
 8008826:	4053      	eors	r3, r2
 8008828:	b2db      	uxtb	r3, r3
 800882a:	2b00      	cmp	r3, #0
 800882c:	d004      	beq.n	8008838 <TimerIrqHandler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 800882e:	4b04      	ldr	r3, [pc, #16]	; (8008840 <TimerIrqHandler+0xec>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	0018      	movs	r0, r3
 8008834:	f000 f8bf 	bl	80089b6 <TimerSetTimeout>
  }
}
 8008838:	46c0      	nop			; (mov r8, r8)
 800883a:	46bd      	mov	sp, r7
 800883c:	b007      	add	sp, #28
 800883e:	bd90      	pop	{r4, r7, pc}
 8008840:	200001d0 	.word	0x200001d0

08008844 <TimerStop>:

void TimerStop( TimerEvent_t *obj ) 
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b088      	sub	sp, #32
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800884c:	f3ef 8310 	mrs	r3, PRIMASK
 8008850:	613b      	str	r3, [r7, #16]
  return(result);
 8008852:	693b      	ldr	r3, [r7, #16]
  BACKUP_PRIMASK();
 8008854:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008856:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  
  TimerEvent_t* prev = TimerListHead;
 8008858:	4b35      	ldr	r3, [pc, #212]	; (8008930 <TimerStop+0xec>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	61fb      	str	r3, [r7, #28]
  TimerEvent_t* cur = TimerListHead;
 800885e:	4b34      	ldr	r3, [pc, #208]	; (8008930 <TimerStop+0xec>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	61bb      	str	r3, [r7, #24]

  // List is empty or the Obj to stop does not exist 
  if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 8008864:	4b32      	ldr	r3, [pc, #200]	; (8008930 <TimerStop+0xec>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d002      	beq.n	8008872 <TimerStop+0x2e>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d105      	bne.n	800887e <TimerStop+0x3a>
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK( );
    return;
 800887c:	e054      	b.n	8008928 <TimerStop+0xe4>
  }

  if( TimerListHead == obj ) // Stop the Head                  
 800887e:	4b2c      	ldr	r3, [pc, #176]	; (8008930 <TimerStop+0xec>)
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	429a      	cmp	r2, r3
 8008886:	d147      	bne.n	8008918 <TimerStop+0xd4>
  {
    if( TimerListHead->IsRunning == true ) // The head is already running 
 8008888:	4b29      	ldr	r3, [pc, #164]	; (8008930 <TimerStop+0xec>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	7a1b      	ldrb	r3, [r3, #8]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d019      	beq.n	80088c6 <TimerStop+0x82>
    {    
      if( TimerListHead->Next != NULL )
 8008892:	4b27      	ldr	r3, [pc, #156]	; (8008930 <TimerStop+0xec>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	691b      	ldr	r3, [r3, #16]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00e      	beq.n	80088ba <TimerStop+0x76>
      {
        TimerListHead->IsRunning = false;
 800889c:	4b24      	ldr	r3, [pc, #144]	; (8008930 <TimerStop+0xec>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2200      	movs	r2, #0
 80088a2:	721a      	strb	r2, [r3, #8]
        TimerListHead = TimerListHead->Next;
 80088a4:	4b22      	ldr	r3, [pc, #136]	; (8008930 <TimerStop+0xec>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	691a      	ldr	r2, [r3, #16]
 80088aa:	4b21      	ldr	r3, [pc, #132]	; (8008930 <TimerStop+0xec>)
 80088ac:	601a      	str	r2, [r3, #0]
        TimerSetTimeout( TimerListHead );
 80088ae:	4b20      	ldr	r3, [pc, #128]	; (8008930 <TimerStop+0xec>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	0018      	movs	r0, r3
 80088b4:	f000 f87f 	bl	80089b6 <TimerSetTimeout>
 80088b8:	e031      	b.n	800891e <TimerStop+0xda>
      }
      else
      {
        HW_RTC_StopAlarm( );
 80088ba:	f000 fae7 	bl	8008e8c <HW_RTC_StopAlarm>
        TimerListHead = NULL;
 80088be:	4b1c      	ldr	r3, [pc, #112]	; (8008930 <TimerStop+0xec>)
 80088c0:	2200      	movs	r2, #0
 80088c2:	601a      	str	r2, [r3, #0]
 80088c4:	e02b      	b.n	800891e <TimerStop+0xda>
      }
    }
    else // Stop the head before it is started
    {   
      if( TimerListHead->Next != NULL )   
 80088c6:	4b1a      	ldr	r3, [pc, #104]	; (8008930 <TimerStop+0xec>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	691b      	ldr	r3, [r3, #16]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d005      	beq.n	80088dc <TimerStop+0x98>
      {
        TimerListHead = TimerListHead->Next;
 80088d0:	4b17      	ldr	r3, [pc, #92]	; (8008930 <TimerStop+0xec>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	691a      	ldr	r2, [r3, #16]
 80088d6:	4b16      	ldr	r3, [pc, #88]	; (8008930 <TimerStop+0xec>)
 80088d8:	601a      	str	r2, [r3, #0]
 80088da:	e020      	b.n	800891e <TimerStop+0xda>
      }
      else
      {
        TimerListHead = NULL;
 80088dc:	4b14      	ldr	r3, [pc, #80]	; (8008930 <TimerStop+0xec>)
 80088de:	2200      	movs	r2, #0
 80088e0:	601a      	str	r2, [r3, #0]
 80088e2:	e01c      	b.n	800891e <TimerStop+0xda>
  }
  else // Stop an object within the list
  {      
    while( cur != NULL )
    {
      if( cur == obj )
 80088e4:	69ba      	ldr	r2, [r7, #24]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d110      	bne.n	800890e <TimerStop+0xca>
      {
        if( cur->Next != NULL )
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	691b      	ldr	r3, [r3, #16]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d006      	beq.n	8008902 <TimerStop+0xbe>
        {
          cur = cur->Next;
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	61bb      	str	r3, [r7, #24]
          prev->Next = cur;
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	69ba      	ldr	r2, [r7, #24]
 80088fe:	611a      	str	r2, [r3, #16]
        else
        {
          cur = NULL;
          prev->Next = cur;
        }
        break;
 8008900:	e00d      	b.n	800891e <TimerStop+0xda>
          cur = NULL;
 8008902:	2300      	movs	r3, #0
 8008904:	61bb      	str	r3, [r7, #24]
          prev->Next = cur;
 8008906:	69fb      	ldr	r3, [r7, #28]
 8008908:	69ba      	ldr	r2, [r7, #24]
 800890a:	611a      	str	r2, [r3, #16]
        break;
 800890c:	e007      	b.n	800891e <TimerStop+0xda>
      }
      else
      {
        prev = cur;
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	61fb      	str	r3, [r7, #28]
        cur = cur->Next;
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	691b      	ldr	r3, [r3, #16]
 8008916:	61bb      	str	r3, [r7, #24]
    while( cur != NULL )
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1e2      	bne.n	80088e4 <TimerStop+0xa0>
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	60bb      	str	r3, [r7, #8]
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	f383 8810 	msr	PRIMASK, r3
      }
    }   
  }
  
  RESTORE_PRIMASK( );
}  
 8008928:	46bd      	mov	sp, r7
 800892a:	b008      	add	sp, #32
 800892c:	bd80      	pop	{r7, pc}
 800892e:	46c0      	nop			; (mov r8, r8)
 8008930:	200001d0 	.word	0x200001d0

08008934 <TimerExists>:
  
static bool TimerExists( TimerEvent_t *obj )
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 800893c:	4b0a      	ldr	r3, [pc, #40]	; (8008968 <TimerExists+0x34>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 8008942:	e008      	b.n	8008956 <TimerExists+0x22>
  {
    if( cur == obj )
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	429a      	cmp	r2, r3
 800894a:	d101      	bne.n	8008950 <TimerExists+0x1c>
    {
      return true;
 800894c:	2301      	movs	r3, #1
 800894e:	e006      	b.n	800895e <TimerExists+0x2a>
    }
    cur = cur->Next;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	691b      	ldr	r3, [r3, #16]
 8008954:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d1f3      	bne.n	8008944 <TimerExists+0x10>
  }
  return false;
 800895c:	2300      	movs	r3, #0
}
 800895e:	0018      	movs	r0, r3
 8008960:	46bd      	mov	sp, r7
 8008962:	b004      	add	sp, #16
 8008964:	bd80      	pop	{r7, pc}
 8008966:	46c0      	nop			; (mov r8, r8)
 8008968:	200001d0 	.word	0x200001d0

0800896c <TimerSetValue>:
  TimerStop( obj );
  TimerStart( obj );
}

void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  uint32_t minValue = 0;
 8008976:	2300      	movs	r3, #0
 8008978:	60bb      	str	r3, [r7, #8]
  uint32_t ticks = HW_RTC_ms2Tick( value );
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	0018      	movs	r0, r3
 800897e:	f000 fa01 	bl	8008d84 <HW_RTC_ms2Tick>
 8008982:	0003      	movs	r3, r0
 8008984:	60fb      	str	r3, [r7, #12]

  TimerStop( obj );
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	0018      	movs	r0, r3
 800898a:	f7ff ff5b 	bl	8008844 <TimerStop>

  minValue = HW_RTC_GetMinimumTimeout( );
 800898e:	f000 f9f3 	bl	8008d78 <HW_RTC_GetMinimumTimeout>
 8008992:	0003      	movs	r3, r0
 8008994:	60bb      	str	r3, [r7, #8]
  
  if( ticks < minValue )
 8008996:	68fa      	ldr	r2, [r7, #12]
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	429a      	cmp	r2, r3
 800899c:	d201      	bcs.n	80089a2 <TimerSetValue+0x36>
  {
    ticks = minValue;
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	60fb      	str	r3, [r7, #12]
  }

  obj->Timestamp = ticks;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	68fa      	ldr	r2, [r7, #12]
 80089a6:	601a      	str	r2, [r3, #0]
  obj->ReloadValue = ticks;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	68fa      	ldr	r2, [r7, #12]
 80089ac:	605a      	str	r2, [r3, #4]
}
 80089ae:	46c0      	nop			; (mov r8, r8)
 80089b0:	46bd      	mov	sp, r7
 80089b2:	b004      	add	sp, #16
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <TimerSetTimeout>:
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 80089b6:	b590      	push	{r4, r7, lr}
 80089b8:	b085      	sub	sp, #20
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 80089be:	f000 f9db 	bl	8008d78 <HW_RTC_GetMinimumTimeout>
 80089c2:	0003      	movs	r3, r0
 80089c4:	60fb      	str	r3, [r7, #12]
  obj->IsRunning = true; 
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2201      	movs	r2, #1
 80089ca:	721a      	strb	r2, [r3, #8]

  //in case deadline too soon
  if(obj->Timestamp  < (HW_RTC_GetTimerElapsedTime(  ) + minTicks) )
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681c      	ldr	r4, [r3, #0]
 80089d0:	f000 fa20 	bl	8008e14 <HW_RTC_GetTimerElapsedTime>
 80089d4:	0002      	movs	r2, r0
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	18d3      	adds	r3, r2, r3
 80089da:	429c      	cmp	r4, r3
 80089dc:	d206      	bcs.n	80089ec <TimerSetTimeout+0x36>
  {
    obj->Timestamp = HW_RTC_GetTimerElapsedTime(  ) + minTicks;
 80089de:	f000 fa19 	bl	8008e14 <HW_RTC_GetTimerElapsedTime>
 80089e2:	0002      	movs	r2, r0
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	18d2      	adds	r2, r2, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	601a      	str	r2, [r3, #0]
  }
  HW_RTC_SetAlarm( obj->Timestamp );
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	0018      	movs	r0, r3
 80089f2:	f000 f9df 	bl	8008db4 <HW_RTC_SetAlarm>
}
 80089f6:	46c0      	nop			; (mov r8, r8)
 80089f8:	46bd      	mov	sp, r7
 80089fa:	b005      	add	sp, #20
 80089fc:	bd90      	pop	{r4, r7, pc}

080089fe <memcpy1>:
{
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b084      	sub	sp, #16
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	60f8      	str	r0, [r7, #12]
 8008a06:	60b9      	str	r1, [r7, #8]
 8008a08:	1dbb      	adds	r3, r7, #6
 8008a0a:	801a      	strh	r2, [r3, #0]
    while( size-- )
 8008a0c:	e007      	b.n	8008a1e <memcpy1+0x20>
    {
        *dst++ = *src++;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	1c5a      	adds	r2, r3, #1
 8008a12:	60fa      	str	r2, [r7, #12]
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	1c51      	adds	r1, r2, #1
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	7812      	ldrb	r2, [r2, #0]
 8008a1c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8008a1e:	1dbb      	adds	r3, r7, #6
 8008a20:	881b      	ldrh	r3, [r3, #0]
 8008a22:	1dba      	adds	r2, r7, #6
 8008a24:	1e59      	subs	r1, r3, #1
 8008a26:	8011      	strh	r1, [r2, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d1f0      	bne.n	8008a0e <memcpy1+0x10>
    }
}
 8008a2c:	46c0      	nop			; (mov r8, r8)
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	b004      	add	sp, #16
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <Error_Handler>:
  * @brief Error_Handler
  * @param None
  * @retval None
  */
void Error_Handler(void)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	af00      	add	r7, sp, #0
  DBG_PRINTF("Error_Handler\n");
  while(1);
 8008a38:	e7fe      	b.n	8008a38 <Error_Handler+0x4>
	...

08008a3c <HW_GPIO_Init>:
 *                   All port bits are not necessarily available on all GPIOs.
 * @param [IN] initStruct  GPIO_InitTypeDef intit structure
 * @retval none
 */
void HW_GPIO_Init( GPIO_TypeDef* port, uint16_t GPIO_Pin, GPIO_InitTypeDef* initStruct)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b08a      	sub	sp, #40	; 0x28
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	607a      	str	r2, [r7, #4]
 8008a46:	230a      	movs	r3, #10
 8008a48:	18fb      	adds	r3, r7, r3
 8008a4a:	1c0a      	adds	r2, r1, #0
 8008a4c:	801a      	strh	r2, [r3, #0]

  RCC_GPIO_CLK_ENABLE(  (uint32_t) port);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	4a30      	ldr	r2, [pc, #192]	; (8008b14 <HW_GPIO_Init+0xd8>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d01b      	beq.n	8008a8e <HW_GPIO_Init+0x52>
 8008a56:	4a2f      	ldr	r2, [pc, #188]	; (8008b14 <HW_GPIO_Init+0xd8>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d804      	bhi.n	8008a66 <HW_GPIO_Init+0x2a>
 8008a5c:	22a0      	movs	r2, #160	; 0xa0
 8008a5e:	05d2      	lsls	r2, r2, #23
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d007      	beq.n	8008a74 <HW_GPIO_Init+0x38>
 8008a64:	e03a      	b.n	8008adc <HW_GPIO_Init+0xa0>
 8008a66:	4a2c      	ldr	r2, [pc, #176]	; (8008b18 <HW_GPIO_Init+0xdc>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d01d      	beq.n	8008aa8 <HW_GPIO_Init+0x6c>
 8008a6c:	4a2b      	ldr	r2, [pc, #172]	; (8008b1c <HW_GPIO_Init+0xe0>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d027      	beq.n	8008ac2 <HW_GPIO_Init+0x86>
 8008a72:	e033      	b.n	8008adc <HW_GPIO_Init+0xa0>
 8008a74:	4b2a      	ldr	r3, [pc, #168]	; (8008b20 <HW_GPIO_Init+0xe4>)
 8008a76:	4a2a      	ldr	r2, [pc, #168]	; (8008b20 <HW_GPIO_Init+0xe4>)
 8008a78:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008a7a:	2101      	movs	r1, #1
 8008a7c:	430a      	orrs	r2, r1
 8008a7e:	62da      	str	r2, [r3, #44]	; 0x2c
 8008a80:	4b27      	ldr	r3, [pc, #156]	; (8008b20 <HW_GPIO_Init+0xe4>)
 8008a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a84:	2201      	movs	r2, #1
 8008a86:	4013      	ands	r3, r2
 8008a88:	627b      	str	r3, [r7, #36]	; 0x24
 8008a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8c:	e032      	b.n	8008af4 <HW_GPIO_Init+0xb8>
 8008a8e:	4b24      	ldr	r3, [pc, #144]	; (8008b20 <HW_GPIO_Init+0xe4>)
 8008a90:	4a23      	ldr	r2, [pc, #140]	; (8008b20 <HW_GPIO_Init+0xe4>)
 8008a92:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008a94:	2102      	movs	r1, #2
 8008a96:	430a      	orrs	r2, r1
 8008a98:	62da      	str	r2, [r3, #44]	; 0x2c
 8008a9a:	4b21      	ldr	r3, [pc, #132]	; (8008b20 <HW_GPIO_Init+0xe4>)
 8008a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a9e:	2202      	movs	r2, #2
 8008aa0:	4013      	ands	r3, r2
 8008aa2:	623b      	str	r3, [r7, #32]
 8008aa4:	6a3b      	ldr	r3, [r7, #32]
 8008aa6:	e025      	b.n	8008af4 <HW_GPIO_Init+0xb8>
 8008aa8:	4b1d      	ldr	r3, [pc, #116]	; (8008b20 <HW_GPIO_Init+0xe4>)
 8008aaa:	4a1d      	ldr	r2, [pc, #116]	; (8008b20 <HW_GPIO_Init+0xe4>)
 8008aac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008aae:	2104      	movs	r1, #4
 8008ab0:	430a      	orrs	r2, r1
 8008ab2:	62da      	str	r2, [r3, #44]	; 0x2c
 8008ab4:	4b1a      	ldr	r3, [pc, #104]	; (8008b20 <HW_GPIO_Init+0xe4>)
 8008ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab8:	2204      	movs	r2, #4
 8008aba:	4013      	ands	r3, r2
 8008abc:	61fb      	str	r3, [r7, #28]
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	e018      	b.n	8008af4 <HW_GPIO_Init+0xb8>
 8008ac2:	4b17      	ldr	r3, [pc, #92]	; (8008b20 <HW_GPIO_Init+0xe4>)
 8008ac4:	4a16      	ldr	r2, [pc, #88]	; (8008b20 <HW_GPIO_Init+0xe4>)
 8008ac6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008ac8:	2108      	movs	r1, #8
 8008aca:	430a      	orrs	r2, r1
 8008acc:	62da      	str	r2, [r3, #44]	; 0x2c
 8008ace:	4b14      	ldr	r3, [pc, #80]	; (8008b20 <HW_GPIO_Init+0xe4>)
 8008ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad2:	2208      	movs	r2, #8
 8008ad4:	4013      	ands	r3, r2
 8008ad6:	61bb      	str	r3, [r7, #24]
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	e00b      	b.n	8008af4 <HW_GPIO_Init+0xb8>
 8008adc:	4b10      	ldr	r3, [pc, #64]	; (8008b20 <HW_GPIO_Init+0xe4>)
 8008ade:	4a10      	ldr	r2, [pc, #64]	; (8008b20 <HW_GPIO_Init+0xe4>)
 8008ae0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008ae2:	2180      	movs	r1, #128	; 0x80
 8008ae4:	430a      	orrs	r2, r1
 8008ae6:	62da      	str	r2, [r3, #44]	; 0x2c
 8008ae8:	4b0d      	ldr	r3, [pc, #52]	; (8008b20 <HW_GPIO_Init+0xe4>)
 8008aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aec:	2280      	movs	r2, #128	; 0x80
 8008aee:	4013      	ands	r3, r2
 8008af0:	617b      	str	r3, [r7, #20]
 8008af2:	697b      	ldr	r3, [r7, #20]

  initStruct->Pin = GPIO_Pin ;
 8008af4:	230a      	movs	r3, #10
 8008af6:	18fb      	adds	r3, r7, r3
 8008af8:	881a      	ldrh	r2, [r3, #0]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	601a      	str	r2, [r3, #0]

  HAL_GPIO_Init( port, initStruct );
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	0011      	movs	r1, r2
 8008b04:	0018      	movs	r0, r3
 8008b06:	f7fc fb21 	bl	800514c <HAL_GPIO_Init>
}
 8008b0a:	46c0      	nop			; (mov r8, r8)
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	b00a      	add	sp, #40	; 0x28
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	46c0      	nop			; (mov r8, r8)
 8008b14:	50000400 	.word	0x50000400
 8008b18:	50000800 	.word	0x50000800
 8008b1c:	50000c00 	.word	0x50000c00
 8008b20:	40021000 	.word	0x40021000

08008b24 <HW_GPIO_SetIrq>:
 * @param [IN] prio       NVIC priority (0 is highest)
 * @param [IN] irqHandler  points to the  function to execute
 * @retval none
 */
void HW_GPIO_SetIrq( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint32_t prio,  GpioIrqHandler *irqHandler )
{
 8008b24:	b590      	push	{r4, r7, lr}
 8008b26:	b087      	sub	sp, #28
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	607a      	str	r2, [r7, #4]
 8008b2e:	603b      	str	r3, [r7, #0]
 8008b30:	230a      	movs	r3, #10
 8008b32:	18fb      	adds	r3, r7, r3
 8008b34:	1c0a      	adds	r2, r1, #0
 8008b36:	801a      	strh	r2, [r3, #0]
  IRQn_Type IRQnb;
  
  uint32_t BitPos = HW_GPIO_GetBitPos( GPIO_Pin ) ;
 8008b38:	230a      	movs	r3, #10
 8008b3a:	18fb      	adds	r3, r7, r3
 8008b3c:	881b      	ldrh	r3, [r3, #0]
 8008b3e:	0018      	movs	r0, r3
 8008b40:	f000 f85e 	bl	8008c00 <HW_GPIO_GetBitPos>
 8008b44:	0003      	movs	r3, r0
 8008b46:	617b      	str	r3, [r7, #20]
  
  if ( irqHandler != NULL)
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d01e      	beq.n	8008b8c <HW_GPIO_SetIrq+0x68>
  {
    GpioIrq[ BitPos ] = irqHandler;
 8008b4e:	4b11      	ldr	r3, [pc, #68]	; (8008b94 <HW_GPIO_SetIrq+0x70>)
 8008b50:	697a      	ldr	r2, [r7, #20]
 8008b52:	0092      	lsls	r2, r2, #2
 8008b54:	6839      	ldr	r1, [r7, #0]
 8008b56:	50d1      	str	r1, [r2, r3]

    IRQnb = MSP_GetIRQn( GPIO_Pin );
 8008b58:	2313      	movs	r3, #19
 8008b5a:	18fc      	adds	r4, r7, r3
 8008b5c:	230a      	movs	r3, #10
 8008b5e:	18fb      	adds	r3, r7, r3
 8008b60:	881b      	ldrh	r3, [r3, #0]
 8008b62:	0018      	movs	r0, r3
 8008b64:	f000 fe6d 	bl	8009842 <MSP_GetIRQn>
 8008b68:	0003      	movs	r3, r0
 8008b6a:	7023      	strb	r3, [r4, #0]

    HAL_NVIC_SetPriority( IRQnb , prio, 0);
 8008b6c:	6879      	ldr	r1, [r7, #4]
 8008b6e:	2313      	movs	r3, #19
 8008b70:	18fb      	adds	r3, r7, r3
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	b25b      	sxtb	r3, r3
 8008b76:	2200      	movs	r2, #0
 8008b78:	0018      	movs	r0, r3
 8008b7a:	f7fc faa1 	bl	80050c0 <HAL_NVIC_SetPriority>
    
    HAL_NVIC_EnableIRQ( IRQnb );
 8008b7e:	2313      	movs	r3, #19
 8008b80:	18fb      	adds	r3, r7, r3
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	b25b      	sxtb	r3, r3
 8008b86:	0018      	movs	r0, r3
 8008b88:	f7fc fab0 	bl	80050ec <HAL_NVIC_EnableIRQ>
  }
}
 8008b8c:	46c0      	nop			; (mov r8, r8)
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	b007      	add	sp, #28
 8008b92:	bd90      	pop	{r4, r7, pc}
 8008b94:	200001d4 	.word	0x200001d4

08008b98 <HW_GPIO_IrqHandler>:
 *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
 *                   All port bits are not necessarily available on all GPIOs.
 * @retval none
 */
void HW_GPIO_IrqHandler( uint16_t GPIO_Pin )
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	0002      	movs	r2, r0
 8008ba0:	1dbb      	adds	r3, r7, #6
 8008ba2:	801a      	strh	r2, [r3, #0]
  uint32_t BitPos = HW_GPIO_GetBitPos( GPIO_Pin );
 8008ba4:	1dbb      	adds	r3, r7, #6
 8008ba6:	881b      	ldrh	r3, [r3, #0]
 8008ba8:	0018      	movs	r0, r3
 8008baa:	f000 f829 	bl	8008c00 <HW_GPIO_GetBitPos>
 8008bae:	0003      	movs	r3, r0
 8008bb0:	60fb      	str	r3, [r7, #12]
  
  if ( GpioIrq[ BitPos ]  != NULL)
 8008bb2:	4b07      	ldr	r3, [pc, #28]	; (8008bd0 <HW_GPIO_IrqHandler+0x38>)
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	0092      	lsls	r2, r2, #2
 8008bb8:	58d3      	ldr	r3, [r2, r3]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d004      	beq.n	8008bc8 <HW_GPIO_IrqHandler+0x30>
  {
    GpioIrq[ BitPos ] ( );
 8008bbe:	4b04      	ldr	r3, [pc, #16]	; (8008bd0 <HW_GPIO_IrqHandler+0x38>)
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	0092      	lsls	r2, r2, #2
 8008bc4:	58d3      	ldr	r3, [r2, r3]
 8008bc6:	4798      	blx	r3
  }
}
 8008bc8:	46c0      	nop			; (mov r8, r8)
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	b004      	add	sp, #16
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	200001d4 	.word	0x200001d4

08008bd4 <HW_GPIO_Write>:
 *                   All port bits are not necessarily available on all GPIOs.
 * @param [IN] value New GPIO output value
 * @retval none
 */
void HW_GPIO_Write( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,  uint32_t value )
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	607a      	str	r2, [r7, #4]
 8008bde:	230a      	movs	r3, #10
 8008be0:	18fb      	adds	r3, r7, r3
 8008be2:	1c0a      	adds	r2, r1, #0
 8008be4:	801a      	strh	r2, [r3, #0]
  HAL_GPIO_WritePin( GPIOx, GPIO_Pin , (GPIO_PinState) value );
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	b2da      	uxtb	r2, r3
 8008bea:	230a      	movs	r3, #10
 8008bec:	18fb      	adds	r3, r7, r3
 8008bee:	8819      	ldrh	r1, [r3, #0]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	0018      	movs	r0, r3
 8008bf4:	f7fc fc28 	bl	8005448 <HAL_GPIO_WritePin>
}
 8008bf8:	46c0      	nop			; (mov r8, r8)
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	b004      	add	sp, #16
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <HW_GPIO_GetBitPos>:
 *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
 *                   All port bits are not necessarily available on all GPIOs.
 * @retval the position of the bit
 */
static uint8_t HW_GPIO_GetBitPos(uint16_t GPIO_Pin)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	0002      	movs	r2, r0
 8008c08:	1dbb      	adds	r3, r7, #6
 8008c0a:	801a      	strh	r2, [r3, #0]
  uint8_t PinPos=0;
 8008c0c:	230f      	movs	r3, #15
 8008c0e:	18fb      	adds	r3, r7, r3
 8008c10:	2200      	movs	r2, #0
 8008c12:	701a      	strb	r2, [r3, #0]
  
  if ( ( GPIO_Pin & 0xFF00 ) != 0) { PinPos |= 0x8; }
 8008c14:	1dbb      	adds	r3, r7, #6
 8008c16:	881a      	ldrh	r2, [r3, #0]
 8008c18:	23ff      	movs	r3, #255	; 0xff
 8008c1a:	021b      	lsls	r3, r3, #8
 8008c1c:	4013      	ands	r3, r2
 8008c1e:	d007      	beq.n	8008c30 <HW_GPIO_GetBitPos+0x30>
 8008c20:	230f      	movs	r3, #15
 8008c22:	18fb      	adds	r3, r7, r3
 8008c24:	220f      	movs	r2, #15
 8008c26:	18ba      	adds	r2, r7, r2
 8008c28:	7812      	ldrb	r2, [r2, #0]
 8008c2a:	2108      	movs	r1, #8
 8008c2c:	430a      	orrs	r2, r1
 8008c2e:	701a      	strb	r2, [r3, #0]
  if ( ( GPIO_Pin & 0xF0F0 ) != 0) { PinPos |= 0x4; }
 8008c30:	1dbb      	adds	r3, r7, #6
 8008c32:	881b      	ldrh	r3, [r3, #0]
 8008c34:	4a15      	ldr	r2, [pc, #84]	; (8008c8c <HW_GPIO_GetBitPos+0x8c>)
 8008c36:	4013      	ands	r3, r2
 8008c38:	d007      	beq.n	8008c4a <HW_GPIO_GetBitPos+0x4a>
 8008c3a:	230f      	movs	r3, #15
 8008c3c:	18fb      	adds	r3, r7, r3
 8008c3e:	220f      	movs	r2, #15
 8008c40:	18ba      	adds	r2, r7, r2
 8008c42:	7812      	ldrb	r2, [r2, #0]
 8008c44:	2104      	movs	r1, #4
 8008c46:	430a      	orrs	r2, r1
 8008c48:	701a      	strb	r2, [r3, #0]
  if ( ( GPIO_Pin & 0xCCCC ) != 0) { PinPos |= 0x2; }
 8008c4a:	1dbb      	adds	r3, r7, #6
 8008c4c:	881b      	ldrh	r3, [r3, #0]
 8008c4e:	4a10      	ldr	r2, [pc, #64]	; (8008c90 <HW_GPIO_GetBitPos+0x90>)
 8008c50:	4013      	ands	r3, r2
 8008c52:	d007      	beq.n	8008c64 <HW_GPIO_GetBitPos+0x64>
 8008c54:	230f      	movs	r3, #15
 8008c56:	18fb      	adds	r3, r7, r3
 8008c58:	220f      	movs	r2, #15
 8008c5a:	18ba      	adds	r2, r7, r2
 8008c5c:	7812      	ldrb	r2, [r2, #0]
 8008c5e:	2102      	movs	r1, #2
 8008c60:	430a      	orrs	r2, r1
 8008c62:	701a      	strb	r2, [r3, #0]
  if ( ( GPIO_Pin & 0xAAAA ) != 0) { PinPos |= 0x1; }
 8008c64:	1dbb      	adds	r3, r7, #6
 8008c66:	881b      	ldrh	r3, [r3, #0]
 8008c68:	4a0a      	ldr	r2, [pc, #40]	; (8008c94 <HW_GPIO_GetBitPos+0x94>)
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	d007      	beq.n	8008c7e <HW_GPIO_GetBitPos+0x7e>
 8008c6e:	230f      	movs	r3, #15
 8008c70:	18fb      	adds	r3, r7, r3
 8008c72:	220f      	movs	r2, #15
 8008c74:	18ba      	adds	r2, r7, r2
 8008c76:	7812      	ldrb	r2, [r2, #0]
 8008c78:	2101      	movs	r1, #1
 8008c7a:	430a      	orrs	r2, r1
 8008c7c:	701a      	strb	r2, [r3, #0]
  
  return PinPos;
 8008c7e:	230f      	movs	r3, #15
 8008c80:	18fb      	adds	r3, r7, r3
 8008c82:	781b      	ldrb	r3, [r3, #0]
}
 8008c84:	0018      	movs	r0, r3
 8008c86:	46bd      	mov	sp, r7
 8008c88:	b004      	add	sp, #16
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	0000f0f0 	.word	0x0000f0f0
 8008c90:	0000cccc 	.word	0x0000cccc
 8008c94:	0000aaaa 	.word	0x0000aaaa

08008c98 <HW_RTC_Init>:
 * @note The timer is based on the RTC
 * @param none
 * @retval none
 */
void HW_RTC_Init( void )
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	af00      	add	r7, sp, #0
  if( HW_RTC_Initalized == false )
 8008c9c:	4b09      	ldr	r3, [pc, #36]	; (8008cc4 <HW_RTC_Init+0x2c>)
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	4053      	eors	r3, r2
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d008      	beq.n	8008cbc <HW_RTC_Init+0x24>
  {
    HW_RTC_SetConfig( );
 8008caa:	f000 f80d 	bl	8008cc8 <HW_RTC_SetConfig>
    HW_RTC_SetAlarmConfig( );
 8008cae:	f000 f955 	bl	8008f5c <HW_RTC_SetAlarmConfig>
    HW_RTC_SetTimerContext( );
 8008cb2:	f000 f933 	bl	8008f1c <HW_RTC_SetTimerContext>
    HW_RTC_Initalized = true;
 8008cb6:	4b03      	ldr	r3, [pc, #12]	; (8008cc4 <HW_RTC_Init+0x2c>)
 8008cb8:	2201      	movs	r2, #1
 8008cba:	701a      	strb	r2, [r3, #0]
  }
}
 8008cbc:	46c0      	nop			; (mov r8, r8)
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	46c0      	nop			; (mov r8, r8)
 8008cc4:	20000214 	.word	0x20000214

08008cc8 <HW_RTC_SetConfig>:
 * @note The timer is based on the RTC
 * @param none
 * @retval none
 */
static void HW_RTC_SetConfig( void )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  RtcHandle.Instance = RTC;
 8008cce:	4b27      	ldr	r3, [pc, #156]	; (8008d6c <HW_RTC_SetConfig+0xa4>)
 8008cd0:	4a27      	ldr	r2, [pc, #156]	; (8008d70 <HW_RTC_SetConfig+0xa8>)
 8008cd2:	601a      	str	r2, [r3, #0]

  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 8008cd4:	4b25      	ldr	r3, [pc, #148]	; (8008d6c <HW_RTC_SetConfig+0xa4>)
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	605a      	str	r2, [r3, #4]
  RtcHandle.Init.AsynchPrediv = PREDIV_A; /* RTC_ASYNCH_PREDIV; */
 8008cda:	4b24      	ldr	r3, [pc, #144]	; (8008d6c <HW_RTC_SetConfig+0xa4>)
 8008cdc:	221f      	movs	r2, #31
 8008cde:	609a      	str	r2, [r3, #8]
  RtcHandle.Init.SynchPrediv = PREDIV_S; /* RTC_SYNCH_PREDIV; */
 8008ce0:	4b22      	ldr	r3, [pc, #136]	; (8008d6c <HW_RTC_SetConfig+0xa4>)
 8008ce2:	4a24      	ldr	r2, [pc, #144]	; (8008d74 <HW_RTC_SetConfig+0xac>)
 8008ce4:	60da      	str	r2, [r3, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT;
 8008ce6:	4b21      	ldr	r3, [pc, #132]	; (8008d6c <HW_RTC_SetConfig+0xa4>)
 8008ce8:	2200      	movs	r2, #0
 8008cea:	611a      	str	r2, [r3, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008cec:	4b1f      	ldr	r3, [pc, #124]	; (8008d6c <HW_RTC_SetConfig+0xa4>)
 8008cee:	2200      	movs	r2, #0
 8008cf0:	619a      	str	r2, [r3, #24]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008cf2:	4b1e      	ldr	r3, [pc, #120]	; (8008d6c <HW_RTC_SetConfig+0xa4>)
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	61da      	str	r2, [r3, #28]

  HAL_RTC_Init( &RtcHandle );
 8008cf8:	4b1c      	ldr	r3, [pc, #112]	; (8008d6c <HW_RTC_SetConfig+0xa4>)
 8008cfa:	0018      	movs	r0, r3
 8008cfc:	f7fd fd12 	bl	8006724 <HAL_RTC_Init>
  
  /*Monday 1st January 2016*/
  RTC_DateStruct.Year = 16;
 8008d00:	003b      	movs	r3, r7
 8008d02:	2210      	movs	r2, #16
 8008d04:	70da      	strb	r2, [r3, #3]
  RTC_DateStruct.Month = RTC_MONTH_JANUARY;
 8008d06:	003b      	movs	r3, r7
 8008d08:	2201      	movs	r2, #1
 8008d0a:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct.Date = 1;
 8008d0c:	003b      	movs	r3, r7
 8008d0e:	2201      	movs	r2, #1
 8008d10:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct.WeekDay = RTC_WEEKDAY_MONDAY;
 8008d12:	003b      	movs	r3, r7
 8008d14:	2201      	movs	r2, #1
 8008d16:	701a      	strb	r2, [r3, #0]
  HAL_RTC_SetDate(&RtcHandle , &RTC_DateStruct, RTC_FORMAT_BIN);
 8008d18:	0039      	movs	r1, r7
 8008d1a:	4b14      	ldr	r3, [pc, #80]	; (8008d6c <HW_RTC_SetConfig+0xa4>)
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	0018      	movs	r0, r3
 8008d20:	f7fd feb0 	bl	8006a84 <HAL_RTC_SetDate>
  
  /*at 0:0:0*/
  RTC_TimeStruct.Hours = 0;
 8008d24:	1d3b      	adds	r3, r7, #4
 8008d26:	2200      	movs	r2, #0
 8008d28:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct.Minutes = 0;
 8008d2a:	1d3b      	adds	r3, r7, #4
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	705a      	strb	r2, [r3, #1]

  RTC_TimeStruct.Seconds = 0;
 8008d30:	1d3b      	adds	r3, r7, #4
 8008d32:	2200      	movs	r2, #0
 8008d34:	709a      	strb	r2, [r3, #2]
  RTC_TimeStruct.TimeFormat = 0;
 8008d36:	1d3b      	adds	r3, r7, #4
 8008d38:	2200      	movs	r2, #0
 8008d3a:	70da      	strb	r2, [r3, #3]
  RTC_TimeStruct.SubSeconds = 0;
 8008d3c:	1d3b      	adds	r3, r7, #4
 8008d3e:	2200      	movs	r2, #0
 8008d40:	605a      	str	r2, [r3, #4]
  RTC_TimeStruct.StoreOperation = RTC_DAYLIGHTSAVING_NONE;
 8008d42:	1d3b      	adds	r3, r7, #4
 8008d44:	2200      	movs	r2, #0
 8008d46:	611a      	str	r2, [r3, #16]
  RTC_TimeStruct.DayLightSaving = RTC_STOREOPERATION_RESET;
 8008d48:	1d3b      	adds	r3, r7, #4
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	60da      	str	r2, [r3, #12]
  
  HAL_RTC_SetTime(&RtcHandle , &RTC_TimeStruct, RTC_FORMAT_BIN);
 8008d4e:	1d39      	adds	r1, r7, #4
 8008d50:	4b06      	ldr	r3, [pc, #24]	; (8008d6c <HW_RTC_SetConfig+0xa4>)
 8008d52:	2200      	movs	r2, #0
 8008d54:	0018      	movs	r0, r3
 8008d56:	f7fd fd69 	bl	800682c <HAL_RTC_SetTime>
  
 /*Enable Direct Read of the calendar registers (not through Shadow) */
  HAL_RTCEx_EnableBypassShadow(&RtcHandle);
 8008d5a:	4b04      	ldr	r3, [pc, #16]	; (8008d6c <HW_RTC_SetConfig+0xa4>)
 8008d5c:	0018      	movs	r0, r3
 8008d5e:	f7fe fa94 	bl	800728a <HAL_RTCEx_EnableBypassShadow>
}
 8008d62:	46c0      	nop			; (mov r8, r8)
 8008d64:	46bd      	mov	sp, r7
 8008d66:	b006      	add	sp, #24
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	46c0      	nop			; (mov r8, r8)
 8008d6c:	20000218 	.word	0x20000218
 8008d70:	40002800 	.word	0x40002800
 8008d74:	000003ff 	.word	0x000003ff

08008d78 <HW_RTC_GetMinimumTimeout>:
 * @brief returns the wake up time in ticks
 * @param none
 * @retval wake up time in ticks
 */
uint32_t HW_RTC_GetMinimumTimeout( void )
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	af00      	add	r7, sp, #0
  return( MIN_ALARM_DELAY );
 8008d7c:	2303      	movs	r3, #3
}
 8008d7e:	0018      	movs	r0, r3
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <HW_RTC_ms2Tick>:
 * @brief converts time in ms to time in ticks
 * @param [IN] time in milliseconds
 * @retval returns time in timer ticks
 */
uint32_t HW_RTC_ms2Tick( TimerTime_t timeMicroSec )
{
 8008d84:	b5b0      	push	{r4, r5, r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
/*return( ( timeMicroSec / RTC_ALARM_TIME_BASE ) ); */
  return ( uint32_t) ( ( ((uint64_t)timeMicroSec) * CONV_DENOM ) / CONV_NUMER );
 8008d8c:	6879      	ldr	r1, [r7, #4]
 8008d8e:	000a      	movs	r2, r1
 8008d90:	2100      	movs	r1, #0
 8008d92:	000b      	movs	r3, r1
 8008d94:	0e51      	lsrs	r1, r2, #25
 8008d96:	01dd      	lsls	r5, r3, #7
 8008d98:	430d      	orrs	r5, r1
 8008d9a:	01d4      	lsls	r4, r2, #7
 8008d9c:	227d      	movs	r2, #125	; 0x7d
 8008d9e:	2300      	movs	r3, #0
 8008da0:	0020      	movs	r0, r4
 8008da2:	0029      	movs	r1, r5
 8008da4:	f7f7 fb64 	bl	8000470 <__aeabi_uldivmod>
 8008da8:	0003      	movs	r3, r0
 8008daa:	000c      	movs	r4, r1
}
 8008dac:	0018      	movs	r0, r3
 8008dae:	46bd      	mov	sp, r7
 8008db0:	b002      	add	sp, #8
 8008db2:	bdb0      	pop	{r4, r5, r7, pc}

08008db4 <HW_RTC_SetAlarm>:
 * @brief Set the alarm
 * @note The alarm is set at now (read in this funtion) + timeout
 * @param timeout Duration of the Timer ticks
 */
void HW_RTC_SetAlarm( uint32_t timeout )
{
 8008db4:	b590      	push	{r4, r7, lr}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  /* we don't go in Low Power mode for timeout below MIN_ALARM_DELAY */
  if ( (MIN_ALARM_DELAY + McuWakeUpTimeCal ) < ((timeout - HW_RTC_GetTimerElapsedTime( ) )) )
 8008dbc:	4b14      	ldr	r3, [pc, #80]	; (8008e10 <HW_RTC_SetAlarm+0x5c>)
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	5e9b      	ldrsh	r3, [r3, r2]
 8008dc2:	3303      	adds	r3, #3
 8008dc4:	001c      	movs	r4, r3
 8008dc6:	f000 f825 	bl	8008e14 <HW_RTC_GetTimerElapsedTime>
 8008dca:	0002      	movs	r2, r0
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	1a9b      	subs	r3, r3, r2
 8008dd0:	429c      	cmp	r4, r3
 8008dd2:	d203      	bcs.n	8008ddc <HW_RTC_SetAlarm+0x28>
  {
    LowPower_Enable( e_LOW_POWER_RTC );
 8008dd4:	2001      	movs	r0, #1
 8008dd6:	f7ff fbdd 	bl	8008594 <LowPower_Enable>
 8008dda:	e002      	b.n	8008de2 <HW_RTC_SetAlarm+0x2e>
  }
  else
  {
    LowPower_Disable( e_LOW_POWER_RTC );
 8008ddc:	2001      	movs	r0, #1
 8008dde:	f7ff fbbb 	bl	8008558 <LowPower_Disable>
  }

  if( LowPower_GetState() == 0 )
 8008de2:	f7ff fbf7 	bl	80085d4 <LowPower_GetState>
 8008de6:	1e03      	subs	r3, r0, #0
 8008de8:	d109      	bne.n	8008dfe <HW_RTC_SetAlarm+0x4a>
  {
    LowPower_Enable( e_LOW_POWER_RTC );
 8008dea:	2001      	movs	r0, #1
 8008dec:	f7ff fbd2 	bl	8008594 <LowPower_Enable>
    timeout = timeout -  McuWakeUpTimeCal;
 8008df0:	4b07      	ldr	r3, [pc, #28]	; (8008e10 <HW_RTC_SetAlarm+0x5c>)
 8008df2:	2200      	movs	r2, #0
 8008df4:	5e9b      	ldrsh	r3, [r3, r2]
 8008df6:	001a      	movs	r2, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	1a9b      	subs	r3, r3, r2
 8008dfc:	607b      	str	r3, [r7, #4]
  }

  HW_RTC_StartWakeUpAlarm( timeout );
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	0018      	movs	r0, r3
 8008e02:	f000 f8b9 	bl	8008f78 <HW_RTC_StartWakeUpAlarm>
}
 8008e06:	46c0      	nop			; (mov r8, r8)
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	b003      	add	sp, #12
 8008e0c:	bd90      	pop	{r4, r7, pc}
 8008e0e:	46c0      	nop			; (mov r8, r8)
 8008e10:	20000216 	.word	0x20000216

08008e14 <HW_RTC_GetTimerElapsedTime>:
 * @brief Get the RTC timer elapsed time since the last Alarm was set
 * @param none
 * @retval RTC Elapsed time in ticks
 */
uint32_t HW_RTC_GetTimerElapsedTime( void )
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b088      	sub	sp, #32
 8008e18:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;
  
  TimerTime_t CalendarValue = HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct );
 8008e1a:	2308      	movs	r3, #8
 8008e1c:	18fa      	adds	r2, r7, r3
 8008e1e:	1d3b      	adds	r3, r7, #4
 8008e20:	0011      	movs	r1, r2
 8008e22:	0018      	movs	r0, r3
 8008e24:	f000 fa3a 	bl	800929c <HW_RTC_GetCalendarValue>
 8008e28:	0003      	movs	r3, r0
 8008e2a:	61fb      	str	r3, [r7, #28]

  return( ( uint32_t )( CalendarValue - RtcTimerContext.Rtc_Time ));
 8008e2c:	4b03      	ldr	r3, [pc, #12]	; (8008e3c <HW_RTC_GetTimerElapsedTime+0x28>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	69fa      	ldr	r2, [r7, #28]
 8008e32:	1ad3      	subs	r3, r2, r3
}
 8008e34:	0018      	movs	r0, r3
 8008e36:	46bd      	mov	sp, r7
 8008e38:	b008      	add	sp, #32
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	20000264 	.word	0x20000264

08008e40 <HW_RTC_GetTimerValue>:
 * @brief Get the RTC timer value
 * @param none
 * @retval RTC Timer value in ticks
 */
uint32_t HW_RTC_GetTimerValue( void )
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b088      	sub	sp, #32
 8008e44:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct );
 8008e46:	2308      	movs	r3, #8
 8008e48:	18fa      	adds	r2, r7, r3
 8008e4a:	1d3b      	adds	r3, r7, #4
 8008e4c:	0011      	movs	r1, r2
 8008e4e:	0018      	movs	r0, r3
 8008e50:	f000 fa24 	bl	800929c <HW_RTC_GetCalendarValue>
 8008e54:	0003      	movs	r3, r0
 8008e56:	61fb      	str	r3, [r7, #28]
   *
   * Find a way to pass RTC_TimeStruct to return.
   */


  arr[0] = RTC_TimeStruct.Minutes;
 8008e58:	2308      	movs	r3, #8
 8008e5a:	18fb      	adds	r3, r7, r3
 8008e5c:	785b      	ldrb	r3, [r3, #1]
 8008e5e:	001a      	movs	r2, r3
 8008e60:	4b09      	ldr	r3, [pc, #36]	; (8008e88 <HW_RTC_GetTimerValue+0x48>)
 8008e62:	601a      	str	r2, [r3, #0]
  arr[1] = RTC_TimeStruct.Seconds;
 8008e64:	2308      	movs	r3, #8
 8008e66:	18fb      	adds	r3, r7, r3
 8008e68:	789b      	ldrb	r3, [r3, #2]
 8008e6a:	001a      	movs	r2, r3
 8008e6c:	4b06      	ldr	r3, [pc, #24]	; (8008e88 <HW_RTC_GetTimerValue+0x48>)
 8008e6e:	605a      	str	r2, [r3, #4]
  arr[2] = RTC_TimeStruct.Hours;
 8008e70:	2308      	movs	r3, #8
 8008e72:	18fb      	adds	r3, r7, r3
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	001a      	movs	r2, r3
 8008e78:	4b03      	ldr	r3, [pc, #12]	; (8008e88 <HW_RTC_GetTimerValue+0x48>)
 8008e7a:	609a      	str	r2, [r3, #8]

  /*
  RTC_TimeTypeDef *space = ( RTC_TimeTypeDef*)malloc(sizeof( RTC_TimeTypeDef));
  memcpy(&space, &RTC_TimeStruct,sizeof(space)+1);
*/
  return arr;
 8008e7c:	4b02      	ldr	r3, [pc, #8]	; (8008e88 <HW_RTC_GetTimerValue+0x48>)

}
 8008e7e:	0018      	movs	r0, r3
 8008e80:	46bd      	mov	sp, r7
 8008e82:	b008      	add	sp, #32
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	46c0      	nop			; (mov r8, r8)
 8008e88:	20000580 	.word	0x20000580

08008e8c <HW_RTC_StopAlarm>:
 * @brief Stop the Alarm
 * @param none
 * @retval none
 */
void HW_RTC_StopAlarm( void )
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	af00      	add	r7, sp, #0

  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG( &RtcHandle, RTC_FLAG_ALRAF);
 8008e90:	4b09      	ldr	r3, [pc, #36]	; (8008eb8 <HW_RTC_StopAlarm+0x2c>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a08      	ldr	r2, [pc, #32]	; (8008eb8 <HW_RTC_StopAlarm+0x2c>)
 8008e96:	6812      	ldr	r2, [r2, #0]
 8008e98:	68d2      	ldr	r2, [r2, #12]
 8008e9a:	21ff      	movs	r1, #255	; 0xff
 8008e9c:	400a      	ands	r2, r1
 8008e9e:	4907      	ldr	r1, [pc, #28]	; (8008ebc <HW_RTC_StopAlarm+0x30>)
 8008ea0:	430a      	orrs	r2, r1
 8008ea2:	60da      	str	r2, [r3, #12]

  /* Disable the Alarm A interrupt */

  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A );
 8008ea4:	2380      	movs	r3, #128	; 0x80
 8008ea6:	005a      	lsls	r2, r3, #1
 8008ea8:	4b03      	ldr	r3, [pc, #12]	; (8008eb8 <HW_RTC_StopAlarm+0x2c>)
 8008eaa:	0011      	movs	r1, r2
 8008eac:	0018      	movs	r0, r3
 8008eae:	f7fe f867 	bl	8006f80 <HAL_RTC_DeactivateAlarm>
}
 8008eb2:	46c0      	nop			; (mov r8, r8)
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	20000218 	.word	0x20000218
 8008ebc:	fffffe7f 	.word	0xfffffe7f

08008ec0 <HW_RTC_IrqHandler>:
 * @brief RTC IRQ Handler on the RTC Alarm
 * @param none
 * @retval none
 */
void HW_RTC_IrqHandler ( void )
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	af00      	add	r7, sp, #0
  /* enable low power at irq*/
  LowPower_Enable( e_LOW_POWER_RTC );
 8008ec4:	2001      	movs	r0, #1
 8008ec6:	f7ff fb65 	bl	8008594 <LowPower_Enable>
  
  HAL_RTC_AlarmIRQHandler( &RtcHandle);
 8008eca:	4b03      	ldr	r3, [pc, #12]	; (8008ed8 <HW_RTC_IrqHandler+0x18>)
 8008ecc:	0018      	movs	r0, r3
 8008ece:	f7fe f8f9 	bl	80070c4 <HAL_RTC_AlarmIRQHandler>
}
 8008ed2:	46c0      	nop			; (mov r8, r8)
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	20000218 	.word	0x20000218

08008edc <HW_RTC_DelayMs>:
 * @brief a delay of delay ms by polling RTC
 * @param delay in ms
 * @retval none
 */
void HW_RTC_DelayMs( uint32_t delay )
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  TimerTime_t delayValue = 0;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	60fb      	str	r3, [r7, #12]
  TimerTime_t timeout = 0;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	60bb      	str	r3, [r7, #8]

  delayValue = HW_RTC_ms2Tick( delay );
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	0018      	movs	r0, r3
 8008ef0:	f7ff ff48 	bl	8008d84 <HW_RTC_ms2Tick>
 8008ef4:	0003      	movs	r3, r0
 8008ef6:	60fb      	str	r3, [r7, #12]

  /* Wait delay ms */
  timeout = HW_RTC_GetTimerValue( );
 8008ef8:	f7ff ffa2 	bl	8008e40 <HW_RTC_GetTimerValue>
 8008efc:	0003      	movs	r3, r0
 8008efe:	60bb      	str	r3, [r7, #8]
  while( ( ( HW_RTC_GetTimerValue( ) - timeout ) ) < delayValue )
 8008f00:	e000      	b.n	8008f04 <HW_RTC_DelayMs+0x28>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8008f02:	46c0      	nop			; (mov r8, r8)
 8008f04:	f7ff ff9c 	bl	8008e40 <HW_RTC_GetTimerValue>
 8008f08:	0002      	movs	r2, r0
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	1ad2      	subs	r2, r2, r3
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d3f6      	bcc.n	8008f02 <HW_RTC_DelayMs+0x26>
  {
    __NOP( );
  }
}
 8008f14:	46c0      	nop			; (mov r8, r8)
 8008f16:	46bd      	mov	sp, r7
 8008f18:	b004      	add	sp, #16
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <HW_RTC_SetTimerContext>:
 * @brief set Time Reference set also the RTC_DateStruct and RTC_TimeStruct
 * @param none
 * @retval Timer Value
 */
uint32_t HW_RTC_SetTimerContext( void )
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	af00      	add	r7, sp, #0
  RtcTimerContext.Rtc_Time = HW_RTC_GetCalendarValue( &RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time );
 8008f20:	4a06      	ldr	r2, [pc, #24]	; (8008f3c <HW_RTC_SetTimerContext+0x20>)
 8008f22:	4b07      	ldr	r3, [pc, #28]	; (8008f40 <HW_RTC_SetTimerContext+0x24>)
 8008f24:	0011      	movs	r1, r2
 8008f26:	0018      	movs	r0, r3
 8008f28:	f000 f9b8 	bl	800929c <HW_RTC_GetCalendarValue>
 8008f2c:	0002      	movs	r2, r0
 8008f2e:	4b05      	ldr	r3, [pc, #20]	; (8008f44 <HW_RTC_SetTimerContext+0x28>)
 8008f30:	601a      	str	r2, [r3, #0]
  return ( uint32_t ) RtcTimerContext.Rtc_Time;
 8008f32:	4b04      	ldr	r3, [pc, #16]	; (8008f44 <HW_RTC_SetTimerContext+0x28>)
 8008f34:	681b      	ldr	r3, [r3, #0]
}
 8008f36:	0018      	movs	r0, r3
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	20000268 	.word	0x20000268
 8008f40:	2000027c 	.word	0x2000027c
 8008f44:	20000264 	.word	0x20000264

08008f48 <HW_RTC_GetTimerContext>:
 * @brief Get the RTC timer Reference
 * @param none
 * @retval Timer Value in  Ticks
 */
uint32_t HW_RTC_GetTimerContext( void )
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	af00      	add	r7, sp, #0
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8008f4c:	4b02      	ldr	r3, [pc, #8]	; (8008f58 <HW_RTC_GetTimerContext+0x10>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
}
 8008f50:	0018      	movs	r0, r3
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	46c0      	nop			; (mov r8, r8)
 8008f58:	20000264 	.word	0x20000264

08008f5c <HW_RTC_SetAlarmConfig>:
 * @brief configure alarm at init
 * @param none
 * @retval none
 */
static void HW_RTC_SetAlarmConfig( void )
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	af00      	add	r7, sp, #0
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 8008f60:	2380      	movs	r3, #128	; 0x80
 8008f62:	005a      	lsls	r2, r3, #1
 8008f64:	4b03      	ldr	r3, [pc, #12]	; (8008f74 <HW_RTC_SetAlarmConfig+0x18>)
 8008f66:	0011      	movs	r1, r2
 8008f68:	0018      	movs	r0, r3
 8008f6a:	f7fe f809 	bl	8006f80 <HAL_RTC_DeactivateAlarm>
}
 8008f6e:	46c0      	nop			; (mov r8, r8)
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}
 8008f74:	20000218 	.word	0x20000218

08008f78 <HW_RTC_StartWakeUpAlarm>:
 * @note  alarm in RtcTimerContext.Rtc_Time + timeoutValue
 * @param timeoutValue in ticks
 * @retval none
 */
static void HW_RTC_StartWakeUpAlarm( uint32_t timeoutValue )
{
 8008f78:	b590      	push	{r4, r7, lr}
 8008f7a:	b08d      	sub	sp, #52	; 0x34
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  uint16_t rtcAlarmSubSeconds = 0;
 8008f80:	232e      	movs	r3, #46	; 0x2e
 8008f82:	18fb      	adds	r3, r7, r3
 8008f84:	2200      	movs	r2, #0
 8008f86:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmSeconds = 0;
 8008f88:	232c      	movs	r3, #44	; 0x2c
 8008f8a:	18fb      	adds	r3, r7, r3
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmMinutes = 0;
 8008f90:	232a      	movs	r3, #42	; 0x2a
 8008f92:	18fb      	adds	r3, r7, r3
 8008f94:	2200      	movs	r2, #0
 8008f96:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmHours = 0;
 8008f98:	2328      	movs	r3, #40	; 0x28
 8008f9a:	18fb      	adds	r3, r7, r3
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmDays = 0;
 8008fa0:	2326      	movs	r3, #38	; 0x26
 8008fa2:	18fb      	adds	r3, r7, r3
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	801a      	strh	r2, [r3, #0]
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8008fa8:	2310      	movs	r3, #16
 8008faa:	18fa      	adds	r2, r7, r3
 8008fac:	4bb2      	ldr	r3, [pc, #712]	; (8009278 <HW_RTC_StartWakeUpAlarm+0x300>)
 8008fae:	3304      	adds	r3, #4
 8008fb0:	cb13      	ldmia	r3!, {r0, r1, r4}
 8008fb2:	c213      	stmia	r2!, {r0, r1, r4}
 8008fb4:	cb03      	ldmia	r3!, {r0, r1}
 8008fb6:	c203      	stmia	r2!, {r0, r1}
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8008fb8:	230c      	movs	r3, #12
 8008fba:	18fb      	adds	r3, r7, r3
 8008fbc:	4aae      	ldr	r2, [pc, #696]	; (8009278 <HW_RTC_StartWakeUpAlarm+0x300>)
 8008fbe:	6992      	ldr	r2, [r2, #24]
 8008fc0:	601a      	str	r2, [r3, #0]

  HW_RTC_StopAlarm( );
 8008fc2:	f7ff ff63 	bl	8008e8c <HW_RTC_StopAlarm>
  DBG_GPIO_SET(GPIOB, GPIO_PIN_13);
 8008fc6:	4bad      	ldr	r3, [pc, #692]	; (800927c <HW_RTC_StartWakeUpAlarm+0x304>)
 8008fc8:	2280      	movs	r2, #128	; 0x80
 8008fca:	0192      	lsls	r2, r2, #6
 8008fcc:	619a      	str	r2, [r3, #24]
  
  /*reverse counter */
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 8008fce:	2310      	movs	r3, #16
 8008fd0:	18fb      	adds	r3, r7, r3
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	b29a      	uxth	r2, r3
 8008fd6:	232e      	movs	r3, #46	; 0x2e
 8008fd8:	18fb      	adds	r3, r7, r3
 8008fda:	49a9      	ldr	r1, [pc, #676]	; (8009280 <HW_RTC_StartWakeUpAlarm+0x308>)
 8008fdc:	1a8a      	subs	r2, r1, r2
 8008fde:	801a      	strh	r2, [r3, #0]
  rtcAlarmSubSeconds += ( timeoutValue & PREDIV_S);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	059b      	lsls	r3, r3, #22
 8008fe6:	0d9b      	lsrs	r3, r3, #22
 8008fe8:	b299      	uxth	r1, r3
 8008fea:	232e      	movs	r3, #46	; 0x2e
 8008fec:	18fb      	adds	r3, r7, r3
 8008fee:	222e      	movs	r2, #46	; 0x2e
 8008ff0:	18ba      	adds	r2, r7, r2
 8008ff2:	8812      	ldrh	r2, [r2, #0]
 8008ff4:	188a      	adds	r2, r1, r2
 8008ff6:	801a      	strh	r2, [r3, #0]
  /* convert timeout  to seconds */
  timeoutValue >>= N_PREDIV_S;  /* convert timeout  in seconds */
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	0a9b      	lsrs	r3, r3, #10
 8008ffc:	607b      	str	r3, [r7, #4]
  
  /*convert microsecs to RTC format and add to 'Now' */
  rtcAlarmDays =  RTC_DateStruct.Date;
 8008ffe:	230c      	movs	r3, #12
 8009000:	18fb      	adds	r3, r7, r3
 8009002:	789a      	ldrb	r2, [r3, #2]
 8009004:	2326      	movs	r3, #38	; 0x26
 8009006:	18fb      	adds	r3, r7, r3
 8009008:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SecondsInDay)
 800900a:	e00a      	b.n	8009022 <HW_RTC_StartWakeUpAlarm+0xaa>
  {
    timeoutValue -= SecondsInDay;
 800900c:	4a9d      	ldr	r2, [pc, #628]	; (8009284 <HW_RTC_StartWakeUpAlarm+0x30c>)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	1a9b      	subs	r3, r3, r2
 8009012:	607b      	str	r3, [r7, #4]
    rtcAlarmDays++;
 8009014:	2326      	movs	r3, #38	; 0x26
 8009016:	18fb      	adds	r3, r7, r3
 8009018:	881a      	ldrh	r2, [r3, #0]
 800901a:	2326      	movs	r3, #38	; 0x26
 800901c:	18fb      	adds	r3, r7, r3
 800901e:	3201      	adds	r2, #1
 8009020:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SecondsInDay)
 8009022:	4a98      	ldr	r2, [pc, #608]	; (8009284 <HW_RTC_StartWakeUpAlarm+0x30c>)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	4293      	cmp	r3, r2
 8009028:	d2f0      	bcs.n	800900c <HW_RTC_StartWakeUpAlarm+0x94>
  }
  
  /* calc hours */
  rtcAlarmHours = RTC_TimeStruct.Hours;
 800902a:	2310      	movs	r3, #16
 800902c:	18fb      	adds	r3, r7, r3
 800902e:	781a      	ldrb	r2, [r3, #0]
 8009030:	2328      	movs	r3, #40	; 0x28
 8009032:	18fb      	adds	r3, r7, r3
 8009034:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SecondsInHour)
 8009036:	e00c      	b.n	8009052 <HW_RTC_StartWakeUpAlarm+0xda>
  {
    timeoutValue -= SecondsInHour;
 8009038:	23e1      	movs	r3, #225	; 0xe1
 800903a:	011b      	lsls	r3, r3, #4
 800903c:	001a      	movs	r2, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	1a9b      	subs	r3, r3, r2
 8009042:	607b      	str	r3, [r7, #4]
    rtcAlarmHours++;
 8009044:	2328      	movs	r3, #40	; 0x28
 8009046:	18fb      	adds	r3, r7, r3
 8009048:	881a      	ldrh	r2, [r3, #0]
 800904a:	2328      	movs	r3, #40	; 0x28
 800904c:	18fb      	adds	r3, r7, r3
 800904e:	3201      	adds	r2, #1
 8009050:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SecondsInHour)
 8009052:	23e1      	movs	r3, #225	; 0xe1
 8009054:	011b      	lsls	r3, r3, #4
 8009056:	001a      	movs	r2, r3
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	429a      	cmp	r2, r3
 800905c:	d9ec      	bls.n	8009038 <HW_RTC_StartWakeUpAlarm+0xc0>
  }
  
  /* calc minutes */
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 800905e:	2310      	movs	r3, #16
 8009060:	18fb      	adds	r3, r7, r3
 8009062:	785a      	ldrb	r2, [r3, #1]
 8009064:	232a      	movs	r3, #42	; 0x2a
 8009066:	18fb      	adds	r3, r7, r3
 8009068:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SecondsInMinute)
 800906a:	e00b      	b.n	8009084 <HW_RTC_StartWakeUpAlarm+0x10c>
  {
    timeoutValue -= SecondsInMinute;
 800906c:	233c      	movs	r3, #60	; 0x3c
 800906e:	001a      	movs	r2, r3
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	1a9b      	subs	r3, r3, r2
 8009074:	607b      	str	r3, [r7, #4]
    rtcAlarmMinutes++;
 8009076:	232a      	movs	r3, #42	; 0x2a
 8009078:	18fb      	adds	r3, r7, r3
 800907a:	881a      	ldrh	r2, [r3, #0]
 800907c:	232a      	movs	r3, #42	; 0x2a
 800907e:	18fb      	adds	r3, r7, r3
 8009080:	3201      	adds	r2, #1
 8009082:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SecondsInMinute)
 8009084:	233c      	movs	r3, #60	; 0x3c
 8009086:	001a      	movs	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	429a      	cmp	r2, r3
 800908c:	d9ee      	bls.n	800906c <HW_RTC_StartWakeUpAlarm+0xf4>
  }
   
  /* calc seconds */
  rtcAlarmSeconds =  RTC_TimeStruct.Seconds + timeoutValue;
 800908e:	2310      	movs	r3, #16
 8009090:	18fb      	adds	r3, r7, r3
 8009092:	789b      	ldrb	r3, [r3, #2]
 8009094:	b299      	uxth	r1, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	b29a      	uxth	r2, r3
 800909a:	232c      	movs	r3, #44	; 0x2c
 800909c:	18fb      	adds	r3, r7, r3
 800909e:	188a      	adds	r2, r1, r2
 80090a0:	801a      	strh	r2, [r3, #0]

  /***** correct for modulo********/
  while (rtcAlarmSubSeconds >= (PREDIV_S+1))
 80090a2:	e00f      	b.n	80090c4 <HW_RTC_StartWakeUpAlarm+0x14c>
  {
    rtcAlarmSubSeconds -= (PREDIV_S+1);
 80090a4:	232e      	movs	r3, #46	; 0x2e
 80090a6:	18fb      	adds	r3, r7, r3
 80090a8:	222e      	movs	r2, #46	; 0x2e
 80090aa:	18ba      	adds	r2, r7, r2
 80090ac:	8812      	ldrh	r2, [r2, #0]
 80090ae:	4976      	ldr	r1, [pc, #472]	; (8009288 <HW_RTC_StartWakeUpAlarm+0x310>)
 80090b0:	468c      	mov	ip, r1
 80090b2:	4462      	add	r2, ip
 80090b4:	801a      	strh	r2, [r3, #0]
    rtcAlarmSeconds++;
 80090b6:	232c      	movs	r3, #44	; 0x2c
 80090b8:	18fb      	adds	r3, r7, r3
 80090ba:	881a      	ldrh	r2, [r3, #0]
 80090bc:	232c      	movs	r3, #44	; 0x2c
 80090be:	18fb      	adds	r3, r7, r3
 80090c0:	3201      	adds	r2, #1
 80090c2:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSubSeconds >= (PREDIV_S+1))
 80090c4:	232e      	movs	r3, #46	; 0x2e
 80090c6:	18fb      	adds	r3, r7, r3
 80090c8:	881b      	ldrh	r3, [r3, #0]
 80090ca:	4a6d      	ldr	r2, [pc, #436]	; (8009280 <HW_RTC_StartWakeUpAlarm+0x308>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d8e9      	bhi.n	80090a4 <HW_RTC_StartWakeUpAlarm+0x12c>
  }
  
  while (rtcAlarmSeconds >= 60)
 80090d0:	e00d      	b.n	80090ee <HW_RTC_StartWakeUpAlarm+0x176>
  { 
    rtcAlarmSeconds -= 60;
 80090d2:	232c      	movs	r3, #44	; 0x2c
 80090d4:	18fb      	adds	r3, r7, r3
 80090d6:	222c      	movs	r2, #44	; 0x2c
 80090d8:	18ba      	adds	r2, r7, r2
 80090da:	8812      	ldrh	r2, [r2, #0]
 80090dc:	3a3c      	subs	r2, #60	; 0x3c
 80090de:	801a      	strh	r2, [r3, #0]
    rtcAlarmMinutes++;
 80090e0:	232a      	movs	r3, #42	; 0x2a
 80090e2:	18fb      	adds	r3, r7, r3
 80090e4:	881a      	ldrh	r2, [r3, #0]
 80090e6:	232a      	movs	r3, #42	; 0x2a
 80090e8:	18fb      	adds	r3, r7, r3
 80090ea:	3201      	adds	r2, #1
 80090ec:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSeconds >= 60)
 80090ee:	232c      	movs	r3, #44	; 0x2c
 80090f0:	18fb      	adds	r3, r7, r3
 80090f2:	881b      	ldrh	r3, [r3, #0]
 80090f4:	2b3b      	cmp	r3, #59	; 0x3b
 80090f6:	d8ec      	bhi.n	80090d2 <HW_RTC_StartWakeUpAlarm+0x15a>
  }

  while (rtcAlarmMinutes >= 60)
 80090f8:	e00d      	b.n	8009116 <HW_RTC_StartWakeUpAlarm+0x19e>
  {
    rtcAlarmMinutes -= 60;
 80090fa:	232a      	movs	r3, #42	; 0x2a
 80090fc:	18fb      	adds	r3, r7, r3
 80090fe:	222a      	movs	r2, #42	; 0x2a
 8009100:	18ba      	adds	r2, r7, r2
 8009102:	8812      	ldrh	r2, [r2, #0]
 8009104:	3a3c      	subs	r2, #60	; 0x3c
 8009106:	801a      	strh	r2, [r3, #0]
    rtcAlarmHours++;
 8009108:	2328      	movs	r3, #40	; 0x28
 800910a:	18fb      	adds	r3, r7, r3
 800910c:	881a      	ldrh	r2, [r3, #0]
 800910e:	2328      	movs	r3, #40	; 0x28
 8009110:	18fb      	adds	r3, r7, r3
 8009112:	3201      	adds	r2, #1
 8009114:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmMinutes >= 60)
 8009116:	232a      	movs	r3, #42	; 0x2a
 8009118:	18fb      	adds	r3, r7, r3
 800911a:	881b      	ldrh	r3, [r3, #0]
 800911c:	2b3b      	cmp	r3, #59	; 0x3b
 800911e:	d8ec      	bhi.n	80090fa <HW_RTC_StartWakeUpAlarm+0x182>
  }
  
  while (rtcAlarmHours >= HoursInDay)
 8009120:	e00f      	b.n	8009142 <HW_RTC_StartWakeUpAlarm+0x1ca>
  {
    rtcAlarmHours -= HoursInDay;
 8009122:	2318      	movs	r3, #24
 8009124:	b29a      	uxth	r2, r3
 8009126:	2328      	movs	r3, #40	; 0x28
 8009128:	18fb      	adds	r3, r7, r3
 800912a:	2128      	movs	r1, #40	; 0x28
 800912c:	1879      	adds	r1, r7, r1
 800912e:	8809      	ldrh	r1, [r1, #0]
 8009130:	1a8a      	subs	r2, r1, r2
 8009132:	801a      	strh	r2, [r3, #0]
    rtcAlarmDays++;
 8009134:	2326      	movs	r3, #38	; 0x26
 8009136:	18fb      	adds	r3, r7, r3
 8009138:	881a      	ldrh	r2, [r3, #0]
 800913a:	2326      	movs	r3, #38	; 0x26
 800913c:	18fb      	adds	r3, r7, r3
 800913e:	3201      	adds	r2, #1
 8009140:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmHours >= HoursInDay)
 8009142:	2318      	movs	r3, #24
 8009144:	b29b      	uxth	r3, r3
 8009146:	2228      	movs	r2, #40	; 0x28
 8009148:	18ba      	adds	r2, r7, r2
 800914a:	8812      	ldrh	r2, [r2, #0]
 800914c:	429a      	cmp	r2, r3
 800914e:	d2e8      	bcs.n	8009122 <HW_RTC_StartWakeUpAlarm+0x1aa>
  }

  if( RTC_DateStruct.Year % 4 == 0 ) 
 8009150:	230c      	movs	r3, #12
 8009152:	18fb      	adds	r3, r7, r3
 8009154:	78db      	ldrb	r3, [r3, #3]
 8009156:	2203      	movs	r2, #3
 8009158:	4013      	ands	r3, r2
 800915a:	b2db      	uxtb	r3, r3
 800915c:	2b00      	cmp	r3, #0
 800915e:	d11d      	bne.n	800919c <HW_RTC_StartWakeUpAlarm+0x224>
  {
    if( rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ] )    
 8009160:	230c      	movs	r3, #12
 8009162:	18fb      	adds	r3, r7, r3
 8009164:	785b      	ldrb	r3, [r3, #1]
 8009166:	3b01      	subs	r3, #1
 8009168:	4a48      	ldr	r2, [pc, #288]	; (800928c <HW_RTC_StartWakeUpAlarm+0x314>)
 800916a:	5cd3      	ldrb	r3, [r2, r3]
 800916c:	b29b      	uxth	r3, r3
 800916e:	2226      	movs	r2, #38	; 0x26
 8009170:	18ba      	adds	r2, r7, r2
 8009172:	8812      	ldrh	r2, [r2, #0]
 8009174:	429a      	cmp	r2, r3
 8009176:	d92e      	bls.n	80091d6 <HW_RTC_StartWakeUpAlarm+0x25e>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ];
 8009178:	2326      	movs	r3, #38	; 0x26
 800917a:	18fb      	adds	r3, r7, r3
 800917c:	8818      	ldrh	r0, [r3, #0]
 800917e:	230c      	movs	r3, #12
 8009180:	18fb      	adds	r3, r7, r3
 8009182:	785b      	ldrb	r3, [r3, #1]
 8009184:	3b01      	subs	r3, #1
 8009186:	4a41      	ldr	r2, [pc, #260]	; (800928c <HW_RTC_StartWakeUpAlarm+0x314>)
 8009188:	5cd3      	ldrb	r3, [r2, r3]
 800918a:	0019      	movs	r1, r3
 800918c:	f7f7 f92c 	bl	80003e8 <__aeabi_idivmod>
 8009190:	000b      	movs	r3, r1
 8009192:	001a      	movs	r2, r3
 8009194:	2326      	movs	r3, #38	; 0x26
 8009196:	18fb      	adds	r3, r7, r3
 8009198:	801a      	strh	r2, [r3, #0]
 800919a:	e01c      	b.n	80091d6 <HW_RTC_StartWakeUpAlarm+0x25e>
    }
  }
  else
  {
    if( rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ] )    
 800919c:	230c      	movs	r3, #12
 800919e:	18fb      	adds	r3, r7, r3
 80091a0:	785b      	ldrb	r3, [r3, #1]
 80091a2:	3b01      	subs	r3, #1
 80091a4:	4a3a      	ldr	r2, [pc, #232]	; (8009290 <HW_RTC_StartWakeUpAlarm+0x318>)
 80091a6:	5cd3      	ldrb	r3, [r2, r3]
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	2226      	movs	r2, #38	; 0x26
 80091ac:	18ba      	adds	r2, r7, r2
 80091ae:	8812      	ldrh	r2, [r2, #0]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d910      	bls.n	80091d6 <HW_RTC_StartWakeUpAlarm+0x25e>
    {   
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 80091b4:	2326      	movs	r3, #38	; 0x26
 80091b6:	18fb      	adds	r3, r7, r3
 80091b8:	8818      	ldrh	r0, [r3, #0]
 80091ba:	230c      	movs	r3, #12
 80091bc:	18fb      	adds	r3, r7, r3
 80091be:	785b      	ldrb	r3, [r3, #1]
 80091c0:	3b01      	subs	r3, #1
 80091c2:	4a33      	ldr	r2, [pc, #204]	; (8009290 <HW_RTC_StartWakeUpAlarm+0x318>)
 80091c4:	5cd3      	ldrb	r3, [r2, r3]
 80091c6:	0019      	movs	r1, r3
 80091c8:	f7f7 f90e 	bl	80003e8 <__aeabi_idivmod>
 80091cc:	000b      	movs	r3, r1
 80091ce:	001a      	movs	r2, r3
 80091d0:	2326      	movs	r3, #38	; 0x26
 80091d2:	18fb      	adds	r3, r7, r3
 80091d4:	801a      	strh	r2, [r3, #0]
    }
  }

  /* Set RTC_AlarmStructure with calculated values*/
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S-rtcAlarmSubSeconds;
 80091d6:	232e      	movs	r3, #46	; 0x2e
 80091d8:	18fb      	adds	r3, r7, r3
 80091da:	881b      	ldrh	r3, [r3, #0]
 80091dc:	4a28      	ldr	r2, [pc, #160]	; (8009280 <HW_RTC_StartWakeUpAlarm+0x308>)
 80091de:	1ad3      	subs	r3, r2, r3
 80091e0:	001a      	movs	r2, r3
 80091e2:	4b2c      	ldr	r3, [pc, #176]	; (8009294 <HW_RTC_StartWakeUpAlarm+0x31c>)
 80091e4:	605a      	str	r2, [r3, #4]
  RTC_AlarmStructure.AlarmSubSecondMask  = HW_RTC_ALARMSUBSECONDMASK; 
 80091e6:	4b2b      	ldr	r3, [pc, #172]	; (8009294 <HW_RTC_StartWakeUpAlarm+0x31c>)
 80091e8:	22a0      	movs	r2, #160	; 0xa0
 80091ea:	0512      	lsls	r2, r2, #20
 80091ec:	619a      	str	r2, [r3, #24]
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 80091ee:	232c      	movs	r3, #44	; 0x2c
 80091f0:	18fb      	adds	r3, r7, r3
 80091f2:	881b      	ldrh	r3, [r3, #0]
 80091f4:	b2da      	uxtb	r2, r3
 80091f6:	4b27      	ldr	r3, [pc, #156]	; (8009294 <HW_RTC_StartWakeUpAlarm+0x31c>)
 80091f8:	709a      	strb	r2, [r3, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 80091fa:	232a      	movs	r3, #42	; 0x2a
 80091fc:	18fb      	adds	r3, r7, r3
 80091fe:	881b      	ldrh	r3, [r3, #0]
 8009200:	b2da      	uxtb	r2, r3
 8009202:	4b24      	ldr	r3, [pc, #144]	; (8009294 <HW_RTC_StartWakeUpAlarm+0x31c>)
 8009204:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 8009206:	2328      	movs	r3, #40	; 0x28
 8009208:	18fb      	adds	r3, r7, r3
 800920a:	881b      	ldrh	r3, [r3, #0]
 800920c:	b2da      	uxtb	r2, r3
 800920e:	4b21      	ldr	r3, [pc, #132]	; (8009294 <HW_RTC_StartWakeUpAlarm+0x31c>)
 8009210:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStructure.AlarmDateWeekDay    = ( uint8_t )rtcAlarmDays;
 8009212:	2326      	movs	r3, #38	; 0x26
 8009214:	18fb      	adds	r3, r7, r3
 8009216:	881b      	ldrh	r3, [r3, #0]
 8009218:	b2d9      	uxtb	r1, r3
 800921a:	4b1e      	ldr	r3, [pc, #120]	; (8009294 <HW_RTC_StartWakeUpAlarm+0x31c>)
 800921c:	2220      	movs	r2, #32
 800921e:	5499      	strb	r1, [r3, r2]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 8009220:	2310      	movs	r3, #16
 8009222:	18fb      	adds	r3, r7, r3
 8009224:	78da      	ldrb	r2, [r3, #3]
 8009226:	4b1b      	ldr	r3, [pc, #108]	; (8009294 <HW_RTC_StartWakeUpAlarm+0x31c>)
 8009228:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE; 
 800922a:	4b1a      	ldr	r3, [pc, #104]	; (8009294 <HW_RTC_StartWakeUpAlarm+0x31c>)
 800922c:	2200      	movs	r2, #0
 800922e:	61da      	str	r2, [r3, #28]
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 8009230:	4b18      	ldr	r3, [pc, #96]	; (8009294 <HW_RTC_StartWakeUpAlarm+0x31c>)
 8009232:	2200      	movs	r2, #0
 8009234:	615a      	str	r2, [r3, #20]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8009236:	4b17      	ldr	r3, [pc, #92]	; (8009294 <HW_RTC_StartWakeUpAlarm+0x31c>)
 8009238:	2280      	movs	r2, #128	; 0x80
 800923a:	0052      	lsls	r2, r2, #1
 800923c:	625a      	str	r2, [r3, #36]	; 0x24
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800923e:	4b15      	ldr	r3, [pc, #84]	; (8009294 <HW_RTC_StartWakeUpAlarm+0x31c>)
 8009240:	2200      	movs	r2, #0
 8009242:	60da      	str	r2, [r3, #12]
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009244:	4b13      	ldr	r3, [pc, #76]	; (8009294 <HW_RTC_StartWakeUpAlarm+0x31c>)
 8009246:	2200      	movs	r2, #0
 8009248:	611a      	str	r2, [r3, #16]
  
  /* Set RTC_Alarm */
  HAL_RTC_SetAlarm_IT( &RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN );
 800924a:	4912      	ldr	r1, [pc, #72]	; (8009294 <HW_RTC_StartWakeUpAlarm+0x31c>)
 800924c:	4b12      	ldr	r3, [pc, #72]	; (8009298 <HW_RTC_StartWakeUpAlarm+0x320>)
 800924e:	2200      	movs	r2, #0
 8009250:	0018      	movs	r0, r3
 8009252:	f7fd fd25 	bl	8006ca0 <HAL_RTC_SetAlarm_IT>
  
  /* Debug Printf*/
  DBG( HW_RTC_GetCalendarValue( &RTC_DateStruct, &RTC_TimeStruct ); );
 8009256:	2310      	movs	r3, #16
 8009258:	18fa      	adds	r2, r7, r3
 800925a:	230c      	movs	r3, #12
 800925c:	18fb      	adds	r3, r7, r3
 800925e:	0011      	movs	r1, r2
 8009260:	0018      	movs	r0, r3
 8009262:	f000 f81b 	bl	800929c <HW_RTC_GetCalendarValue>
  DBG_PRINTF("it's %d:%d:%d:%d ", RTC_TimeStruct.Hours, RTC_TimeStruct.Minutes, RTC_TimeStruct.Seconds, ((PREDIV_S - RTC_TimeStruct.SubSeconds)*1000)>>N_PREDIV_S);
  DBG_PRINTF("WU@ %d:%d:%d:%d\n", rtcAlarmHours, rtcAlarmMinutes, rtcAlarmSeconds, (rtcAlarmSubSeconds*1000)>>N_PREDIV_S );
  
  DBG_GPIO_RST(GPIOB, GPIO_PIN_13);
 8009266:	4b05      	ldr	r3, [pc, #20]	; (800927c <HW_RTC_StartWakeUpAlarm+0x304>)
 8009268:	2280      	movs	r2, #128	; 0x80
 800926a:	0192      	lsls	r2, r2, #6
 800926c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800926e:	46c0      	nop			; (mov r8, r8)
 8009270:	46bd      	mov	sp, r7
 8009272:	b00d      	add	sp, #52	; 0x34
 8009274:	bd90      	pop	{r4, r7, pc}
 8009276:	46c0      	nop			; (mov r8, r8)
 8009278:	20000264 	.word	0x20000264
 800927c:	50000400 	.word	0x50000400
 8009280:	000003ff 	.word	0x000003ff
 8009284:	00015180 	.word	0x00015180
 8009288:	fffffc00 	.word	0xfffffc00
 800928c:	0800accc 	.word	0x0800accc
 8009290:	0800acc0 	.word	0x0800acc0
 8009294:	2000023c 	.word	0x2000023c
 8009298:	20000218 	.word	0x20000218

0800929c <HW_RTC_GetCalendarValue>:
 * @param pointer to RTC_DateStruct
 * @param pointer to RTC_TimeStruct
 * @retval time in ticks
 */
static TimerTime_t HW_RTC_GetCalendarValue( RTC_DateTypeDef* RTC_DateStruct, RTC_TimeTypeDef* RTC_TimeStruct )
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b086      	sub	sp, #24
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
  TimerTime_t calendarValue = 0;
 80092a6:	2300      	movs	r3, #0
 80092a8:	617b      	str	r3, [r7, #20]
  uint32_t i = 0;
 80092aa:	2300      	movs	r3, #0
 80092ac:	613b      	str	r3, [r7, #16]
  uint32_t first_read;
  
  /* Get Time and Date*/
  HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
 80092ae:	6839      	ldr	r1, [r7, #0]
 80092b0:	4b4a      	ldr	r3, [pc, #296]	; (80093dc <HW_RTC_GetCalendarValue+0x140>)
 80092b2:	2200      	movs	r2, #0
 80092b4:	0018      	movs	r0, r3
 80092b6:	f7fd fb87 	bl	80069c8 <HAL_RTC_GetTime>
 
   /* make sure it is correct due to asynchronus nature of RTC*/
  do {
//    first_read = RTC_TimeStruct->SubSeconds;
	  first_read =  RTC->SSR;
 80092ba:	4b49      	ldr	r3, [pc, #292]	; (80093e0 <HW_RTC_GetCalendarValue+0x144>)
 80092bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092be:	60fb      	str	r3, [r7, #12]
    HAL_RTC_GetDate( &RtcHandle, RTC_DateStruct, RTC_FORMAT_BIN );
 80092c0:	6879      	ldr	r1, [r7, #4]
 80092c2:	4b46      	ldr	r3, [pc, #280]	; (80093dc <HW_RTC_GetCalendarValue+0x140>)
 80092c4:	2200      	movs	r2, #0
 80092c6:	0018      	movs	r0, r3
 80092c8:	f7fd fc9a 	bl	8006c00 <HAL_RTC_GetDate>
    HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
 80092cc:	6839      	ldr	r1, [r7, #0]
 80092ce:	4b43      	ldr	r3, [pc, #268]	; (80093dc <HW_RTC_GetCalendarValue+0x140>)
 80092d0:	2200      	movs	r2, #0
 80092d2:	0018      	movs	r0, r3
 80092d4:	f7fd fb78 	bl	80069c8 <HAL_RTC_GetTime>
  }while( first_read != RTC->SSR );
 80092d8:	4b41      	ldr	r3, [pc, #260]	; (80093e0 <HW_RTC_GetCalendarValue+0x144>)
 80092da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d1eb      	bne.n	80092ba <HW_RTC_GetCalendarValue+0x1e>
//  } while (first_read != RTC_TimeStruct->SubSeconds);
 
  /* years (calc valid up to year 2099)*/
  for( i = 0; i < RTC_DateStruct->Year; i++ )
 80092e2:	2300      	movs	r3, #0
 80092e4:	613b      	str	r3, [r7, #16]
 80092e6:	e017      	b.n	8009318 <HW_RTC_GetCalendarValue+0x7c>
  {
    if( (i % 4) == 0 )
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	2203      	movs	r2, #3
 80092ec:	4013      	ands	r3, r2
 80092ee:	d108      	bne.n	8009302 <HW_RTC_GetCalendarValue+0x66>
    {
      calendarValue += DaysInLeapYear * SecondsInDay;
 80092f0:	23b7      	movs	r3, #183	; 0xb7
 80092f2:	005b      	lsls	r3, r3, #1
 80092f4:	001a      	movs	r2, r3
 80092f6:	4b3b      	ldr	r3, [pc, #236]	; (80093e4 <HW_RTC_GetCalendarValue+0x148>)
 80092f8:	4353      	muls	r3, r2
 80092fa:	697a      	ldr	r2, [r7, #20]
 80092fc:	18d3      	adds	r3, r2, r3
 80092fe:	617b      	str	r3, [r7, #20]
 8009300:	e007      	b.n	8009312 <HW_RTC_GetCalendarValue+0x76>
    }
    else
    {
      calendarValue += DaysInYear * SecondsInDay;
 8009302:	236e      	movs	r3, #110	; 0x6e
 8009304:	33ff      	adds	r3, #255	; 0xff
 8009306:	001a      	movs	r2, r3
 8009308:	4b36      	ldr	r3, [pc, #216]	; (80093e4 <HW_RTC_GetCalendarValue+0x148>)
 800930a:	4353      	muls	r3, r2
 800930c:	697a      	ldr	r2, [r7, #20]
 800930e:	18d3      	adds	r3, r2, r3
 8009310:	617b      	str	r3, [r7, #20]
  for( i = 0; i < RTC_DateStruct->Year; i++ )
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	3301      	adds	r3, #1
 8009316:	613b      	str	r3, [r7, #16]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	78db      	ldrb	r3, [r3, #3]
 800931c:	001a      	movs	r2, r3
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	429a      	cmp	r2, r3
 8009322:	d8e1      	bhi.n	80092e8 <HW_RTC_GetCalendarValue+0x4c>
    }
  }

  /* months (calc valid up to year 2099)*/
  if(( (RTC_DateStruct->Year % 4) == 0 ) )
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	78db      	ldrb	r3, [r3, #3]
 8009328:	2203      	movs	r2, #3
 800932a:	4013      	ands	r3, r2
 800932c:	b2db      	uxtb	r3, r3
 800932e:	2b00      	cmp	r3, #0
 8009330:	d117      	bne.n	8009362 <HW_RTC_GetCalendarValue+0xc6>
  {
    for( i = 0; i < ( RTC_DateStruct->Month - 1 ); i++ )
 8009332:	2300      	movs	r3, #0
 8009334:	613b      	str	r3, [r7, #16]
 8009336:	e00c      	b.n	8009352 <HW_RTC_GetCalendarValue+0xb6>
    {
      calendarValue += DaysInMonthLeapYear[i] * SecondsInDay;
 8009338:	4a2b      	ldr	r2, [pc, #172]	; (80093e8 <HW_RTC_GetCalendarValue+0x14c>)
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	18d3      	adds	r3, r2, r3
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	001a      	movs	r2, r3
 8009342:	4b28      	ldr	r3, [pc, #160]	; (80093e4 <HW_RTC_GetCalendarValue+0x148>)
 8009344:	4353      	muls	r3, r2
 8009346:	697a      	ldr	r2, [r7, #20]
 8009348:	18d3      	adds	r3, r2, r3
 800934a:	617b      	str	r3, [r7, #20]
    for( i = 0; i < ( RTC_DateStruct->Month - 1 ); i++ )
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	3301      	adds	r3, #1
 8009350:	613b      	str	r3, [r7, #16]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	785b      	ldrb	r3, [r3, #1]
 8009356:	3b01      	subs	r3, #1
 8009358:	001a      	movs	r2, r3
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	429a      	cmp	r2, r3
 800935e:	d8eb      	bhi.n	8009338 <HW_RTC_GetCalendarValue+0x9c>
 8009360:	e016      	b.n	8009390 <HW_RTC_GetCalendarValue+0xf4>
    }
  }
  else
  {
    for( i = 0;  i < ( RTC_DateStruct->Month - 1 ); i++ )
 8009362:	2300      	movs	r3, #0
 8009364:	613b      	str	r3, [r7, #16]
 8009366:	e00c      	b.n	8009382 <HW_RTC_GetCalendarValue+0xe6>
    {
      calendarValue += DaysInMonth[i] * SecondsInDay;
 8009368:	4a20      	ldr	r2, [pc, #128]	; (80093ec <HW_RTC_GetCalendarValue+0x150>)
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	18d3      	adds	r3, r2, r3
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	001a      	movs	r2, r3
 8009372:	4b1c      	ldr	r3, [pc, #112]	; (80093e4 <HW_RTC_GetCalendarValue+0x148>)
 8009374:	4353      	muls	r3, r2
 8009376:	697a      	ldr	r2, [r7, #20]
 8009378:	18d3      	adds	r3, r2, r3
 800937a:	617b      	str	r3, [r7, #20]
    for( i = 0;  i < ( RTC_DateStruct->Month - 1 ); i++ )
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	3301      	adds	r3, #1
 8009380:	613b      	str	r3, [r7, #16]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	785b      	ldrb	r3, [r3, #1]
 8009386:	3b01      	subs	r3, #1
 8009388:	001a      	movs	r2, r3
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	429a      	cmp	r2, r3
 800938e:	d8eb      	bhi.n	8009368 <HW_RTC_GetCalendarValue+0xcc>
    }
  }

  /* days */
  calendarValue += ( ( uint32_t )RTC_TimeStruct->Seconds + 
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	789b      	ldrb	r3, [r3, #2]
 8009394:	0019      	movs	r1, r3
                     ( ( uint32_t )RTC_TimeStruct->Minutes * SecondsInMinute ) +
                     ( ( uint32_t )RTC_TimeStruct->Hours * SecondsInHour ) + 
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	001a      	movs	r2, r3
 800939c:	23e1      	movs	r3, #225	; 0xe1
 800939e:	011b      	lsls	r3, r3, #4
 80093a0:	435a      	muls	r2, r3
                     ( ( uint32_t )RTC_TimeStruct->Minutes * SecondsInMinute ) +
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	785b      	ldrb	r3, [r3, #1]
 80093a6:	203c      	movs	r0, #60	; 0x3c
 80093a8:	4343      	muls	r3, r0
 80093aa:	18d3      	adds	r3, r2, r3
 80093ac:	18ca      	adds	r2, r1, r3
                     ( ( uint32_t )( RTC_DateStruct->Date * SecondsInDay ) ) );
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	789b      	ldrb	r3, [r3, #2]
 80093b2:	0019      	movs	r1, r3
 80093b4:	4b0b      	ldr	r3, [pc, #44]	; (80093e4 <HW_RTC_GetCalendarValue+0x148>)
 80093b6:	434b      	muls	r3, r1
                     ( ( uint32_t )RTC_TimeStruct->Hours * SecondsInHour ) + 
 80093b8:	18d3      	adds	r3, r2, r3
  calendarValue += ( ( uint32_t )RTC_TimeStruct->Seconds + 
 80093ba:	697a      	ldr	r2, [r7, #20]
 80093bc:	18d3      	adds	r3, r2, r3
 80093be:	617b      	str	r3, [r7, #20]
  
  calendarValue = (calendarValue<<N_PREDIV_S) + ( PREDIV_S - RTC_TimeStruct->SubSeconds);
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	029a      	lsls	r2, r3, #10
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	1ad3      	subs	r3, r2, r3
 80093ca:	4a09      	ldr	r2, [pc, #36]	; (80093f0 <HW_RTC_GetCalendarValue+0x154>)
 80093cc:	4694      	mov	ip, r2
 80093ce:	4463      	add	r3, ip
 80093d0:	617b      	str	r3, [r7, #20]

  return( calendarValue );
 80093d2:	697b      	ldr	r3, [r7, #20]
}
 80093d4:	0018      	movs	r0, r3
 80093d6:	46bd      	mov	sp, r7
 80093d8:	b006      	add	sp, #24
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	20000218 	.word	0x20000218
 80093e0:	40002800 	.word	0x40002800
 80093e4:	00015180 	.word	0x00015180
 80093e8:	0800accc 	.word	0x0800accc
 80093ec:	0800acc0 	.word	0x0800acc0
 80093f0:	000003ff 	.word	0x000003ff

080093f4 <HW_SPI_Init>:
 * @brief Initializes the SPI object and MCU peripheral
 *
 * @param [IN] none
 */
void HW_SPI_Init( void )
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b086      	sub	sp, #24
 80093f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 80093fa:	1d3b      	adds	r3, r7, #4
 80093fc:	0018      	movs	r0, r3
 80093fe:	2314      	movs	r3, #20
 8009400:	001a      	movs	r2, r3
 8009402:	2100      	movs	r1, #0
 8009404:	f000 fdef 	bl	8009fe6 <memset>
  /*##-1- Configure the SPI peripheral */
  /* Set the SPI parameters */

  hspi.Instance = SPI1;
 8009408:	4b37      	ldr	r3, [pc, #220]	; (80094e8 <HW_SPI_Init+0xf4>)
 800940a:	4a38      	ldr	r2, [pc, #224]	; (80094ec <HW_SPI_Init+0xf8>)
 800940c:	601a      	str	r2, [r3, #0]

  hspi.Init.BaudRatePrescaler = SpiFrequency( 10000000 );
 800940e:	4b38      	ldr	r3, [pc, #224]	; (80094f0 <HW_SPI_Init+0xfc>)
 8009410:	0018      	movs	r0, r3
 8009412:	f000 f88d 	bl	8009530 <SpiFrequency>
 8009416:	0002      	movs	r2, r0
 8009418:	4b33      	ldr	r3, [pc, #204]	; (80094e8 <HW_SPI_Init+0xf4>)
 800941a:	61da      	str	r2, [r3, #28]
  hspi.Init.Direction      = SPI_DIRECTION_2LINES;
 800941c:	4b32      	ldr	r3, [pc, #200]	; (80094e8 <HW_SPI_Init+0xf4>)
 800941e:	2200      	movs	r2, #0
 8009420:	609a      	str	r2, [r3, #8]
  hspi.Init.Mode           = SPI_MODE_MASTER;
 8009422:	4b31      	ldr	r3, [pc, #196]	; (80094e8 <HW_SPI_Init+0xf4>)
 8009424:	2282      	movs	r2, #130	; 0x82
 8009426:	0052      	lsls	r2, r2, #1
 8009428:	605a      	str	r2, [r3, #4]
  hspi.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800942a:	4b2f      	ldr	r3, [pc, #188]	; (80094e8 <HW_SPI_Init+0xf4>)
 800942c:	2200      	movs	r2, #0
 800942e:	611a      	str	r2, [r3, #16]
  hspi.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8009430:	4b2d      	ldr	r3, [pc, #180]	; (80094e8 <HW_SPI_Init+0xf4>)
 8009432:	2200      	movs	r2, #0
 8009434:	615a      	str	r2, [r3, #20]
  hspi.Init.DataSize       = SPI_DATASIZE_8BIT;
 8009436:	4b2c      	ldr	r3, [pc, #176]	; (80094e8 <HW_SPI_Init+0xf4>)
 8009438:	2200      	movs	r2, #0
 800943a:	60da      	str	r2, [r3, #12]
  hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;  
 800943c:	4b2a      	ldr	r3, [pc, #168]	; (80094e8 <HW_SPI_Init+0xf4>)
 800943e:	2200      	movs	r2, #0
 8009440:	629a      	str	r2, [r3, #40]	; 0x28
  hspi.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8009442:	4b29      	ldr	r3, [pc, #164]	; (80094e8 <HW_SPI_Init+0xf4>)
 8009444:	2200      	movs	r2, #0
 8009446:	621a      	str	r2, [r3, #32]
  hspi.Init.NSS            = SPI_NSS_SOFT;
 8009448:	4b27      	ldr	r3, [pc, #156]	; (80094e8 <HW_SPI_Init+0xf4>)
 800944a:	2280      	movs	r2, #128	; 0x80
 800944c:	0092      	lsls	r2, r2, #2
 800944e:	619a      	str	r2, [r3, #24]
  hspi.Init.TIMode         = SPI_TIMODE_DISABLE;
 8009450:	4b25      	ldr	r3, [pc, #148]	; (80094e8 <HW_SPI_Init+0xf4>)
 8009452:	2200      	movs	r2, #0
 8009454:	625a      	str	r2, [r3, #36]	; 0x24


  SPI_CLK_ENABLE(); 
 8009456:	4b27      	ldr	r3, [pc, #156]	; (80094f4 <HW_SPI_Init+0x100>)
 8009458:	4a26      	ldr	r2, [pc, #152]	; (80094f4 <HW_SPI_Init+0x100>)
 800945a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800945c:	2180      	movs	r1, #128	; 0x80
 800945e:	0149      	lsls	r1, r1, #5
 8009460:	430a      	orrs	r2, r1
 8009462:	635a      	str	r2, [r3, #52]	; 0x34


  if(HAL_SPI_Init( &hspi) != HAL_OK)
 8009464:	4b20      	ldr	r3, [pc, #128]	; (80094e8 <HW_SPI_Init+0xf4>)
 8009466:	0018      	movs	r0, r3
 8009468:	f7fd ff4c 	bl	8007304 <HAL_SPI_Init>
 800946c:	1e03      	subs	r3, r0, #0
 800946e:	d001      	beq.n	8009474 <HW_SPI_Init+0x80>
  {
    /* Initialization Error */
     Error_Handler();
 8009470:	f7ff fae0 	bl	8008a34 <Error_Handler>
  }

  /*##-2- Configure the SPI GPIOs */
  initStruct.Mode =GPIO_MODE_AF_PP;
 8009474:	1d3b      	adds	r3, r7, #4
 8009476:	2202      	movs	r2, #2
 8009478:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_PULLDOWN;
 800947a:	1d3b      	adds	r3, r7, #4
 800947c:	2202      	movs	r2, #2
 800947e:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8009480:	1d3b      	adds	r3, r7, #4
 8009482:	2203      	movs	r2, #3
 8009484:	60da      	str	r2, [r3, #12]
  initStruct.Alternate= SPI1_AF ;
 8009486:	1d3b      	adds	r3, r7, #4
 8009488:	2200      	movs	r2, #0
 800948a:	611a      	str	r2, [r3, #16]

  HW_GPIO_Init( RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct); 
 800948c:	1d3b      	adds	r3, r7, #4
 800948e:	481a      	ldr	r0, [pc, #104]	; (80094f8 <HW_SPI_Init+0x104>)
 8009490:	001a      	movs	r2, r3
 8009492:	2108      	movs	r1, #8
 8009494:	f7ff fad2 	bl	8008a3c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct); 
 8009498:	1d3a      	adds	r2, r7, #4
 800949a:	23a0      	movs	r3, #160	; 0xa0
 800949c:	05db      	lsls	r3, r3, #23
 800949e:	2140      	movs	r1, #64	; 0x40
 80094a0:	0018      	movs	r0, r3
 80094a2:	f7ff facb 	bl	8008a3c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct); 
 80094a6:	1d3a      	adds	r2, r7, #4
 80094a8:	23a0      	movs	r3, #160	; 0xa0
 80094aa:	05db      	lsls	r3, r3, #23
 80094ac:	2180      	movs	r1, #128	; 0x80
 80094ae:	0018      	movs	r0, r3
 80094b0:	f7ff fac4 	bl	8008a3c <HW_GPIO_Init>

  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 80094b4:	1d3b      	adds	r3, r7, #4
 80094b6:	2201      	movs	r2, #1
 80094b8:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_PULLUP;
 80094ba:	1d3b      	adds	r3, r7, #4
 80094bc:	2201      	movs	r2, #1
 80094be:	609a      	str	r2, [r3, #8]

  HW_GPIO_Init(  RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct );
 80094c0:	1d3a      	adds	r2, r7, #4
 80094c2:	2380      	movs	r3, #128	; 0x80
 80094c4:	0219      	lsls	r1, r3, #8
 80094c6:	23a0      	movs	r3, #160	; 0xa0
 80094c8:	05db      	lsls	r3, r3, #23
 80094ca:	0018      	movs	r0, r3
 80094cc:	f7ff fab6 	bl	8008a3c <HW_GPIO_Init>

  HW_GPIO_Write ( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 80094d0:	2380      	movs	r3, #128	; 0x80
 80094d2:	0219      	lsls	r1, r3, #8
 80094d4:	23a0      	movs	r3, #160	; 0xa0
 80094d6:	05db      	lsls	r3, r3, #23
 80094d8:	2201      	movs	r2, #1
 80094da:	0018      	movs	r0, r3
 80094dc:	f7ff fb7a 	bl	8008bd4 <HW_GPIO_Write>
}
 80094e0:	46c0      	nop			; (mov r8, r8)
 80094e2:	46bd      	mov	sp, r7
 80094e4:	b006      	add	sp, #24
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	20000280 	.word	0x20000280
 80094ec:	40013000 	.word	0x40013000
 80094f0:	00989680 	.word	0x00989680
 80094f4:	40021000 	.word	0x40021000
 80094f8:	50000400 	.word	0x50000400

080094fc <HW_SPI_InOut>:
 *
 * @param [IN] outData Byte to be sent
 * @retval inData      Received byte.
 */
uint16_t HW_SPI_InOut( uint16_t txData )
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b086      	sub	sp, #24
 8009500:	af02      	add	r7, sp, #8
 8009502:	0002      	movs	r2, r0
 8009504:	1dbb      	adds	r3, r7, #6
 8009506:	801a      	strh	r2, [r3, #0]
  uint16_t rxData ;

  HAL_SPI_TransmitReceive( &hspi, ( uint8_t * ) &txData, ( uint8_t* ) &rxData, 1, HAL_MAX_DELAY);	
 8009508:	230e      	movs	r3, #14
 800950a:	18fa      	adds	r2, r7, r3
 800950c:	1db9      	adds	r1, r7, #6
 800950e:	4807      	ldr	r0, [pc, #28]	; (800952c <HW_SPI_InOut+0x30>)
 8009510:	2301      	movs	r3, #1
 8009512:	425b      	negs	r3, r3
 8009514:	9300      	str	r3, [sp, #0]
 8009516:	2301      	movs	r3, #1
 8009518:	f7fd ff66 	bl	80073e8 <HAL_SPI_TransmitReceive>

  return rxData;
 800951c:	230e      	movs	r3, #14
 800951e:	18fb      	adds	r3, r7, r3
 8009520:	881b      	ldrh	r3, [r3, #0]
}
 8009522:	0018      	movs	r0, r3
 8009524:	46bd      	mov	sp, r7
 8009526:	b004      	add	sp, #16
 8009528:	bd80      	pop	{r7, pc}
 800952a:	46c0      	nop			; (mov r8, r8)
 800952c:	20000280 	.word	0x20000280

08009530 <SpiFrequency>:

/* Private functions ---------------------------------------------------------*/

static uint32_t SpiFrequency( uint32_t hz )
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b086      	sub	sp, #24
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  uint32_t divisor = 0;
 8009538:	2300      	movs	r3, #0
 800953a:	617b      	str	r3, [r7, #20]
  uint32_t SysClkTmp = SystemCoreClock;
 800953c:	4b17      	ldr	r3, [pc, #92]	; (800959c <SpiFrequency+0x6c>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	613b      	str	r3, [r7, #16]
  uint32_t baudRate;
  
  while( SysClkTmp > hz)
 8009542:	e008      	b.n	8009556 <SpiFrequency+0x26>
  {
    divisor++;
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	3301      	adds	r3, #1
 8009548:	617b      	str	r3, [r7, #20]
    SysClkTmp= ( SysClkTmp >> 1);
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	085b      	lsrs	r3, r3, #1
 800954e:	613b      	str	r3, [r7, #16]
    
    if (divisor >= 7)
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	2b06      	cmp	r3, #6
 8009554:	d804      	bhi.n	8009560 <SpiFrequency+0x30>
  while( SysClkTmp > hz)
 8009556:	693a      	ldr	r2, [r7, #16]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	429a      	cmp	r2, r3
 800955c:	d8f2      	bhi.n	8009544 <SpiFrequency+0x14>
 800955e:	e000      	b.n	8009562 <SpiFrequency+0x32>
      break;
 8009560:	46c0      	nop			; (mov r8, r8)
  }
  
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )| 
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	2204      	movs	r2, #4
 8009566:	4013      	ands	r3, r2
 8009568:	d101      	bne.n	800956e <SpiFrequency+0x3e>
 800956a:	2200      	movs	r2, #0
 800956c:	e000      	b.n	8009570 <SpiFrequency+0x40>
 800956e:	2220      	movs	r2, #32
            ((( divisor & 0x2 ) == 0 )? 0x0 : SPI_CR1_BR_1  )| 
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	2102      	movs	r1, #2
 8009574:	400b      	ands	r3, r1
 8009576:	d101      	bne.n	800957c <SpiFrequency+0x4c>
 8009578:	2300      	movs	r3, #0
 800957a:	e000      	b.n	800957e <SpiFrequency+0x4e>
 800957c:	2310      	movs	r3, #16
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )| 
 800957e:	431a      	orrs	r2, r3
            ((( divisor & 0x1 ) == 0 )? 0x0 : SPI_CR1_BR_0  );
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	2101      	movs	r1, #1
 8009584:	400b      	ands	r3, r1
 8009586:	d101      	bne.n	800958c <SpiFrequency+0x5c>
 8009588:	2300      	movs	r3, #0
 800958a:	e000      	b.n	800958e <SpiFrequency+0x5e>
 800958c:	2308      	movs	r3, #8
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )| 
 800958e:	4313      	orrs	r3, r2
 8009590:	60fb      	str	r3, [r7, #12]
  
  return baudRate;
 8009592:	68fb      	ldr	r3, [r7, #12]
}
 8009594:	0018      	movs	r0, r3
 8009596:	46bd      	mov	sp, r7
 8009598:	b006      	add	sp, #24
 800959a:	bd80      	pop	{r7, pc}
 800959c:	2000002c 	.word	0x2000002c

080095a0 <ledTimerCallback>:
    	}

}

static void ledTimerCallback()
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	af00      	add	r7, sp, #0
	//BSP_LED_Off(LED2);
}
 80095a4:	46c0      	nop			; (mov r8, r8)
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
	...

080095ac <txDoneEventCallback>:

void txDoneEventCallback()
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	af00      	add	r7, sp, #0
//	BSP_LED_Off(LED3);
    Radio.Rx(0);
 80095b0:	4b03      	ldr	r3, [pc, #12]	; (80095c0 <txDoneEventCallback+0x14>)
 80095b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095b4:	2000      	movs	r0, #0
 80095b6:	4798      	blx	r3
}
 80095b8:	46c0      	nop			; (mov r8, r8)
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	46c0      	nop			; (mov r8, r8)
 80095c0:	0800ac04 	.word	0x0800ac04

080095c4 <rxDoneEventCallback>:

void rxDoneEventCallback(uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr)
{
 80095c4:	b590      	push	{r4, r7, lr}
 80095c6:	b087      	sub	sp, #28
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	000c      	movs	r4, r1
 80095ce:	0010      	movs	r0, r2
 80095d0:	0019      	movs	r1, r3
 80095d2:	230a      	movs	r3, #10
 80095d4:	18fb      	adds	r3, r7, r3
 80095d6:	1c22      	adds	r2, r4, #0
 80095d8:	801a      	strh	r2, [r3, #0]
 80095da:	2308      	movs	r3, #8
 80095dc:	18fb      	adds	r3, r7, r3
 80095de:	1c02      	adds	r2, r0, #0
 80095e0:	801a      	strh	r2, [r3, #0]
 80095e2:	1dfb      	adds	r3, r7, #7
 80095e4:	1c0a      	adds	r2, r1, #0
 80095e6:	701a      	strb	r2, [r3, #0]
	//BSP_LED_On(LED2);

	TimerStart(&ledTimer);
 80095e8:	4b1a      	ldr	r3, [pc, #104]	; (8009654 <rxDoneEventCallback+0x90>)
 80095ea:	0018      	movs	r0, r3
 80095ec:	f7ff f814 	bl	8008618 <TimerStart>
	RTC_TimeTypeDef *tStruct = {0};
 80095f0:	2300      	movs	r3, #0
 80095f2:	617b      	str	r3, [r7, #20]
	tStruct = HW_RTC_GetTimerValue();
 80095f4:	f7ff fc24 	bl	8008e40 <HW_RTC_GetTimerValue>
 80095f8:	0003      	movs	r3, r0
 80095fa:	617b      	str	r3, [r7, #20]
	 *  be possible pass RTC_TimeStruct to main function but pay attention that it is a local function and stuck will be zero after pass to other function
	 *
	 *
	 */

		if( (payload[0] + (payload[1]<<8)) > 4095 )  // Only 1 and 1 true so do nothing
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	001a      	movs	r2, r3
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	3301      	adds	r3, #1
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	021b      	lsls	r3, r3, #8
 800960a:	18d3      	adds	r3, r2, r3
 800960c:	4a12      	ldr	r2, [pc, #72]	; (8009658 <rxDoneEventCallback+0x94>)
 800960e:	4293      	cmp	r3, r2
 8009610:	dd05      	ble.n	800961e <rxDoneEventCallback+0x5a>
			{

			garbageRxDataCount++ ;			// TO-DO create a buffer and insert garbage datas into it
 8009612:	4b12      	ldr	r3, [pc, #72]	; (800965c <rxDoneEventCallback+0x98>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	1c5a      	adds	r2, r3, #1
 8009618:	4b10      	ldr	r3, [pc, #64]	; (800965c <rxDoneEventCallback+0x98>)
 800961a:	601a      	str	r2, [r3, #0]
		else
			{
				vcom_Send("Second: %d Minute: %d Data: %d"  ,tStruct->Seconds, tStruct->Minutes, payload[0] +  (payload[1]<<8));
				PRINTF("\n");
			}
}
 800961c:	e015      	b.n	800964a <rxDoneEventCallback+0x86>
				vcom_Send("Second: %d Minute: %d Data: %d"  ,tStruct->Seconds, tStruct->Minutes, payload[0] +  (payload[1]<<8));
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	789b      	ldrb	r3, [r3, #2]
 8009622:	0019      	movs	r1, r3
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	785b      	ldrb	r3, [r3, #1]
 8009628:	001c      	movs	r4, r3
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	001a      	movs	r2, r3
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	3301      	adds	r3, #1
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	021b      	lsls	r3, r3, #8
 8009638:	18d3      	adds	r3, r2, r3
 800963a:	4809      	ldr	r0, [pc, #36]	; (8009660 <rxDoneEventCallback+0x9c>)
 800963c:	0022      	movs	r2, r4
 800963e:	f000 fb2d 	bl	8009c9c <vcom_Send>
				PRINTF("\n");
 8009642:	4b08      	ldr	r3, [pc, #32]	; (8009664 <rxDoneEventCallback+0xa0>)
 8009644:	0018      	movs	r0, r3
 8009646:	f000 fb29 	bl	8009c9c <vcom_Send>
}
 800964a:	46c0      	nop			; (mov r8, r8)
 800964c:	46bd      	mov	sp, r7
 800964e:	b007      	add	sp, #28
 8009650:	bd90      	pop	{r4, r7, pc}
 8009652:	46c0      	nop			; (mov r8, r8)
 8009654:	200002d8 	.word	0x200002d8
 8009658:	00000fff 	.word	0x00000fff
 800965c:	200002f4 	.word	0x200002f4
 8009660:	0800ace0 	.word	0x0800ace0
 8009664:	0800ad00 	.word	0x0800ad00

08009668 <main>:

int main(void)
{
 8009668:	b590      	push	{r4, r7, lr}
 800966a:	b093      	sub	sp, #76	; 0x4c
 800966c:	af0a      	add	r7, sp, #40	; 0x28
	HAL_Init();
 800966e:	f7fb facd 	bl	8004c0c <HAL_Init>
	SystemClock_Config();
 8009672:	f000 f92b 	bl	80098cc <SystemClock_Config>
	HW_Init();
 8009676:	f000 f8ff 	bl	8009878 <HW_Init>

	RadioEvents_t radioEvents;
    radioEvents.TxDone = txDoneEventCallback;
 800967a:	1d3b      	adds	r3, r7, #4
 800967c:	4a2a      	ldr	r2, [pc, #168]	; (8009728 <main+0xc0>)
 800967e:	601a      	str	r2, [r3, #0]
    radioEvents.RxDone = rxDoneEventCallback;
 8009680:	1d3b      	adds	r3, r7, #4
 8009682:	4a2a      	ldr	r2, [pc, #168]	; (800972c <main+0xc4>)
 8009684:	609a      	str	r2, [r3, #8]
    Radio.Init(&radioEvents);
 8009686:	4b2a      	ldr	r3, [pc, #168]	; (8009730 <main+0xc8>)
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	1d3a      	adds	r2, r7, #4
 800968c:	0010      	movs	r0, r2
 800968e:	4798      	blx	r3

    Radio.SetChannel(LORA_FREQUENCY);
 8009690:	4b27      	ldr	r3, [pc, #156]	; (8009730 <main+0xc8>)
 8009692:	695b      	ldr	r3, [r3, #20]
 8009694:	4a27      	ldr	r2, [pc, #156]	; (8009734 <main+0xcc>)
 8009696:	0010      	movs	r0, r2
 8009698:	4798      	blx	r3
    Radio.SetTxConfig(MODEM_LORA, LORA_TX_POWER, 0, LORA_BANDWIDTH, LORA_DATARATE, LORA_CODERATE, LORA_PREAMBLE_LEN,
 800969a:	4b25      	ldr	r3, [pc, #148]	; (8009730 <main+0xc8>)
 800969c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800969e:	4b26      	ldr	r3, [pc, #152]	; (8009738 <main+0xd0>)
 80096a0:	9308      	str	r3, [sp, #32]
 80096a2:	2300      	movs	r3, #0
 80096a4:	9307      	str	r3, [sp, #28]
 80096a6:	2300      	movs	r3, #0
 80096a8:	9306      	str	r3, [sp, #24]
 80096aa:	2300      	movs	r3, #0
 80096ac:	9305      	str	r3, [sp, #20]
 80096ae:	2301      	movs	r3, #1
 80096b0:	9304      	str	r3, [sp, #16]
 80096b2:	2300      	movs	r3, #0
 80096b4:	9303      	str	r3, [sp, #12]
 80096b6:	2308      	movs	r3, #8
 80096b8:	9302      	str	r3, [sp, #8]
 80096ba:	2301      	movs	r3, #1
 80096bc:	9301      	str	r3, [sp, #4]
 80096be:	2307      	movs	r3, #7
 80096c0:	9300      	str	r3, [sp, #0]
 80096c2:	2302      	movs	r3, #2
 80096c4:	2200      	movs	r2, #0
 80096c6:	210e      	movs	r1, #14
 80096c8:	2001      	movs	r0, #1
 80096ca:	47a0      	blx	r4
                      false, true, false, 0, 0, 3000000);  // timeout

    Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_DATARATE, LORA_CODERATE, 0, LORA_PREAMBLE_LEN,
 80096cc:	4b18      	ldr	r3, [pc, #96]	; (8009730 <main+0xc8>)
 80096ce:	6a1c      	ldr	r4, [r3, #32]
 80096d0:	2301      	movs	r3, #1
 80096d2:	9309      	str	r3, [sp, #36]	; 0x24
 80096d4:	2300      	movs	r3, #0
 80096d6:	9308      	str	r3, [sp, #32]
 80096d8:	2300      	movs	r3, #0
 80096da:	9307      	str	r3, [sp, #28]
 80096dc:	2300      	movs	r3, #0
 80096de:	9306      	str	r3, [sp, #24]
 80096e0:	2301      	movs	r3, #1
 80096e2:	9305      	str	r3, [sp, #20]
 80096e4:	2300      	movs	r3, #0
 80096e6:	9304      	str	r3, [sp, #16]
 80096e8:	2300      	movs	r3, #0
 80096ea:	9303      	str	r3, [sp, #12]
 80096ec:	23fa      	movs	r3, #250	; 0xfa
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	9302      	str	r3, [sp, #8]
 80096f2:	2308      	movs	r3, #8
 80096f4:	9301      	str	r3, [sp, #4]
 80096f6:	2300      	movs	r3, #0
 80096f8:	9300      	str	r3, [sp, #0]
 80096fa:	2301      	movs	r3, #1
 80096fc:	2207      	movs	r2, #7
 80096fe:	2102      	movs	r1, #2
 8009700:	2001      	movs	r0, #1
 8009702:	47a0      	blx	r4
                      1000, false, 0, true, false, 0, false, true);

    Radio.Rx(0);
 8009704:	4b0a      	ldr	r3, [pc, #40]	; (8009730 <main+0xc8>)
 8009706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009708:	2000      	movs	r0, #0
 800970a:	4798      	blx	r3

    TimerInit(&ledTimer, ledTimerCallback);
 800970c:	4a0b      	ldr	r2, [pc, #44]	; (800973c <main+0xd4>)
 800970e:	4b0c      	ldr	r3, [pc, #48]	; (8009740 <main+0xd8>)
 8009710:	0011      	movs	r1, r2
 8009712:	0018      	movs	r0, r3
 8009714:	f7fe ff68 	bl	80085e8 <TimerInit>
    TimerSetValue(&ledTimer, 500);
 8009718:	23fa      	movs	r3, #250	; 0xfa
 800971a:	005a      	lsls	r2, r3, #1
 800971c:	4b08      	ldr	r3, [pc, #32]	; (8009740 <main+0xd8>)
 800971e:	0011      	movs	r1, r2
 8009720:	0018      	movs	r0, r3
 8009722:	f7ff f923 	bl	800896c <TimerSetValue>
		   gpioCallback();  // for transmitter
	   	   }
#endif

#ifdef RX
		for(;;); // for receiver
 8009726:	e7fe      	b.n	8009726 <main+0xbe>
 8009728:	080095ad 	.word	0x080095ad
 800972c:	080095c5 	.word	0x080095c5
 8009730:	0800ac04 	.word	0x0800ac04
 8009734:	33bca100 	.word	0x33bca100
 8009738:	002dc6c0 	.word	0x002dc6c0
 800973c:	080095a1 	.word	0x080095a1
 8009740:	200002d8 	.word	0x200002d8

08009744 <HAL_InitTick>:
  * @brief  don't enable systick
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
   /* Return function status */
  return HAL_OK;
 800974c:	2300      	movs	r3, #0
}
 800974e:	0018      	movs	r0, r3
 8009750:	46bd      	mov	sp, r7
 8009752:	b002      	add	sp, #8
 8009754:	bd80      	pop	{r7, pc}
	...

08009758 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	af00      	add	r7, sp, #0
  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD( ); 
 800975c:	f7fb feae 	bl	80054bc <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower( );
 8009760:	f7fb fec8 	bl	80054f4 <HAL_PWREx_EnableUltraLowPower>
  
  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 8009764:	4b08      	ldr	r3, [pc, #32]	; (8009788 <HAL_MspInit+0x30>)
 8009766:	4a08      	ldr	r2, [pc, #32]	; (8009788 <HAL_MspInit+0x30>)
 8009768:	6812      	ldr	r2, [r2, #0]
 800976a:	2108      	movs	r1, #8
 800976c:	430a      	orrs	r2, r1
 800976e:	601a      	str	r2, [r3, #0]
  
  /*In debug mode, e.g. when DBGMCU is activated, Arm core has always clocks
   * And will not wait that the FLACH is ready to be read. It can miss in this 
   * case the first instruction. To overcome this issue, the flash remain clcoked during sleep mode
   */
  DBG( __HAL_FLASH_SLEEP_POWERDOWN_DISABLE(); );
 8009770:	4b05      	ldr	r3, [pc, #20]	; (8009788 <HAL_MspInit+0x30>)
 8009772:	4a05      	ldr	r2, [pc, #20]	; (8009788 <HAL_MspInit+0x30>)
 8009774:	6812      	ldr	r2, [r2, #0]
 8009776:	2108      	movs	r1, #8
 8009778:	438a      	bics	r2, r1
 800977a:	601a      	str	r2, [r3, #0]
  
#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/  
  HAL_PWREx_EnableFastWakeUp( );
 800977c:	f7fb feac 	bl	80054d8 <HAL_PWREx_EnableFastWakeUp>
#else  
  HAL_PWREx_DisableFastWakeUp( );
#endif
}
 8009780:	46c0      	nop			; (mov r8, r8)
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	46c0      	nop			; (mov r8, r8)
 8009788:	40022000 	.word	0x40022000

0800978c <HAL_RTC_MspInit>:
  *        order to modify the RTC Clock source, as consequence RTC registers (including 
  *        the backup registers) and RCC_CSR register are set to their reset values.  
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b09a      	sub	sp, #104	; 0x68
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

  /*##-1- Configue the RTC clock soucre ######################################*/
  /* -a- Enable LSE Oscillator */
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSE;
 8009794:	2330      	movs	r3, #48	; 0x30
 8009796:	18fb      	adds	r3, r7, r3
 8009798:	2204      	movs	r2, #4
 800979a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800979c:	2330      	movs	r3, #48	; 0x30
 800979e:	18fb      	adds	r3, r7, r3
 80097a0:	2200      	movs	r2, #0
 80097a2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80097a4:	2330      	movs	r3, #48	; 0x30
 80097a6:	18fb      	adds	r3, r7, r3
 80097a8:	2280      	movs	r2, #128	; 0x80
 80097aa:	0052      	lsls	r2, r2, #1
 80097ac:	609a      	str	r2, [r3, #8]
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80097ae:	2330      	movs	r3, #48	; 0x30
 80097b0:	18fb      	adds	r3, r7, r3
 80097b2:	0018      	movs	r0, r3
 80097b4:	f7fb feac 	bl	8005510 <HAL_RCC_OscConfig>
 80097b8:	1e03      	subs	r3, r0, #0
 80097ba:	d001      	beq.n	80097c0 <HAL_RTC_MspInit+0x34>
  {
    Error_Handler();
 80097bc:	f7ff f93a 	bl	8008a34 <Error_Handler>
  }

  /* -b- Select LSI as RTC clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80097c0:	230c      	movs	r3, #12
 80097c2:	18fb      	adds	r3, r7, r3
 80097c4:	2220      	movs	r2, #32
 80097c6:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80097c8:	230c      	movs	r3, #12
 80097ca:	18fb      	adds	r3, r7, r3
 80097cc:	2280      	movs	r2, #128	; 0x80
 80097ce:	0252      	lsls	r2, r2, #9
 80097d0:	605a      	str	r2, [r3, #4]
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80097d2:	230c      	movs	r3, #12
 80097d4:	18fb      	adds	r3, r7, r3
 80097d6:	0018      	movs	r0, r3
 80097d8:	f7fc fc62 	bl	80060a0 <HAL_RCCEx_PeriphCLKConfig>
 80097dc:	1e03      	subs	r3, r0, #0
 80097de:	d001      	beq.n	80097e4 <HAL_RTC_MspInit+0x58>
  { 
    Error_Handler();
 80097e0:	f7ff f928 	bl	8008a34 <Error_Handler>
  }

  /*##-2- Enable the RTC peripheral Clock ####################################*/
  /* Enable RTC Clock */
  __HAL_RCC_RTC_ENABLE();
 80097e4:	4b09      	ldr	r3, [pc, #36]	; (800980c <HAL_RTC_MspInit+0x80>)
 80097e6:	4a09      	ldr	r2, [pc, #36]	; (800980c <HAL_RTC_MspInit+0x80>)
 80097e8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80097ea:	2180      	movs	r1, #128	; 0x80
 80097ec:	02c9      	lsls	r1, r1, #11
 80097ee:	430a      	orrs	r2, r1
 80097f0:	651a      	str	r2, [r3, #80]	; 0x50
  
  /*##-3- Configure the NVIC for RTC Alarm ###################################*/
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0, 0);
 80097f2:	2200      	movs	r2, #0
 80097f4:	2100      	movs	r1, #0
 80097f6:	2002      	movs	r0, #2
 80097f8:	f7fb fc62 	bl	80050c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80097fc:	2002      	movs	r0, #2
 80097fe:	f7fb fc75 	bl	80050ec <HAL_NVIC_EnableIRQ>
}
 8009802:	46c0      	nop			; (mov r8, r8)
 8009804:	46bd      	mov	sp, r7
 8009806:	b01a      	add	sp, #104	; 0x68
 8009808:	bd80      	pop	{r7, pc}
 800980a:	46c0      	nop			; (mov r8, r8)
 800980c:	40021000 	.word	0x40021000

08009810 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  TimerIrqHandler( );
 8009818:	f7fe ff9c 	bl	8008754 <TimerIrqHandler>
}
 800981c:	46c0      	nop			; (mov r8, r8)
 800981e:	46bd      	mov	sp, r7
 8009820:	b002      	add	sp, #8
 8009822:	bd80      	pop	{r7, pc}

08009824 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b082      	sub	sp, #8
 8009828:	af00      	add	r7, sp, #0
 800982a:	0002      	movs	r2, r0
 800982c:	1dbb      	adds	r3, r7, #6
 800982e:	801a      	strh	r2, [r3, #0]
  HW_GPIO_IrqHandler( GPIO_Pin );
 8009830:	1dbb      	adds	r3, r7, #6
 8009832:	881b      	ldrh	r3, [r3, #0]
 8009834:	0018      	movs	r0, r3
 8009836:	f7ff f9af 	bl	8008b98 <HW_GPIO_IrqHandler>
}
 800983a:	46c0      	nop			; (mov r8, r8)
 800983c:	46bd      	mov	sp, r7
 800983e:	b002      	add	sp, #8
 8009840:	bd80      	pop	{r7, pc}

08009842 <MSP_GetIRQn>:
  * @brief  Gets IRQ number as a finction of the GPIO_Pin.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval IRQ number
  */
IRQn_Type MSP_GetIRQn( uint16_t GPIO_Pin)
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b082      	sub	sp, #8
 8009846:	af00      	add	r7, sp, #0
 8009848:	0002      	movs	r2, r0
 800984a:	1dbb      	adds	r3, r7, #6
 800984c:	801a      	strh	r2, [r3, #0]
  switch( GPIO_Pin )
 800984e:	1dbb      	adds	r3, r7, #6
 8009850:	881b      	ldrh	r3, [r3, #0]
 8009852:	2b04      	cmp	r3, #4
 8009854:	d009      	beq.n	800986a <MSP_GetIRQn+0x28>
 8009856:	dc03      	bgt.n	8009860 <MSP_GetIRQn+0x1e>
 8009858:	3b01      	subs	r3, #1
 800985a:	2b01      	cmp	r3, #1
 800985c:	d807      	bhi.n	800986e <MSP_GetIRQn+0x2c>
 800985e:	e002      	b.n	8009866 <MSP_GetIRQn+0x24>
 8009860:	2b08      	cmp	r3, #8
 8009862:	d002      	beq.n	800986a <MSP_GetIRQn+0x28>
 8009864:	e003      	b.n	800986e <MSP_GetIRQn+0x2c>
  {
    case GPIO_PIN_0:  
    case GPIO_PIN_1:  return EXTI0_1_IRQn;
 8009866:	2305      	movs	r3, #5
 8009868:	e002      	b.n	8009870 <MSP_GetIRQn+0x2e>
    case GPIO_PIN_2: 
    case GPIO_PIN_3:  return EXTI2_3_IRQn;
 800986a:	2306      	movs	r3, #6
 800986c:	e000      	b.n	8009870 <MSP_GetIRQn+0x2e>
    case GPIO_PIN_11:
    case GPIO_PIN_12:
    case GPIO_PIN_13:
    case GPIO_PIN_14:
    case GPIO_PIN_15: 
    default: return EXTI4_15_IRQn;
 800986e:	2307      	movs	r3, #7
  }
}
 8009870:	0018      	movs	r0, r3
 8009872:	46bd      	mov	sp, r7
 8009874:	b002      	add	sp, #8
 8009876:	bd80      	pop	{r7, pc}

08009878 <HW_Init>:
  * @brief This function initializes the hardware
  * @param None
  * @retval None
  */
void HW_Init( void )
{
 8009878:	b580      	push	{r7, lr}
 800987a:	af00      	add	r7, sp, #0
  if( McuInitialized == false )
 800987c:	4b11      	ldr	r3, [pc, #68]	; (80098c4 <HW_Init+0x4c>)
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	2201      	movs	r2, #1
 8009882:	4053      	eors	r3, r2
 8009884:	b2db      	uxtb	r3, r3
 8009886:	2b00      	cmp	r3, #0
 8009888:	d019      	beq.n	80098be <HW_Init+0x46>
#if defined( USE_BOOTLOADER )
    /* Set the Vector Table base location at 0x3000 */
    NVIC_SetVectorTable( NVIC_VectTab_FLASH, 0x3000 );
#endif

    HW_AdcInit( );
 800988a:	f000 f893 	bl	80099b4 <HW_AdcInit>

    Radio.IoInit( );
 800988e:	4b0e      	ldr	r3, [pc, #56]	; (80098c8 <HW_Init+0x50>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4798      	blx	r3
    
    HW_SPI_Init( );
 8009894:	f7ff fdae 	bl	80093f4 <HW_SPI_Init>

    HW_RTC_Init( );
 8009898:	f7ff f9fe 	bl	8008c98 <HW_RTC_Init>
    
    vcom_Init( );
 800989c:	f000 f9ce 	bl	8009c3c <vcom_Init>
    
    BSP_LED_Init( LED1 );
 80098a0:	2000      	movs	r0, #0
 80098a2:	f7f8 fc95 	bl	80021d0 <BSP_LED_Init>
    
    BSP_LED_Init( LED2 );
 80098a6:	2001      	movs	r0, #1
 80098a8:	f7f8 fc92 	bl	80021d0 <BSP_LED_Init>
    
    BSP_LED_Init( LED3 );
 80098ac:	2002      	movs	r0, #2
 80098ae:	f7f8 fc8f 	bl	80021d0 <BSP_LED_Init>
    
    BSP_LED_Init( LED4 );
 80098b2:	2003      	movs	r0, #3
 80098b4:	f7f8 fc8c 	bl	80021d0 <BSP_LED_Init>

    McuInitialized = true;
 80098b8:	4b02      	ldr	r3, [pc, #8]	; (80098c4 <HW_Init+0x4c>)
 80098ba:	2201      	movs	r2, #1
 80098bc:	701a      	strb	r2, [r3, #0]
  }
}
 80098be:	46c0      	nop			; (mov r8, r8)
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	20000359 	.word	0x20000359
 80098c8:	0800ac04 	.word	0x0800ac04

080098cc <SystemClock_Config>:
  *            Flash Latency(WS)              = 1
  * @retval None
  */

void SystemClock_Config( void )
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b094      	sub	sp, #80	; 0x50
 80098d0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80098d2:	233c      	movs	r3, #60	; 0x3c
 80098d4:	18fb      	adds	r3, r7, r3
 80098d6:	0018      	movs	r0, r3
 80098d8:	2314      	movs	r3, #20
 80098da:	001a      	movs	r2, r3
 80098dc:	2100      	movs	r1, #0
 80098de:	f000 fb82 	bl	8009fe6 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80098e2:	1d3b      	adds	r3, r7, #4
 80098e4:	0018      	movs	r0, r3
 80098e6:	2338      	movs	r3, #56	; 0x38
 80098e8:	001a      	movs	r2, r3
 80098ea:	2100      	movs	r1, #0
 80098ec:	f000 fb7b 	bl	8009fe6 <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 80098f0:	1d3b      	adds	r3, r7, #4
 80098f2:	2202      	movs	r2, #2
 80098f4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
 80098f6:	1d3b      	adds	r3, r7, #4
 80098f8:	2200      	movs	r2, #0
 80098fa:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 80098fc:	1d3b      	adds	r3, r7, #4
 80098fe:	2201      	movs	r2, #1
 8009900:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009902:	1d3b      	adds	r3, r7, #4
 8009904:	2210      	movs	r2, #16
 8009906:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8009908:	1d3b      	adds	r3, r7, #4
 800990a:	2202      	movs	r2, #2
 800990c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 800990e:	1d3b      	adds	r3, r7, #4
 8009910:	2200      	movs	r2, #0
 8009912:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 8009914:	1d3b      	adds	r3, r7, #4
 8009916:	2280      	movs	r2, #128	; 0x80
 8009918:	0312      	lsls	r2, r2, #12
 800991a:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 800991c:	1d3b      	adds	r3, r7, #4
 800991e:	2280      	movs	r2, #128	; 0x80
 8009920:	0412      	lsls	r2, r2, #16
 8009922:	635a      	str	r2, [r3, #52]	; 0x34

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009924:	1d3b      	adds	r3, r7, #4
 8009926:	0018      	movs	r0, r3
 8009928:	f7fb fdf2 	bl	8005510 <HAL_RCC_OscConfig>
 800992c:	1e03      	subs	r3, r0, #0
 800992e:	d001      	beq.n	8009934 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8009930:	f7ff f880 	bl	8008a34 <Error_Handler>
  }

  /* Set Voltage scale1 as MCU will run at 32MHz */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009934:	4b1c      	ldr	r3, [pc, #112]	; (80099a8 <SystemClock_Config+0xdc>)
 8009936:	4a1c      	ldr	r2, [pc, #112]	; (80099a8 <SystemClock_Config+0xdc>)
 8009938:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800993a:	2180      	movs	r1, #128	; 0x80
 800993c:	0549      	lsls	r1, r1, #21
 800993e:	430a      	orrs	r2, r1
 8009940:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009942:	4b1a      	ldr	r3, [pc, #104]	; (80099ac <SystemClock_Config+0xe0>)
 8009944:	4a19      	ldr	r2, [pc, #100]	; (80099ac <SystemClock_Config+0xe0>)
 8009946:	6812      	ldr	r2, [r2, #0]
 8009948:	4919      	ldr	r1, [pc, #100]	; (80099b0 <SystemClock_Config+0xe4>)
 800994a:	400a      	ands	r2, r1
 800994c:	2180      	movs	r1, #128	; 0x80
 800994e:	0109      	lsls	r1, r1, #4
 8009950:	430a      	orrs	r2, r1
 8009952:	601a      	str	r2, [r3, #0]
  
  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 8009954:	46c0      	nop			; (mov r8, r8)
 8009956:	4b15      	ldr	r3, [pc, #84]	; (80099ac <SystemClock_Config+0xe0>)
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	2210      	movs	r2, #16
 800995c:	4013      	ands	r3, r2
 800995e:	2b10      	cmp	r3, #16
 8009960:	d0f9      	beq.n	8009956 <SystemClock_Config+0x8a>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8009962:	233c      	movs	r3, #60	; 0x3c
 8009964:	18fb      	adds	r3, r7, r3
 8009966:	220f      	movs	r2, #15
 8009968:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800996a:	233c      	movs	r3, #60	; 0x3c
 800996c:	18fb      	adds	r3, r7, r3
 800996e:	2203      	movs	r2, #3
 8009970:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009972:	233c      	movs	r3, #60	; 0x3c
 8009974:	18fb      	adds	r3, r7, r3
 8009976:	2200      	movs	r2, #0
 8009978:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800997a:	233c      	movs	r3, #60	; 0x3c
 800997c:	18fb      	adds	r3, r7, r3
 800997e:	2200      	movs	r2, #0
 8009980:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009982:	233c      	movs	r3, #60	; 0x3c
 8009984:	18fb      	adds	r3, r7, r3
 8009986:	2200      	movs	r2, #0
 8009988:	611a      	str	r2, [r3, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800998a:	233c      	movs	r3, #60	; 0x3c
 800998c:	18fb      	adds	r3, r7, r3
 800998e:	2101      	movs	r1, #1
 8009990:	0018      	movs	r0, r3
 8009992:	f7fc f95f 	bl	8005c54 <HAL_RCC_ClockConfig>
 8009996:	1e03      	subs	r3, r0, #0
 8009998:	d001      	beq.n	800999e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800999a:	f7ff f84b 	bl	8008a34 <Error_Handler>
  }
}
 800999e:	46c0      	nop			; (mov r8, r8)
 80099a0:	46bd      	mov	sp, r7
 80099a2:	b014      	add	sp, #80	; 0x50
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	46c0      	nop			; (mov r8, r8)
 80099a8:	40021000 	.word	0x40021000
 80099ac:	40007000 	.word	0x40007000
 80099b0:	ffffe7ff 	.word	0xffffe7ff

080099b4 <HW_AdcInit>:
  * @brief This function initializes the ADC
  * @param none
  * @retval none
  */
void HW_AdcInit( void )
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b086      	sub	sp, #24
 80099b8:	af00      	add	r7, sp, #0
  if( AdcInitialized == false )
 80099ba:	4b2b      	ldr	r3, [pc, #172]	; (8009a68 <HW_AdcInit+0xb4>)
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	2201      	movs	r2, #1
 80099c0:	4053      	eors	r3, r2
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d04b      	beq.n	8009a60 <HW_AdcInit+0xac>
  {
    AdcInitialized = true;
 80099c8:	4b27      	ldr	r3, [pc, #156]	; (8009a68 <HW_AdcInit+0xb4>)
 80099ca:	2201      	movs	r2, #1
 80099cc:	701a      	strb	r2, [r3, #0]
    GPIO_InitTypeDef initStruct;
    
    hadc.Instance  = ADC1;
 80099ce:	4b27      	ldr	r3, [pc, #156]	; (8009a6c <HW_AdcInit+0xb8>)
 80099d0:	4a27      	ldr	r2, [pc, #156]	; (8009a70 <HW_AdcInit+0xbc>)
 80099d2:	601a      	str	r2, [r3, #0]
    
    hadc.Init.OversamplingMode      = DISABLE;
 80099d4:	4b25      	ldr	r3, [pc, #148]	; (8009a6c <HW_AdcInit+0xb8>)
 80099d6:	2200      	movs	r2, #0
 80099d8:	641a      	str	r2, [r3, #64]	; 0x40
  
    hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV1;
 80099da:	4b24      	ldr	r3, [pc, #144]	; (8009a6c <HW_AdcInit+0xb8>)
 80099dc:	22c0      	movs	r2, #192	; 0xc0
 80099de:	0612      	lsls	r2, r2, #24
 80099e0:	605a      	str	r2, [r3, #4]
    hadc.Init.LowPowerAutoPowerOff  = DISABLE;
 80099e2:	4b22      	ldr	r3, [pc, #136]	; (8009a6c <HW_AdcInit+0xb8>)
 80099e4:	2200      	movs	r2, #0
 80099e6:	61da      	str	r2, [r3, #28]
    hadc.Init.LowPowerFrequencyMode = ENABLE;
 80099e8:	4b20      	ldr	r3, [pc, #128]	; (8009a6c <HW_AdcInit+0xb8>)
 80099ea:	2201      	movs	r2, #1
 80099ec:	639a      	str	r2, [r3, #56]	; 0x38
    hadc.Init.LowPowerAutoWait      = DISABLE;
 80099ee:	4b1f      	ldr	r3, [pc, #124]	; (8009a6c <HW_AdcInit+0xb8>)
 80099f0:	2200      	movs	r2, #0
 80099f2:	619a      	str	r2, [r3, #24]
    
    hadc.Init.Resolution            = ADC_RESOLUTION_12B;
 80099f4:	4b1d      	ldr	r3, [pc, #116]	; (8009a6c <HW_AdcInit+0xb8>)
 80099f6:	2200      	movs	r2, #0
 80099f8:	609a      	str	r2, [r3, #8]
    hadc.Init.SamplingTime          = ADC_SAMPLETIME_7CYCLES_5;
 80099fa:	4b1c      	ldr	r3, [pc, #112]	; (8009a6c <HW_AdcInit+0xb8>)
 80099fc:	2202      	movs	r2, #2
 80099fe:	63da      	str	r2, [r3, #60]	; 0x3c
    hadc.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 8009a00:	4b1a      	ldr	r3, [pc, #104]	; (8009a6c <HW_AdcInit+0xb8>)
 8009a02:	2201      	movs	r2, #1
 8009a04:	611a      	str	r2, [r3, #16]
    hadc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8009a06:	4b19      	ldr	r3, [pc, #100]	; (8009a6c <HW_AdcInit+0xb8>)
 8009a08:	2200      	movs	r2, #0
 8009a0a:	60da      	str	r2, [r3, #12]
    hadc.Init.ContinuousConvMode    = DISABLE;
 8009a0c:	4b17      	ldr	r3, [pc, #92]	; (8009a6c <HW_AdcInit+0xb8>)
 8009a0e:	2200      	movs	r2, #0
 8009a10:	621a      	str	r2, [r3, #32]
    hadc.Init.DiscontinuousConvMode = DISABLE;
 8009a12:	4b16      	ldr	r3, [pc, #88]	; (8009a6c <HW_AdcInit+0xb8>)
 8009a14:	2200      	movs	r2, #0
 8009a16:	625a      	str	r2, [r3, #36]	; 0x24
    hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009a18:	4b14      	ldr	r3, [pc, #80]	; (8009a6c <HW_AdcInit+0xb8>)
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8009a1e:	4b13      	ldr	r3, [pc, #76]	; (8009a6c <HW_AdcInit+0xb8>)
 8009a20:	2204      	movs	r2, #4
 8009a22:	615a      	str	r2, [r3, #20]
    hadc.Init.DMAContinuousRequests = DISABLE;
 8009a24:	4b11      	ldr	r3, [pc, #68]	; (8009a6c <HW_AdcInit+0xb8>)
 8009a26:	2200      	movs	r2, #0
 8009a28:	631a      	str	r2, [r3, #48]	; 0x30

    ADCCLK_ENABLE();
 8009a2a:	4b12      	ldr	r3, [pc, #72]	; (8009a74 <HW_AdcInit+0xc0>)
 8009a2c:	4a11      	ldr	r2, [pc, #68]	; (8009a74 <HW_AdcInit+0xc0>)
 8009a2e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009a30:	2180      	movs	r1, #128	; 0x80
 8009a32:	0089      	lsls	r1, r1, #2
 8009a34:	430a      	orrs	r2, r1
 8009a36:	635a      	str	r2, [r3, #52]	; 0x34
    

    HAL_ADC_Init( &hadc );
 8009a38:	4b0c      	ldr	r3, [pc, #48]	; (8009a6c <HW_AdcInit+0xb8>)
 8009a3a:	0018      	movs	r0, r3
 8009a3c:	f7fb f916 	bl	8004c6c <HAL_ADC_Init>

    initStruct.Mode =GPIO_MODE_ANALOG;
 8009a40:	1d3b      	adds	r3, r7, #4
 8009a42:	2203      	movs	r2, #3
 8009a44:	605a      	str	r2, [r3, #4]
    initStruct.Pull = GPIO_NOPULL;
 8009a46:	1d3b      	adds	r3, r7, #4
 8009a48:	2200      	movs	r2, #0
 8009a4a:	609a      	str	r2, [r3, #8]
    initStruct.Speed = GPIO_SPEED_HIGH;
 8009a4c:	1d3b      	adds	r3, r7, #4
 8009a4e:	2203      	movs	r2, #3
 8009a50:	60da      	str	r2, [r3, #12]

    HW_GPIO_Init( BAT_LEVEL_PORT, BAT_LEVEL_PIN, &initStruct );
 8009a52:	1d3a      	adds	r2, r7, #4
 8009a54:	23a0      	movs	r3, #160	; 0xa0
 8009a56:	05db      	lsls	r3, r3, #23
 8009a58:	2110      	movs	r1, #16
 8009a5a:	0018      	movs	r0, r3
 8009a5c:	f7fe ffee 	bl	8008a3c <HW_GPIO_Init>
  }
}
 8009a60:	46c0      	nop			; (mov r8, r8)
 8009a62:	46bd      	mov	sp, r7
 8009a64:	b006      	add	sp, #24
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	20000358 	.word	0x20000358
 8009a6c:	200002f8 	.word	0x200002f8
 8009a70:	40012400 	.word	0x40012400
 8009a74:	40021000 	.word	0x40021000

08009a78 <NMI_Handler>:
  * @param  None
  * @retval None
  */

void NMI_Handler(void)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	af00      	add	r7, sp, #0
}
 8009a7c:	46c0      	nop			; (mov r8, r8)
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <HardFault_Handler>:
  * @retval None
  */


void HardFault_Handler(void)
{
 8009a82:	b580      	push	{r7, lr}
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	46c0      	nop			; (mov r8, r8)
  while(1)
  {
    __NOP();
 8009a88:	e7fd      	b.n	8009a86 <HardFault_Handler+0x4>

08009a8a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8009a8a:	b580      	push	{r7, lr}
 8009a8c:	af00      	add	r7, sp, #0
}
 8009a8e:	46c0      	nop			; (mov r8, r8)
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	af00      	add	r7, sp, #0
}
 8009a98:	46c0      	nop			; (mov r8, r8)
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8009aa2:	f7fb f8cd 	bl	8004c40 <HAL_IncTick>
}
 8009aa6:	46c0      	nop			; (mov r8, r8)
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <USART2_IRQHandler>:
/*void PPP_IRQHandler(void)
{
}*/

void USART2_IRQHandler( void )
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	af00      	add	r7, sp, #0
   vcom_Print( );
 8009ab0:	f000 f984 	bl	8009dbc <vcom_Print>
}
 8009ab4:	46c0      	nop			; (mov r8, r8)
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <RTC_IRQHandler>:

void RTC_IRQHandler( void )
{
 8009aba:	b580      	push	{r7, lr}
 8009abc:	af00      	add	r7, sp, #0
  HW_RTC_IrqHandler ( );
 8009abe:	f7ff f9ff 	bl	8008ec0 <HW_RTC_IrqHandler>
}
 8009ac2:	46c0      	nop			; (mov r8, r8)
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler( void )
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_0 );
 8009acc:	2001      	movs	r0, #1
 8009ace:	f7fb fcd9 	bl	8005484 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_1 );
 8009ad2:	2002      	movs	r0, #2
 8009ad4:	f7fb fcd6 	bl	8005484 <HAL_GPIO_EXTI_IRQHandler>
}
 8009ad8:	46c0      	nop			; (mov r8, r8)
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}

08009ade <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler( void )
{
 8009ade:	b580      	push	{r7, lr}
 8009ae0:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_2 );
 8009ae2:	2004      	movs	r0, #4
 8009ae4:	f7fb fcce 	bl	8005484 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_3 );
 8009ae8:	2008      	movs	r0, #8
 8009aea:	f7fb fccb 	bl	8005484 <HAL_GPIO_EXTI_IRQHandler>
}
 8009aee:	46c0      	nop			; (mov r8, r8)
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <EXTI4_15_IRQHandler>:


void EXTI4_15_IRQHandler( void )
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_4 );
 8009af8:	2010      	movs	r0, #16
 8009afa:	f7fb fcc3 	bl	8005484 <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_5 );
 8009afe:	2020      	movs	r0, #32
 8009b00:	f7fb fcc0 	bl	8005484 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_6 );
 8009b04:	2040      	movs	r0, #64	; 0x40
 8009b06:	f7fb fcbd 	bl	8005484 <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_7 );
 8009b0a:	2080      	movs	r0, #128	; 0x80
 8009b0c:	f7fb fcba 	bl	8005484 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_8 );
 8009b10:	2380      	movs	r3, #128	; 0x80
 8009b12:	005b      	lsls	r3, r3, #1
 8009b14:	0018      	movs	r0, r3
 8009b16:	f7fb fcb5 	bl	8005484 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_9 );
 8009b1a:	2380      	movs	r3, #128	; 0x80
 8009b1c:	009b      	lsls	r3, r3, #2
 8009b1e:	0018      	movs	r0, r3
 8009b20:	f7fb fcb0 	bl	8005484 <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_10 );
 8009b24:	2380      	movs	r3, #128	; 0x80
 8009b26:	00db      	lsls	r3, r3, #3
 8009b28:	0018      	movs	r0, r3
 8009b2a:	f7fb fcab 	bl	8005484 <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_11 );
 8009b2e:	2380      	movs	r3, #128	; 0x80
 8009b30:	011b      	lsls	r3, r3, #4
 8009b32:	0018      	movs	r0, r3
 8009b34:	f7fb fca6 	bl	8005484 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_12 );
 8009b38:	2380      	movs	r3, #128	; 0x80
 8009b3a:	015b      	lsls	r3, r3, #5
 8009b3c:	0018      	movs	r0, r3
 8009b3e:	f7fb fca1 	bl	8005484 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_13 );
 8009b42:	2380      	movs	r3, #128	; 0x80
 8009b44:	019b      	lsls	r3, r3, #6
 8009b46:	0018      	movs	r0, r3
 8009b48:	f7fb fc9c 	bl	8005484 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_14 );
 8009b4c:	2380      	movs	r3, #128	; 0x80
 8009b4e:	01db      	lsls	r3, r3, #7
 8009b50:	0018      	movs	r0, r3
 8009b52:	f7fb fc97 	bl	8005484 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_15 );
 8009b56:	2380      	movs	r3, #128	; 0x80
 8009b58:	021b      	lsls	r3, r3, #8
 8009b5a:	0018      	movs	r0, r3
 8009b5c:	f7fb fc92 	bl	8005484 <HAL_GPIO_EXTI_IRQHandler>
}
 8009b60:	46c0      	nop			; (mov r8, r8)
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
	...

08009b68 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009b70:	4b11      	ldr	r3, [pc, #68]	; (8009bb8 <_sbrk+0x50>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d102      	bne.n	8009b7e <_sbrk+0x16>
		heap_end = &end;
 8009b78:	4b0f      	ldr	r3, [pc, #60]	; (8009bb8 <_sbrk+0x50>)
 8009b7a:	4a10      	ldr	r2, [pc, #64]	; (8009bbc <_sbrk+0x54>)
 8009b7c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8009b7e:	4b0e      	ldr	r3, [pc, #56]	; (8009bb8 <_sbrk+0x50>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8009b84:	4b0c      	ldr	r3, [pc, #48]	; (8009bb8 <_sbrk+0x50>)
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	18d3      	adds	r3, r2, r3
 8009b8c:	466a      	mov	r2, sp
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d907      	bls.n	8009ba2 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8009b92:	f000 f9f5 	bl	8009f80 <__errno>
 8009b96:	0003      	movs	r3, r0
 8009b98:	220c      	movs	r2, #12
 8009b9a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	425b      	negs	r3, r3
 8009ba0:	e006      	b.n	8009bb0 <_sbrk+0x48>
	}

	heap_end += incr;
 8009ba2:	4b05      	ldr	r3, [pc, #20]	; (8009bb8 <_sbrk+0x50>)
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	18d2      	adds	r2, r2, r3
 8009baa:	4b03      	ldr	r3, [pc, #12]	; (8009bb8 <_sbrk+0x50>)
 8009bac:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8009bae:	68fb      	ldr	r3, [r7, #12]
}
 8009bb0:	0018      	movs	r0, r3
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	b004      	add	sp, #16
 8009bb6:	bd80      	pop	{r7, pc}
 8009bb8:	20000360 	.word	0x20000360
 8009bbc:	20000590 	.word	0x20000590

08009bc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8009bc4:	4b17      	ldr	r3, [pc, #92]	; (8009c24 <SystemInit+0x64>)
 8009bc6:	4a17      	ldr	r2, [pc, #92]	; (8009c24 <SystemInit+0x64>)
 8009bc8:	6812      	ldr	r2, [r2, #0]
 8009bca:	2180      	movs	r1, #128	; 0x80
 8009bcc:	0049      	lsls	r1, r1, #1
 8009bce:	430a      	orrs	r2, r1
 8009bd0:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8009bd2:	4b14      	ldr	r3, [pc, #80]	; (8009c24 <SystemInit+0x64>)
 8009bd4:	4a13      	ldr	r2, [pc, #76]	; (8009c24 <SystemInit+0x64>)
 8009bd6:	68d2      	ldr	r2, [r2, #12]
 8009bd8:	4913      	ldr	r1, [pc, #76]	; (8009c28 <SystemInit+0x68>)
 8009bda:	400a      	ands	r2, r1
 8009bdc:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8009bde:	4b11      	ldr	r3, [pc, #68]	; (8009c24 <SystemInit+0x64>)
 8009be0:	4a10      	ldr	r2, [pc, #64]	; (8009c24 <SystemInit+0x64>)
 8009be2:	6812      	ldr	r2, [r2, #0]
 8009be4:	4911      	ldr	r1, [pc, #68]	; (8009c2c <SystemInit+0x6c>)
 8009be6:	400a      	ands	r2, r1
 8009be8:	601a      	str	r2, [r3, #0]
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8009bea:	4b0e      	ldr	r3, [pc, #56]	; (8009c24 <SystemInit+0x64>)
 8009bec:	4a0d      	ldr	r2, [pc, #52]	; (8009c24 <SystemInit+0x64>)
 8009bee:	6892      	ldr	r2, [r2, #8]
 8009bf0:	2101      	movs	r1, #1
 8009bf2:	438a      	bics	r2, r1
 8009bf4:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8009bf6:	4b0b      	ldr	r3, [pc, #44]	; (8009c24 <SystemInit+0x64>)
 8009bf8:	4a0a      	ldr	r2, [pc, #40]	; (8009c24 <SystemInit+0x64>)
 8009bfa:	6812      	ldr	r2, [r2, #0]
 8009bfc:	490c      	ldr	r1, [pc, #48]	; (8009c30 <SystemInit+0x70>)
 8009bfe:	400a      	ands	r2, r1
 8009c00:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8009c02:	4b08      	ldr	r3, [pc, #32]	; (8009c24 <SystemInit+0x64>)
 8009c04:	4a07      	ldr	r2, [pc, #28]	; (8009c24 <SystemInit+0x64>)
 8009c06:	68d2      	ldr	r2, [r2, #12]
 8009c08:	490a      	ldr	r1, [pc, #40]	; (8009c34 <SystemInit+0x74>)
 8009c0a:	400a      	ands	r2, r1
 8009c0c:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8009c0e:	4b05      	ldr	r3, [pc, #20]	; (8009c24 <SystemInit+0x64>)
 8009c10:	2200      	movs	r2, #0
 8009c12:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009c14:	4b08      	ldr	r3, [pc, #32]	; (8009c38 <SystemInit+0x78>)
 8009c16:	2280      	movs	r2, #128	; 0x80
 8009c18:	0512      	lsls	r2, r2, #20
 8009c1a:	609a      	str	r2, [r3, #8]
#endif
}
 8009c1c:	46c0      	nop			; (mov r8, r8)
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	46c0      	nop			; (mov r8, r8)
 8009c24:	40021000 	.word	0x40021000
 8009c28:	88ff400c 	.word	0x88ff400c
 8009c2c:	fef6fff6 	.word	0xfef6fff6
 8009c30:	fffbffff 	.word	0xfffbffff
 8009c34:	ff02ffff 	.word	0xff02ffff
 8009c38:	e000ed00 	.word	0xe000ed00

08009c3c <vcom_Init>:
/* Functions Definition ------------------------------------------------------*/



void vcom_Init(void)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	af00      	add	r7, sp, #0
      - Word Length = 8 Bits
      - Stop Bit = One Stop bit
      - Parity = ODD parity
      - BaudRate = 921600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USARTX;
 8009c40:	4b14      	ldr	r3, [pc, #80]	; (8009c94 <vcom_Init+0x58>)
 8009c42:	4a15      	ldr	r2, [pc, #84]	; (8009c98 <vcom_Init+0x5c>)
 8009c44:	601a      	str	r2, [r3, #0]
  
  UartHandle.Init.BaudRate   = 115200;
 8009c46:	4b13      	ldr	r3, [pc, #76]	; (8009c94 <vcom_Init+0x58>)
 8009c48:	22e1      	movs	r2, #225	; 0xe1
 8009c4a:	0252      	lsls	r2, r2, #9
 8009c4c:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8009c4e:	4b11      	ldr	r3, [pc, #68]	; (8009c94 <vcom_Init+0x58>)
 8009c50:	2200      	movs	r2, #0
 8009c52:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8009c54:	4b0f      	ldr	r3, [pc, #60]	; (8009c94 <vcom_Init+0x58>)
 8009c56:	2200      	movs	r2, #0
 8009c58:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8009c5a:	4b0e      	ldr	r3, [pc, #56]	; (8009c94 <vcom_Init+0x58>)
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8009c60:	4b0c      	ldr	r3, [pc, #48]	; (8009c94 <vcom_Init+0x58>)
 8009c62:	2200      	movs	r2, #0
 8009c64:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8009c66:	4b0b      	ldr	r3, [pc, #44]	; (8009c94 <vcom_Init+0x58>)
 8009c68:	220c      	movs	r2, #12
 8009c6a:	615a      	str	r2, [r3, #20]
  
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8009c6c:	4b09      	ldr	r3, [pc, #36]	; (8009c94 <vcom_Init+0x58>)
 8009c6e:	0018      	movs	r0, r3
 8009c70:	f7fd fedc 	bl	8007a2c <HAL_UART_Init>
 8009c74:	1e03      	subs	r3, r0, #0
 8009c76:	d001      	beq.n	8009c7c <vcom_Init+0x40>
  {
    /* Initialization Error */
    Error_Handler(); 
 8009c78:	f7fe fedc 	bl	8008a34 <Error_Handler>
  }
  
  HAL_NVIC_SetPriority(USARTX_IRQn, 0x1, 0);
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	2101      	movs	r1, #1
 8009c80:	201c      	movs	r0, #28
 8009c82:	f7fb fa1d 	bl	80050c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTX_IRQn);
 8009c86:	201c      	movs	r0, #28
 8009c88:	f7fb fa30 	bl	80050ec <HAL_NVIC_EnableIRQ>
}
 8009c8c:	46c0      	nop			; (mov r8, r8)
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
 8009c92:	46c0      	nop			; (mov r8, r8)
 8009c94:	20000468 	.word	0x20000468
 8009c98:	40004400 	.word	0x40004400

08009c9c <vcom_Send>:
  HAL_UART_DeInit(&UartHandle);
#endif
}

void vcom_Send( char *format, ... )
{
 8009c9c:	b40f      	push	{r0, r1, r2, r3}
 8009c9e:	b580      	push	{r7, lr}
 8009ca0:	b0a6      	sub	sp, #152	; 0x98
 8009ca2:	af00      	add	r7, sp, #0
  va_list args;
  va_start(args, format);
 8009ca4:	23a4      	movs	r3, #164	; 0xa4
 8009ca6:	18fb      	adds	r3, r7, r3
 8009ca8:	2284      	movs	r2, #132	; 0x84
 8009caa:	18ba      	adds	r2, r7, r2
 8009cac:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009cae:	f3ef 8310 	mrs	r3, PRIMASK
 8009cb2:	228c      	movs	r2, #140	; 0x8c
 8009cb4:	18ba      	adds	r2, r7, r2
 8009cb6:	6013      	str	r3, [r2, #0]
  return(result);
 8009cb8:	238c      	movs	r3, #140	; 0x8c
 8009cba:	18fb      	adds	r3, r7, r3
 8009cbc:	681b      	ldr	r3, [r3, #0]
  uint8_t len;
  uint8_t lenTop;
  char tempBuff[128];
  
  BACKUP_PRIMASK();
 8009cbe:	2294      	movs	r2, #148	; 0x94
 8009cc0:	18ba      	adds	r2, r7, r2
 8009cc2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009cc4:	b672      	cpsid	i
  DISABLE_IRQ();
  
  /*convert into string at buff[0] of length iw*/
  len = vsprintf(&tempBuff[0], format, args);
 8009cc6:	2384      	movs	r3, #132	; 0x84
 8009cc8:	18fb      	adds	r3, r7, r3
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	23a0      	movs	r3, #160	; 0xa0
 8009cce:	18fb      	adds	r3, r7, r3
 8009cd0:	6819      	ldr	r1, [r3, #0]
 8009cd2:	1d3b      	adds	r3, r7, #4
 8009cd4:	0018      	movs	r0, r3
 8009cd6:	f000 f9a7 	bl	800a028 <vsiprintf>
 8009cda:	0002      	movs	r2, r0
 8009cdc:	2393      	movs	r3, #147	; 0x93
 8009cde:	18fb      	adds	r3, r7, r3
 8009ce0:	701a      	strb	r2, [r3, #0]
  
  if (iw+len<BUFSIZE)
 8009ce2:	4b34      	ldr	r3, [pc, #208]	; (8009db4 <vcom_Send+0x118>)
 8009ce4:	881b      	ldrh	r3, [r3, #0]
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	001a      	movs	r2, r3
 8009cea:	2393      	movs	r3, #147	; 0x93
 8009cec:	18fb      	adds	r3, r7, r3
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	18d3      	adds	r3, r2, r3
 8009cf2:	2bff      	cmp	r3, #255	; 0xff
 8009cf4:	dc18      	bgt.n	8009d28 <vcom_Send+0x8c>
  {
    memcpy( &buff[iw], &tempBuff[0], len);
 8009cf6:	4b2f      	ldr	r3, [pc, #188]	; (8009db4 <vcom_Send+0x118>)
 8009cf8:	881b      	ldrh	r3, [r3, #0]
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	001a      	movs	r2, r3
 8009cfe:	4b2e      	ldr	r3, [pc, #184]	; (8009db8 <vcom_Send+0x11c>)
 8009d00:	18d0      	adds	r0, r2, r3
 8009d02:	2393      	movs	r3, #147	; 0x93
 8009d04:	18fb      	adds	r3, r7, r3
 8009d06:	781a      	ldrb	r2, [r3, #0]
 8009d08:	1d3b      	adds	r3, r7, #4
 8009d0a:	0019      	movs	r1, r3
 8009d0c:	f000 f962 	bl	8009fd4 <memcpy>
    iw+=len;
 8009d10:	2393      	movs	r3, #147	; 0x93
 8009d12:	18fb      	adds	r3, r7, r3
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	4b26      	ldr	r3, [pc, #152]	; (8009db4 <vcom_Send+0x118>)
 8009d1a:	881b      	ldrh	r3, [r3, #0]
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	18d3      	adds	r3, r2, r3
 8009d20:	b29a      	uxth	r2, r3
 8009d22:	4b24      	ldr	r3, [pc, #144]	; (8009db4 <vcom_Send+0x118>)
 8009d24:	801a      	strh	r2, [r3, #0]
 8009d26:	e030      	b.n	8009d8a <vcom_Send+0xee>
  }
  else
  {
    lenTop=BUFSIZE-iw;
 8009d28:	4b22      	ldr	r3, [pc, #136]	; (8009db4 <vcom_Send+0x118>)
 8009d2a:	881b      	ldrh	r3, [r3, #0]
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	b2da      	uxtb	r2, r3
 8009d30:	2392      	movs	r3, #146	; 0x92
 8009d32:	18fb      	adds	r3, r7, r3
 8009d34:	4252      	negs	r2, r2
 8009d36:	701a      	strb	r2, [r3, #0]
    memcpy( &buff[iw], &tempBuff[0], lenTop);
 8009d38:	4b1e      	ldr	r3, [pc, #120]	; (8009db4 <vcom_Send+0x118>)
 8009d3a:	881b      	ldrh	r3, [r3, #0]
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	001a      	movs	r2, r3
 8009d40:	4b1d      	ldr	r3, [pc, #116]	; (8009db8 <vcom_Send+0x11c>)
 8009d42:	18d0      	adds	r0, r2, r3
 8009d44:	2392      	movs	r3, #146	; 0x92
 8009d46:	18fb      	adds	r3, r7, r3
 8009d48:	781a      	ldrb	r2, [r3, #0]
 8009d4a:	1d3b      	adds	r3, r7, #4
 8009d4c:	0019      	movs	r1, r3
 8009d4e:	f000 f941 	bl	8009fd4 <memcpy>
    len-=lenTop;
 8009d52:	2393      	movs	r3, #147	; 0x93
 8009d54:	18fb      	adds	r3, r7, r3
 8009d56:	2293      	movs	r2, #147	; 0x93
 8009d58:	18b9      	adds	r1, r7, r2
 8009d5a:	2292      	movs	r2, #146	; 0x92
 8009d5c:	18ba      	adds	r2, r7, r2
 8009d5e:	7809      	ldrb	r1, [r1, #0]
 8009d60:	7812      	ldrb	r2, [r2, #0]
 8009d62:	1a8a      	subs	r2, r1, r2
 8009d64:	701a      	strb	r2, [r3, #0]
    memcpy( &buff[0], &tempBuff[lenTop], len);
 8009d66:	2392      	movs	r3, #146	; 0x92
 8009d68:	18fb      	adds	r3, r7, r3
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	1d3a      	adds	r2, r7, #4
 8009d6e:	18d1      	adds	r1, r2, r3
 8009d70:	2393      	movs	r3, #147	; 0x93
 8009d72:	18fb      	adds	r3, r7, r3
 8009d74:	781a      	ldrb	r2, [r3, #0]
 8009d76:	4b10      	ldr	r3, [pc, #64]	; (8009db8 <vcom_Send+0x11c>)
 8009d78:	0018      	movs	r0, r3
 8009d7a:	f000 f92b 	bl	8009fd4 <memcpy>
    iw = len;
 8009d7e:	2393      	movs	r3, #147	; 0x93
 8009d80:	18fb      	adds	r3, r7, r3
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	b29a      	uxth	r2, r3
 8009d86:	4b0b      	ldr	r3, [pc, #44]	; (8009db4 <vcom_Send+0x118>)
 8009d88:	801a      	strh	r2, [r3, #0]
 8009d8a:	2394      	movs	r3, #148	; 0x94
 8009d8c:	18fb      	adds	r3, r7, r3
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	2288      	movs	r2, #136	; 0x88
 8009d92:	18ba      	adds	r2, r7, r2
 8009d94:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d96:	2388      	movs	r3, #136	; 0x88
 8009d98:	18fb      	adds	r3, r7, r3
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f383 8810 	msr	PRIMASK, r3
  }
  RESTORE_PRIMASK();
  
  HAL_NVIC_SetPendingIRQ(USARTX_IRQn);
 8009da0:	201c      	movs	r0, #28
 8009da2:	f7fb f9b3 	bl	800510c <HAL_NVIC_SetPendingIRQ>
    
  va_end(args);
}
 8009da6:	46c0      	nop			; (mov r8, r8)
 8009da8:	46bd      	mov	sp, r7
 8009daa:	b026      	add	sp, #152	; 0x98
 8009dac:	bc80      	pop	{r7}
 8009dae:	bc08      	pop	{r3}
 8009db0:	b004      	add	sp, #16
 8009db2:	4718      	bx	r3
 8009db4:	20000464 	.word	0x20000464
 8009db8:	20000364 	.word	0x20000364

08009dbc <vcom_Print>:

/* modifes only ir*/
void vcom_Print( void)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
  char* CurChar;
  while( ( (iw+BUFSIZE-ir)%BUFSIZE) >0 )
 8009dc2:	e024      	b.n	8009e0e <vcom_Print+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009dc4:	f3ef 8310 	mrs	r3, PRIMASK
 8009dc8:	603b      	str	r3, [r7, #0]
  return(result);
 8009dca:	683b      	ldr	r3, [r7, #0]
  {
    BACKUP_PRIMASK();
 8009dcc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8009dce:	b672      	cpsid	i
    DISABLE_IRQ();
    
    CurChar = &buff[ir];
 8009dd0:	4b1b      	ldr	r3, [pc, #108]	; (8009e40 <vcom_Print+0x84>)
 8009dd2:	881b      	ldrh	r3, [r3, #0]
 8009dd4:	001a      	movs	r2, r3
 8009dd6:	4b1b      	ldr	r3, [pc, #108]	; (8009e44 <vcom_Print+0x88>)
 8009dd8:	18d3      	adds	r3, r2, r3
 8009dda:	60bb      	str	r3, [r7, #8]
    ir= (ir+1) %BUFSIZE;
 8009ddc:	4b18      	ldr	r3, [pc, #96]	; (8009e40 <vcom_Print+0x84>)
 8009dde:	881b      	ldrh	r3, [r3, #0]
 8009de0:	3301      	adds	r3, #1
 8009de2:	4a19      	ldr	r2, [pc, #100]	; (8009e48 <vcom_Print+0x8c>)
 8009de4:	4013      	ands	r3, r2
 8009de6:	d503      	bpl.n	8009df0 <vcom_Print+0x34>
 8009de8:	3b01      	subs	r3, #1
 8009dea:	4a18      	ldr	r2, [pc, #96]	; (8009e4c <vcom_Print+0x90>)
 8009dec:	4313      	orrs	r3, r2
 8009dee:	3301      	adds	r3, #1
 8009df0:	b29a      	uxth	r2, r3
 8009df2:	4b13      	ldr	r3, [pc, #76]	; (8009e40 <vcom_Print+0x84>)
 8009df4:	801a      	strh	r2, [r3, #0]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f383 8810 	msr	PRIMASK, r3
    
    RESTORE_PRIMASK();
    
    HAL_UART_Transmit(&UartHandle,(uint8_t *) CurChar, 1, 300);    
 8009e00:	2396      	movs	r3, #150	; 0x96
 8009e02:	005b      	lsls	r3, r3, #1
 8009e04:	68b9      	ldr	r1, [r7, #8]
 8009e06:	4812      	ldr	r0, [pc, #72]	; (8009e50 <vcom_Print+0x94>)
 8009e08:	2201      	movs	r2, #1
 8009e0a:	f7fd fe67 	bl	8007adc <HAL_UART_Transmit>
  while( ( (iw+BUFSIZE-ir)%BUFSIZE) >0 )
 8009e0e:	4b11      	ldr	r3, [pc, #68]	; (8009e54 <vcom_Print+0x98>)
 8009e10:	881b      	ldrh	r3, [r3, #0]
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	3301      	adds	r3, #1
 8009e16:	33ff      	adds	r3, #255	; 0xff
 8009e18:	4a09      	ldr	r2, [pc, #36]	; (8009e40 <vcom_Print+0x84>)
 8009e1a:	8812      	ldrh	r2, [r2, #0]
 8009e1c:	1a9b      	subs	r3, r3, r2
 8009e1e:	4a0a      	ldr	r2, [pc, #40]	; (8009e48 <vcom_Print+0x8c>)
 8009e20:	4013      	ands	r3, r2
 8009e22:	d503      	bpl.n	8009e2c <vcom_Print+0x70>
 8009e24:	3b01      	subs	r3, #1
 8009e26:	4a09      	ldr	r2, [pc, #36]	; (8009e4c <vcom_Print+0x90>)
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	dcc9      	bgt.n	8009dc4 <vcom_Print+0x8>
  }
  HAL_NVIC_ClearPendingIRQ(USARTX_IRQn);
 8009e30:	201c      	movs	r0, #28
 8009e32:	f7fb f97b 	bl	800512c <HAL_NVIC_ClearPendingIRQ>
}
 8009e36:	46c0      	nop			; (mov r8, r8)
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	b004      	add	sp, #16
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	46c0      	nop			; (mov r8, r8)
 8009e40:	20000466 	.word	0x20000466
 8009e44:	20000364 	.word	0x20000364
 8009e48:	800000ff 	.word	0x800000ff
 8009e4c:	ffffff00 	.word	0xffffff00
 8009e50:	20000468 	.word	0x20000468
 8009e54:	20000464 	.word	0x20000464

08009e58 <HAL_UART_MspInit>:
  *           - NVIC configuration for UART interrupt request enable
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  
  /*##-1- Enable peripherals and GPIO Clocks #################################*/

  /* Enable USART1 clock */
  USARTX_CLK_ENABLE(); 
 8009e60:	4b06      	ldr	r3, [pc, #24]	; (8009e7c <HAL_UART_MspInit+0x24>)
 8009e62:	4a06      	ldr	r2, [pc, #24]	; (8009e7c <HAL_UART_MspInit+0x24>)
 8009e64:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009e66:	2180      	movs	r1, #128	; 0x80
 8009e68:	0289      	lsls	r1, r1, #10
 8009e6a:	430a      	orrs	r2, r1
 8009e6c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /*##-2- Configure peripheral GPIO ##########################################*/  
  vcom_IoInit( );
 8009e6e:	f000 f807 	bl	8009e80 <vcom_IoInit>
}
 8009e72:	46c0      	nop			; (mov r8, r8)
 8009e74:	46bd      	mov	sp, r7
 8009e76:	b002      	add	sp, #8
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	46c0      	nop			; (mov r8, r8)
 8009e7c:	40021000 	.word	0x40021000

08009e80 <vcom_IoInit>:

void vcom_IoInit(void)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b088      	sub	sp, #32
 8009e84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct={0};
 8009e86:	230c      	movs	r3, #12
 8009e88:	18fb      	adds	r3, r7, r3
 8009e8a:	0018      	movs	r0, r3
 8009e8c:	2314      	movs	r3, #20
 8009e8e:	001a      	movs	r2, r3
 8009e90:	2100      	movs	r1, #0
 8009e92:	f000 f8a8 	bl	8009fe6 <memset>
    /* Enable GPIO TX/RX clock */
  USARTX_TX_GPIO_CLK_ENABLE();
 8009e96:	4b24      	ldr	r3, [pc, #144]	; (8009f28 <vcom_IoInit+0xa8>)
 8009e98:	4a23      	ldr	r2, [pc, #140]	; (8009f28 <vcom_IoInit+0xa8>)
 8009e9a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009e9c:	2101      	movs	r1, #1
 8009e9e:	430a      	orrs	r2, r1
 8009ea0:	62da      	str	r2, [r3, #44]	; 0x2c
 8009ea2:	4b21      	ldr	r3, [pc, #132]	; (8009f28 <vcom_IoInit+0xa8>)
 8009ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	4013      	ands	r3, r2
 8009eaa:	60bb      	str	r3, [r7, #8]
 8009eac:	68bb      	ldr	r3, [r7, #8]
  USARTX_RX_GPIO_CLK_ENABLE();
 8009eae:	4b1e      	ldr	r3, [pc, #120]	; (8009f28 <vcom_IoInit+0xa8>)
 8009eb0:	4a1d      	ldr	r2, [pc, #116]	; (8009f28 <vcom_IoInit+0xa8>)
 8009eb2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009eb4:	2101      	movs	r1, #1
 8009eb6:	430a      	orrs	r2, r1
 8009eb8:	62da      	str	r2, [r3, #44]	; 0x2c
 8009eba:	4b1b      	ldr	r3, [pc, #108]	; (8009f28 <vcom_IoInit+0xa8>)
 8009ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	4013      	ands	r3, r2
 8009ec2:	607b      	str	r3, [r7, #4]
 8009ec4:	687b      	ldr	r3, [r7, #4]
    /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTX_TX_PIN;
 8009ec6:	230c      	movs	r3, #12
 8009ec8:	18fb      	adds	r3, r7, r3
 8009eca:	2204      	movs	r2, #4
 8009ecc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8009ece:	230c      	movs	r3, #12
 8009ed0:	18fb      	adds	r3, r7, r3
 8009ed2:	2202      	movs	r2, #2
 8009ed4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8009ed6:	230c      	movs	r3, #12
 8009ed8:	18fb      	adds	r3, r7, r3
 8009eda:	2201      	movs	r2, #1
 8009edc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8009ede:	230c      	movs	r3, #12
 8009ee0:	18fb      	adds	r3, r7, r3
 8009ee2:	2203      	movs	r2, #3
 8009ee4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = USARTX_TX_AF;
 8009ee6:	230c      	movs	r3, #12
 8009ee8:	18fb      	adds	r3, r7, r3
 8009eea:	2204      	movs	r2, #4
 8009eec:	611a      	str	r2, [r3, #16]

  HAL_GPIO_Init(USARTX_TX_GPIO_PORT, &GPIO_InitStruct);
 8009eee:	230c      	movs	r3, #12
 8009ef0:	18fa      	adds	r2, r7, r3
 8009ef2:	23a0      	movs	r3, #160	; 0xa0
 8009ef4:	05db      	lsls	r3, r3, #23
 8009ef6:	0011      	movs	r1, r2
 8009ef8:	0018      	movs	r0, r3
 8009efa:	f7fb f927 	bl	800514c <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTX_RX_PIN;
 8009efe:	230c      	movs	r3, #12
 8009f00:	18fb      	adds	r3, r7, r3
 8009f02:	2208      	movs	r2, #8
 8009f04:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Alternate = USARTX_RX_AF;
 8009f06:	230c      	movs	r3, #12
 8009f08:	18fb      	adds	r3, r7, r3
 8009f0a:	2204      	movs	r2, #4
 8009f0c:	611a      	str	r2, [r3, #16]

  HAL_GPIO_Init(USARTX_RX_GPIO_PORT, &GPIO_InitStruct);
 8009f0e:	230c      	movs	r3, #12
 8009f10:	18fa      	adds	r2, r7, r3
 8009f12:	23a0      	movs	r3, #160	; 0xa0
 8009f14:	05db      	lsls	r3, r3, #23
 8009f16:	0011      	movs	r1, r2
 8009f18:	0018      	movs	r0, r3
 8009f1a:	f7fb f917 	bl	800514c <HAL_GPIO_Init>
}
 8009f1e:	46c0      	nop			; (mov r8, r8)
 8009f20:	46bd      	mov	sp, r7
 8009f22:	b008      	add	sp, #32
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	46c0      	nop			; (mov r8, r8)
 8009f28:	40021000 	.word	0x40021000

08009f2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8009f2c:	480d      	ldr	r0, [pc, #52]	; (8009f64 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8009f2e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8009f30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009f32:	e003      	b.n	8009f3c <LoopCopyDataInit>

08009f34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009f34:	4b0c      	ldr	r3, [pc, #48]	; (8009f68 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8009f36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009f38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009f3a:	3104      	adds	r1, #4

08009f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8009f3c:	480b      	ldr	r0, [pc, #44]	; (8009f6c <LoopForever+0xa>)
  ldr  r3, =_edata
 8009f3e:	4b0c      	ldr	r3, [pc, #48]	; (8009f70 <LoopForever+0xe>)
  adds  r2, r0, r1
 8009f40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009f42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009f44:	d3f6      	bcc.n	8009f34 <CopyDataInit>
  ldr  r2, =_sbss
 8009f46:	4a0b      	ldr	r2, [pc, #44]	; (8009f74 <LoopForever+0x12>)
  b  LoopFillZerobss
 8009f48:	e002      	b.n	8009f50 <LoopFillZerobss>

08009f4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8009f4a:	2300      	movs	r3, #0
  str  r3, [r2]
 8009f4c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009f4e:	3204      	adds	r2, #4

08009f50 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8009f50:	4b09      	ldr	r3, [pc, #36]	; (8009f78 <LoopForever+0x16>)
  cmp  r2, r3
 8009f52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009f54:	d3f9      	bcc.n	8009f4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8009f56:	f7ff fe33 	bl	8009bc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009f5a:	f000 f817 	bl	8009f8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009f5e:	f7ff fb83 	bl	8009668 <main>

08009f62 <LoopForever>:

LoopForever:
    b LoopForever
 8009f62:	e7fe      	b.n	8009f62 <LoopForever>
   ldr   r0, =_estack
 8009f64:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8009f68:	0800adec 	.word	0x0800adec
  ldr  r0, =_sdata
 8009f6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009f70:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8009f74:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8009f78:	20000590 	.word	0x20000590

08009f7c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009f7c:	e7fe      	b.n	8009f7c <ADC1_COMP_IRQHandler>
	...

08009f80 <__errno>:
 8009f80:	4b01      	ldr	r3, [pc, #4]	; (8009f88 <__errno+0x8>)
 8009f82:	6818      	ldr	r0, [r3, #0]
 8009f84:	4770      	bx	lr
 8009f86:	46c0      	nop			; (mov r8, r8)
 8009f88:	20000030 	.word	0x20000030

08009f8c <__libc_init_array>:
 8009f8c:	b570      	push	{r4, r5, r6, lr}
 8009f8e:	2600      	movs	r6, #0
 8009f90:	4d0c      	ldr	r5, [pc, #48]	; (8009fc4 <__libc_init_array+0x38>)
 8009f92:	4c0d      	ldr	r4, [pc, #52]	; (8009fc8 <__libc_init_array+0x3c>)
 8009f94:	1b64      	subs	r4, r4, r5
 8009f96:	10a4      	asrs	r4, r4, #2
 8009f98:	42a6      	cmp	r6, r4
 8009f9a:	d109      	bne.n	8009fb0 <__libc_init_array+0x24>
 8009f9c:	2600      	movs	r6, #0
 8009f9e:	f000 fd8f 	bl	800aac0 <_init>
 8009fa2:	4d0a      	ldr	r5, [pc, #40]	; (8009fcc <__libc_init_array+0x40>)
 8009fa4:	4c0a      	ldr	r4, [pc, #40]	; (8009fd0 <__libc_init_array+0x44>)
 8009fa6:	1b64      	subs	r4, r4, r5
 8009fa8:	10a4      	asrs	r4, r4, #2
 8009faa:	42a6      	cmp	r6, r4
 8009fac:	d105      	bne.n	8009fba <__libc_init_array+0x2e>
 8009fae:	bd70      	pop	{r4, r5, r6, pc}
 8009fb0:	00b3      	lsls	r3, r6, #2
 8009fb2:	58eb      	ldr	r3, [r5, r3]
 8009fb4:	4798      	blx	r3
 8009fb6:	3601      	adds	r6, #1
 8009fb8:	e7ee      	b.n	8009f98 <__libc_init_array+0xc>
 8009fba:	00b3      	lsls	r3, r6, #2
 8009fbc:	58eb      	ldr	r3, [r5, r3]
 8009fbe:	4798      	blx	r3
 8009fc0:	3601      	adds	r6, #1
 8009fc2:	e7f2      	b.n	8009faa <__libc_init_array+0x1e>
 8009fc4:	0800ade4 	.word	0x0800ade4
 8009fc8:	0800ade4 	.word	0x0800ade4
 8009fcc:	0800ade4 	.word	0x0800ade4
 8009fd0:	0800ade8 	.word	0x0800ade8

08009fd4 <memcpy>:
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	b510      	push	{r4, lr}
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d100      	bne.n	8009fde <memcpy+0xa>
 8009fdc:	bd10      	pop	{r4, pc}
 8009fde:	5ccc      	ldrb	r4, [r1, r3]
 8009fe0:	54c4      	strb	r4, [r0, r3]
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	e7f8      	b.n	8009fd8 <memcpy+0x4>

08009fe6 <memset>:
 8009fe6:	0003      	movs	r3, r0
 8009fe8:	1882      	adds	r2, r0, r2
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d100      	bne.n	8009ff0 <memset+0xa>
 8009fee:	4770      	bx	lr
 8009ff0:	7019      	strb	r1, [r3, #0]
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	e7f9      	b.n	8009fea <memset+0x4>
	...

08009ff8 <_vsiprintf_r>:
 8009ff8:	b530      	push	{r4, r5, lr}
 8009ffa:	b09b      	sub	sp, #108	; 0x6c
 8009ffc:	9100      	str	r1, [sp, #0]
 8009ffe:	9104      	str	r1, [sp, #16]
 800a000:	4908      	ldr	r1, [pc, #32]	; (800a024 <_vsiprintf_r+0x2c>)
 800a002:	466d      	mov	r5, sp
 800a004:	9102      	str	r1, [sp, #8]
 800a006:	9105      	str	r1, [sp, #20]
 800a008:	2101      	movs	r1, #1
 800a00a:	2482      	movs	r4, #130	; 0x82
 800a00c:	4249      	negs	r1, r1
 800a00e:	81e9      	strh	r1, [r5, #14]
 800a010:	00a4      	lsls	r4, r4, #2
 800a012:	4669      	mov	r1, sp
 800a014:	81ac      	strh	r4, [r5, #12]
 800a016:	f000 f875 	bl	800a104 <_svfiprintf_r>
 800a01a:	2300      	movs	r3, #0
 800a01c:	9a00      	ldr	r2, [sp, #0]
 800a01e:	7013      	strb	r3, [r2, #0]
 800a020:	b01b      	add	sp, #108	; 0x6c
 800a022:	bd30      	pop	{r4, r5, pc}
 800a024:	7fffffff 	.word	0x7fffffff

0800a028 <vsiprintf>:
 800a028:	b510      	push	{r4, lr}
 800a02a:	0013      	movs	r3, r2
 800a02c:	000a      	movs	r2, r1
 800a02e:	0001      	movs	r1, r0
 800a030:	4802      	ldr	r0, [pc, #8]	; (800a03c <vsiprintf+0x14>)
 800a032:	6800      	ldr	r0, [r0, #0]
 800a034:	f7ff ffe0 	bl	8009ff8 <_vsiprintf_r>
 800a038:	bd10      	pop	{r4, pc}
 800a03a:	46c0      	nop			; (mov r8, r8)
 800a03c:	20000030 	.word	0x20000030

0800a040 <__ssputs_r>:
 800a040:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a042:	688e      	ldr	r6, [r1, #8]
 800a044:	b085      	sub	sp, #20
 800a046:	0007      	movs	r7, r0
 800a048:	000c      	movs	r4, r1
 800a04a:	9203      	str	r2, [sp, #12]
 800a04c:	9301      	str	r3, [sp, #4]
 800a04e:	429e      	cmp	r6, r3
 800a050:	d839      	bhi.n	800a0c6 <__ssputs_r+0x86>
 800a052:	2390      	movs	r3, #144	; 0x90
 800a054:	898a      	ldrh	r2, [r1, #12]
 800a056:	00db      	lsls	r3, r3, #3
 800a058:	421a      	tst	r2, r3
 800a05a:	d034      	beq.n	800a0c6 <__ssputs_r+0x86>
 800a05c:	2503      	movs	r5, #3
 800a05e:	6909      	ldr	r1, [r1, #16]
 800a060:	6823      	ldr	r3, [r4, #0]
 800a062:	1a5b      	subs	r3, r3, r1
 800a064:	9302      	str	r3, [sp, #8]
 800a066:	6963      	ldr	r3, [r4, #20]
 800a068:	9802      	ldr	r0, [sp, #8]
 800a06a:	435d      	muls	r5, r3
 800a06c:	0feb      	lsrs	r3, r5, #31
 800a06e:	195d      	adds	r5, r3, r5
 800a070:	9b01      	ldr	r3, [sp, #4]
 800a072:	106d      	asrs	r5, r5, #1
 800a074:	3301      	adds	r3, #1
 800a076:	181b      	adds	r3, r3, r0
 800a078:	42ab      	cmp	r3, r5
 800a07a:	d900      	bls.n	800a07e <__ssputs_r+0x3e>
 800a07c:	001d      	movs	r5, r3
 800a07e:	0553      	lsls	r3, r2, #21
 800a080:	d532      	bpl.n	800a0e8 <__ssputs_r+0xa8>
 800a082:	0029      	movs	r1, r5
 800a084:	0038      	movs	r0, r7
 800a086:	f000 fb31 	bl	800a6ec <_malloc_r>
 800a08a:	1e06      	subs	r6, r0, #0
 800a08c:	d109      	bne.n	800a0a2 <__ssputs_r+0x62>
 800a08e:	230c      	movs	r3, #12
 800a090:	603b      	str	r3, [r7, #0]
 800a092:	2340      	movs	r3, #64	; 0x40
 800a094:	2001      	movs	r0, #1
 800a096:	89a2      	ldrh	r2, [r4, #12]
 800a098:	4240      	negs	r0, r0
 800a09a:	4313      	orrs	r3, r2
 800a09c:	81a3      	strh	r3, [r4, #12]
 800a09e:	b005      	add	sp, #20
 800a0a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0a2:	9a02      	ldr	r2, [sp, #8]
 800a0a4:	6921      	ldr	r1, [r4, #16]
 800a0a6:	f7ff ff95 	bl	8009fd4 <memcpy>
 800a0aa:	89a3      	ldrh	r3, [r4, #12]
 800a0ac:	4a14      	ldr	r2, [pc, #80]	; (800a100 <__ssputs_r+0xc0>)
 800a0ae:	401a      	ands	r2, r3
 800a0b0:	2380      	movs	r3, #128	; 0x80
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	81a3      	strh	r3, [r4, #12]
 800a0b6:	9b02      	ldr	r3, [sp, #8]
 800a0b8:	6126      	str	r6, [r4, #16]
 800a0ba:	18f6      	adds	r6, r6, r3
 800a0bc:	6026      	str	r6, [r4, #0]
 800a0be:	6165      	str	r5, [r4, #20]
 800a0c0:	9e01      	ldr	r6, [sp, #4]
 800a0c2:	1aed      	subs	r5, r5, r3
 800a0c4:	60a5      	str	r5, [r4, #8]
 800a0c6:	9b01      	ldr	r3, [sp, #4]
 800a0c8:	42b3      	cmp	r3, r6
 800a0ca:	d200      	bcs.n	800a0ce <__ssputs_r+0x8e>
 800a0cc:	001e      	movs	r6, r3
 800a0ce:	0032      	movs	r2, r6
 800a0d0:	9903      	ldr	r1, [sp, #12]
 800a0d2:	6820      	ldr	r0, [r4, #0]
 800a0d4:	f000 faad 	bl	800a632 <memmove>
 800a0d8:	68a3      	ldr	r3, [r4, #8]
 800a0da:	2000      	movs	r0, #0
 800a0dc:	1b9b      	subs	r3, r3, r6
 800a0de:	60a3      	str	r3, [r4, #8]
 800a0e0:	6823      	ldr	r3, [r4, #0]
 800a0e2:	199e      	adds	r6, r3, r6
 800a0e4:	6026      	str	r6, [r4, #0]
 800a0e6:	e7da      	b.n	800a09e <__ssputs_r+0x5e>
 800a0e8:	002a      	movs	r2, r5
 800a0ea:	0038      	movs	r0, r7
 800a0ec:	f000 fb5c 	bl	800a7a8 <_realloc_r>
 800a0f0:	1e06      	subs	r6, r0, #0
 800a0f2:	d1e0      	bne.n	800a0b6 <__ssputs_r+0x76>
 800a0f4:	6921      	ldr	r1, [r4, #16]
 800a0f6:	0038      	movs	r0, r7
 800a0f8:	f000 faae 	bl	800a658 <_free_r>
 800a0fc:	e7c7      	b.n	800a08e <__ssputs_r+0x4e>
 800a0fe:	46c0      	nop			; (mov r8, r8)
 800a100:	fffffb7f 	.word	0xfffffb7f

0800a104 <_svfiprintf_r>:
 800a104:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a106:	b09f      	sub	sp, #124	; 0x7c
 800a108:	9002      	str	r0, [sp, #8]
 800a10a:	9305      	str	r3, [sp, #20]
 800a10c:	898b      	ldrh	r3, [r1, #12]
 800a10e:	000f      	movs	r7, r1
 800a110:	0016      	movs	r6, r2
 800a112:	061b      	lsls	r3, r3, #24
 800a114:	d511      	bpl.n	800a13a <_svfiprintf_r+0x36>
 800a116:	690b      	ldr	r3, [r1, #16]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d10e      	bne.n	800a13a <_svfiprintf_r+0x36>
 800a11c:	2140      	movs	r1, #64	; 0x40
 800a11e:	f000 fae5 	bl	800a6ec <_malloc_r>
 800a122:	6038      	str	r0, [r7, #0]
 800a124:	6138      	str	r0, [r7, #16]
 800a126:	2800      	cmp	r0, #0
 800a128:	d105      	bne.n	800a136 <_svfiprintf_r+0x32>
 800a12a:	230c      	movs	r3, #12
 800a12c:	9a02      	ldr	r2, [sp, #8]
 800a12e:	3801      	subs	r0, #1
 800a130:	6013      	str	r3, [r2, #0]
 800a132:	b01f      	add	sp, #124	; 0x7c
 800a134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a136:	2340      	movs	r3, #64	; 0x40
 800a138:	617b      	str	r3, [r7, #20]
 800a13a:	2300      	movs	r3, #0
 800a13c:	ad06      	add	r5, sp, #24
 800a13e:	616b      	str	r3, [r5, #20]
 800a140:	3320      	adds	r3, #32
 800a142:	766b      	strb	r3, [r5, #25]
 800a144:	3310      	adds	r3, #16
 800a146:	76ab      	strb	r3, [r5, #26]
 800a148:	0034      	movs	r4, r6
 800a14a:	7823      	ldrb	r3, [r4, #0]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d147      	bne.n	800a1e0 <_svfiprintf_r+0xdc>
 800a150:	1ba3      	subs	r3, r4, r6
 800a152:	9304      	str	r3, [sp, #16]
 800a154:	d00d      	beq.n	800a172 <_svfiprintf_r+0x6e>
 800a156:	1ba3      	subs	r3, r4, r6
 800a158:	0032      	movs	r2, r6
 800a15a:	0039      	movs	r1, r7
 800a15c:	9802      	ldr	r0, [sp, #8]
 800a15e:	f7ff ff6f 	bl	800a040 <__ssputs_r>
 800a162:	1c43      	adds	r3, r0, #1
 800a164:	d100      	bne.n	800a168 <_svfiprintf_r+0x64>
 800a166:	e0b5      	b.n	800a2d4 <_svfiprintf_r+0x1d0>
 800a168:	696a      	ldr	r2, [r5, #20]
 800a16a:	9b04      	ldr	r3, [sp, #16]
 800a16c:	4694      	mov	ip, r2
 800a16e:	4463      	add	r3, ip
 800a170:	616b      	str	r3, [r5, #20]
 800a172:	7823      	ldrb	r3, [r4, #0]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d100      	bne.n	800a17a <_svfiprintf_r+0x76>
 800a178:	e0ac      	b.n	800a2d4 <_svfiprintf_r+0x1d0>
 800a17a:	2201      	movs	r2, #1
 800a17c:	2300      	movs	r3, #0
 800a17e:	4252      	negs	r2, r2
 800a180:	606a      	str	r2, [r5, #4]
 800a182:	a902      	add	r1, sp, #8
 800a184:	3254      	adds	r2, #84	; 0x54
 800a186:	1852      	adds	r2, r2, r1
 800a188:	3401      	adds	r4, #1
 800a18a:	602b      	str	r3, [r5, #0]
 800a18c:	60eb      	str	r3, [r5, #12]
 800a18e:	60ab      	str	r3, [r5, #8]
 800a190:	7013      	strb	r3, [r2, #0]
 800a192:	65ab      	str	r3, [r5, #88]	; 0x58
 800a194:	4e58      	ldr	r6, [pc, #352]	; (800a2f8 <_svfiprintf_r+0x1f4>)
 800a196:	2205      	movs	r2, #5
 800a198:	7821      	ldrb	r1, [r4, #0]
 800a19a:	0030      	movs	r0, r6
 800a19c:	f000 fa3e 	bl	800a61c <memchr>
 800a1a0:	1c62      	adds	r2, r4, #1
 800a1a2:	2800      	cmp	r0, #0
 800a1a4:	d120      	bne.n	800a1e8 <_svfiprintf_r+0xe4>
 800a1a6:	6829      	ldr	r1, [r5, #0]
 800a1a8:	06cb      	lsls	r3, r1, #27
 800a1aa:	d504      	bpl.n	800a1b6 <_svfiprintf_r+0xb2>
 800a1ac:	2353      	movs	r3, #83	; 0x53
 800a1ae:	ae02      	add	r6, sp, #8
 800a1b0:	3020      	adds	r0, #32
 800a1b2:	199b      	adds	r3, r3, r6
 800a1b4:	7018      	strb	r0, [r3, #0]
 800a1b6:	070b      	lsls	r3, r1, #28
 800a1b8:	d504      	bpl.n	800a1c4 <_svfiprintf_r+0xc0>
 800a1ba:	2353      	movs	r3, #83	; 0x53
 800a1bc:	202b      	movs	r0, #43	; 0x2b
 800a1be:	ae02      	add	r6, sp, #8
 800a1c0:	199b      	adds	r3, r3, r6
 800a1c2:	7018      	strb	r0, [r3, #0]
 800a1c4:	7823      	ldrb	r3, [r4, #0]
 800a1c6:	2b2a      	cmp	r3, #42	; 0x2a
 800a1c8:	d016      	beq.n	800a1f8 <_svfiprintf_r+0xf4>
 800a1ca:	2000      	movs	r0, #0
 800a1cc:	210a      	movs	r1, #10
 800a1ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1d0:	7822      	ldrb	r2, [r4, #0]
 800a1d2:	3a30      	subs	r2, #48	; 0x30
 800a1d4:	2a09      	cmp	r2, #9
 800a1d6:	d955      	bls.n	800a284 <_svfiprintf_r+0x180>
 800a1d8:	2800      	cmp	r0, #0
 800a1da:	d015      	beq.n	800a208 <_svfiprintf_r+0x104>
 800a1dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a1de:	e013      	b.n	800a208 <_svfiprintf_r+0x104>
 800a1e0:	2b25      	cmp	r3, #37	; 0x25
 800a1e2:	d0b5      	beq.n	800a150 <_svfiprintf_r+0x4c>
 800a1e4:	3401      	adds	r4, #1
 800a1e6:	e7b0      	b.n	800a14a <_svfiprintf_r+0x46>
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	1b80      	subs	r0, r0, r6
 800a1ec:	4083      	lsls	r3, r0
 800a1ee:	6829      	ldr	r1, [r5, #0]
 800a1f0:	0014      	movs	r4, r2
 800a1f2:	430b      	orrs	r3, r1
 800a1f4:	602b      	str	r3, [r5, #0]
 800a1f6:	e7cd      	b.n	800a194 <_svfiprintf_r+0x90>
 800a1f8:	9b05      	ldr	r3, [sp, #20]
 800a1fa:	1d18      	adds	r0, r3, #4
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	9005      	str	r0, [sp, #20]
 800a200:	2b00      	cmp	r3, #0
 800a202:	db39      	blt.n	800a278 <_svfiprintf_r+0x174>
 800a204:	9309      	str	r3, [sp, #36]	; 0x24
 800a206:	0014      	movs	r4, r2
 800a208:	7823      	ldrb	r3, [r4, #0]
 800a20a:	2b2e      	cmp	r3, #46	; 0x2e
 800a20c:	d10b      	bne.n	800a226 <_svfiprintf_r+0x122>
 800a20e:	7863      	ldrb	r3, [r4, #1]
 800a210:	1c62      	adds	r2, r4, #1
 800a212:	2b2a      	cmp	r3, #42	; 0x2a
 800a214:	d13e      	bne.n	800a294 <_svfiprintf_r+0x190>
 800a216:	9b05      	ldr	r3, [sp, #20]
 800a218:	3402      	adds	r4, #2
 800a21a:	1d1a      	adds	r2, r3, #4
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	9205      	str	r2, [sp, #20]
 800a220:	2b00      	cmp	r3, #0
 800a222:	db34      	blt.n	800a28e <_svfiprintf_r+0x18a>
 800a224:	9307      	str	r3, [sp, #28]
 800a226:	4e35      	ldr	r6, [pc, #212]	; (800a2fc <_svfiprintf_r+0x1f8>)
 800a228:	7821      	ldrb	r1, [r4, #0]
 800a22a:	2203      	movs	r2, #3
 800a22c:	0030      	movs	r0, r6
 800a22e:	f000 f9f5 	bl	800a61c <memchr>
 800a232:	2800      	cmp	r0, #0
 800a234:	d006      	beq.n	800a244 <_svfiprintf_r+0x140>
 800a236:	2340      	movs	r3, #64	; 0x40
 800a238:	1b80      	subs	r0, r0, r6
 800a23a:	4083      	lsls	r3, r0
 800a23c:	682a      	ldr	r2, [r5, #0]
 800a23e:	3401      	adds	r4, #1
 800a240:	4313      	orrs	r3, r2
 800a242:	602b      	str	r3, [r5, #0]
 800a244:	7821      	ldrb	r1, [r4, #0]
 800a246:	2206      	movs	r2, #6
 800a248:	482d      	ldr	r0, [pc, #180]	; (800a300 <_svfiprintf_r+0x1fc>)
 800a24a:	1c66      	adds	r6, r4, #1
 800a24c:	7629      	strb	r1, [r5, #24]
 800a24e:	f000 f9e5 	bl	800a61c <memchr>
 800a252:	2800      	cmp	r0, #0
 800a254:	d046      	beq.n	800a2e4 <_svfiprintf_r+0x1e0>
 800a256:	4b2b      	ldr	r3, [pc, #172]	; (800a304 <_svfiprintf_r+0x200>)
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d12f      	bne.n	800a2bc <_svfiprintf_r+0x1b8>
 800a25c:	6829      	ldr	r1, [r5, #0]
 800a25e:	9b05      	ldr	r3, [sp, #20]
 800a260:	2207      	movs	r2, #7
 800a262:	05c9      	lsls	r1, r1, #23
 800a264:	d528      	bpl.n	800a2b8 <_svfiprintf_r+0x1b4>
 800a266:	189b      	adds	r3, r3, r2
 800a268:	4393      	bics	r3, r2
 800a26a:	3308      	adds	r3, #8
 800a26c:	9305      	str	r3, [sp, #20]
 800a26e:	696b      	ldr	r3, [r5, #20]
 800a270:	9a03      	ldr	r2, [sp, #12]
 800a272:	189b      	adds	r3, r3, r2
 800a274:	616b      	str	r3, [r5, #20]
 800a276:	e767      	b.n	800a148 <_svfiprintf_r+0x44>
 800a278:	425b      	negs	r3, r3
 800a27a:	60eb      	str	r3, [r5, #12]
 800a27c:	2302      	movs	r3, #2
 800a27e:	430b      	orrs	r3, r1
 800a280:	602b      	str	r3, [r5, #0]
 800a282:	e7c0      	b.n	800a206 <_svfiprintf_r+0x102>
 800a284:	434b      	muls	r3, r1
 800a286:	3401      	adds	r4, #1
 800a288:	189b      	adds	r3, r3, r2
 800a28a:	2001      	movs	r0, #1
 800a28c:	e7a0      	b.n	800a1d0 <_svfiprintf_r+0xcc>
 800a28e:	2301      	movs	r3, #1
 800a290:	425b      	negs	r3, r3
 800a292:	e7c7      	b.n	800a224 <_svfiprintf_r+0x120>
 800a294:	2300      	movs	r3, #0
 800a296:	0014      	movs	r4, r2
 800a298:	200a      	movs	r0, #10
 800a29a:	001a      	movs	r2, r3
 800a29c:	606b      	str	r3, [r5, #4]
 800a29e:	7821      	ldrb	r1, [r4, #0]
 800a2a0:	3930      	subs	r1, #48	; 0x30
 800a2a2:	2909      	cmp	r1, #9
 800a2a4:	d903      	bls.n	800a2ae <_svfiprintf_r+0x1aa>
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d0bd      	beq.n	800a226 <_svfiprintf_r+0x122>
 800a2aa:	9207      	str	r2, [sp, #28]
 800a2ac:	e7bb      	b.n	800a226 <_svfiprintf_r+0x122>
 800a2ae:	4342      	muls	r2, r0
 800a2b0:	3401      	adds	r4, #1
 800a2b2:	1852      	adds	r2, r2, r1
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	e7f2      	b.n	800a29e <_svfiprintf_r+0x19a>
 800a2b8:	3307      	adds	r3, #7
 800a2ba:	e7d5      	b.n	800a268 <_svfiprintf_r+0x164>
 800a2bc:	ab05      	add	r3, sp, #20
 800a2be:	9300      	str	r3, [sp, #0]
 800a2c0:	003a      	movs	r2, r7
 800a2c2:	4b11      	ldr	r3, [pc, #68]	; (800a308 <_svfiprintf_r+0x204>)
 800a2c4:	0029      	movs	r1, r5
 800a2c6:	9802      	ldr	r0, [sp, #8]
 800a2c8:	e000      	b.n	800a2cc <_svfiprintf_r+0x1c8>
 800a2ca:	bf00      	nop
 800a2cc:	9003      	str	r0, [sp, #12]
 800a2ce:	9b03      	ldr	r3, [sp, #12]
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	d1cc      	bne.n	800a26e <_svfiprintf_r+0x16a>
 800a2d4:	89bb      	ldrh	r3, [r7, #12]
 800a2d6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a2d8:	065b      	lsls	r3, r3, #25
 800a2da:	d400      	bmi.n	800a2de <_svfiprintf_r+0x1da>
 800a2dc:	e729      	b.n	800a132 <_svfiprintf_r+0x2e>
 800a2de:	2001      	movs	r0, #1
 800a2e0:	4240      	negs	r0, r0
 800a2e2:	e726      	b.n	800a132 <_svfiprintf_r+0x2e>
 800a2e4:	ab05      	add	r3, sp, #20
 800a2e6:	9300      	str	r3, [sp, #0]
 800a2e8:	003a      	movs	r2, r7
 800a2ea:	4b07      	ldr	r3, [pc, #28]	; (800a308 <_svfiprintf_r+0x204>)
 800a2ec:	0029      	movs	r1, r5
 800a2ee:	9802      	ldr	r0, [sp, #8]
 800a2f0:	f000 f87a 	bl	800a3e8 <_printf_i>
 800a2f4:	e7ea      	b.n	800a2cc <_svfiprintf_r+0x1c8>
 800a2f6:	46c0      	nop			; (mov r8, r8)
 800a2f8:	0800ada8 	.word	0x0800ada8
 800a2fc:	0800adae 	.word	0x0800adae
 800a300:	0800adb2 	.word	0x0800adb2
 800a304:	00000000 	.word	0x00000000
 800a308:	0800a041 	.word	0x0800a041

0800a30c <_printf_common>:
 800a30c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a30e:	0015      	movs	r5, r2
 800a310:	9301      	str	r3, [sp, #4]
 800a312:	688a      	ldr	r2, [r1, #8]
 800a314:	690b      	ldr	r3, [r1, #16]
 800a316:	9000      	str	r0, [sp, #0]
 800a318:	000c      	movs	r4, r1
 800a31a:	4293      	cmp	r3, r2
 800a31c:	da00      	bge.n	800a320 <_printf_common+0x14>
 800a31e:	0013      	movs	r3, r2
 800a320:	0022      	movs	r2, r4
 800a322:	602b      	str	r3, [r5, #0]
 800a324:	3243      	adds	r2, #67	; 0x43
 800a326:	7812      	ldrb	r2, [r2, #0]
 800a328:	2a00      	cmp	r2, #0
 800a32a:	d001      	beq.n	800a330 <_printf_common+0x24>
 800a32c:	3301      	adds	r3, #1
 800a32e:	602b      	str	r3, [r5, #0]
 800a330:	6823      	ldr	r3, [r4, #0]
 800a332:	069b      	lsls	r3, r3, #26
 800a334:	d502      	bpl.n	800a33c <_printf_common+0x30>
 800a336:	682b      	ldr	r3, [r5, #0]
 800a338:	3302      	adds	r3, #2
 800a33a:	602b      	str	r3, [r5, #0]
 800a33c:	2706      	movs	r7, #6
 800a33e:	6823      	ldr	r3, [r4, #0]
 800a340:	401f      	ands	r7, r3
 800a342:	d027      	beq.n	800a394 <_printf_common+0x88>
 800a344:	0023      	movs	r3, r4
 800a346:	3343      	adds	r3, #67	; 0x43
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	1e5a      	subs	r2, r3, #1
 800a34c:	4193      	sbcs	r3, r2
 800a34e:	6822      	ldr	r2, [r4, #0]
 800a350:	0692      	lsls	r2, r2, #26
 800a352:	d430      	bmi.n	800a3b6 <_printf_common+0xaa>
 800a354:	0022      	movs	r2, r4
 800a356:	9901      	ldr	r1, [sp, #4]
 800a358:	3243      	adds	r2, #67	; 0x43
 800a35a:	9800      	ldr	r0, [sp, #0]
 800a35c:	9e08      	ldr	r6, [sp, #32]
 800a35e:	47b0      	blx	r6
 800a360:	1c43      	adds	r3, r0, #1
 800a362:	d025      	beq.n	800a3b0 <_printf_common+0xa4>
 800a364:	2306      	movs	r3, #6
 800a366:	6820      	ldr	r0, [r4, #0]
 800a368:	682a      	ldr	r2, [r5, #0]
 800a36a:	68e1      	ldr	r1, [r4, #12]
 800a36c:	4003      	ands	r3, r0
 800a36e:	2500      	movs	r5, #0
 800a370:	2b04      	cmp	r3, #4
 800a372:	d103      	bne.n	800a37c <_printf_common+0x70>
 800a374:	1a8d      	subs	r5, r1, r2
 800a376:	43eb      	mvns	r3, r5
 800a378:	17db      	asrs	r3, r3, #31
 800a37a:	401d      	ands	r5, r3
 800a37c:	68a3      	ldr	r3, [r4, #8]
 800a37e:	6922      	ldr	r2, [r4, #16]
 800a380:	4293      	cmp	r3, r2
 800a382:	dd01      	ble.n	800a388 <_printf_common+0x7c>
 800a384:	1a9b      	subs	r3, r3, r2
 800a386:	18ed      	adds	r5, r5, r3
 800a388:	2700      	movs	r7, #0
 800a38a:	42bd      	cmp	r5, r7
 800a38c:	d120      	bne.n	800a3d0 <_printf_common+0xc4>
 800a38e:	2000      	movs	r0, #0
 800a390:	e010      	b.n	800a3b4 <_printf_common+0xa8>
 800a392:	3701      	adds	r7, #1
 800a394:	68e3      	ldr	r3, [r4, #12]
 800a396:	682a      	ldr	r2, [r5, #0]
 800a398:	1a9b      	subs	r3, r3, r2
 800a39a:	429f      	cmp	r7, r3
 800a39c:	dad2      	bge.n	800a344 <_printf_common+0x38>
 800a39e:	0022      	movs	r2, r4
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	3219      	adds	r2, #25
 800a3a4:	9901      	ldr	r1, [sp, #4]
 800a3a6:	9800      	ldr	r0, [sp, #0]
 800a3a8:	9e08      	ldr	r6, [sp, #32]
 800a3aa:	47b0      	blx	r6
 800a3ac:	1c43      	adds	r3, r0, #1
 800a3ae:	d1f0      	bne.n	800a392 <_printf_common+0x86>
 800a3b0:	2001      	movs	r0, #1
 800a3b2:	4240      	negs	r0, r0
 800a3b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a3b6:	2030      	movs	r0, #48	; 0x30
 800a3b8:	18e1      	adds	r1, r4, r3
 800a3ba:	3143      	adds	r1, #67	; 0x43
 800a3bc:	7008      	strb	r0, [r1, #0]
 800a3be:	0021      	movs	r1, r4
 800a3c0:	1c5a      	adds	r2, r3, #1
 800a3c2:	3145      	adds	r1, #69	; 0x45
 800a3c4:	7809      	ldrb	r1, [r1, #0]
 800a3c6:	18a2      	adds	r2, r4, r2
 800a3c8:	3243      	adds	r2, #67	; 0x43
 800a3ca:	3302      	adds	r3, #2
 800a3cc:	7011      	strb	r1, [r2, #0]
 800a3ce:	e7c1      	b.n	800a354 <_printf_common+0x48>
 800a3d0:	0022      	movs	r2, r4
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	321a      	adds	r2, #26
 800a3d6:	9901      	ldr	r1, [sp, #4]
 800a3d8:	9800      	ldr	r0, [sp, #0]
 800a3da:	9e08      	ldr	r6, [sp, #32]
 800a3dc:	47b0      	blx	r6
 800a3de:	1c43      	adds	r3, r0, #1
 800a3e0:	d0e6      	beq.n	800a3b0 <_printf_common+0xa4>
 800a3e2:	3701      	adds	r7, #1
 800a3e4:	e7d1      	b.n	800a38a <_printf_common+0x7e>
	...

0800a3e8 <_printf_i>:
 800a3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3ea:	b08b      	sub	sp, #44	; 0x2c
 800a3ec:	9206      	str	r2, [sp, #24]
 800a3ee:	000a      	movs	r2, r1
 800a3f0:	3243      	adds	r2, #67	; 0x43
 800a3f2:	9307      	str	r3, [sp, #28]
 800a3f4:	9005      	str	r0, [sp, #20]
 800a3f6:	9204      	str	r2, [sp, #16]
 800a3f8:	7e0a      	ldrb	r2, [r1, #24]
 800a3fa:	000c      	movs	r4, r1
 800a3fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a3fe:	2a6e      	cmp	r2, #110	; 0x6e
 800a400:	d100      	bne.n	800a404 <_printf_i+0x1c>
 800a402:	e08f      	b.n	800a524 <_printf_i+0x13c>
 800a404:	d817      	bhi.n	800a436 <_printf_i+0x4e>
 800a406:	2a63      	cmp	r2, #99	; 0x63
 800a408:	d02c      	beq.n	800a464 <_printf_i+0x7c>
 800a40a:	d808      	bhi.n	800a41e <_printf_i+0x36>
 800a40c:	2a00      	cmp	r2, #0
 800a40e:	d100      	bne.n	800a412 <_printf_i+0x2a>
 800a410:	e099      	b.n	800a546 <_printf_i+0x15e>
 800a412:	2a58      	cmp	r2, #88	; 0x58
 800a414:	d054      	beq.n	800a4c0 <_printf_i+0xd8>
 800a416:	0026      	movs	r6, r4
 800a418:	3642      	adds	r6, #66	; 0x42
 800a41a:	7032      	strb	r2, [r6, #0]
 800a41c:	e029      	b.n	800a472 <_printf_i+0x8a>
 800a41e:	2a64      	cmp	r2, #100	; 0x64
 800a420:	d001      	beq.n	800a426 <_printf_i+0x3e>
 800a422:	2a69      	cmp	r2, #105	; 0x69
 800a424:	d1f7      	bne.n	800a416 <_printf_i+0x2e>
 800a426:	6821      	ldr	r1, [r4, #0]
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	0608      	lsls	r0, r1, #24
 800a42c:	d523      	bpl.n	800a476 <_printf_i+0x8e>
 800a42e:	1d11      	adds	r1, r2, #4
 800a430:	6019      	str	r1, [r3, #0]
 800a432:	6815      	ldr	r5, [r2, #0]
 800a434:	e025      	b.n	800a482 <_printf_i+0x9a>
 800a436:	2a73      	cmp	r2, #115	; 0x73
 800a438:	d100      	bne.n	800a43c <_printf_i+0x54>
 800a43a:	e088      	b.n	800a54e <_printf_i+0x166>
 800a43c:	d808      	bhi.n	800a450 <_printf_i+0x68>
 800a43e:	2a6f      	cmp	r2, #111	; 0x6f
 800a440:	d029      	beq.n	800a496 <_printf_i+0xae>
 800a442:	2a70      	cmp	r2, #112	; 0x70
 800a444:	d1e7      	bne.n	800a416 <_printf_i+0x2e>
 800a446:	2220      	movs	r2, #32
 800a448:	6809      	ldr	r1, [r1, #0]
 800a44a:	430a      	orrs	r2, r1
 800a44c:	6022      	str	r2, [r4, #0]
 800a44e:	e003      	b.n	800a458 <_printf_i+0x70>
 800a450:	2a75      	cmp	r2, #117	; 0x75
 800a452:	d020      	beq.n	800a496 <_printf_i+0xae>
 800a454:	2a78      	cmp	r2, #120	; 0x78
 800a456:	d1de      	bne.n	800a416 <_printf_i+0x2e>
 800a458:	0022      	movs	r2, r4
 800a45a:	2178      	movs	r1, #120	; 0x78
 800a45c:	3245      	adds	r2, #69	; 0x45
 800a45e:	7011      	strb	r1, [r2, #0]
 800a460:	4a6c      	ldr	r2, [pc, #432]	; (800a614 <_printf_i+0x22c>)
 800a462:	e030      	b.n	800a4c6 <_printf_i+0xde>
 800a464:	000e      	movs	r6, r1
 800a466:	681a      	ldr	r2, [r3, #0]
 800a468:	3642      	adds	r6, #66	; 0x42
 800a46a:	1d11      	adds	r1, r2, #4
 800a46c:	6019      	str	r1, [r3, #0]
 800a46e:	6813      	ldr	r3, [r2, #0]
 800a470:	7033      	strb	r3, [r6, #0]
 800a472:	2301      	movs	r3, #1
 800a474:	e079      	b.n	800a56a <_printf_i+0x182>
 800a476:	0649      	lsls	r1, r1, #25
 800a478:	d5d9      	bpl.n	800a42e <_printf_i+0x46>
 800a47a:	1d11      	adds	r1, r2, #4
 800a47c:	6019      	str	r1, [r3, #0]
 800a47e:	2300      	movs	r3, #0
 800a480:	5ed5      	ldrsh	r5, [r2, r3]
 800a482:	2d00      	cmp	r5, #0
 800a484:	da03      	bge.n	800a48e <_printf_i+0xa6>
 800a486:	232d      	movs	r3, #45	; 0x2d
 800a488:	9a04      	ldr	r2, [sp, #16]
 800a48a:	426d      	negs	r5, r5
 800a48c:	7013      	strb	r3, [r2, #0]
 800a48e:	4b62      	ldr	r3, [pc, #392]	; (800a618 <_printf_i+0x230>)
 800a490:	270a      	movs	r7, #10
 800a492:	9303      	str	r3, [sp, #12]
 800a494:	e02f      	b.n	800a4f6 <_printf_i+0x10e>
 800a496:	6820      	ldr	r0, [r4, #0]
 800a498:	6819      	ldr	r1, [r3, #0]
 800a49a:	0605      	lsls	r5, r0, #24
 800a49c:	d503      	bpl.n	800a4a6 <_printf_i+0xbe>
 800a49e:	1d08      	adds	r0, r1, #4
 800a4a0:	6018      	str	r0, [r3, #0]
 800a4a2:	680d      	ldr	r5, [r1, #0]
 800a4a4:	e005      	b.n	800a4b2 <_printf_i+0xca>
 800a4a6:	0640      	lsls	r0, r0, #25
 800a4a8:	d5f9      	bpl.n	800a49e <_printf_i+0xb6>
 800a4aa:	680d      	ldr	r5, [r1, #0]
 800a4ac:	1d08      	adds	r0, r1, #4
 800a4ae:	6018      	str	r0, [r3, #0]
 800a4b0:	b2ad      	uxth	r5, r5
 800a4b2:	4b59      	ldr	r3, [pc, #356]	; (800a618 <_printf_i+0x230>)
 800a4b4:	2708      	movs	r7, #8
 800a4b6:	9303      	str	r3, [sp, #12]
 800a4b8:	2a6f      	cmp	r2, #111	; 0x6f
 800a4ba:	d018      	beq.n	800a4ee <_printf_i+0x106>
 800a4bc:	270a      	movs	r7, #10
 800a4be:	e016      	b.n	800a4ee <_printf_i+0x106>
 800a4c0:	3145      	adds	r1, #69	; 0x45
 800a4c2:	700a      	strb	r2, [r1, #0]
 800a4c4:	4a54      	ldr	r2, [pc, #336]	; (800a618 <_printf_i+0x230>)
 800a4c6:	9203      	str	r2, [sp, #12]
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	6821      	ldr	r1, [r4, #0]
 800a4cc:	1d10      	adds	r0, r2, #4
 800a4ce:	6018      	str	r0, [r3, #0]
 800a4d0:	6815      	ldr	r5, [r2, #0]
 800a4d2:	0608      	lsls	r0, r1, #24
 800a4d4:	d522      	bpl.n	800a51c <_printf_i+0x134>
 800a4d6:	07cb      	lsls	r3, r1, #31
 800a4d8:	d502      	bpl.n	800a4e0 <_printf_i+0xf8>
 800a4da:	2320      	movs	r3, #32
 800a4dc:	4319      	orrs	r1, r3
 800a4de:	6021      	str	r1, [r4, #0]
 800a4e0:	2710      	movs	r7, #16
 800a4e2:	2d00      	cmp	r5, #0
 800a4e4:	d103      	bne.n	800a4ee <_printf_i+0x106>
 800a4e6:	2320      	movs	r3, #32
 800a4e8:	6822      	ldr	r2, [r4, #0]
 800a4ea:	439a      	bics	r2, r3
 800a4ec:	6022      	str	r2, [r4, #0]
 800a4ee:	0023      	movs	r3, r4
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	3343      	adds	r3, #67	; 0x43
 800a4f4:	701a      	strb	r2, [r3, #0]
 800a4f6:	6863      	ldr	r3, [r4, #4]
 800a4f8:	60a3      	str	r3, [r4, #8]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	db5c      	blt.n	800a5b8 <_printf_i+0x1d0>
 800a4fe:	2204      	movs	r2, #4
 800a500:	6821      	ldr	r1, [r4, #0]
 800a502:	4391      	bics	r1, r2
 800a504:	6021      	str	r1, [r4, #0]
 800a506:	2d00      	cmp	r5, #0
 800a508:	d158      	bne.n	800a5bc <_printf_i+0x1d4>
 800a50a:	9e04      	ldr	r6, [sp, #16]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d064      	beq.n	800a5da <_printf_i+0x1f2>
 800a510:	0026      	movs	r6, r4
 800a512:	9b03      	ldr	r3, [sp, #12]
 800a514:	3642      	adds	r6, #66	; 0x42
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	7033      	strb	r3, [r6, #0]
 800a51a:	e05e      	b.n	800a5da <_printf_i+0x1f2>
 800a51c:	0648      	lsls	r0, r1, #25
 800a51e:	d5da      	bpl.n	800a4d6 <_printf_i+0xee>
 800a520:	b2ad      	uxth	r5, r5
 800a522:	e7d8      	b.n	800a4d6 <_printf_i+0xee>
 800a524:	6809      	ldr	r1, [r1, #0]
 800a526:	681a      	ldr	r2, [r3, #0]
 800a528:	0608      	lsls	r0, r1, #24
 800a52a:	d505      	bpl.n	800a538 <_printf_i+0x150>
 800a52c:	1d11      	adds	r1, r2, #4
 800a52e:	6019      	str	r1, [r3, #0]
 800a530:	6813      	ldr	r3, [r2, #0]
 800a532:	6962      	ldr	r2, [r4, #20]
 800a534:	601a      	str	r2, [r3, #0]
 800a536:	e006      	b.n	800a546 <_printf_i+0x15e>
 800a538:	0649      	lsls	r1, r1, #25
 800a53a:	d5f7      	bpl.n	800a52c <_printf_i+0x144>
 800a53c:	1d11      	adds	r1, r2, #4
 800a53e:	6019      	str	r1, [r3, #0]
 800a540:	6813      	ldr	r3, [r2, #0]
 800a542:	8aa2      	ldrh	r2, [r4, #20]
 800a544:	801a      	strh	r2, [r3, #0]
 800a546:	2300      	movs	r3, #0
 800a548:	9e04      	ldr	r6, [sp, #16]
 800a54a:	6123      	str	r3, [r4, #16]
 800a54c:	e054      	b.n	800a5f8 <_printf_i+0x210>
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	1d11      	adds	r1, r2, #4
 800a552:	6019      	str	r1, [r3, #0]
 800a554:	6816      	ldr	r6, [r2, #0]
 800a556:	2100      	movs	r1, #0
 800a558:	6862      	ldr	r2, [r4, #4]
 800a55a:	0030      	movs	r0, r6
 800a55c:	f000 f85e 	bl	800a61c <memchr>
 800a560:	2800      	cmp	r0, #0
 800a562:	d001      	beq.n	800a568 <_printf_i+0x180>
 800a564:	1b80      	subs	r0, r0, r6
 800a566:	6060      	str	r0, [r4, #4]
 800a568:	6863      	ldr	r3, [r4, #4]
 800a56a:	6123      	str	r3, [r4, #16]
 800a56c:	2300      	movs	r3, #0
 800a56e:	9a04      	ldr	r2, [sp, #16]
 800a570:	7013      	strb	r3, [r2, #0]
 800a572:	e041      	b.n	800a5f8 <_printf_i+0x210>
 800a574:	6923      	ldr	r3, [r4, #16]
 800a576:	0032      	movs	r2, r6
 800a578:	9906      	ldr	r1, [sp, #24]
 800a57a:	9805      	ldr	r0, [sp, #20]
 800a57c:	9d07      	ldr	r5, [sp, #28]
 800a57e:	47a8      	blx	r5
 800a580:	1c43      	adds	r3, r0, #1
 800a582:	d043      	beq.n	800a60c <_printf_i+0x224>
 800a584:	6823      	ldr	r3, [r4, #0]
 800a586:	2500      	movs	r5, #0
 800a588:	079b      	lsls	r3, r3, #30
 800a58a:	d40f      	bmi.n	800a5ac <_printf_i+0x1c4>
 800a58c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a58e:	68e0      	ldr	r0, [r4, #12]
 800a590:	4298      	cmp	r0, r3
 800a592:	da3d      	bge.n	800a610 <_printf_i+0x228>
 800a594:	0018      	movs	r0, r3
 800a596:	e03b      	b.n	800a610 <_printf_i+0x228>
 800a598:	0022      	movs	r2, r4
 800a59a:	2301      	movs	r3, #1
 800a59c:	3219      	adds	r2, #25
 800a59e:	9906      	ldr	r1, [sp, #24]
 800a5a0:	9805      	ldr	r0, [sp, #20]
 800a5a2:	9e07      	ldr	r6, [sp, #28]
 800a5a4:	47b0      	blx	r6
 800a5a6:	1c43      	adds	r3, r0, #1
 800a5a8:	d030      	beq.n	800a60c <_printf_i+0x224>
 800a5aa:	3501      	adds	r5, #1
 800a5ac:	68e3      	ldr	r3, [r4, #12]
 800a5ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5b0:	1a9b      	subs	r3, r3, r2
 800a5b2:	429d      	cmp	r5, r3
 800a5b4:	dbf0      	blt.n	800a598 <_printf_i+0x1b0>
 800a5b6:	e7e9      	b.n	800a58c <_printf_i+0x1a4>
 800a5b8:	2d00      	cmp	r5, #0
 800a5ba:	d0a9      	beq.n	800a510 <_printf_i+0x128>
 800a5bc:	9e04      	ldr	r6, [sp, #16]
 800a5be:	0028      	movs	r0, r5
 800a5c0:	0039      	movs	r1, r7
 800a5c2:	f7f5 fe27 	bl	8000214 <__aeabi_uidivmod>
 800a5c6:	9b03      	ldr	r3, [sp, #12]
 800a5c8:	3e01      	subs	r6, #1
 800a5ca:	5c5b      	ldrb	r3, [r3, r1]
 800a5cc:	0028      	movs	r0, r5
 800a5ce:	7033      	strb	r3, [r6, #0]
 800a5d0:	0039      	movs	r1, r7
 800a5d2:	f7f5 fd99 	bl	8000108 <__udivsi3>
 800a5d6:	1e05      	subs	r5, r0, #0
 800a5d8:	d1f1      	bne.n	800a5be <_printf_i+0x1d6>
 800a5da:	2f08      	cmp	r7, #8
 800a5dc:	d109      	bne.n	800a5f2 <_printf_i+0x20a>
 800a5de:	6823      	ldr	r3, [r4, #0]
 800a5e0:	07db      	lsls	r3, r3, #31
 800a5e2:	d506      	bpl.n	800a5f2 <_printf_i+0x20a>
 800a5e4:	6863      	ldr	r3, [r4, #4]
 800a5e6:	6922      	ldr	r2, [r4, #16]
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	dc02      	bgt.n	800a5f2 <_printf_i+0x20a>
 800a5ec:	2330      	movs	r3, #48	; 0x30
 800a5ee:	3e01      	subs	r6, #1
 800a5f0:	7033      	strb	r3, [r6, #0]
 800a5f2:	9b04      	ldr	r3, [sp, #16]
 800a5f4:	1b9b      	subs	r3, r3, r6
 800a5f6:	6123      	str	r3, [r4, #16]
 800a5f8:	9b07      	ldr	r3, [sp, #28]
 800a5fa:	aa09      	add	r2, sp, #36	; 0x24
 800a5fc:	9300      	str	r3, [sp, #0]
 800a5fe:	0021      	movs	r1, r4
 800a600:	9b06      	ldr	r3, [sp, #24]
 800a602:	9805      	ldr	r0, [sp, #20]
 800a604:	f7ff fe82 	bl	800a30c <_printf_common>
 800a608:	1c43      	adds	r3, r0, #1
 800a60a:	d1b3      	bne.n	800a574 <_printf_i+0x18c>
 800a60c:	2001      	movs	r0, #1
 800a60e:	4240      	negs	r0, r0
 800a610:	b00b      	add	sp, #44	; 0x2c
 800a612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a614:	0800adca 	.word	0x0800adca
 800a618:	0800adb9 	.word	0x0800adb9

0800a61c <memchr>:
 800a61c:	b2c9      	uxtb	r1, r1
 800a61e:	1882      	adds	r2, r0, r2
 800a620:	4290      	cmp	r0, r2
 800a622:	d101      	bne.n	800a628 <memchr+0xc>
 800a624:	2000      	movs	r0, #0
 800a626:	4770      	bx	lr
 800a628:	7803      	ldrb	r3, [r0, #0]
 800a62a:	428b      	cmp	r3, r1
 800a62c:	d0fb      	beq.n	800a626 <memchr+0xa>
 800a62e:	3001      	adds	r0, #1
 800a630:	e7f6      	b.n	800a620 <memchr+0x4>

0800a632 <memmove>:
 800a632:	b510      	push	{r4, lr}
 800a634:	4288      	cmp	r0, r1
 800a636:	d902      	bls.n	800a63e <memmove+0xc>
 800a638:	188b      	adds	r3, r1, r2
 800a63a:	4298      	cmp	r0, r3
 800a63c:	d308      	bcc.n	800a650 <memmove+0x1e>
 800a63e:	2300      	movs	r3, #0
 800a640:	429a      	cmp	r2, r3
 800a642:	d007      	beq.n	800a654 <memmove+0x22>
 800a644:	5ccc      	ldrb	r4, [r1, r3]
 800a646:	54c4      	strb	r4, [r0, r3]
 800a648:	3301      	adds	r3, #1
 800a64a:	e7f9      	b.n	800a640 <memmove+0xe>
 800a64c:	5c8b      	ldrb	r3, [r1, r2]
 800a64e:	5483      	strb	r3, [r0, r2]
 800a650:	3a01      	subs	r2, #1
 800a652:	d2fb      	bcs.n	800a64c <memmove+0x1a>
 800a654:	bd10      	pop	{r4, pc}
	...

0800a658 <_free_r>:
 800a658:	b570      	push	{r4, r5, r6, lr}
 800a65a:	0005      	movs	r5, r0
 800a65c:	2900      	cmp	r1, #0
 800a65e:	d010      	beq.n	800a682 <_free_r+0x2a>
 800a660:	1f0c      	subs	r4, r1, #4
 800a662:	6823      	ldr	r3, [r4, #0]
 800a664:	2b00      	cmp	r3, #0
 800a666:	da00      	bge.n	800a66a <_free_r+0x12>
 800a668:	18e4      	adds	r4, r4, r3
 800a66a:	0028      	movs	r0, r5
 800a66c:	f000 f8d4 	bl	800a818 <__malloc_lock>
 800a670:	4a1d      	ldr	r2, [pc, #116]	; (800a6e8 <_free_r+0x90>)
 800a672:	6813      	ldr	r3, [r2, #0]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d105      	bne.n	800a684 <_free_r+0x2c>
 800a678:	6063      	str	r3, [r4, #4]
 800a67a:	6014      	str	r4, [r2, #0]
 800a67c:	0028      	movs	r0, r5
 800a67e:	f000 f8cc 	bl	800a81a <__malloc_unlock>
 800a682:	bd70      	pop	{r4, r5, r6, pc}
 800a684:	42a3      	cmp	r3, r4
 800a686:	d909      	bls.n	800a69c <_free_r+0x44>
 800a688:	6821      	ldr	r1, [r4, #0]
 800a68a:	1860      	adds	r0, r4, r1
 800a68c:	4283      	cmp	r3, r0
 800a68e:	d1f3      	bne.n	800a678 <_free_r+0x20>
 800a690:	6818      	ldr	r0, [r3, #0]
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	1841      	adds	r1, r0, r1
 800a696:	6021      	str	r1, [r4, #0]
 800a698:	e7ee      	b.n	800a678 <_free_r+0x20>
 800a69a:	0013      	movs	r3, r2
 800a69c:	685a      	ldr	r2, [r3, #4]
 800a69e:	2a00      	cmp	r2, #0
 800a6a0:	d001      	beq.n	800a6a6 <_free_r+0x4e>
 800a6a2:	42a2      	cmp	r2, r4
 800a6a4:	d9f9      	bls.n	800a69a <_free_r+0x42>
 800a6a6:	6819      	ldr	r1, [r3, #0]
 800a6a8:	1858      	adds	r0, r3, r1
 800a6aa:	42a0      	cmp	r0, r4
 800a6ac:	d10b      	bne.n	800a6c6 <_free_r+0x6e>
 800a6ae:	6820      	ldr	r0, [r4, #0]
 800a6b0:	1809      	adds	r1, r1, r0
 800a6b2:	1858      	adds	r0, r3, r1
 800a6b4:	6019      	str	r1, [r3, #0]
 800a6b6:	4282      	cmp	r2, r0
 800a6b8:	d1e0      	bne.n	800a67c <_free_r+0x24>
 800a6ba:	6810      	ldr	r0, [r2, #0]
 800a6bc:	6852      	ldr	r2, [r2, #4]
 800a6be:	1841      	adds	r1, r0, r1
 800a6c0:	6019      	str	r1, [r3, #0]
 800a6c2:	605a      	str	r2, [r3, #4]
 800a6c4:	e7da      	b.n	800a67c <_free_r+0x24>
 800a6c6:	42a0      	cmp	r0, r4
 800a6c8:	d902      	bls.n	800a6d0 <_free_r+0x78>
 800a6ca:	230c      	movs	r3, #12
 800a6cc:	602b      	str	r3, [r5, #0]
 800a6ce:	e7d5      	b.n	800a67c <_free_r+0x24>
 800a6d0:	6821      	ldr	r1, [r4, #0]
 800a6d2:	1860      	adds	r0, r4, r1
 800a6d4:	4282      	cmp	r2, r0
 800a6d6:	d103      	bne.n	800a6e0 <_free_r+0x88>
 800a6d8:	6810      	ldr	r0, [r2, #0]
 800a6da:	6852      	ldr	r2, [r2, #4]
 800a6dc:	1841      	adds	r1, r0, r1
 800a6de:	6021      	str	r1, [r4, #0]
 800a6e0:	6062      	str	r2, [r4, #4]
 800a6e2:	605c      	str	r4, [r3, #4]
 800a6e4:	e7ca      	b.n	800a67c <_free_r+0x24>
 800a6e6:	46c0      	nop			; (mov r8, r8)
 800a6e8:	200004d8 	.word	0x200004d8

0800a6ec <_malloc_r>:
 800a6ec:	2303      	movs	r3, #3
 800a6ee:	b570      	push	{r4, r5, r6, lr}
 800a6f0:	1ccd      	adds	r5, r1, #3
 800a6f2:	439d      	bics	r5, r3
 800a6f4:	3508      	adds	r5, #8
 800a6f6:	0006      	movs	r6, r0
 800a6f8:	2d0c      	cmp	r5, #12
 800a6fa:	d21e      	bcs.n	800a73a <_malloc_r+0x4e>
 800a6fc:	250c      	movs	r5, #12
 800a6fe:	42a9      	cmp	r1, r5
 800a700:	d81d      	bhi.n	800a73e <_malloc_r+0x52>
 800a702:	0030      	movs	r0, r6
 800a704:	f000 f888 	bl	800a818 <__malloc_lock>
 800a708:	4a25      	ldr	r2, [pc, #148]	; (800a7a0 <_malloc_r+0xb4>)
 800a70a:	6814      	ldr	r4, [r2, #0]
 800a70c:	0021      	movs	r1, r4
 800a70e:	2900      	cmp	r1, #0
 800a710:	d119      	bne.n	800a746 <_malloc_r+0x5a>
 800a712:	4c24      	ldr	r4, [pc, #144]	; (800a7a4 <_malloc_r+0xb8>)
 800a714:	6823      	ldr	r3, [r4, #0]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d103      	bne.n	800a722 <_malloc_r+0x36>
 800a71a:	0030      	movs	r0, r6
 800a71c:	f000 f86a 	bl	800a7f4 <_sbrk_r>
 800a720:	6020      	str	r0, [r4, #0]
 800a722:	0029      	movs	r1, r5
 800a724:	0030      	movs	r0, r6
 800a726:	f000 f865 	bl	800a7f4 <_sbrk_r>
 800a72a:	1c43      	adds	r3, r0, #1
 800a72c:	d12c      	bne.n	800a788 <_malloc_r+0x9c>
 800a72e:	230c      	movs	r3, #12
 800a730:	0030      	movs	r0, r6
 800a732:	6033      	str	r3, [r6, #0]
 800a734:	f000 f871 	bl	800a81a <__malloc_unlock>
 800a738:	e003      	b.n	800a742 <_malloc_r+0x56>
 800a73a:	2d00      	cmp	r5, #0
 800a73c:	dadf      	bge.n	800a6fe <_malloc_r+0x12>
 800a73e:	230c      	movs	r3, #12
 800a740:	6033      	str	r3, [r6, #0]
 800a742:	2000      	movs	r0, #0
 800a744:	bd70      	pop	{r4, r5, r6, pc}
 800a746:	680b      	ldr	r3, [r1, #0]
 800a748:	1b5b      	subs	r3, r3, r5
 800a74a:	d41a      	bmi.n	800a782 <_malloc_r+0x96>
 800a74c:	2b0b      	cmp	r3, #11
 800a74e:	d903      	bls.n	800a758 <_malloc_r+0x6c>
 800a750:	600b      	str	r3, [r1, #0]
 800a752:	18cc      	adds	r4, r1, r3
 800a754:	6025      	str	r5, [r4, #0]
 800a756:	e003      	b.n	800a760 <_malloc_r+0x74>
 800a758:	428c      	cmp	r4, r1
 800a75a:	d10e      	bne.n	800a77a <_malloc_r+0x8e>
 800a75c:	6863      	ldr	r3, [r4, #4]
 800a75e:	6013      	str	r3, [r2, #0]
 800a760:	0030      	movs	r0, r6
 800a762:	f000 f85a 	bl	800a81a <__malloc_unlock>
 800a766:	0020      	movs	r0, r4
 800a768:	2207      	movs	r2, #7
 800a76a:	300b      	adds	r0, #11
 800a76c:	1d23      	adds	r3, r4, #4
 800a76e:	4390      	bics	r0, r2
 800a770:	1ac3      	subs	r3, r0, r3
 800a772:	d0e7      	beq.n	800a744 <_malloc_r+0x58>
 800a774:	425a      	negs	r2, r3
 800a776:	50e2      	str	r2, [r4, r3]
 800a778:	e7e4      	b.n	800a744 <_malloc_r+0x58>
 800a77a:	684b      	ldr	r3, [r1, #4]
 800a77c:	6063      	str	r3, [r4, #4]
 800a77e:	000c      	movs	r4, r1
 800a780:	e7ee      	b.n	800a760 <_malloc_r+0x74>
 800a782:	000c      	movs	r4, r1
 800a784:	6849      	ldr	r1, [r1, #4]
 800a786:	e7c2      	b.n	800a70e <_malloc_r+0x22>
 800a788:	2303      	movs	r3, #3
 800a78a:	1cc4      	adds	r4, r0, #3
 800a78c:	439c      	bics	r4, r3
 800a78e:	42a0      	cmp	r0, r4
 800a790:	d0e0      	beq.n	800a754 <_malloc_r+0x68>
 800a792:	1a21      	subs	r1, r4, r0
 800a794:	0030      	movs	r0, r6
 800a796:	f000 f82d 	bl	800a7f4 <_sbrk_r>
 800a79a:	1c43      	adds	r3, r0, #1
 800a79c:	d1da      	bne.n	800a754 <_malloc_r+0x68>
 800a79e:	e7c6      	b.n	800a72e <_malloc_r+0x42>
 800a7a0:	200004d8 	.word	0x200004d8
 800a7a4:	200004dc 	.word	0x200004dc

0800a7a8 <_realloc_r>:
 800a7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7aa:	0007      	movs	r7, r0
 800a7ac:	000d      	movs	r5, r1
 800a7ae:	0016      	movs	r6, r2
 800a7b0:	2900      	cmp	r1, #0
 800a7b2:	d105      	bne.n	800a7c0 <_realloc_r+0x18>
 800a7b4:	0011      	movs	r1, r2
 800a7b6:	f7ff ff99 	bl	800a6ec <_malloc_r>
 800a7ba:	0004      	movs	r4, r0
 800a7bc:	0020      	movs	r0, r4
 800a7be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7c0:	2a00      	cmp	r2, #0
 800a7c2:	d103      	bne.n	800a7cc <_realloc_r+0x24>
 800a7c4:	f7ff ff48 	bl	800a658 <_free_r>
 800a7c8:	0034      	movs	r4, r6
 800a7ca:	e7f7      	b.n	800a7bc <_realloc_r+0x14>
 800a7cc:	f000 f826 	bl	800a81c <_malloc_usable_size_r>
 800a7d0:	002c      	movs	r4, r5
 800a7d2:	4286      	cmp	r6, r0
 800a7d4:	d9f2      	bls.n	800a7bc <_realloc_r+0x14>
 800a7d6:	0031      	movs	r1, r6
 800a7d8:	0038      	movs	r0, r7
 800a7da:	f7ff ff87 	bl	800a6ec <_malloc_r>
 800a7de:	1e04      	subs	r4, r0, #0
 800a7e0:	d0ec      	beq.n	800a7bc <_realloc_r+0x14>
 800a7e2:	0029      	movs	r1, r5
 800a7e4:	0032      	movs	r2, r6
 800a7e6:	f7ff fbf5 	bl	8009fd4 <memcpy>
 800a7ea:	0029      	movs	r1, r5
 800a7ec:	0038      	movs	r0, r7
 800a7ee:	f7ff ff33 	bl	800a658 <_free_r>
 800a7f2:	e7e3      	b.n	800a7bc <_realloc_r+0x14>

0800a7f4 <_sbrk_r>:
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	b570      	push	{r4, r5, r6, lr}
 800a7f8:	4c06      	ldr	r4, [pc, #24]	; (800a814 <_sbrk_r+0x20>)
 800a7fa:	0005      	movs	r5, r0
 800a7fc:	0008      	movs	r0, r1
 800a7fe:	6023      	str	r3, [r4, #0]
 800a800:	f7ff f9b2 	bl	8009b68 <_sbrk>
 800a804:	1c43      	adds	r3, r0, #1
 800a806:	d103      	bne.n	800a810 <_sbrk_r+0x1c>
 800a808:	6823      	ldr	r3, [r4, #0]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d000      	beq.n	800a810 <_sbrk_r+0x1c>
 800a80e:	602b      	str	r3, [r5, #0]
 800a810:	bd70      	pop	{r4, r5, r6, pc}
 800a812:	46c0      	nop			; (mov r8, r8)
 800a814:	2000058c 	.word	0x2000058c

0800a818 <__malloc_lock>:
 800a818:	4770      	bx	lr

0800a81a <__malloc_unlock>:
 800a81a:	4770      	bx	lr

0800a81c <_malloc_usable_size_r>:
 800a81c:	1f0b      	subs	r3, r1, #4
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	1f18      	subs	r0, r3, #4
 800a822:	2b00      	cmp	r3, #0
 800a824:	da01      	bge.n	800a82a <_malloc_usable_size_r+0xe>
 800a826:	580b      	ldr	r3, [r1, r0]
 800a828:	18c0      	adds	r0, r0, r3
 800a82a:	4770      	bx	lr

0800a82c <ceil>:
 800a82c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a82e:	004b      	lsls	r3, r1, #1
 800a830:	4a39      	ldr	r2, [pc, #228]	; (800a918 <ceil+0xec>)
 800a832:	0d5b      	lsrs	r3, r3, #21
 800a834:	b085      	sub	sp, #20
 800a836:	189e      	adds	r6, r3, r2
 800a838:	9003      	str	r0, [sp, #12]
 800a83a:	000c      	movs	r4, r1
 800a83c:	0005      	movs	r5, r0
 800a83e:	2e13      	cmp	r6, #19
 800a840:	dc32      	bgt.n	800a8a8 <ceil+0x7c>
 800a842:	2e00      	cmp	r6, #0
 800a844:	da13      	bge.n	800a86e <ceil+0x42>
 800a846:	4a35      	ldr	r2, [pc, #212]	; (800a91c <ceil+0xf0>)
 800a848:	4b35      	ldr	r3, [pc, #212]	; (800a920 <ceil+0xf4>)
 800a84a:	f7f5 ff0f 	bl	800066c <__aeabi_dadd>
 800a84e:	2200      	movs	r2, #0
 800a850:	2300      	movs	r3, #0
 800a852:	f7f5 fdf9 	bl	8000448 <__aeabi_dcmpgt>
 800a856:	2800      	cmp	r0, #0
 800a858:	d006      	beq.n	800a868 <ceil+0x3c>
 800a85a:	2c00      	cmp	r4, #0
 800a85c:	db57      	blt.n	800a90e <ceil+0xe2>
 800a85e:	432c      	orrs	r4, r5
 800a860:	2500      	movs	r5, #0
 800a862:	42ac      	cmp	r4, r5
 800a864:	d000      	beq.n	800a868 <ceil+0x3c>
 800a866:	4c2f      	ldr	r4, [pc, #188]	; (800a924 <ceil+0xf8>)
 800a868:	0028      	movs	r0, r5
 800a86a:	0021      	movs	r1, r4
 800a86c:	e026      	b.n	800a8bc <ceil+0x90>
 800a86e:	4f2e      	ldr	r7, [pc, #184]	; (800a928 <ceil+0xfc>)
 800a870:	4137      	asrs	r7, r6
 800a872:	003b      	movs	r3, r7
 800a874:	400b      	ands	r3, r1
 800a876:	4303      	orrs	r3, r0
 800a878:	d020      	beq.n	800a8bc <ceil+0x90>
 800a87a:	9000      	str	r0, [sp, #0]
 800a87c:	9101      	str	r1, [sp, #4]
 800a87e:	4a27      	ldr	r2, [pc, #156]	; (800a91c <ceil+0xf0>)
 800a880:	4b27      	ldr	r3, [pc, #156]	; (800a920 <ceil+0xf4>)
 800a882:	9800      	ldr	r0, [sp, #0]
 800a884:	9901      	ldr	r1, [sp, #4]
 800a886:	f7f5 fef1 	bl	800066c <__aeabi_dadd>
 800a88a:	2200      	movs	r2, #0
 800a88c:	2300      	movs	r3, #0
 800a88e:	f7f5 fddb 	bl	8000448 <__aeabi_dcmpgt>
 800a892:	2800      	cmp	r0, #0
 800a894:	d0e8      	beq.n	800a868 <ceil+0x3c>
 800a896:	2c00      	cmp	r4, #0
 800a898:	dd03      	ble.n	800a8a2 <ceil+0x76>
 800a89a:	2380      	movs	r3, #128	; 0x80
 800a89c:	035b      	lsls	r3, r3, #13
 800a89e:	4133      	asrs	r3, r6
 800a8a0:	18e4      	adds	r4, r4, r3
 800a8a2:	43bc      	bics	r4, r7
 800a8a4:	2500      	movs	r5, #0
 800a8a6:	e7df      	b.n	800a868 <ceil+0x3c>
 800a8a8:	2e33      	cmp	r6, #51	; 0x33
 800a8aa:	dd09      	ble.n	800a8c0 <ceil+0x94>
 800a8ac:	2380      	movs	r3, #128	; 0x80
 800a8ae:	00db      	lsls	r3, r3, #3
 800a8b0:	429e      	cmp	r6, r3
 800a8b2:	d103      	bne.n	800a8bc <ceil+0x90>
 800a8b4:	0002      	movs	r2, r0
 800a8b6:	000b      	movs	r3, r1
 800a8b8:	f7f5 fed8 	bl	800066c <__aeabi_dadd>
 800a8bc:	b005      	add	sp, #20
 800a8be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8c0:	2701      	movs	r7, #1
 800a8c2:	4a1a      	ldr	r2, [pc, #104]	; (800a92c <ceil+0x100>)
 800a8c4:	427f      	negs	r7, r7
 800a8c6:	189b      	adds	r3, r3, r2
 800a8c8:	40df      	lsrs	r7, r3
 800a8ca:	4207      	tst	r7, r0
 800a8cc:	d0f6      	beq.n	800a8bc <ceil+0x90>
 800a8ce:	9000      	str	r0, [sp, #0]
 800a8d0:	9101      	str	r1, [sp, #4]
 800a8d2:	4a12      	ldr	r2, [pc, #72]	; (800a91c <ceil+0xf0>)
 800a8d4:	4b12      	ldr	r3, [pc, #72]	; (800a920 <ceil+0xf4>)
 800a8d6:	9800      	ldr	r0, [sp, #0]
 800a8d8:	9901      	ldr	r1, [sp, #4]
 800a8da:	f7f5 fec7 	bl	800066c <__aeabi_dadd>
 800a8de:	2200      	movs	r2, #0
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	f7f5 fdb1 	bl	8000448 <__aeabi_dcmpgt>
 800a8e6:	2800      	cmp	r0, #0
 800a8e8:	d0be      	beq.n	800a868 <ceil+0x3c>
 800a8ea:	2c00      	cmp	r4, #0
 800a8ec:	dd02      	ble.n	800a8f4 <ceil+0xc8>
 800a8ee:	2e14      	cmp	r6, #20
 800a8f0:	d102      	bne.n	800a8f8 <ceil+0xcc>
 800a8f2:	3401      	adds	r4, #1
 800a8f4:	43bd      	bics	r5, r7
 800a8f6:	e7b7      	b.n	800a868 <ceil+0x3c>
 800a8f8:	2334      	movs	r3, #52	; 0x34
 800a8fa:	1b9e      	subs	r6, r3, r6
 800a8fc:	3b33      	subs	r3, #51	; 0x33
 800a8fe:	40b3      	lsls	r3, r6
 800a900:	18ed      	adds	r5, r5, r3
 800a902:	9b03      	ldr	r3, [sp, #12]
 800a904:	429d      	cmp	r5, r3
 800a906:	419b      	sbcs	r3, r3
 800a908:	425b      	negs	r3, r3
 800a90a:	18e4      	adds	r4, r4, r3
 800a90c:	e7f2      	b.n	800a8f4 <ceil+0xc8>
 800a90e:	2480      	movs	r4, #128	; 0x80
 800a910:	2500      	movs	r5, #0
 800a912:	0624      	lsls	r4, r4, #24
 800a914:	e7a8      	b.n	800a868 <ceil+0x3c>
 800a916:	46c0      	nop			; (mov r8, r8)
 800a918:	fffffc01 	.word	0xfffffc01
 800a91c:	8800759c 	.word	0x8800759c
 800a920:	7e37e43c 	.word	0x7e37e43c
 800a924:	3ff00000 	.word	0x3ff00000
 800a928:	000fffff 	.word	0x000fffff
 800a92c:	fffffbed 	.word	0xfffffbed

0800a930 <floor>:
 800a930:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a932:	004b      	lsls	r3, r1, #1
 800a934:	4a39      	ldr	r2, [pc, #228]	; (800aa1c <floor+0xec>)
 800a936:	0d5b      	lsrs	r3, r3, #21
 800a938:	b085      	sub	sp, #20
 800a93a:	189e      	adds	r6, r3, r2
 800a93c:	9003      	str	r0, [sp, #12]
 800a93e:	000c      	movs	r4, r1
 800a940:	0005      	movs	r5, r0
 800a942:	2e13      	cmp	r6, #19
 800a944:	dc34      	bgt.n	800a9b0 <floor+0x80>
 800a946:	2e00      	cmp	r6, #0
 800a948:	da15      	bge.n	800a976 <floor+0x46>
 800a94a:	4a35      	ldr	r2, [pc, #212]	; (800aa20 <floor+0xf0>)
 800a94c:	4b35      	ldr	r3, [pc, #212]	; (800aa24 <floor+0xf4>)
 800a94e:	f7f5 fe8d 	bl	800066c <__aeabi_dadd>
 800a952:	2200      	movs	r2, #0
 800a954:	2300      	movs	r3, #0
 800a956:	f7f5 fd77 	bl	8000448 <__aeabi_dcmpgt>
 800a95a:	2800      	cmp	r0, #0
 800a95c:	d008      	beq.n	800a970 <floor+0x40>
 800a95e:	2c00      	cmp	r4, #0
 800a960:	da59      	bge.n	800aa16 <floor+0xe6>
 800a962:	0063      	lsls	r3, r4, #1
 800a964:	085b      	lsrs	r3, r3, #1
 800a966:	432b      	orrs	r3, r5
 800a968:	2500      	movs	r5, #0
 800a96a:	42ab      	cmp	r3, r5
 800a96c:	d000      	beq.n	800a970 <floor+0x40>
 800a96e:	4c2e      	ldr	r4, [pc, #184]	; (800aa28 <floor+0xf8>)
 800a970:	0028      	movs	r0, r5
 800a972:	0021      	movs	r1, r4
 800a974:	e026      	b.n	800a9c4 <floor+0x94>
 800a976:	4f2d      	ldr	r7, [pc, #180]	; (800aa2c <floor+0xfc>)
 800a978:	4137      	asrs	r7, r6
 800a97a:	003b      	movs	r3, r7
 800a97c:	400b      	ands	r3, r1
 800a97e:	4303      	orrs	r3, r0
 800a980:	d020      	beq.n	800a9c4 <floor+0x94>
 800a982:	9000      	str	r0, [sp, #0]
 800a984:	9101      	str	r1, [sp, #4]
 800a986:	4a26      	ldr	r2, [pc, #152]	; (800aa20 <floor+0xf0>)
 800a988:	4b26      	ldr	r3, [pc, #152]	; (800aa24 <floor+0xf4>)
 800a98a:	9800      	ldr	r0, [sp, #0]
 800a98c:	9901      	ldr	r1, [sp, #4]
 800a98e:	f7f5 fe6d 	bl	800066c <__aeabi_dadd>
 800a992:	2200      	movs	r2, #0
 800a994:	2300      	movs	r3, #0
 800a996:	f7f5 fd57 	bl	8000448 <__aeabi_dcmpgt>
 800a99a:	2800      	cmp	r0, #0
 800a99c:	d0e8      	beq.n	800a970 <floor+0x40>
 800a99e:	2c00      	cmp	r4, #0
 800a9a0:	da03      	bge.n	800a9aa <floor+0x7a>
 800a9a2:	2380      	movs	r3, #128	; 0x80
 800a9a4:	035b      	lsls	r3, r3, #13
 800a9a6:	4133      	asrs	r3, r6
 800a9a8:	18e4      	adds	r4, r4, r3
 800a9aa:	43bc      	bics	r4, r7
 800a9ac:	2500      	movs	r5, #0
 800a9ae:	e7df      	b.n	800a970 <floor+0x40>
 800a9b0:	2e33      	cmp	r6, #51	; 0x33
 800a9b2:	dd09      	ble.n	800a9c8 <floor+0x98>
 800a9b4:	2380      	movs	r3, #128	; 0x80
 800a9b6:	00db      	lsls	r3, r3, #3
 800a9b8:	429e      	cmp	r6, r3
 800a9ba:	d103      	bne.n	800a9c4 <floor+0x94>
 800a9bc:	0002      	movs	r2, r0
 800a9be:	000b      	movs	r3, r1
 800a9c0:	f7f5 fe54 	bl	800066c <__aeabi_dadd>
 800a9c4:	b005      	add	sp, #20
 800a9c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9c8:	2701      	movs	r7, #1
 800a9ca:	4a19      	ldr	r2, [pc, #100]	; (800aa30 <floor+0x100>)
 800a9cc:	427f      	negs	r7, r7
 800a9ce:	189b      	adds	r3, r3, r2
 800a9d0:	40df      	lsrs	r7, r3
 800a9d2:	4207      	tst	r7, r0
 800a9d4:	d0f6      	beq.n	800a9c4 <floor+0x94>
 800a9d6:	9000      	str	r0, [sp, #0]
 800a9d8:	9101      	str	r1, [sp, #4]
 800a9da:	4a11      	ldr	r2, [pc, #68]	; (800aa20 <floor+0xf0>)
 800a9dc:	4b11      	ldr	r3, [pc, #68]	; (800aa24 <floor+0xf4>)
 800a9de:	9800      	ldr	r0, [sp, #0]
 800a9e0:	9901      	ldr	r1, [sp, #4]
 800a9e2:	f7f5 fe43 	bl	800066c <__aeabi_dadd>
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	f7f5 fd2d 	bl	8000448 <__aeabi_dcmpgt>
 800a9ee:	2800      	cmp	r0, #0
 800a9f0:	d0be      	beq.n	800a970 <floor+0x40>
 800a9f2:	2c00      	cmp	r4, #0
 800a9f4:	da02      	bge.n	800a9fc <floor+0xcc>
 800a9f6:	2e14      	cmp	r6, #20
 800a9f8:	d102      	bne.n	800aa00 <floor+0xd0>
 800a9fa:	3401      	adds	r4, #1
 800a9fc:	43bd      	bics	r5, r7
 800a9fe:	e7b7      	b.n	800a970 <floor+0x40>
 800aa00:	2334      	movs	r3, #52	; 0x34
 800aa02:	1b9e      	subs	r6, r3, r6
 800aa04:	3b33      	subs	r3, #51	; 0x33
 800aa06:	40b3      	lsls	r3, r6
 800aa08:	18ed      	adds	r5, r5, r3
 800aa0a:	9b03      	ldr	r3, [sp, #12]
 800aa0c:	429d      	cmp	r5, r3
 800aa0e:	419b      	sbcs	r3, r3
 800aa10:	425b      	negs	r3, r3
 800aa12:	18e4      	adds	r4, r4, r3
 800aa14:	e7f2      	b.n	800a9fc <floor+0xcc>
 800aa16:	2500      	movs	r5, #0
 800aa18:	002c      	movs	r4, r5
 800aa1a:	e7a9      	b.n	800a970 <floor+0x40>
 800aa1c:	fffffc01 	.word	0xfffffc01
 800aa20:	8800759c 	.word	0x8800759c
 800aa24:	7e37e43c 	.word	0x7e37e43c
 800aa28:	bff00000 	.word	0xbff00000
 800aa2c:	000fffff 	.word	0x000fffff
 800aa30:	fffffbed 	.word	0xfffffbed

0800aa34 <round>:
 800aa34:	b570      	push	{r4, r5, r6, lr}
 800aa36:	004a      	lsls	r2, r1, #1
 800aa38:	4d1d      	ldr	r5, [pc, #116]	; (800aab0 <round+0x7c>)
 800aa3a:	0d52      	lsrs	r2, r2, #21
 800aa3c:	1955      	adds	r5, r2, r5
 800aa3e:	000e      	movs	r6, r1
 800aa40:	2d13      	cmp	r5, #19
 800aa42:	dc18      	bgt.n	800aa76 <round+0x42>
 800aa44:	2d00      	cmp	r5, #0
 800aa46:	da09      	bge.n	800aa5c <round+0x28>
 800aa48:	0fcb      	lsrs	r3, r1, #31
 800aa4a:	07db      	lsls	r3, r3, #31
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	1c69      	adds	r1, r5, #1
 800aa50:	d101      	bne.n	800aa56 <round+0x22>
 800aa52:	4918      	ldr	r1, [pc, #96]	; (800aab4 <round+0x80>)
 800aa54:	430b      	orrs	r3, r1
 800aa56:	0019      	movs	r1, r3
 800aa58:	0010      	movs	r0, r2
 800aa5a:	e016      	b.n	800aa8a <round+0x56>
 800aa5c:	4a16      	ldr	r2, [pc, #88]	; (800aab8 <round+0x84>)
 800aa5e:	412a      	asrs	r2, r5
 800aa60:	420a      	tst	r2, r1
 800aa62:	d101      	bne.n	800aa68 <round+0x34>
 800aa64:	2800      	cmp	r0, #0
 800aa66:	d010      	beq.n	800aa8a <round+0x56>
 800aa68:	2380      	movs	r3, #128	; 0x80
 800aa6a:	031b      	lsls	r3, r3, #12
 800aa6c:	412b      	asrs	r3, r5
 800aa6e:	199b      	adds	r3, r3, r6
 800aa70:	4393      	bics	r3, r2
 800aa72:	2200      	movs	r2, #0
 800aa74:	e7ef      	b.n	800aa56 <round+0x22>
 800aa76:	2d33      	cmp	r5, #51	; 0x33
 800aa78:	dd08      	ble.n	800aa8c <round+0x58>
 800aa7a:	2380      	movs	r3, #128	; 0x80
 800aa7c:	00db      	lsls	r3, r3, #3
 800aa7e:	429d      	cmp	r5, r3
 800aa80:	d103      	bne.n	800aa8a <round+0x56>
 800aa82:	0002      	movs	r2, r0
 800aa84:	000b      	movs	r3, r1
 800aa86:	f7f5 fdf1 	bl	800066c <__aeabi_dadd>
 800aa8a:	bd70      	pop	{r4, r5, r6, pc}
 800aa8c:	4e0b      	ldr	r6, [pc, #44]	; (800aabc <round+0x88>)
 800aa8e:	1992      	adds	r2, r2, r6
 800aa90:	2601      	movs	r6, #1
 800aa92:	4276      	negs	r6, r6
 800aa94:	40d6      	lsrs	r6, r2
 800aa96:	4206      	tst	r6, r0
 800aa98:	d0f7      	beq.n	800aa8a <round+0x56>
 800aa9a:	2233      	movs	r2, #51	; 0x33
 800aa9c:	1b55      	subs	r5, r2, r5
 800aa9e:	3a32      	subs	r2, #50	; 0x32
 800aaa0:	40aa      	lsls	r2, r5
 800aaa2:	1812      	adds	r2, r2, r0
 800aaa4:	4282      	cmp	r2, r0
 800aaa6:	41a4      	sbcs	r4, r4
 800aaa8:	4264      	negs	r4, r4
 800aaaa:	190b      	adds	r3, r1, r4
 800aaac:	43b2      	bics	r2, r6
 800aaae:	e7d2      	b.n	800aa56 <round+0x22>
 800aab0:	fffffc01 	.word	0xfffffc01
 800aab4:	3ff00000 	.word	0x3ff00000
 800aab8:	000fffff 	.word	0x000fffff
 800aabc:	fffffbed 	.word	0xfffffbed

0800aac0 <_init>:
 800aac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aac2:	46c0      	nop			; (mov r8, r8)
 800aac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aac6:	bc08      	pop	{r3}
 800aac8:	469e      	mov	lr, r3
 800aaca:	4770      	bx	lr

0800aacc <_fini>:
 800aacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aace:	46c0      	nop			; (mov r8, r8)
 800aad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aad2:	bc08      	pop	{r3}
 800aad4:	469e      	mov	lr, r3
 800aad6:	4770      	bx	lr
